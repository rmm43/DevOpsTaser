<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="gnu.dtools.ritopt.StreamPrinter" jls="java5">
<jent id="0" type="file" span="0:0:193:1">Source/jabref/src/java/gnu/dtools/ritopt/StreamPrinter.java</jent>
<jent id="1" pid="0" type="class" span="44:1:193:1">gnu.dtools.ritopt.StreamPrinter</jent>
<jent id="2" pid="1" type="method" span="89:5:93:5">gnu.dtools.ritopt.StreamPrinter.StreamPrinter(InputStream,PrintStream)</jent>
<jent id="3" pid="1" type="method" span="99:5:101:5">gnu.dtools.ritopt.StreamPrinter.start()</jent>
<jent id="4" pid="1" type="method" span="109:5:113:5">gnu.dtools.ritopt.StreamPrinter.setStop(Stoppable)</jent>
<jent id="5" pid="1" type="method" span="121:5:123:5">gnu.dtools.ritopt.StreamPrinter.isStopped()</jent>
<jent id="6" pid="1" type="method" span="132:5:136:5">gnu.dtools.ritopt.StreamPrinter.setFlush(boolean)</jent>
<jent id="7" pid="1" type="method" span="142:5:153:5">gnu.dtools.ritopt.StreamPrinter.stop()</jent>
<jent id="8" pid="1" type="method" span="159:5:161:5">gnu.dtools.ritopt.StreamPrinter.join()</jent>
<jent id="9" pid="1" type="method" span="169:5:192:5">gnu.dtools.ritopt.StreamPrinter.run()</jent>
<jtok eid="0" type="block_comment" span="3:1:8:4">/**
 * StreamPrinter.java
 *
 * Version:
 *   $Id: StreamPrinter.java 2209 2007-08-01 18:23:38Z coezbek $
 */</jtok>
<jtok eid="0" type="block_comment" span="14:1:42:4">/**
 * Reads data from an input stream and outputs to a print stream. This class
 * is used by the OptionMenu class to read from both standard output and
 * standard error simultaneously when a shell command is executed. Since the
 * StreamPrinter processes streams on a separate thread, deadlock is
 * prevented.&lt;p&gt;
 *
 * &lt;hr&gt;
 *
 * &lt;pre&gt;
 * Copyright (C) Damian Ryan Eads, 2001. All Rights Reserved.
 *
 * ritopt is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * ritopt is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ritopt; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * &lt;/pre&gt;
 *
 * @author Damian Eads
 */</jtok>
<jtok eid="1" type="class_name" span="44:14:44:27">StreamPrinter</jtok>
<jtok eid="1" type="class_or_interface_ref" span="44:39:44:47">Runnable</jtok>
<jtok eid="1" type="class_or_interface_ref" span="44:49:44:58">Stoppable</jtok>
<jtok eid="1" type="block_comment" span="46:5:48:8">/**
     * The input stream to read from.
     */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="50:13:50:24">InputStream</jtok>
<jtok eid="1" type="field_name" span="50:25:50:31">stream</jtok>
<jtok eid="1" type="block_comment" span="52:5:54:8">/**
     * The print stream to redirect to.
     */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="56:13:56:24">PrintStream</jtok>
<jtok eid="1" type="field_name" span="56:25:56:28">out</jtok>
<jtok eid="1" type="block_comment" span="58:5:60:8">/**
     * The object to stop.
     */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="62:13:62:22">Stoppable</jtok>
<jtok eid="1" type="field_name" span="62:23:62:27">stop</jtok>
<jtok eid="1" type="block_comment" span="64:5:66:8">/**
     * Whether this StreamPrinter has stopped processing.
     */</jtok>
<jtok eid="1" type="field_name" span="68:21:68:28">stopped</jtok>
<jtok eid="1" type="block_comment" span="70:5:72:8">/**
     * Whether the buffer should be flushed.
     */</jtok>
<jtok eid="1" type="field_name" span="74:21:74:26">flush</jtok>
<jtok eid="1" type="block_comment" span="76:5:78:8">/**
     * The thread associated with this StreamPrinter.
     */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="80:13:80:19">Thread</jtok>
<jtok eid="1" type="field_name" span="80:20:80:26">thread</jtok>
<jtok eid="1" type="block_comment" span="82:5:87:8">/**
     * Constructs a new StreamPrinter.
     *
     * @param s The stream to read from.
     * @param p The stream to output to.
     */</jtok>
<jtok eid="2" type="method_name" span="89:12:89:25">StreamPrinter</jtok>
<jtok eid="2" type="parameter_type" span="89:27:89:38">InputStream</jtok>
<jtok eid="2" type="parameter_name" span="89:39:89:40">s</jtok>
<jtok eid="2" type="parameter_type" span="89:42:89:53">PrintStream</jtok>
<jtok eid="2" type="parameter_name" span="89:54:89:55">p</jtok>
<jtok eid="2" type="primary_name_ref" span="90:2:90:8">stream</jtok>
<jtok eid="2" type="primary_name_ref" span="90:11:90:12">s</jtok>
<jtok eid="2" type="primary_name_ref" span="91:2:91:5">out</jtok>
<jtok eid="2" type="primary_name_ref" span="91:8:91:9">p</jtok>
<jtok eid="2" type="primary_name_ref" span="92:2:92:8">thread</jtok>
<jtok eid="2" type="constructor_call" span="92:15:92:21">Thread</jtok>
<jtok eid="1" type="block_comment" span="95:5:97:8">/**
     * Starts the thread associated with this StreamPrinter.
     */</jtok>
<jtok eid="3" type="method_name" span="99:17:99:22">start</jtok>
<jtok eid="3" type="throws" span="99:32:99:52">InterruptedException</jtok>
<jtok eid="3" type="primary_name_ref" span="100:2:100:8">thread</jtok>
<jtok eid="3" type="method_call" span="100:9:100:14">start</jtok>
<jtok eid="1" type="block_comment" span="103:5:107:8">/**
     * Sets the object to stop when this object is finished.
     *
     * @param tostop The object to stop.
     */</jtok>
<jtok eid="4" type="method_name" span="109:17:109:24">setStop</jtok>
<jtok eid="4" type="parameter_type" span="109:26:109:35">Stoppable</jtok>
<jtok eid="4" type="parameter_name" span="109:36:109:42">tostop</jtok>
<jtok eid="4" type="primary_name_ref" span="111:6:111:10">stop</jtok>
<jtok eid="4" type="primary_name_ref" span="111:13:111:19">tostop</jtok>
<jtok eid="1" type="block_comment" span="115:5:119:8">/**
     * Returns whether this StreamPrinter has stopped processing.
     *
     * @returns A boolean value.
     */</jtok>
<jtok eid="5" type="method_name" span="121:20:121:29">isStopped</jtok>
<jtok eid="5" type="primary_name_ref" span="122:9:122:16">stopped</jtok>
<jtok eid="1" type="block_comment" span="125:5:130:8">/**
     * Sets whether the output stream should be flushed after each output
     * step.
     *
     * @param b A boolean value.
     */</jtok>
<jtok eid="6" type="method_name" span="132:17:132:25">setFlush</jtok>
<jtok eid="6" type="parameter_name" span="132:35:132:40">flush</jtok>
<jtok eid="6" type="qualified_name_ref" span="134:11:134:16">flush</jtok>
<jtok eid="6" type="primary_name_ref" span="134:19:134:24">flush</jtok>
<jtok eid="1" type="block_comment" span="138:5:140:8">/**
     * Stops this StreamPrinter's processing. 
     */</jtok>
<jtok eid="7" type="method_name" span="142:17:142:21">stop</jtok>
<jtok eid="7" type="primary_name_ref" span="144:6:144:13">stopped</jtok>
<jtok eid="7" type="primary_name_ref" span="146:7:146:11">stop</jtok>
<jtok eid="7" type="primary_name_ref" span="147:20:147:24">stop</jtok>
<jtok eid="7" type="primary_name_ref" span="148:9:148:13">stop</jtok>
<jtok eid="7" type="method_call" span="148:14:148:23">isStopped</jtok>
<jtok eid="7" type="primary_name_ref" span="149:7:149:11">stop</jtok>
<jtok eid="7" type="method_call" span="149:12:149:16">stop</jtok>
<jtok eid="1" type="block_comment" span="155:5:157:8">/**
     * Joins this StreamPrinter's thread with the other threads.
     */</jtok>
<jtok eid="8" type="method_name" span="159:17:159:21">join</jtok>
<jtok eid="8" type="throws" span="159:31:159:51">InterruptedException</jtok>
<jtok eid="8" type="primary_name_ref" span="160:2:160:8">thread</jtok>
<jtok eid="8" type="method_call" span="160:9:160:13">join</jtok>
<jtok eid="1" type="block_comment" span="163:5:166:8">/**
     * Start the StreamPrinter thread. This is done automatically during
     * construction.
     */</jtok>
<jtok eid="1" type="line_comment" span="168:5:168:58">// This implementation is lousy; buffering is needed.</jtok>
<jtok eid="9" type="method_name" span="169:17:169:20">run</jtok>
<jtok eid="9" type="local_variable_name" span="170:6:170:9">buf</jtok>
<jtok eid="9" type="local_variable_name" span="172:14:172:16">me</jtok>
<jtok eid="9" type="primary_name_ref" span="173:15:173:22">stopped</jtok>
<jtok eid="9" type="primary_name_ref" span="173:28:173:31">buf</jtok>
<jtok eid="9" type="primary_name_ref" span="173:34:173:40">stream</jtok>
<jtok eid="9" type="method_call" span="173:41:173:45">read</jtok>
<jtok eid="9" type="primary_name_ref" span="175:7:175:9">me</jtok>
<jtok eid="9" type="primary_name_ref" span="175:12:175:17">flush</jtok>
<jtok eid="9" type="primary_name_ref" span="177:17:177:20">out</jtok>
<jtok eid="9" type="primary_name_ref" span="178:7:178:10">out</jtok>
<jtok eid="9" type="method_call" span="178:11:178:16">print</jtok>
<jtok eid="9" type="primary_name_ref" span="178:24:178:27">buf</jtok>
<jtok eid="9" type="primary_name_ref" span="179:12:179:14">me</jtok>
<jtok eid="9" type="primary_name_ref" span="179:17:179:20">out</jtok>
<jtok eid="9" type="method_call" span="179:21:179:26">flush</jtok>
<jtok eid="9" type="class_or_interface_ref" span="183:10:183:21">IOException</jtok>
<jtok eid="9" type="local_variable_name" span="183:22:183:23">e</jtok>
<jtok eid="9" type="primary_name_ref" span="184:6:184:9">out</jtok>
<jtok eid="9" type="method_call" span="184:10:184:17">println</jtok>
<jtok eid="9" type="string_literal" span="184:19:184:30">"I/O error"</jtok>
<jtok eid="9" type="primary_name_ref" span="187:20:187:23">out</jtok>
<jtok eid="9" type="primary_name_ref" span="188:3:188:6">out</jtok>
<jtok eid="9" type="method_call" span="188:7:188:12">flush</jtok>
<jtok eid="9" type="method_call" span="190:6:190:10">stop</jtok>
</jdoc>