<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="net.sf.jabref.AbstractWorker" jls="java5">
<jent id="0" type="file" span="0:0:51:1">Source/jabref/src/java/net/sf/jabref/AbstractWorker.java</jent>
<jent id="1" pid="0" type="class" span="14:1:51:1">net.sf.jabref.AbstractWorker</jent>
<jent id="2" pid="1" type="method" span="19:5:23:5">net.sf.jabref.AbstractWorker.AbstractWorker()</jent>
<jent id="3" pid="1" type="method" span="25:5:27:5">net.sf.jabref.AbstractWorker.init()</jent>
<jent id="4" pid="1" type="method" span="33:5:35:5">net.sf.jabref.AbstractWorker.getWorker()</jent>
<jent id="5" pid="1" type="method" span="41:5:43:5">net.sf.jabref.AbstractWorker.getCallBack()</jent>
<jent id="6" pid="1" type="method" span="49:5:50:5">net.sf.jabref.AbstractWorker.update()</jent>
<jtok eid="0" type="block_comment" span="5:1:13:4">/**
 * Convenience class for creating an object used for performing a time-
 * consuming action off the Swing thread, and optionally performing GUI
 * work afterwards. This class is supported by runCommand() in BasePanel,
 * which, if the action called is an AbstractWorker, will run its run()
 * method through the Worker interface, and then its update() method through
 * the CallBack interface. This procedure ensures that run() cannot freeze
 * the GUI, and that update() can safely update GUI components.
 */</jtok>
<jtok eid="1" type="class_name" span="14:23:14:37">AbstractWorker</jtok>
<jtok eid="1" type="class_or_interface_ref" span="14:49:14:55">Worker</jtok>
<jtok eid="1" type="class_or_interface_ref" span="14:57:14:65">CallBack</jtok>
<jtok eid="1" type="class_or_interface_ref" span="16:13:16:19">Worker</jtok>
<jtok eid="1" type="field_name" span="16:20:16:26">worker</jtok>
<jtok eid="1" type="class_or_interface_ref" span="17:13:17:21">CallBack</jtok>
<jtok eid="1" type="field_name" span="17:22:17:30">callBack</jtok>
<jtok eid="2" type="method_name" span="19:12:19:26">AbstractWorker</jtok>
<jtok eid="2" type="primary_name_ref" span="20:2:20:8">worker</jtok>
<jtok eid="2" type="class_or_interface_ref" span="20:12:20:18">Worker</jtok>
<jtok eid="2" type="primary_name_ref" span="20:19:20:23">Spin</jtok>
<jtok eid="2" type="method_call" span="20:24:20:27">off</jtok>
<jtok eid="2" type="primary_name_ref" span="21:2:21:10">callBack</jtok>
<jtok eid="2" type="class_or_interface_ref" span="21:14:21:22">CallBack</jtok>
<jtok eid="2" type="primary_name_ref" span="21:23:21:27">Spin</jtok>
<jtok eid="2" type="method_call" span="21:28:21:32">over</jtok>
<jtok eid="3" type="method_name" span="25:17:25:21">init</jtok>
<jtok eid="3" type="throws" span="25:31:25:40">Throwable</jtok>
<jtok eid="1" type="block_comment" span="29:5:32:8">/**
     * This method returns a wrapped Worker instance of this AbstractWorker.
     * whose methods will automatically be run off the EDT (Swing) thread.
     */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="33:12:33:18">Worker</jtok>
<jtok eid="4" type="method_name" span="33:19:33:28">getWorker</jtok>
<jtok eid="4" type="primary_name_ref" span="34:9:34:15">worker</jtok>
<jtok eid="1" type="block_comment" span="37:5:40:8">/**
     * This method returns a wrapped CallBack instance of this AbstractWorker
     * whose methods will automatically be run on the EDT (Swing) thread.
     */</jtok>
<jtok eid="5" type="class_or_interface_ref" span="41:12:41:20">CallBack</jtok>
<jtok eid="5" type="method_name" span="41:21:41:32">getCallBack</jtok>
<jtok eid="5" type="primary_name_ref" span="42:9:42:17">callBack</jtok>
<jtok eid="1" type="block_comment" span="45:5:48:8">/**
     * Empty implementation of the update() method. Override this method
     * if a callback is needed.
     */</jtok>
<jtok eid="6" type="method_name" span="49:17:49:23">update</jtok>
</jdoc>