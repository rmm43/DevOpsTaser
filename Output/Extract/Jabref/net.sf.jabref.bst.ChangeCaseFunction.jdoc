<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="net.sf.jabref.bst.ChangeCaseFunction" jls="java5">
<jent id="0" type="file" span="0:0:65:1">Source/jabref/src/java/net/sf/jabref/bst/ChangeCaseFunction.java</jent>
<jent id="1" pid="0" type="class" span="34:1:65:1">net.sf.jabref.bst.ChangeCaseFunction</jent>
<jent id="2" pid="1" type="method" span="38:2:40:2">net.sf.jabref.bst.ChangeCaseFunction.ChangeCaseFunction(VM)</jent>
<jent id="3" pid="1" type="method" span="42:2:63:2">net.sf.jabref.bst.ChangeCaseFunction.execute(BstEntry)</jent>
<jtok eid="0" type="block_comment" span="10:1:33:4">/**
 * From the Bibtex manual:
 * 
 * Pops the top two (string) literals; it changes the case of the second
 * according to the specifications of the first, as follows. (Note: The word
 * `letters' in the next sentence refers only to those at brace-level 0, the
 * top-most brace level; no other characters are changed, except perhaps for
 * \special characters", described in Section 4.) If the first literal is the
 * string `t', it converts to lower case all letters except the very first
 * character in the string, which it leaves alone, and except the first
 * character following any colon and then nonnull white space, which it also
 * leaves alone; if it's the string `l', it converts all letters to lower case;
 * and if it's the string `u', it converts all letters to upper case. It then
 * pushes this resulting string. If either type is incorrect, it complains and
 * pushes the null string; however, if both types are correct but the
 * specification string (i.e., the first string) isn't one of the legal ones, it
 * merely pushes the second back onto the stack, after complaining. (Another
 * note: It ignores case differences in the specification string; for example,
 * the strings t and T are equivalent for the purposes of this built-in
 * function.)
 * 
 * Christopher: I think this should be another grammar! This parser is horrible.
 * 
 */</jtok>
<jtok eid="1" type="class_name" span="34:14:34:32">ChangeCaseFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="34:44:34:55">BstFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="36:2:36:4">VM</jtok>
<jtok eid="1" type="field_name" span="36:5:36:7">vm</jtok>
<jtok eid="2" type="method_name" span="38:9:38:27">ChangeCaseFunction</jtok>
<jtok eid="2" type="parameter_type" span="38:28:38:30">VM</jtok>
<jtok eid="2" type="parameter_name" span="38:31:38:33">vm</jtok>
<jtok eid="2" type="qualified_name_ref" span="39:8:39:10">vm</jtok>
<jtok eid="2" type="primary_name_ref" span="39:13:39:15">vm</jtok>
<jtok eid="3" type="method_name" span="42:14:42:21">execute</jtok>
<jtok eid="3" type="parameter_type" span="42:22:42:30">BstEntry</jtok>
<jtok eid="3" type="parameter_name" span="42:31:42:38">context</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:3:43:8">Stack</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:9:43:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="43:17:43:22">stack</jtok>
<jtok eid="3" type="primary_name_ref" span="43:25:43:27">vm</jtok>
<jtok eid="3" type="method_call" span="43:28:43:36">getStack</jtok>
<jtok eid="3" type="primary_name_ref" span="45:7:45:12">stack</jtok>
<jtok eid="3" type="method_call" span="45:13:45:17">size</jtok>
<jtok eid="3" type="constructor_call" span="46:14:46:25">VMException</jtok>
<jtok eid="3" type="string_literal" span="46:26:46:83">"Not enough operands on stack for operation change.case$"</jtok>
<jtok eid="3" type="class_or_interface_ref" span="48:3:48:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="48:10:48:12">o1</jtok>
<jtok eid="3" type="primary_name_ref" span="48:15:48:20">stack</jtok>
<jtok eid="3" type="method_call" span="48:21:48:24">pop</jtok>
<jtok eid="3" type="class_or_interface_ref" span="49:3:49:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="49:10:49:12">o2</jtok>
<jtok eid="3" type="primary_name_ref" span="49:15:49:20">stack</jtok>
<jtok eid="3" type="method_call" span="49:21:49:24">pop</jtok>
<jtok eid="3" type="primary_name_ref" span="51:9:51:11">o1</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:23:51:29">String</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:35:51:41">String</jtok>
<jtok eid="3" type="primary_name_ref" span="51:43:51:45">o1</jtok>
<jtok eid="3" type="method_call" span="51:47:51:53">length</jtok>
<jtok eid="3" type="constructor_call" span="52:14:52:25">VMException</jtok>
<jtok eid="3" type="string_literal" span="52:26:52:82">"A format string of length 1 is needed for change.case$"</jtok>
<jtok eid="3" type="primary_name_ref" span="55:9:55:11">o2</jtok>
<jtok eid="3" type="class_or_interface_ref" span="55:23:55:29">String</jtok>
<jtok eid="3" type="constructor_call" span="56:14:56:25">VMException</jtok>
<jtok eid="3" type="string_literal" span="56:26:56:83">"A string is needed as second parameter for change.case$"</jtok>
<jtok eid="3" type="local_variable_name" span="59:8:59:14">format</jtok>
<jtok eid="3" type="class_or_interface_ref" span="59:20:59:26">String</jtok>
<jtok eid="3" type="primary_name_ref" span="59:28:59:30">o1</jtok>
<jtok eid="3" type="method_call" span="59:32:59:43">toLowerCase</jtok>
<jtok eid="3" type="method_call" span="59:46:59:52">charAt</jtok>
<jtok eid="3" type="class_or_interface_ref" span="60:3:60:9">String</jtok>
<jtok eid="3" type="local_variable_name" span="60:10:60:11">s</jtok>
<jtok eid="3" type="class_or_interface_ref" span="60:15:60:21">String</jtok>
<jtok eid="3" type="primary_name_ref" span="60:23:60:25">o2</jtok>
<jtok eid="3" type="primary_name_ref" span="62:3:62:8">stack</jtok>
<jtok eid="3" type="method_call" span="62:9:62:13">push</jtok>
<jtok eid="3" type="primary_name_ref" span="62:14:62:31">BibtexCaseChanger</jtok>
<jtok eid="3" type="method_call" span="62:32:62:42">changeCase</jtok>
<jtok eid="3" type="primary_name_ref" span="62:43:62:44">s</jtok>
<jtok eid="3" type="primary_name_ref" span="62:46:62:52">format</jtok>
<jtok eid="3" type="primary_name_ref" span="62:54:62:56">vm</jtok>
</jdoc>