<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="net.sf.jabref.bst.FormatNameFunction" jls="java5">
<jent id="0" type="file" span="0:0:67:1">Source/jabref/src/java/net/sf/jabref/bst/FormatNameFunction.java</jent>
<jent id="1" pid="0" type="class" span="27:1:67:1">net.sf.jabref.bst.FormatNameFunction</jent>
<jent id="2" pid="1" type="method" span="31:2:33:2">net.sf.jabref.bst.FormatNameFunction.FormatNameFunction(VM)</jent>
<jent id="3" pid="1" type="method" span="35:2:66:2">net.sf.jabref.bst.FormatNameFunction.execute(BstEntry)</jent>
<jtok eid="0" type="block_comment" span="11:1:26:4">/**
 * From Bibtex:
 * 
 * "The |built_in| function {\.{format.name\$}} pops the
 * top three literals (they are a string, an integer, and a string
 * literal, in that order). The last string literal represents a
 * name list (each name corresponding to a person), the integer
 * literal specifies which name to pick from this list, and the
 * first string literal specifies how to format this name, as
 * described in the \BibTeX\ documentation. Finally, this function
 * pushes the formatted name. If any of the types is incorrect, it
 * complains and pushes the null string."
 * 
 * All the pain is encapsulated in BibtexNameFormatter. :-)
 * 
 */</jtok>
<jtok eid="1" type="class_name" span="27:14:27:32">FormatNameFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="27:44:27:55">BstFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="29:2:29:4">VM</jtok>
<jtok eid="1" type="field_name" span="29:5:29:7">vm</jtok>
<jtok eid="2" type="method_name" span="31:9:31:27">FormatNameFunction</jtok>
<jtok eid="2" type="parameter_type" span="31:28:31:30">VM</jtok>
<jtok eid="2" type="parameter_name" span="31:31:31:33">vm</jtok>
<jtok eid="2" type="qualified_name_ref" span="32:8:32:10">vm</jtok>
<jtok eid="2" type="primary_name_ref" span="32:13:32:15">vm</jtok>
<jtok eid="3" type="method_name" span="35:14:35:21">execute</jtok>
<jtok eid="3" type="parameter_type" span="35:22:35:30">BstEntry</jtok>
<jtok eid="3" type="parameter_name" span="35:31:35:38">context</jtok>
<jtok eid="3" type="class_or_interface_ref" span="36:3:36:8">Stack</jtok>
<jtok eid="3" type="class_or_interface_ref" span="36:9:36:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="36:17:36:22">stack</jtok>
<jtok eid="3" type="primary_name_ref" span="36:25:36:27">vm</jtok>
<jtok eid="3" type="method_call" span="36:28:36:36">getStack</jtok>
<jtok eid="3" type="primary_name_ref" span="38:7:38:12">stack</jtok>
<jtok eid="3" type="method_call" span="38:13:38:17">size</jtok>
<jtok eid="3" type="constructor_call" span="39:14:39:25">VMException</jtok>
<jtok eid="3" type="string_literal" span="39:26:39:83">"Not enough operands on stack for operation format.name$"</jtok>
<jtok eid="3" type="class_or_interface_ref" span="41:3:41:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="41:10:41:12">o1</jtok>
<jtok eid="3" type="primary_name_ref" span="41:15:41:20">stack</jtok>
<jtok eid="3" type="method_call" span="41:21:41:24">pop</jtok>
<jtok eid="3" type="class_or_interface_ref" span="42:3:42:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="42:10:42:12">o2</jtok>
<jtok eid="3" type="primary_name_ref" span="42:15:42:20">stack</jtok>
<jtok eid="3" type="method_call" span="42:21:42:24">pop</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:3:43:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="43:10:43:12">o3</jtok>
<jtok eid="3" type="primary_name_ref" span="43:15:43:20">stack</jtok>
<jtok eid="3" type="method_call" span="43:21:43:24">pop</jtok>
<jtok eid="3" type="primary_name_ref" span="45:9:45:11">o1</jtok>
<jtok eid="3" type="class_or_interface_ref" span="45:23:45:29">String</jtok>
<jtok eid="3" type="primary_name_ref" span="45:36:45:38">o2</jtok>
<jtok eid="3" type="class_or_interface_ref" span="45:50:45:57">Integer</jtok>
<jtok eid="3" type="primary_name_ref" span="45:64:45:66">o3</jtok>
<jtok eid="3" type="class_or_interface_ref" span="45:78:45:84">String</jtok>
<jtok eid="3" type="line_comment" span="46:4:46:54">// warning("A string is needed for change.case$");</jtok>
<jtok eid="3" type="primary_name_ref" span="47:4:47:9">stack</jtok>
<jtok eid="3" type="method_call" span="47:10:47:14">push</jtok>
<jtok eid="3" type="string_literal" span="47:15:47:17">""</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:3:51:9">String</jtok>
<jtok eid="3" type="local_variable_name" span="51:10:51:16">format</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:20:51:26">String</jtok>
<jtok eid="3" type="primary_name_ref" span="51:28:51:30">o1</jtok>
<jtok eid="3" type="class_or_interface_ref" span="52:3:52:10">Integer</jtok>
<jtok eid="3" type="local_variable_name" span="52:11:52:15">name</jtok>
<jtok eid="3" type="class_or_interface_ref" span="52:19:52:26">Integer</jtok>
<jtok eid="3" type="primary_name_ref" span="52:28:52:30">o2</jtok>
<jtok eid="3" type="class_or_interface_ref" span="53:3:53:9">String</jtok>
<jtok eid="3" type="local_variable_name" span="53:10:53:15">names</jtok>
<jtok eid="3" type="class_or_interface_ref" span="53:19:53:25">String</jtok>
<jtok eid="3" type="primary_name_ref" span="53:27:53:29">o3</jtok>
<jtok eid="3" type="primary_name_ref" span="55:7:55:12">names</jtok>
<jtok eid="3" type="class_or_interface_ref" span="56:4:56:14">AuthorList</jtok>
<jtok eid="3" type="local_variable_name" span="56:15:56:16">a</jtok>
<jtok eid="3" type="primary_name_ref" span="56:19:56:29">AuthorList</jtok>
<jtok eid="3" type="method_call" span="56:30:56:43">getAuthorList</jtok>
<jtok eid="3" type="primary_name_ref" span="56:44:56:49">names</jtok>
<jtok eid="3" type="primary_name_ref" span="57:8:57:12">name</jtok>
<jtok eid="3" type="method_call" span="57:13:57:21">intValue</jtok>
<jtok eid="3" type="primary_name_ref" span="57:26:57:27">a</jtok>
<jtok eid="3" type="method_call" span="57:28:57:32">size</jtok>
<jtok eid="3" type="constructor_call" span="58:15:58:26">VMException</jtok>
<jtok eid="3" type="string_literal" span="58:27:58:58">"Author Out of Bounds. Number "</jtok>
<jtok eid="3" type="primary_name_ref" span="58:61:58:65">name</jtok>
<jtok eid="3" type="string_literal" span="58:68:58:83">" invalid for "</jtok>
<jtok eid="3" type="primary_name_ref" span="58:86:58:91">names</jtok>
<jtok eid="3" type="class_or_interface_ref" span="60:4:60:10">Author</jtok>
<jtok eid="3" type="local_variable_name" span="60:11:60:17">author</jtok>
<jtok eid="3" type="primary_name_ref" span="60:20:60:21">a</jtok>
<jtok eid="3" type="method_call" span="60:22:60:31">getAuthor</jtok>
<jtok eid="3" type="primary_name_ref" span="60:32:60:36">name</jtok>
<jtok eid="3" type="method_call" span="60:37:60:45">intValue</jtok>
<jtok eid="3" type="primary_name_ref" span="62:4:62:9">stack</jtok>
<jtok eid="3" type="method_call" span="62:10:62:14">push</jtok>
<jtok eid="3" type="primary_name_ref" span="62:15:62:34">BibtexNameFormatter</jtok>
<jtok eid="3" type="method_call" span="62:35:62:45">formatName</jtok>
<jtok eid="3" type="primary_name_ref" span="62:46:62:52">author</jtok>
<jtok eid="3" type="primary_name_ref" span="62:54:62:60">format</jtok>
<jtok eid="3" type="primary_name_ref" span="62:62:62:64">vm</jtok>
<jtok eid="3" type="primary_name_ref" span="64:4:64:9">stack</jtok>
<jtok eid="3" type="method_call" span="64:10:64:14">push</jtok>
<jtok eid="3" type="string_literal" span="64:15:64:17">""</jtok>
</jdoc>