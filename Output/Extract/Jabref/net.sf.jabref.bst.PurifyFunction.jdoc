<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="net.sf.jabref.bst.PurifyFunction" jls="java5">
<jent id="0" type="file" span="0:0:47:1">Source/jabref/src/java/net/sf/jabref/bst/PurifyFunction.java</jent>
<jent id="1" pid="0" type="class" span="23:1:47:1">net.sf.jabref.bst.PurifyFunction</jent>
<jent id="2" pid="1" type="method" span="27:2:29:2">net.sf.jabref.bst.PurifyFunction.PurifyFunction(VM)</jent>
<jent id="3" pid="1" type="method" span="31:2:46:2">net.sf.jabref.bst.PurifyFunction.execute(BstEntry)</jent>
<jtok eid="0" type="block_comment" span="10:1:22:4">/**
 * 
 * The |built_in| function {\.{purify\$}} pops the top (string) literal, removes
 * nonalphanumeric characters except for |white_space| and |sep_char| characters
 * (these get converted to a |space|) and removes certain alphabetic characters
 * contained in the control sequences associated with a special character, and
 * pushes the resulting string. If the literal isn't a string, it complains and
 * pushes the null string.
 * 
 * @author $Author: coezbek $
 * @version $Revision: 2209 $ ($Date: 2007-08-01 20:23:38 +0200 (Wed, 01 Aug 2007) $)
 * 
 */</jtok>
<jtok eid="1" type="class_name" span="23:14:23:28">PurifyFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="23:40:23:51">BstFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="25:2:25:4">VM</jtok>
<jtok eid="1" type="field_name" span="25:5:25:7">vm</jtok>
<jtok eid="2" type="method_name" span="27:9:27:23">PurifyFunction</jtok>
<jtok eid="2" type="parameter_type" span="27:24:27:26">VM</jtok>
<jtok eid="2" type="parameter_name" span="27:27:27:29">vm</jtok>
<jtok eid="2" type="qualified_name_ref" span="28:8:28:10">vm</jtok>
<jtok eid="2" type="primary_name_ref" span="28:13:28:15">vm</jtok>
<jtok eid="3" type="method_name" span="31:14:31:21">execute</jtok>
<jtok eid="3" type="parameter_type" span="31:22:31:30">BstEntry</jtok>
<jtok eid="3" type="parameter_name" span="31:31:31:38">context</jtok>
<jtok eid="3" type="class_or_interface_ref" span="32:3:32:8">Stack</jtok>
<jtok eid="3" type="class_or_interface_ref" span="32:9:32:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="32:17:32:22">stack</jtok>
<jtok eid="3" type="primary_name_ref" span="32:25:32:27">vm</jtok>
<jtok eid="3" type="method_call" span="32:28:32:36">getStack</jtok>
<jtok eid="3" type="primary_name_ref" span="34:7:34:12">stack</jtok>
<jtok eid="3" type="method_call" span="34:13:34:17">size</jtok>
<jtok eid="3" type="constructor_call" span="35:14:35:25">VMException</jtok>
<jtok eid="3" type="string_literal" span="35:26:35:78">"Not enough operands on stack for operation purify$"</jtok>
<jtok eid="3" type="class_or_interface_ref" span="37:3:37:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="37:10:37:12">o1</jtok>
<jtok eid="3" type="primary_name_ref" span="37:15:37:20">stack</jtok>
<jtok eid="3" type="method_call" span="37:21:37:24">pop</jtok>
<jtok eid="3" type="primary_name_ref" span="39:9:39:11">o1</jtok>
<jtok eid="3" type="class_or_interface_ref" span="39:23:39:29">String</jtok>
<jtok eid="3" type="primary_name_ref" span="40:4:40:6">vm</jtok>
<jtok eid="3" type="method_call" span="40:7:40:11">warn</jtok>
<jtok eid="3" type="string_literal" span="40:12:40:44">"A string is needed for purify$"</jtok>
<jtok eid="3" type="primary_name_ref" span="41:4:41:9">stack</jtok>
<jtok eid="3" type="method_call" span="41:10:41:14">push</jtok>
<jtok eid="3" type="string_literal" span="41:15:41:17">""</jtok>
<jtok eid="3" type="primary_name_ref" span="45:3:45:8">stack</jtok>
<jtok eid="3" type="method_call" span="45:9:45:13">push</jtok>
<jtok eid="3" type="primary_name_ref" span="45:14:45:26">BibtexPurify</jtok>
<jtok eid="3" type="method_call" span="45:27:45:33">purify</jtok>
<jtok eid="3" type="class_or_interface_ref" span="45:35:45:41">String</jtok>
<jtok eid="3" type="primary_name_ref" span="45:43:45:45">o1</jtok>
<jtok eid="3" type="primary_name_ref" span="45:47:45:49">vm</jtok>
</jdoc>