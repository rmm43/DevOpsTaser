<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="net.sf.jabref.bst.TextPrefixFunction" jls="java5">
<jent id="0" type="file" span="0:0:58:1">Source/jabref/src/java/net/sf/jabref/bst/TextPrefixFunction.java</jent>
<jent id="1" pid="0" type="class" span="28:1:58:1">net.sf.jabref.bst.TextPrefixFunction</jent>
<jent id="2" pid="1" type="method" span="32:2:34:2">net.sf.jabref.bst.TextPrefixFunction.TextPrefixFunction(VM)</jent>
<jent id="3" pid="1" type="method" span="36:2:57:2">net.sf.jabref.bst.TextPrefixFunction.execute(BstEntry)</jent>
<jtok eid="0" type="block_comment" span="10:1:27:4">/**
The |built_in| function {\.{text.prefix\$}} pops the top two literals
(the integer literal |pop_lit1| and a string literal, in that order).
It pushes the substring of the (at most) |pop_lit1| consecutive text
characters starting from the beginning of the string.  This function
is similar to {\.{substring\$}}, but this one considers an accented
character (or more precisely, a ``special character''$\!$, even if
it's missing its matching |right_brace|) to be a single text character
(rather than however many |ASCII_code| characters it actually
comprises), and this function doesn't consider braces to be text
characters; furthermore, this function appends any needed matching
|right_brace|s.  If any of the types is incorrect, it complains and
pushes the null string.
 * 
 * @author $Author: coezbek $
 * @version $Revision: 2209 $ ($Date: 2007-08-01 20:23:38 +0200 (Wed, 01 Aug 2007) $)
 * 
 */</jtok>
<jtok eid="1" type="class_name" span="28:14:28:32">TextPrefixFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="28:44:28:55">BstFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="30:2:30:4">VM</jtok>
<jtok eid="1" type="field_name" span="30:5:30:7">vm</jtok>
<jtok eid="2" type="method_name" span="32:9:32:27">TextPrefixFunction</jtok>
<jtok eid="2" type="parameter_type" span="32:28:32:30">VM</jtok>
<jtok eid="2" type="parameter_name" span="32:31:32:33">vm</jtok>
<jtok eid="2" type="qualified_name_ref" span="33:8:33:10">vm</jtok>
<jtok eid="2" type="primary_name_ref" span="33:13:33:15">vm</jtok>
<jtok eid="3" type="method_name" span="36:14:36:21">execute</jtok>
<jtok eid="3" type="parameter_type" span="36:22:36:30">BstEntry</jtok>
<jtok eid="3" type="parameter_name" span="36:31:36:38">context</jtok>
<jtok eid="3" type="class_or_interface_ref" span="37:3:37:8">Stack</jtok>
<jtok eid="3" type="class_or_interface_ref" span="37:9:37:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="37:17:37:22">stack</jtok>
<jtok eid="3" type="primary_name_ref" span="37:25:37:27">vm</jtok>
<jtok eid="3" type="method_call" span="37:28:37:36">getStack</jtok>
<jtok eid="3" type="primary_name_ref" span="39:7:39:12">stack</jtok>
<jtok eid="3" type="method_call" span="39:13:39:17">size</jtok>
<jtok eid="3" type="constructor_call" span="40:14:40:25">VMException</jtok>
<jtok eid="3" type="string_literal" span="40:26:40:83">"Not enough operands on stack for operation text.prefix$"</jtok>
<jtok eid="3" type="class_or_interface_ref" span="42:3:42:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="42:10:42:12">o1</jtok>
<jtok eid="3" type="primary_name_ref" span="42:15:42:20">stack</jtok>
<jtok eid="3" type="method_call" span="42:21:42:24">pop</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:3:43:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="43:10:43:12">o2</jtok>
<jtok eid="3" type="primary_name_ref" span="43:15:43:20">stack</jtok>
<jtok eid="3" type="method_call" span="43:21:43:24">pop</jtok>
<jtok eid="3" type="primary_name_ref" span="45:9:45:11">o1</jtok>
<jtok eid="3" type="class_or_interface_ref" span="45:23:45:30">Integer</jtok>
<jtok eid="3" type="primary_name_ref" span="46:4:46:6">vm</jtok>
<jtok eid="3" type="method_call" span="46:7:46:11">warn</jtok>
<jtok eid="3" type="string_literal" span="46:12:46:69">"An integer is needed as first parameter to text.prefix$"</jtok>
<jtok eid="3" type="primary_name_ref" span="47:4:47:9">stack</jtok>
<jtok eid="3" type="method_call" span="47:10:47:14">push</jtok>
<jtok eid="3" type="string_literal" span="47:15:47:17">""</jtok>
<jtok eid="3" type="primary_name_ref" span="50:9:50:11">o1</jtok>
<jtok eid="3" type="class_or_interface_ref" span="50:23:50:29">String</jtok>
<jtok eid="3" type="primary_name_ref" span="51:4:51:6">vm</jtok>
<jtok eid="3" type="method_call" span="51:7:51:11">warn</jtok>
<jtok eid="3" type="string_literal" span="51:12:51:68">"A string is needed as second parameter to text.prefix$"</jtok>
<jtok eid="3" type="primary_name_ref" span="52:4:52:9">stack</jtok>
<jtok eid="3" type="method_call" span="52:10:52:14">push</jtok>
<jtok eid="3" type="string_literal" span="52:15:52:17">""</jtok>
<jtok eid="3" type="primary_name_ref" span="56:3:56:8">stack</jtok>
<jtok eid="3" type="method_call" span="56:9:56:13">push</jtok>
<jtok eid="3" type="primary_name_ref" span="56:14:56:30">BibtexTextPrefix</jtok>
<jtok eid="3" type="method_call" span="56:31:56:41">textPrefix</jtok>
<jtok eid="3" type="class_or_interface_ref" span="56:44:56:51">Integer</jtok>
<jtok eid="3" type="primary_name_ref" span="56:53:56:55">o1</jtok>
<jtok eid="3" type="method_call" span="56:57:56:65">intValue</jtok>
<jtok eid="3" type="class_or_interface_ref" span="56:70:56:76">String</jtok>
<jtok eid="3" type="primary_name_ref" span="56:78:56:80">o2</jtok>
<jtok eid="3" type="primary_name_ref" span="56:82:56:84">vm</jtok>
</jdoc>