<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="net.sf.jabref.bst.VM" jls="java5">
<jent id="0" type="file" span="0:0:1326:1">Source/jabref/src/java/net/sf/jabref/bst/VM.java</jent>
<jent id="1" pid="0" type="class" span="43:1:1326:1">net.sf.jabref.bst.VM</jent>
<jent id="2" pid="1" type="class" span="47:2:57:2">net.sf.jabref.bst.VM.Identifier</jent>
<jent id="3" pid="2" type="method" span="50:3:52:3">net.sf.jabref.bst.VM.Identifier.Identifier(String)</jent>
<jent id="4" pid="2" type="method" span="54:3:56:3">net.sf.jabref.bst.VM.Identifier.getName()</jent>
<jent id="5" pid="1" type="class" span="59:2:69:2">net.sf.jabref.bst.VM.Variable</jent>
<jent id="6" pid="5" type="method" span="62:3:64:3">net.sf.jabref.bst.VM.Variable.Variable(String)</jent>
<jent id="7" pid="5" type="method" span="66:3:68:3">net.sf.jabref.bst.VM.Variable.getName()</jent>
<jent id="8" pid="1" type="interface" span="71:2:73:2">net.sf.jabref.bst.VM.BstFunction</jent>
<jent id="9" pid="8" type="method" span="72:3:72:40">net.sf.jabref.bst.VM.BstFunction.execute(BstEntry)</jent>
<jent id="10" pid="1" type="method" span="83:2:86:2">net.sf.jabref.bst.VM.VM(File)</jent>
<jent id="11" pid="1" type="method" span="88:2:90:2">net.sf.jabref.bst.VM.VM(String)</jent>
<jent id="12" pid="1" type="method" span="92:2:98:2">net.sf.jabref.bst.VM.charStream2CommonTree(CharStream)</jent>
<jent id="13" pid="1" type="method" span="100:2:102:2">net.sf.jabref.bst.VM.VM(CharStream)</jent>
<jent id="14" pid="1" type="method" span="104:2:850:2">net.sf.jabref.bst.VM.VM(CommonTree)</jent>
<jent id="15" pid="14" type="class" span="109:47:133:3">net.sf.jabref.bst.VM.VM(CommonTree).$1</jent>
<jent id="16" pid="15" type="method" span="115:4:132:4">net.sf.jabref.bst.VM.VM(CommonTree).$1.execute(BstEntry)</jent>
<jent id="17" pid="14" type="class" span="135:47:156:3">net.sf.jabref.bst.VM.VM(CommonTree).$2</jent>
<jent id="18" pid="17" type="method" span="137:4:155:4">net.sf.jabref.bst.VM.VM(CommonTree).$2.execute(BstEntry)</jent>
<jent id="19" pid="14" type="class" span="158:47:182:3">net.sf.jabref.bst.VM.VM(CommonTree).$3</jent>
<jent id="20" pid="19" type="method" span="163:4:181:4">net.sf.jabref.bst.VM.VM(CommonTree).$3.execute(BstEntry)</jent>
<jent id="21" pid="14" type="class" span="184:47:199:3">net.sf.jabref.bst.VM.VM(CommonTree).$4</jent>
<jent id="22" pid="21" type="method" span="186:4:198:4">net.sf.jabref.bst.VM.VM(CommonTree).$4.execute(BstEntry)</jent>
<jent id="23" pid="14" type="class" span="201:47:219:3">net.sf.jabref.bst.VM.VM(CommonTree).$5</jent>
<jent id="24" pid="23" type="method" span="206:4:218:4">net.sf.jabref.bst.VM.VM(CommonTree).$5.execute(BstEntry)</jent>
<jent id="25" pid="14" type="class" span="221:47:240:3">net.sf.jabref.bst.VM.VM(CommonTree).$6</jent>
<jent id="26" pid="25" type="method" span="227:4:239:4">net.sf.jabref.bst.VM.VM(CommonTree).$6.execute(BstEntry)</jent>
<jent id="27" pid="14" type="class" span="242:48:256:3">net.sf.jabref.bst.VM.VM(CommonTree).$7</jent>
<jent id="28" pid="27" type="method" span="247:4:255:4">net.sf.jabref.bst.VM.VM(CommonTree).$7.execute(BstEntry)</jent>
<jent id="29" pid="14" type="class" span="258:57:292:3">net.sf.jabref.bst.VM.VM(CommonTree).$8</jent>
<jent id="30" pid="29" type="method" span="267:4:291:4">net.sf.jabref.bst.VM.VM(CommonTree).$8.execute(BstEntry)</jent>
<jent id="31" pid="14" type="class" span="294:56:313:3">net.sf.jabref.bst.VM.VM(CommonTree).$9</jent>
<jent id="32" pid="31" type="method" span="305:4:312:4">net.sf.jabref.bst.VM.VM(CommonTree).$9.execute(BstEntry)</jent>
<jent id="33" pid="14" type="class" span="317:57:337:3">net.sf.jabref.bst.VM.VM(CommonTree).$10</jent>
<jent id="34" pid="33" type="method" span="323:4:336:4">net.sf.jabref.bst.VM.VM(CommonTree).$10.execute(BstEntry)</jent>
<jent id="35" pid="14" type="class" span="339:51:347:3">net.sf.jabref.bst.VM.VM(CommonTree).$11</jent>
<jent id="36" pid="35" type="method" span="344:4:346:4">net.sf.jabref.bst.VM.VM(CommonTree).$11.execute(BstEntry)</jent>
<jent id="37" pid="14" type="class" span="349:56:362:3">net.sf.jabref.bst.VM.VM(CommonTree).$12</jent>
<jent id="38" pid="37" type="method" span="353:4:361:4">net.sf.jabref.bst.VM.VM(CommonTree).$12.execute(BstEntry)</jent>
<jent id="39" pid="14" type="class" span="364:52:389:3">net.sf.jabref.bst.VM.VM(CommonTree).$13</jent>
<jent id="40" pid="39" type="method" span="370:4:388:4">net.sf.jabref.bst.VM.VM(CommonTree).$13.execute(BstEntry)</jent>
<jent id="41" pid="14" type="class" span="393:49:421:3">net.sf.jabref.bst.VM.VM(CommonTree).$14</jent>
<jent id="42" pid="41" type="method" span="400:4:420:4">net.sf.jabref.bst.VM.VM(CommonTree).$14.execute(BstEntry)</jent>
<jent id="43" pid="14" type="class" span="423:57:443:3">net.sf.jabref.bst.VM.VM(CommonTree).$15</jent>
<jent id="44" pid="43" type="method" span="429:4:442:4">net.sf.jabref.bst.VM.VM(CommonTree).$15.execute(BstEntry)</jent>
<jent id="45" pid="14" type="class" span="445:57:463:3">net.sf.jabref.bst.VM.VM(CommonTree).$16</jent>
<jent id="46" pid="45" type="method" span="450:4:462:4">net.sf.jabref.bst.VM.VM(CommonTree).$16.execute(BstEntry)</jent>
<jent id="47" pid="14" type="class" span="465:54:489:3">net.sf.jabref.bst.VM.VM(CommonTree).$17</jent>
<jent id="48" pid="47" type="method" span="470:4:488:4">net.sf.jabref.bst.VM.VM(CommonTree).$17.execute(BstEntry)</jent>
<jent id="49" pid="14" type="class" span="491:54:502:3">net.sf.jabref.bst.VM.VM(CommonTree).$18</jent>
<jent id="50" pid="49" type="method" span="499:4:501:4">net.sf.jabref.bst.VM.VM(CommonTree).$18.execute(BstEntry)</jent>
<jent id="51" pid="14" type="class" span="504:56:524:3">net.sf.jabref.bst.VM.VM(CommonTree).$19</jent>
<jent id="52" pid="51" type="method" span="511:4:523:4">net.sf.jabref.bst.VM.VM(CommonTree).$19.execute(BstEntry)</jent>
<jent id="53" pid="14" type="class" span="526:50:534:3">net.sf.jabref.bst.VM.VM(CommonTree).$20</jent>
<jent id="54" pid="53" type="method" span="531:4:533:4">net.sf.jabref.bst.VM.VM(CommonTree).$20.execute(BstEntry)</jent>
<jent id="55" pid="14" type="class" span="536:55:552:3">net.sf.jabref.bst.VM.VM(CommonTree).$21</jent>
<jent id="56" pid="55" type="method" span="544:4:551:4">net.sf.jabref.bst.VM.VM(CommonTree).$21.execute(BstEntry)</jent>
<jent id="57" pid="14" type="class" span="563:52:570:3">net.sf.jabref.bst.VM.VM(CommonTree).$22</jent>
<jent id="58" pid="57" type="method" span="567:4:569:4">net.sf.jabref.bst.VM.VM(CommonTree).$22.execute(BstEntry)</jent>
<jent id="59" pid="14" type="class" span="572:51:579:3">net.sf.jabref.bst.VM.VM(CommonTree).$23</jent>
<jent id="60" pid="59" type="method" span="576:4:578:4">net.sf.jabref.bst.VM.VM(CommonTree).$23.execute(BstEntry)</jent>
<jent id="61" pid="14" type="class" span="581:52:591:3">net.sf.jabref.bst.VM.VM(CommonTree).$24</jent>
<jent id="62" pid="61" type="method" span="586:4:590:4">net.sf.jabref.bst.VM.VM(CommonTree).$24.execute(BstEntry)</jent>
<jent id="63" pid="14" type="class" span="593:56:638:3">net.sf.jabref.bst.VM.VM(CommonTree).$25</jent>
<jent id="64" pid="63" type="method" span="603:4:637:4">net.sf.jabref.bst.VM.VM(CommonTree).$25.execute(BstEntry)</jent>
<jent id="65" pid="14" type="class" span="640:51:659:3">net.sf.jabref.bst.VM.VM(CommonTree).$26</jent>
<jent id="66" pid="65" type="method" span="649:4:658:4">net.sf.jabref.bst.VM.VM(CommonTree).$26.execute(BstEntry)</jent>
<jent id="67" pid="14" type="class" span="661:58:753:3">net.sf.jabref.bst.VM.VM(CommonTree).$27</jent>
<jent id="68" pid="67" type="method" span="673:4:752:4">net.sf.jabref.bst.VM.VM(CommonTree).$27.execute(BstEntry)</jent>
<jent id="69" pid="14" type="class" span="768:50:776:3">net.sf.jabref.bst.VM.VM(CommonTree).$28</jent>
<jent id="70" pid="69" type="method" span="773:4:775:4">net.sf.jabref.bst.VM.VM(CommonTree).$28.execute(BstEntry)</jent>
<jent id="71" pid="14" type="class" span="778:51:786:3">net.sf.jabref.bst.VM.VM(CommonTree).$29</jent>
<jent id="72" pid="71" type="method" span="783:4:785:4">net.sf.jabref.bst.VM.VM(CommonTree).$29.execute(BstEntry)</jent>
<jent id="73" pid="14" type="class" span="788:54:799:3">net.sf.jabref.bst.VM.VM(CommonTree).$30</jent>
<jent id="74" pid="73" type="method" span="796:4:798:4">net.sf.jabref.bst.VM.VM(CommonTree).$30.execute(BstEntry)</jent>
<jent id="75" pid="14" type="class" span="801:52:833:3">net.sf.jabref.bst.VM.VM(CommonTree).$31</jent>
<jent id="76" pid="75" type="method" span="807:4:832:4">net.sf.jabref.bst.VM.VM(CommonTree).$31.execute(BstEntry)</jent>
<jent id="77" pid="14" type="class" span="837:52:848:3">net.sf.jabref.bst.VM.VM(CommonTree).$32</jent>
<jent id="78" pid="77" type="method" span="843:4:847:4">net.sf.jabref.bst.VM.VM(CommonTree).$32.execute(BstEntry)</jent>
<jent id="79" pid="1" type="method" span="852:2:886:2">net.sf.jabref.bst.VM.assign(BstEntry,Object,Object)</jent>
<jent id="80" pid="1" type="method" span="894:2:897:2">net.sf.jabref.bst.VM.run(BibtexDatabase)</jent>
<jent id="81" pid="1" type="method" span="899:2:951:2">net.sf.jabref.bst.VM.run(Collection&lt;BibtexEntry&gt;)</jent>
<jent id="82" pid="1" type="method" span="953:2:968:2">net.sf.jabref.bst.VM.reset()</jent>
<jent id="83" pid="1" type="method" span="980:2:1000:2">net.sf.jabref.bst.VM.read()</jent>
<jent id="84" pid="1" type="method" span="1014:2:1018:2">net.sf.jabref.bst.VM.macro(Tree)</jent>
<jent id="85" pid="1" type="class" span="1020:2:1031:2">net.sf.jabref.bst.VM.MacroFunction</jent>
<jent id="86" pid="85" type="method" span="1024:3:1026:3">net.sf.jabref.bst.VM.MacroFunction.MacroFunction(String)</jent>
<jent id="87" pid="85" type="method" span="1028:3:1030:3">net.sf.jabref.bst.VM.MacroFunction.execute(BstEntry)</jent>
<jent id="88" pid="1" type="method" span="1042:2:1082:2">net.sf.jabref.bst.VM.entry(Tree)</jent>
<jent id="89" pid="1" type="method" span="1084:2:1092:2">net.sf.jabref.bst.VM.reverse(Tree)</jent>
<jent id="90" pid="1" type="method" span="1094:2:1101:2">net.sf.jabref.bst.VM.iterate(Tree)</jent>
<jent id="91" pid="1" type="method" span="1109:2:1116:2">net.sf.jabref.bst.VM.sort(Tree)</jent>
<jent id="92" pid="91" type="class" span="1110:56:1115:3">net.sf.jabref.bst.VM.sort(Tree).$33</jent>
<jent id="93" pid="92" type="method" span="1111:4:1114:4">net.sf.jabref.bst.VM.sort(Tree).$33.compare(BstEntry,BstEntry)</jent>
<jent id="94" pid="1" type="method" span="1118:2:1125:2">net.sf.jabref.bst.VM.executeInContext(Object,BstEntry)</jent>
<jent id="95" pid="1" type="method" span="1127:2:1129:2">net.sf.jabref.bst.VM.execute(Tree)</jent>
<jent id="96" pid="1" type="class" span="1131:2:1181:2">net.sf.jabref.bst.VM.StackFunction</jent>
<jent id="97" pid="96" type="method" span="1135:3:1137:3">net.sf.jabref.bst.VM.StackFunction.getTree()</jent>
<jent id="98" pid="96" type="method" span="1139:3:1142:3">net.sf.jabref.bst.VM.StackFunction.StackFunction(Tree)</jent>
<jent id="99" pid="96" type="method" span="1144:3:1180:3">net.sf.jabref.bst.VM.StackFunction.execute(BstEntry)</jent>
<jent id="100" pid="1" type="method" span="1183:2:1185:2">net.sf.jabref.bst.VM.push(Tree)</jent>
<jent id="101" pid="1" type="method" span="1187:2:1219:2">net.sf.jabref.bst.VM.execute(String,BstEntry)</jent>
<jent id="102" pid="1" type="method" span="1221:2:1226:2">net.sf.jabref.bst.VM.function(Tree)</jent>
<jent id="103" pid="1" type="method" span="1237:2:1245:2">net.sf.jabref.bst.VM.integers(Tree)</jent>
<jent id="104" pid="1" type="method" span="1254:2:1262:2">net.sf.jabref.bst.VM.strings(Tree)</jent>
<jent id="105" pid="1" type="class" span="1264:2:1285:2">net.sf.jabref.bst.VM.BstEntry</jent>
<jent id="106" pid="105" type="method" span="1266:3:1268:3">net.sf.jabref.bst.VM.BstEntry.BstEntry(BibtexEntry)</jent>
<jent id="107" pid="105" type="method" span="1278:3:1280:3">net.sf.jabref.bst.VM.BstEntry.getFields()</jent>
<jent id="108" pid="105" type="method" span="1282:3:1284:3">net.sf.jabref.bst.VM.BstEntry.getBibtexEntry()</jent>
<jent id="109" pid="1" type="method" span="1297:2:1299:2">net.sf.jabref.bst.VM.push(Integer)</jent>
<jent id="110" pid="1" type="method" span="1301:2:1303:2">net.sf.jabref.bst.VM.push(String)</jent>
<jent id="111" pid="1" type="method" span="1305:2:1307:2">net.sf.jabref.bst.VM.push(Identifier)</jent>
<jent id="112" pid="1" type="method" span="1310:4:1310:62">net.sf.jabref.bst.VM.getStrings()</jent>
<jent id="113" pid="1" type="method" span="1312:4:1312:65">net.sf.jabref.bst.VM.getIntegers()</jent>
<jent id="114" pid="1" type="method" span="1314:4:1314:59">net.sf.jabref.bst.VM.getEntries()</jent>
<jent id="115" pid="1" type="method" span="1316:3:1316:70">net.sf.jabref.bst.VM.getFunctions()</jent>
<jent id="116" pid="1" type="method" span="1318:2:1320:2">net.sf.jabref.bst.VM.getStack()</jent>
<jent id="117" pid="1" type="method" span="1322:2:1324:2">net.sf.jabref.bst.VM.warn(String)</jent>
<jtok eid="0" type="block_comment" span="30:1:41:4">/**
 * 
 * A Bibtex Virtual machine that can execute .bst files.
 * 
 * Documentation can be found in the original bibtex distribution:
 * 
 * http://texcatalogue.sarovar.org/entries/bibtex.html#Download
 * 
 * @author $Author: coezbek $
 * @version $Revision: 2488 $ ($Date: 2007-11-14 01:25:31 +0100 (Wed, 14 Nov 2007) $)
 * 
 */</jtok>
<jtok eid="1" type="class_name" span="43:14:43:16">VM</jtok>
<jtok eid="1" type="class_or_interface_ref" span="43:28:43:32">Warn</jtok>
<jtok eid="1" type="class_or_interface_ref" span="45:2:45:13">PrintStream</jtok>
<jtok eid="1" type="field_name" span="45:14:45:17">out</jtok>
<jtok eid="1" type="primary_name_ref" span="45:20:45:26">System</jtok>
<jtok eid="1" type="qualified_name_ref" span="45:27:45:30">out</jtok>
<jtok eid="2" type="class_name" span="47:15:47:25">Identifier</jtok>
<jtok eid="2" type="class_or_interface_ref" span="48:10:48:16">String</jtok>
<jtok eid="2" type="field_name" span="48:17:48:21">name</jtok>
<jtok eid="3" type="method_name" span="50:10:50:20">Identifier</jtok>
<jtok eid="3" type="parameter_type" span="50:21:50:27">String</jtok>
<jtok eid="3" type="parameter_name" span="50:28:50:32">name</jtok>
<jtok eid="3" type="qualified_name_ref" span="51:9:51:13">name</jtok>
<jtok eid="3" type="primary_name_ref" span="51:16:51:20">name</jtok>
<jtok eid="4" type="class_or_interface_ref" span="54:10:54:16">String</jtok>
<jtok eid="4" type="method_name" span="54:17:54:24">getName</jtok>
<jtok eid="4" type="primary_name_ref" span="55:11:55:15">name</jtok>
<jtok eid="5" type="class_name" span="59:15:59:23">Variable</jtok>
<jtok eid="5" type="class_or_interface_ref" span="60:10:60:16">String</jtok>
<jtok eid="5" type="field_name" span="60:17:60:21">name</jtok>
<jtok eid="6" type="method_name" span="62:10:62:18">Variable</jtok>
<jtok eid="6" type="parameter_type" span="62:19:62:25">String</jtok>
<jtok eid="6" type="parameter_name" span="62:26:62:30">name</jtok>
<jtok eid="6" type="qualified_name_ref" span="63:9:63:13">name</jtok>
<jtok eid="6" type="primary_name_ref" span="63:16:63:20">name</jtok>
<jtok eid="7" type="class_or_interface_ref" span="66:10:66:16">String</jtok>
<jtok eid="7" type="method_name" span="66:17:66:24">getName</jtok>
<jtok eid="7" type="primary_name_ref" span="67:11:67:15">name</jtok>
<jtok eid="8" type="interface_name" span="71:19:71:30">BstFunction</jtok>
<jtok eid="9" type="method_name" span="72:15:72:22">execute</jtok>
<jtok eid="9" type="parameter_type" span="72:23:72:31">BstEntry</jtok>
<jtok eid="9" type="parameter_name" span="72:32:72:39">context</jtok>
<jtok eid="1" type="class_or_interface_ref" span="75:22:75:29">Integer</jtok>
<jtok eid="1" type="field_name" span="75:30:75:35">FALSE</jtok>
<jtok eid="1" type="constructor_call" span="75:42:75:49">Integer</jtok>
<jtok eid="1" type="class_or_interface_ref" span="77:22:77:29">Integer</jtok>
<jtok eid="1" type="field_name" span="77:30:77:34">TRUE</jtok>
<jtok eid="1" type="constructor_call" span="77:41:77:48">Integer</jtok>
<jtok eid="1" type="class_or_interface_ref" span="79:10:79:17">HashMap</jtok>
<jtok eid="1" type="class_or_interface_ref" span="79:18:79:24">String</jtok>
<jtok eid="1" type="class_or_interface_ref" span="79:25:79:36">BstFunction</jtok>
<jtok eid="1" type="field_name" span="79:38:79:54">buildInFunctions</jtok>
<jtok eid="1" type="class_or_interface_ref" span="81:9:81:13">File</jtok>
<jtok eid="1" type="field_name" span="81:14:81:18">file</jtok>
<jtok eid="10" type="method_name" span="83:9:83:11">VM</jtok>
<jtok eid="10" type="parameter_type" span="83:12:83:16">File</jtok>
<jtok eid="10" type="parameter_name" span="83:17:83:18">f</jtok>
<jtok eid="10" type="throws" span="83:27:83:47">RecognitionException</jtok>
<jtok eid="10" type="method_call" span="83:49:83:60">IOException</jtok>
<jtok eid="10" type="constructor_call" span="84:12:84:27">ANTLRFileStream</jtok>
<jtok eid="10" type="primary_name_ref" span="84:28:84:29">f</jtok>
<jtok eid="10" type="method_call" span="84:30:84:37">getPath</jtok>
<jtok eid="10" type="qualified_name_ref" span="85:8:85:12">file</jtok>
<jtok eid="10" type="primary_name_ref" span="85:15:85:16">f</jtok>
<jtok eid="11" type="method_name" span="88:9:88:11">VM</jtok>
<jtok eid="11" type="parameter_type" span="88:12:88:18">String</jtok>
<jtok eid="11" type="parameter_name" span="88:19:88:20">s</jtok>
<jtok eid="11" type="method_call" span="88:29:88:49">RecognitionException</jtok>
<jtok eid="11" type="constructor_call" span="89:12:89:29">ANTLRStringStream</jtok>
<jtok eid="11" type="primary_name_ref" span="89:30:89:31">s</jtok>
<jtok eid="12" type="class_or_interface_ref" span="92:16:92:26">CommonTree</jtok>
<jtok eid="12" type="method_name" span="92:27:92:48">charStream2CommonTree</jtok>
<jtok eid="12" type="parameter_type" span="92:49:92:59">CharStream</jtok>
<jtok eid="12" type="parameter_name" span="92:60:92:63">bst</jtok>
<jtok eid="12" type="throws" span="92:72:92:92">RecognitionException</jtok>
<jtok eid="12" type="class_or_interface_ref" span="93:3:93:11">BstLexer</jtok>
<jtok eid="12" type="local_variable_name" span="93:12:93:15">lex</jtok>
<jtok eid="12" type="constructor_call" span="93:22:93:30">BstLexer</jtok>
<jtok eid="12" type="primary_name_ref" span="93:31:93:34">bst</jtok>
<jtok eid="12" type="class_or_interface_ref" span="94:3:94:20">CommonTokenStream</jtok>
<jtok eid="12" type="local_variable_name" span="94:21:94:27">tokens</jtok>
<jtok eid="12" type="constructor_call" span="94:34:94:51">CommonTokenStream</jtok>
<jtok eid="12" type="primary_name_ref" span="94:52:94:55">lex</jtok>
<jtok eid="12" type="class_or_interface_ref" span="95:3:95:12">BstParser</jtok>
<jtok eid="12" type="local_variable_name" span="95:13:95:19">parser</jtok>
<jtok eid="12" type="constructor_call" span="95:26:95:35">BstParser</jtok>
<jtok eid="12" type="primary_name_ref" span="95:36:95:42">tokens</jtok>
<jtok eid="12" type="class_or_interface_ref" span="96:3:96:12">BstParser</jtok>
<jtok eid="12" type="class_or_interface_ref" span="96:13:96:27">program_return</jtok>
<jtok eid="12" type="local_variable_name" span="96:28:96:29">r</jtok>
<jtok eid="12" type="primary_name_ref" span="96:32:96:38">parser</jtok>
<jtok eid="12" type="method_call" span="96:39:96:46">program</jtok>
<jtok eid="12" type="class_or_interface_ref" span="97:11:97:21">CommonTree</jtok>
<jtok eid="12" type="primary_name_ref" span="97:23:97:24">r</jtok>
<jtok eid="12" type="method_call" span="97:25:97:32">getTree</jtok>
<jtok eid="13" type="method_name" span="100:9:100:11">VM</jtok>
<jtok eid="13" type="parameter_type" span="100:12:100:22">CharStream</jtok>
<jtok eid="13" type="parameter_name" span="100:23:100:26">bst</jtok>
<jtok eid="13" type="method_call" span="100:35:100:55">RecognitionException</jtok>
<jtok eid="13" type="method_call" span="101:8:101:29">charStream2CommonTree</jtok>
<jtok eid="13" type="primary_name_ref" span="101:30:101:33">bst</jtok>
<jtok eid="14" type="method_name" span="104:9:104:11">VM</jtok>
<jtok eid="14" type="parameter_type" span="104:12:104:22">CommonTree</jtok>
<jtok eid="14" type="parameter_name" span="104:23:104:27">tree</jtok>
<jtok eid="14" type="qualified_name_ref" span="105:8:105:12">tree</jtok>
<jtok eid="14" type="primary_name_ref" span="105:15:105:19">tree</jtok>
<jtok eid="14" type="qualified_name_ref" span="107:8:107:24">buildInFunctions</jtok>
<jtok eid="14" type="constructor_call" span="107:31:107:38">HashMap</jtok>
<jtok eid="14" type="constructor_call" span="107:39:107:45">String</jtok>
<jtok eid="14" type="constructor_call" span="107:47:107:58">BstFunction</jtok>
<jtok eid="14" type="primary_name_ref" span="109:3:109:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="109:20:109:23">put</jtok>
<jtok eid="14" type="string_literal" span="109:24:109:27">"&gt;"</jtok>
<jtok eid="14" type="constructor_call" span="109:33:109:44">BstFunction</jtok>
<jtok eid="15" type="block_comment" span="110:4:114:7">/**
			 * Pops the top two (integer) literals, compares them, and pushes
			 * the integer 1 if the second is greater than the first, 0
			 * otherwise.
			 */</jtok>
<jtok eid="16" type="method_name" span="115:16:115:23">execute</jtok>
<jtok eid="16" type="parameter_type" span="115:24:115:32">BstEntry</jtok>
<jtok eid="16" type="parameter_name" span="115:33:115:40">context</jtok>
<jtok eid="16" type="primary_name_ref" span="116:9:116:14">stack</jtok>
<jtok eid="16" type="method_call" span="116:15:116:19">size</jtok>
<jtok eid="16" type="constructor_call" span="117:16:117:27">VMException</jtok>
<jtok eid="16" type="string_literal" span="117:28:117:74">"Not enough operands on stack for operation &gt;"</jtok>
<jtok eid="16" type="class_or_interface_ref" span="119:5:119:11">Object</jtok>
<jtok eid="16" type="local_variable_name" span="119:12:119:14">o2</jtok>
<jtok eid="16" type="primary_name_ref" span="119:17:119:22">stack</jtok>
<jtok eid="16" type="method_call" span="119:23:119:26">pop</jtok>
<jtok eid="16" type="class_or_interface_ref" span="120:5:120:11">Object</jtok>
<jtok eid="16" type="local_variable_name" span="120:12:120:14">o1</jtok>
<jtok eid="16" type="primary_name_ref" span="120:17:120:22">stack</jtok>
<jtok eid="16" type="method_call" span="120:23:120:26">pop</jtok>
<jtok eid="16" type="primary_name_ref" span="122:11:122:13">o1</jtok>
<jtok eid="16" type="class_or_interface_ref" span="122:25:122:32">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="122:36:122:38">o2</jtok>
<jtok eid="16" type="class_or_interface_ref" span="122:50:122:57">Integer</jtok>
<jtok eid="16" type="constructor_call" span="123:16:123:27">VMException</jtok>
<jtok eid="16" type="string_literal" span="123:28:123:66">"Can only compare two integers with &gt;"</jtok>
<jtok eid="16" type="primary_name_ref" span="126:9:126:11">o1</jtok>
<jtok eid="16" type="primary_name_ref" span="126:15:126:17">o2</jtok>
<jtok eid="16" type="primary_name_ref" span="127:6:127:11">stack</jtok>
<jtok eid="16" type="method_call" span="127:12:127:16">push</jtok>
<jtok eid="16" type="primary_name_ref" span="127:17:127:19">VM</jtok>
<jtok eid="16" type="qualified_name_ref" span="127:20:127:25">FALSE</jtok>
<jtok eid="16" type="primary_name_ref" span="131:5:131:10">stack</jtok>
<jtok eid="16" type="method_call" span="131:11:131:15">push</jtok>
<jtok eid="16" type="class_or_interface_ref" span="131:18:131:25">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="131:27:131:29">o1</jtok>
<jtok eid="16" type="method_call" span="131:31:131:40">compareTo</jtok>
<jtok eid="16" type="class_or_interface_ref" span="131:42:131:49">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="131:51:131:53">o2</jtok>
<jtok eid="16" type="primary_name_ref" span="131:61:131:63">VM</jtok>
<jtok eid="16" type="qualified_name_ref" span="131:64:131:68">TRUE</jtok>
<jtok eid="16" type="primary_name_ref" span="131:71:131:73">VM</jtok>
<jtok eid="16" type="qualified_name_ref" span="131:74:131:79">FALSE</jtok>
<jtok eid="14" type="primary_name_ref" span="135:3:135:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="135:20:135:23">put</jtok>
<jtok eid="14" type="string_literal" span="135:24:135:27">"&lt;"</jtok>
<jtok eid="14" type="constructor_call" span="135:33:135:44">BstFunction</jtok>
<jtok eid="17" type="block_comment" span="136:4:136:21">/** Analogous. */</jtok>
<jtok eid="18" type="method_name" span="137:16:137:23">execute</jtok>
<jtok eid="18" type="parameter_type" span="137:24:137:32">BstEntry</jtok>
<jtok eid="18" type="parameter_name" span="137:33:137:40">context</jtok>
<jtok eid="18" type="primary_name_ref" span="138:9:138:14">stack</jtok>
<jtok eid="18" type="method_call" span="138:15:138:19">size</jtok>
<jtok eid="18" type="constructor_call" span="139:16:139:27">VMException</jtok>
<jtok eid="18" type="string_literal" span="139:28:139:74">"Not enough operands on stack for operation &lt;"</jtok>
<jtok eid="18" type="class_or_interface_ref" span="141:5:141:11">Object</jtok>
<jtok eid="18" type="local_variable_name" span="141:12:141:14">o2</jtok>
<jtok eid="18" type="primary_name_ref" span="141:17:141:22">stack</jtok>
<jtok eid="18" type="method_call" span="141:23:141:26">pop</jtok>
<jtok eid="18" type="class_or_interface_ref" span="142:5:142:11">Object</jtok>
<jtok eid="18" type="local_variable_name" span="142:12:142:14">o1</jtok>
<jtok eid="18" type="primary_name_ref" span="142:17:142:22">stack</jtok>
<jtok eid="18" type="method_call" span="142:23:142:26">pop</jtok>
<jtok eid="18" type="primary_name_ref" span="144:11:144:13">o1</jtok>
<jtok eid="18" type="class_or_interface_ref" span="144:25:144:32">Integer</jtok>
<jtok eid="18" type="primary_name_ref" span="144:36:144:38">o2</jtok>
<jtok eid="18" type="class_or_interface_ref" span="144:50:144:57">Integer</jtok>
<jtok eid="18" type="constructor_call" span="145:16:145:27">VMException</jtok>
<jtok eid="18" type="string_literal" span="145:28:145:66">"Can only compare two integers with &lt;"</jtok>
<jtok eid="18" type="primary_name_ref" span="148:9:148:11">o1</jtok>
<jtok eid="18" type="primary_name_ref" span="148:15:148:17">o2</jtok>
<jtok eid="18" type="primary_name_ref" span="149:6:149:11">stack</jtok>
<jtok eid="18" type="method_call" span="149:12:149:16">push</jtok>
<jtok eid="18" type="primary_name_ref" span="149:17:149:19">VM</jtok>
<jtok eid="18" type="qualified_name_ref" span="149:20:149:25">FALSE</jtok>
<jtok eid="18" type="primary_name_ref" span="153:5:153:10">stack</jtok>
<jtok eid="18" type="method_call" span="153:11:153:15">push</jtok>
<jtok eid="18" type="class_or_interface_ref" span="153:18:153:25">Integer</jtok>
<jtok eid="18" type="primary_name_ref" span="153:27:153:29">o1</jtok>
<jtok eid="18" type="method_call" span="153:31:153:40">compareTo</jtok>
<jtok eid="18" type="class_or_interface_ref" span="153:42:153:49">Integer</jtok>
<jtok eid="18" type="primary_name_ref" span="153:51:153:53">o2</jtok>
<jtok eid="18" type="primary_name_ref" span="153:61:153:63">VM</jtok>
<jtok eid="18" type="qualified_name_ref" span="153:64:153:68">TRUE</jtok>
<jtok eid="18" type="primary_name_ref" span="153:71:153:73">VM</jtok>
<jtok eid="18" type="qualified_name_ref" span="153:74:153:79">FALSE</jtok>
<jtok eid="14" type="primary_name_ref" span="158:3:158:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="158:20:158:23">put</jtok>
<jtok eid="14" type="string_literal" span="158:24:158:27">"="</jtok>
<jtok eid="14" type="constructor_call" span="158:33:158:44">BstFunction</jtok>
<jtok eid="19" type="block_comment" span="159:4:162:7">/**
			 * Pops the top two (both integer or both string) literals, compares
			 * them, and pushes the integer 1 if they're equal, 0 otherwise.
			 */</jtok>
<jtok eid="20" type="method_name" span="163:16:163:23">execute</jtok>
<jtok eid="20" type="parameter_type" span="163:24:163:32">BstEntry</jtok>
<jtok eid="20" type="parameter_name" span="163:33:163:40">context</jtok>
<jtok eid="20" type="primary_name_ref" span="164:9:164:14">stack</jtok>
<jtok eid="20" type="method_call" span="164:15:164:19">size</jtok>
<jtok eid="20" type="constructor_call" span="165:16:165:27">VMException</jtok>
<jtok eid="20" type="string_literal" span="165:28:165:74">"Not enough operands on stack for operation ="</jtok>
<jtok eid="20" type="class_or_interface_ref" span="167:5:167:11">Object</jtok>
<jtok eid="20" type="local_variable_name" span="167:12:167:14">o1</jtok>
<jtok eid="20" type="primary_name_ref" span="167:17:167:22">stack</jtok>
<jtok eid="20" type="method_call" span="167:23:167:26">pop</jtok>
<jtok eid="20" type="class_or_interface_ref" span="168:5:168:11">Object</jtok>
<jtok eid="20" type="local_variable_name" span="168:12:168:14">o2</jtok>
<jtok eid="20" type="primary_name_ref" span="168:17:168:22">stack</jtok>
<jtok eid="20" type="method_call" span="168:23:168:26">pop</jtok>
<jtok eid="20" type="primary_name_ref" span="170:9:170:11">o1</jtok>
<jtok eid="20" type="primary_name_ref" span="170:22:170:24">o2</jtok>
<jtok eid="20" type="primary_name_ref" span="171:6:171:11">stack</jtok>
<jtok eid="20" type="method_call" span="171:12:171:16">push</jtok>
<jtok eid="20" type="primary_name_ref" span="171:17:171:19">VM</jtok>
<jtok eid="20" type="qualified_name_ref" span="171:20:171:25">FALSE</jtok>
<jtok eid="20" type="primary_name_ref" span="175:9:175:11">o1</jtok>
<jtok eid="20" type="primary_name_ref" span="175:15:175:17">o2</jtok>
<jtok eid="20" type="primary_name_ref" span="176:6:176:11">stack</jtok>
<jtok eid="20" type="method_call" span="176:12:176:16">push</jtok>
<jtok eid="20" type="primary_name_ref" span="176:17:176:19">VM</jtok>
<jtok eid="20" type="qualified_name_ref" span="176:20:176:24">TRUE</jtok>
<jtok eid="20" type="primary_name_ref" span="180:5:180:10">stack</jtok>
<jtok eid="20" type="method_call" span="180:11:180:15">push</jtok>
<jtok eid="20" type="primary_name_ref" span="180:16:180:18">o1</jtok>
<jtok eid="20" type="method_call" span="180:19:180:25">equals</jtok>
<jtok eid="20" type="primary_name_ref" span="180:26:180:28">o2</jtok>
<jtok eid="20" type="primary_name_ref" span="180:32:180:34">VM</jtok>
<jtok eid="20" type="qualified_name_ref" span="180:35:180:39">TRUE</jtok>
<jtok eid="20" type="primary_name_ref" span="180:42:180:44">VM</jtok>
<jtok eid="20" type="qualified_name_ref" span="180:45:180:50">FALSE</jtok>
<jtok eid="14" type="primary_name_ref" span="184:3:184:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="184:20:184:23">put</jtok>
<jtok eid="14" type="string_literal" span="184:24:184:27">"+"</jtok>
<jtok eid="14" type="constructor_call" span="184:33:184:44">BstFunction</jtok>
<jtok eid="21" type="block_comment" span="185:4:185:68">/** Pops the top two (integer) literals and pushes their sum. */</jtok>
<jtok eid="22" type="method_name" span="186:16:186:23">execute</jtok>
<jtok eid="22" type="parameter_type" span="186:24:186:32">BstEntry</jtok>
<jtok eid="22" type="parameter_name" span="186:33:186:40">context</jtok>
<jtok eid="22" type="primary_name_ref" span="187:9:187:14">stack</jtok>
<jtok eid="22" type="method_call" span="187:15:187:19">size</jtok>
<jtok eid="22" type="constructor_call" span="188:16:188:27">VMException</jtok>
<jtok eid="22" type="string_literal" span="188:28:188:74">"Not enough operands on stack for operation +"</jtok>
<jtok eid="22" type="class_or_interface_ref" span="190:5:190:11">Object</jtok>
<jtok eid="22" type="local_variable_name" span="190:12:190:14">o2</jtok>
<jtok eid="22" type="primary_name_ref" span="190:17:190:22">stack</jtok>
<jtok eid="22" type="method_call" span="190:23:190:26">pop</jtok>
<jtok eid="22" type="class_or_interface_ref" span="191:5:191:11">Object</jtok>
<jtok eid="22" type="local_variable_name" span="191:12:191:14">o1</jtok>
<jtok eid="22" type="primary_name_ref" span="191:17:191:22">stack</jtok>
<jtok eid="22" type="method_call" span="191:23:191:26">pop</jtok>
<jtok eid="22" type="primary_name_ref" span="193:11:193:13">o1</jtok>
<jtok eid="22" type="class_or_interface_ref" span="193:25:193:32">Integer</jtok>
<jtok eid="22" type="primary_name_ref" span="193:36:193:38">o2</jtok>
<jtok eid="22" type="class_or_interface_ref" span="193:50:193:57">Integer</jtok>
<jtok eid="22" type="constructor_call" span="194:16:194:27">VMException</jtok>
<jtok eid="22" type="string_literal" span="194:28:194:66">"Can only compare two integers with +"</jtok>
<jtok eid="22" type="primary_name_ref" span="197:5:197:10">stack</jtok>
<jtok eid="22" type="method_call" span="197:11:197:15">push</jtok>
<jtok eid="22" type="constructor_call" span="197:20:197:27">Integer</jtok>
<jtok eid="22" type="class_or_interface_ref" span="197:30:197:37">Integer</jtok>
<jtok eid="22" type="primary_name_ref" span="197:39:197:41">o1</jtok>
<jtok eid="22" type="method_call" span="197:43:197:51">intValue</jtok>
<jtok eid="22" type="class_or_interface_ref" span="197:58:197:65">Integer</jtok>
<jtok eid="22" type="primary_name_ref" span="197:67:197:69">o2</jtok>
<jtok eid="22" type="method_call" span="197:71:197:79">intValue</jtok>
<jtok eid="14" type="primary_name_ref" span="201:3:201:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="201:20:201:23">put</jtok>
<jtok eid="14" type="string_literal" span="201:24:201:27">"-"</jtok>
<jtok eid="14" type="constructor_call" span="201:33:201:44">BstFunction</jtok>
<jtok eid="23" type="block_comment" span="202:4:205:7">/**
			 * Pops the top two (integer) literals and pushes their difference
			 * (the first subtracted from the second).
			 */</jtok>
<jtok eid="24" type="method_name" span="206:16:206:23">execute</jtok>
<jtok eid="24" type="parameter_type" span="206:24:206:32">BstEntry</jtok>
<jtok eid="24" type="parameter_name" span="206:33:206:40">context</jtok>
<jtok eid="24" type="primary_name_ref" span="207:9:207:14">stack</jtok>
<jtok eid="24" type="method_call" span="207:15:207:19">size</jtok>
<jtok eid="24" type="constructor_call" span="208:16:208:27">VMException</jtok>
<jtok eid="24" type="string_literal" span="208:28:208:74">"Not enough operands on stack for operation -"</jtok>
<jtok eid="24" type="class_or_interface_ref" span="210:5:210:11">Object</jtok>
<jtok eid="24" type="local_variable_name" span="210:12:210:14">o2</jtok>
<jtok eid="24" type="primary_name_ref" span="210:17:210:22">stack</jtok>
<jtok eid="24" type="method_call" span="210:23:210:26">pop</jtok>
<jtok eid="24" type="class_or_interface_ref" span="211:5:211:11">Object</jtok>
<jtok eid="24" type="local_variable_name" span="211:12:211:14">o1</jtok>
<jtok eid="24" type="primary_name_ref" span="211:17:211:22">stack</jtok>
<jtok eid="24" type="method_call" span="211:23:211:26">pop</jtok>
<jtok eid="24" type="primary_name_ref" span="213:11:213:13">o1</jtok>
<jtok eid="24" type="class_or_interface_ref" span="213:25:213:32">Integer</jtok>
<jtok eid="24" type="primary_name_ref" span="213:36:213:38">o2</jtok>
<jtok eid="24" type="class_or_interface_ref" span="213:50:213:57">Integer</jtok>
<jtok eid="24" type="constructor_call" span="214:16:214:27">VMException</jtok>
<jtok eid="24" type="string_literal" span="214:28:214:67">"Can only subtract two integers with -"</jtok>
<jtok eid="24" type="primary_name_ref" span="217:5:217:10">stack</jtok>
<jtok eid="24" type="method_call" span="217:11:217:15">push</jtok>
<jtok eid="24" type="constructor_call" span="217:20:217:27">Integer</jtok>
<jtok eid="24" type="class_or_interface_ref" span="217:30:217:37">Integer</jtok>
<jtok eid="24" type="primary_name_ref" span="217:39:217:41">o1</jtok>
<jtok eid="24" type="method_call" span="217:43:217:51">intValue</jtok>
<jtok eid="24" type="class_or_interface_ref" span="217:58:217:65">Integer</jtok>
<jtok eid="24" type="primary_name_ref" span="217:67:217:69">o2</jtok>
<jtok eid="24" type="method_call" span="217:71:217:79">intValue</jtok>
<jtok eid="14" type="primary_name_ref" span="221:3:221:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="221:20:221:23">put</jtok>
<jtok eid="14" type="string_literal" span="221:24:221:27">"*"</jtok>
<jtok eid="14" type="constructor_call" span="221:33:221:44">BstFunction</jtok>
<jtok eid="25" type="block_comment" span="222:4:226:7">/**
			 * Pops the top two (string) literals, concatenates them (in reverse
			 * order, that is, the order in which pushed), and pushes the
			 * resulting string.
			 */</jtok>
<jtok eid="26" type="method_name" span="227:16:227:23">execute</jtok>
<jtok eid="26" type="parameter_type" span="227:24:227:32">BstEntry</jtok>
<jtok eid="26" type="parameter_name" span="227:33:227:40">context</jtok>
<jtok eid="26" type="primary_name_ref" span="228:9:228:14">stack</jtok>
<jtok eid="26" type="method_call" span="228:15:228:19">size</jtok>
<jtok eid="26" type="constructor_call" span="229:16:229:27">VMException</jtok>
<jtok eid="26" type="string_literal" span="229:28:229:74">"Not enough operands on stack for operation *"</jtok>
<jtok eid="26" type="class_or_interface_ref" span="231:5:231:11">Object</jtok>
<jtok eid="26" type="local_variable_name" span="231:12:231:14">o2</jtok>
<jtok eid="26" type="primary_name_ref" span="231:17:231:22">stack</jtok>
<jtok eid="26" type="method_call" span="231:23:231:26">pop</jtok>
<jtok eid="26" type="class_or_interface_ref" span="232:5:232:11">Object</jtok>
<jtok eid="26" type="local_variable_name" span="232:12:232:14">o1</jtok>
<jtok eid="26" type="primary_name_ref" span="232:17:232:22">stack</jtok>
<jtok eid="26" type="method_call" span="232:23:232:26">pop</jtok>
<jtok eid="26" type="primary_name_ref" span="234:11:234:13">o1</jtok>
<jtok eid="26" type="class_or_interface_ref" span="234:25:234:31">String</jtok>
<jtok eid="26" type="primary_name_ref" span="234:35:234:37">o2</jtok>
<jtok eid="26" type="class_or_interface_ref" span="234:49:234:55">String</jtok>
<jtok eid="26" type="constructor_call" span="235:16:235:27">VMException</jtok>
<jtok eid="26" type="string_literal" span="235:28:235:68">"Can only concatenate two String with *"</jtok>
<jtok eid="26" type="primary_name_ref" span="238:5:238:10">stack</jtok>
<jtok eid="26" type="method_call" span="238:11:238:15">push</jtok>
<jtok eid="26" type="class_or_interface_ref" span="238:18:238:24">String</jtok>
<jtok eid="26" type="primary_name_ref" span="238:26:238:28">o1</jtok>
<jtok eid="26" type="class_or_interface_ref" span="238:34:238:40">String</jtok>
<jtok eid="26" type="primary_name_ref" span="238:42:238:44">o2</jtok>
<jtok eid="14" type="primary_name_ref" span="242:3:242:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="242:20:242:23">put</jtok>
<jtok eid="14" type="string_literal" span="242:24:242:28">":="</jtok>
<jtok eid="14" type="constructor_call" span="242:34:242:45">BstFunction</jtok>
<jtok eid="27" type="block_comment" span="243:4:246:7">/**
			 * Pops the top two literals and assigns to the first (which must be
			 * a global or entry variable) the value of the second.
			 */</jtok>
<jtok eid="28" type="method_name" span="247:16:247:23">execute</jtok>
<jtok eid="28" type="parameter_type" span="247:24:247:32">BstEntry</jtok>
<jtok eid="28" type="parameter_name" span="247:33:247:40">context</jtok>
<jtok eid="28" type="primary_name_ref" span="248:9:248:14">stack</jtok>
<jtok eid="28" type="method_call" span="248:15:248:19">size</jtok>
<jtok eid="28" type="constructor_call" span="249:16:249:27">VMException</jtok>
<jtok eid="28" type="string_literal" span="249:28:249:58">"Invalid call to operation :="</jtok>
<jtok eid="28" type="class_or_interface_ref" span="251:5:251:11">Object</jtok>
<jtok eid="28" type="local_variable_name" span="251:12:251:14">o1</jtok>
<jtok eid="28" type="primary_name_ref" span="251:17:251:22">stack</jtok>
<jtok eid="28" type="method_call" span="251:23:251:26">pop</jtok>
<jtok eid="28" type="class_or_interface_ref" span="252:5:252:11">Object</jtok>
<jtok eid="28" type="local_variable_name" span="252:12:252:14">o2</jtok>
<jtok eid="28" type="primary_name_ref" span="252:17:252:22">stack</jtok>
<jtok eid="28" type="method_call" span="252:23:252:26">pop</jtok>
<jtok eid="28" type="method_call" span="253:5:253:11">assign</jtok>
<jtok eid="28" type="primary_name_ref" span="253:12:253:19">context</jtok>
<jtok eid="28" type="primary_name_ref" span="253:21:253:23">o1</jtok>
<jtok eid="28" type="primary_name_ref" span="253:25:253:27">o2</jtok>
<jtok eid="14" type="primary_name_ref" span="258:3:258:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="258:20:258:23">put</jtok>
<jtok eid="14" type="string_literal" span="258:24:258:37">"add.period$"</jtok>
<jtok eid="14" type="constructor_call" span="258:43:258:54">BstFunction</jtok>
<jtok eid="29" type="class_or_interface_ref" span="260:4:260:11">Pattern</jtok>
<jtok eid="29" type="field_name" span="260:12:260:13">p</jtok>
<jtok eid="29" type="primary_name_ref" span="260:16:260:23">Pattern</jtok>
<jtok eid="29" type="method_call" span="260:24:260:31">compile</jtok>
<jtok eid="29" type="string_literal" span="260:32:260:65">"([^\\.\\?\\!\\}\\s])(\\}|\\s)*$"</jtok>
<jtok eid="29" type="block_comment" span="262:4:266:7">/**
			 * Pops the top (string) literal, adds a `.' to it if the last non
			 * '}' character isn't a `.', `?', or `!', and pushes this resulting
			 * string.
			 */</jtok>
<jtok eid="30" type="method_name" span="267:16:267:23">execute</jtok>
<jtok eid="30" type="parameter_type" span="267:24:267:32">BstEntry</jtok>
<jtok eid="30" type="parameter_name" span="267:33:267:40">context</jtok>
<jtok eid="30" type="primary_name_ref" span="268:9:268:14">stack</jtok>
<jtok eid="30" type="method_call" span="268:15:268:19">size</jtok>
<jtok eid="30" type="constructor_call" span="269:16:269:27">VMException</jtok>
<jtok eid="30" type="string_literal" span="269:28:269:84">"Not enough operands on stack for operation add.period$"</jtok>
<jtok eid="30" type="class_or_interface_ref" span="271:5:271:11">Object</jtok>
<jtok eid="30" type="local_variable_name" span="271:12:271:14">o1</jtok>
<jtok eid="30" type="primary_name_ref" span="271:17:271:22">stack</jtok>
<jtok eid="30" type="method_call" span="271:23:271:26">pop</jtok>
<jtok eid="30" type="primary_name_ref" span="273:11:273:13">o1</jtok>
<jtok eid="30" type="class_or_interface_ref" span="273:25:273:31">String</jtok>
<jtok eid="30" type="constructor_call" span="274:16:274:27">VMException</jtok>
<jtok eid="30" type="string_literal" span="274:28:274:79">"Can only add a period to a string for add.period$"</jtok>
<jtok eid="30" type="class_or_interface_ref" span="277:5:277:11">String</jtok>
<jtok eid="30" type="local_variable_name" span="277:12:277:13">s</jtok>
<jtok eid="30" type="class_or_interface_ref" span="277:17:277:23">String</jtok>
<jtok eid="30" type="primary_name_ref" span="277:25:277:27">o1</jtok>
<jtok eid="30" type="class_or_interface_ref" span="278:5:278:12">Matcher</jtok>
<jtok eid="30" type="local_variable_name" span="278:13:278:14">m</jtok>
<jtok eid="30" type="primary_name_ref" span="278:17:278:18">p</jtok>
<jtok eid="30" type="method_call" span="278:19:278:26">matcher</jtok>
<jtok eid="30" type="primary_name_ref" span="278:27:278:28">s</jtok>
<jtok eid="30" type="primary_name_ref" span="280:9:280:10">m</jtok>
<jtok eid="30" type="method_call" span="280:11:280:15">find</jtok>
<jtok eid="30" type="class_or_interface_ref" span="281:6:281:18">StringBuffer</jtok>
<jtok eid="30" type="local_variable_name" span="281:19:281:21">sb</jtok>
<jtok eid="30" type="constructor_call" span="281:28:281:40">StringBuffer</jtok>
<jtok eid="30" type="primary_name_ref" span="282:6:282:7">m</jtok>
<jtok eid="30" type="method_call" span="282:8:282:25">appendReplacement</jtok>
<jtok eid="30" type="primary_name_ref" span="282:26:282:28">sb</jtok>
<jtok eid="30" type="primary_name_ref" span="282:30:282:31">m</jtok>
<jtok eid="30" type="method_call" span="282:32:282:37">group</jtok>
<jtok eid="30" type="primary_name_ref" span="283:6:283:8">sb</jtok>
<jtok eid="30" type="method_call" span="283:9:283:15">append</jtok>
<jtok eid="30" type="class_or_interface_ref" span="284:6:284:12">String</jtok>
<jtok eid="30" type="local_variable_name" span="284:13:284:19">group2</jtok>
<jtok eid="30" type="primary_name_ref" span="284:22:284:23">m</jtok>
<jtok eid="30" type="method_call" span="284:24:284:29">group</jtok>
<jtok eid="30" type="primary_name_ref" span="285:10:285:16">group2</jtok>
<jtok eid="30" type="primary_name_ref" span="286:7:286:9">sb</jtok>
<jtok eid="30" type="method_call" span="286:10:286:16">append</jtok>
<jtok eid="30" type="primary_name_ref" span="286:17:286:18">m</jtok>
<jtok eid="30" type="method_call" span="286:19:286:24">group</jtok>
<jtok eid="30" type="primary_name_ref" span="287:6:287:11">stack</jtok>
<jtok eid="30" type="method_call" span="287:12:287:16">push</jtok>
<jtok eid="30" type="primary_name_ref" span="287:17:287:19">sb</jtok>
<jtok eid="30" type="method_call" span="287:20:287:28">toString</jtok>
<jtok eid="30" type="primary_name_ref" span="289:6:289:11">stack</jtok>
<jtok eid="30" type="method_call" span="289:12:289:16">push</jtok>
<jtok eid="30" type="primary_name_ref" span="289:17:289:18">s</jtok>
<jtok eid="14" type="primary_name_ref" span="294:3:294:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="294:20:294:23">put</jtok>
<jtok eid="14" type="string_literal" span="294:24:294:36">"call.type$"</jtok>
<jtok eid="14" type="constructor_call" span="294:42:294:53">BstFunction</jtok>
<jtok eid="31" type="block_comment" span="295:4:304:7">/**
			 * Executes the function whose name is the entry type of an entry.
			 * For example if an entry is of type book, this function executes
			 * the book function. When given as an argument to the ITERATE
			 * command, call.type$ actually produces the output for the entries.
			 * For an entry with an unknown type, it executes the function
			 * default.type. Thus you should define (before the READ command)
			 * one function for each standard entry type as well as a
			 * default.type function.
			 */</jtok>
<jtok eid="32" type="method_name" span="305:16:305:23">execute</jtok>
<jtok eid="32" type="parameter_type" span="305:24:305:32">BstEntry</jtok>
<jtok eid="32" type="parameter_name" span="305:33:305:40">context</jtok>
<jtok eid="32" type="primary_name_ref" span="307:9:307:16">context</jtok>
<jtok eid="32" type="constructor_call" span="308:16:308:27">VMException</jtok>
<jtok eid="32" type="string_literal" span="309:7:309:82">"Call.type$ can only be called from within a context (ITERATE or REVERSE)."</jtok>
<jtok eid="32" type="primary_name_ref" span="311:5:311:7">VM</jtok>
<jtok eid="32" type="method_call" span="311:13:311:20">execute</jtok>
<jtok eid="32" type="primary_name_ref" span="311:21:311:28">context</jtok>
<jtok eid="32" type="qualified_name_ref" span="311:29:311:34">entry</jtok>
<jtok eid="32" type="method_call" span="311:35:311:42">getType</jtok>
<jtok eid="32" type="method_call" span="311:45:311:52">getName</jtok>
<jtok eid="32" type="method_call" span="311:55:311:66">toLowerCase</jtok>
<jtok eid="32" type="primary_name_ref" span="311:70:311:77">context</jtok>
<jtok eid="14" type="primary_name_ref" span="315:3:315:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="315:20:315:23">put</jtok>
<jtok eid="14" type="string_literal" span="315:24:315:38">"change.case$"</jtok>
<jtok eid="14" type="constructor_call" span="315:44:315:62">ChangeCaseFunction</jtok>
<jtok eid="14" type="primary_name_ref" span="317:3:317:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="317:20:317:23">put</jtok>
<jtok eid="14" type="string_literal" span="317:24:317:37">"chr.to.int$"</jtok>
<jtok eid="14" type="constructor_call" span="317:43:317:54">BstFunction</jtok>
<jtok eid="33" type="block_comment" span="318:4:322:7">/**
			 * Pops the top (string) literal, makes sure it's a single
			 * character, converts it to the corresponding ASCII integer, and
			 * pushes this integer.
			 */</jtok>
<jtok eid="34" type="method_name" span="323:16:323:23">execute</jtok>
<jtok eid="34" type="parameter_type" span="323:24:323:32">BstEntry</jtok>
<jtok eid="34" type="parameter_name" span="323:33:323:40">context</jtok>
<jtok eid="34" type="primary_name_ref" span="324:9:324:14">stack</jtok>
<jtok eid="34" type="method_call" span="324:15:324:19">size</jtok>
<jtok eid="34" type="constructor_call" span="325:16:325:27">VMException</jtok>
<jtok eid="34" type="string_literal" span="325:28:325:84">"Not enough operands on stack for operation chr.to.int$"</jtok>
<jtok eid="34" type="class_or_interface_ref" span="327:5:327:11">Object</jtok>
<jtok eid="34" type="local_variable_name" span="327:12:327:14">o1</jtok>
<jtok eid="34" type="primary_name_ref" span="327:17:327:22">stack</jtok>
<jtok eid="34" type="method_call" span="327:23:327:26">pop</jtok>
<jtok eid="34" type="primary_name_ref" span="329:11:329:13">o1</jtok>
<jtok eid="34" type="class_or_interface_ref" span="329:25:329:31">String</jtok>
<jtok eid="34" type="class_or_interface_ref" span="329:37:329:43">String</jtok>
<jtok eid="34" type="primary_name_ref" span="329:45:329:47">o1</jtok>
<jtok eid="34" type="method_call" span="329:49:329:55">length</jtok>
<jtok eid="34" type="constructor_call" span="330:16:330:27">VMException</jtok>
<jtok eid="34" type="string_literal" span="330:28:330:82">"Can only perform chr.to.int$ on string with length 1"</jtok>
<jtok eid="34" type="class_or_interface_ref" span="333:5:333:11">String</jtok>
<jtok eid="34" type="local_variable_name" span="333:12:333:13">s</jtok>
<jtok eid="34" type="class_or_interface_ref" span="333:17:333:23">String</jtok>
<jtok eid="34" type="primary_name_ref" span="333:25:333:27">o1</jtok>
<jtok eid="34" type="primary_name_ref" span="335:5:335:10">stack</jtok>
<jtok eid="34" type="method_call" span="335:11:335:15">push</jtok>
<jtok eid="34" type="constructor_call" span="335:20:335:27">Integer</jtok>
<jtok eid="34" type="primary_name_ref" span="335:28:335:29">s</jtok>
<jtok eid="34" type="method_call" span="335:30:335:36">charAt</jtok>
<jtok eid="14" type="primary_name_ref" span="339:3:339:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="339:20:339:23">put</jtok>
<jtok eid="14" type="string_literal" span="339:24:339:31">"cite$"</jtok>
<jtok eid="14" type="constructor_call" span="339:37:339:48">BstFunction</jtok>
<jtok eid="35" type="block_comment" span="340:4:343:7">/**
			 * Pushes the string that was the \cite-command argument for this
			 * entry.
			 */</jtok>
<jtok eid="36" type="method_name" span="344:16:344:23">execute</jtok>
<jtok eid="36" type="parameter_type" span="344:24:344:32">BstEntry</jtok>
<jtok eid="36" type="parameter_name" span="344:33:344:40">context</jtok>
<jtok eid="36" type="primary_name_ref" span="345:5:345:10">stack</jtok>
<jtok eid="36" type="method_call" span="345:11:345:15">push</jtok>
<jtok eid="36" type="primary_name_ref" span="345:16:345:23">context</jtok>
<jtok eid="36" type="qualified_name_ref" span="345:24:345:29">entry</jtok>
<jtok eid="36" type="method_call" span="345:30:345:40">getCiteKey</jtok>
<jtok eid="14" type="primary_name_ref" span="349:3:349:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="349:20:349:23">put</jtok>
<jtok eid="14" type="string_literal" span="349:24:349:36">"duplicate$"</jtok>
<jtok eid="14" type="constructor_call" span="349:42:349:53">BstFunction</jtok>
<jtok eid="37" type="block_comment" span="350:4:352:7">/**
			 * Pops the top literal from the stack and pushes two copies of it.
			 */</jtok>
<jtok eid="38" type="method_name" span="353:16:353:23">execute</jtok>
<jtok eid="38" type="parameter_type" span="353:24:353:32">BstEntry</jtok>
<jtok eid="38" type="parameter_name" span="353:33:353:40">context</jtok>
<jtok eid="38" type="primary_name_ref" span="354:9:354:14">stack</jtok>
<jtok eid="38" type="method_call" span="354:15:354:19">size</jtok>
<jtok eid="38" type="constructor_call" span="355:16:355:27">VMException</jtok>
<jtok eid="38" type="string_literal" span="355:28:355:83">"Not enough operands on stack for operation duplicate$"</jtok>
<jtok eid="38" type="class_or_interface_ref" span="357:5:357:11">Object</jtok>
<jtok eid="38" type="local_variable_name" span="357:12:357:14">o1</jtok>
<jtok eid="38" type="primary_name_ref" span="357:17:357:22">stack</jtok>
<jtok eid="38" type="method_call" span="357:23:357:26">pop</jtok>
<jtok eid="38" type="primary_name_ref" span="359:5:359:10">stack</jtok>
<jtok eid="38" type="method_call" span="359:11:359:15">push</jtok>
<jtok eid="38" type="primary_name_ref" span="359:16:359:18">o1</jtok>
<jtok eid="38" type="primary_name_ref" span="360:5:360:10">stack</jtok>
<jtok eid="38" type="method_call" span="360:11:360:15">push</jtok>
<jtok eid="38" type="primary_name_ref" span="360:16:360:18">o1</jtok>
<jtok eid="14" type="primary_name_ref" span="364:3:364:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="364:20:364:23">put</jtok>
<jtok eid="14" type="string_literal" span="364:24:364:32">"empty$"</jtok>
<jtok eid="14" type="constructor_call" span="364:38:364:49">BstFunction</jtok>
<jtok eid="39" type="block_comment" span="365:4:369:7">/**
			 * Pops the top literal and pushes the integer 1 if it's a missing
			 * field or a string having no non-white-space characters, 0
			 * otherwise.
			 */</jtok>
<jtok eid="40" type="method_name" span="370:16:370:23">execute</jtok>
<jtok eid="40" type="parameter_type" span="370:24:370:32">BstEntry</jtok>
<jtok eid="40" type="parameter_name" span="370:33:370:40">context</jtok>
<jtok eid="40" type="primary_name_ref" span="371:9:371:14">stack</jtok>
<jtok eid="40" type="method_call" span="371:15:371:19">size</jtok>
<jtok eid="40" type="constructor_call" span="372:16:372:27">VMException</jtok>
<jtok eid="40" type="string_literal" span="372:28:372:79">"Not enough operands on stack for operation empty$"</jtok>
<jtok eid="40" type="class_or_interface_ref" span="374:5:374:11">Object</jtok>
<jtok eid="40" type="local_variable_name" span="374:12:374:14">o1</jtok>
<jtok eid="40" type="primary_name_ref" span="374:17:374:22">stack</jtok>
<jtok eid="40" type="method_call" span="374:23:374:26">pop</jtok>
<jtok eid="40" type="primary_name_ref" span="376:9:376:11">o1</jtok>
<jtok eid="40" type="primary_name_ref" span="377:6:377:11">stack</jtok>
<jtok eid="40" type="method_call" span="377:12:377:16">push</jtok>
<jtok eid="40" type="primary_name_ref" span="377:17:377:19">VM</jtok>
<jtok eid="40" type="qualified_name_ref" span="377:20:377:24">TRUE</jtok>
<jtok eid="40" type="primary_name_ref" span="381:11:381:13">o1</jtok>
<jtok eid="40" type="class_or_interface_ref" span="381:25:381:31">String</jtok>
<jtok eid="40" type="constructor_call" span="382:16:382:27">VMException</jtok>
<jtok eid="40" type="string_literal" span="382:28:382:68">"Operand does not match function empty$"</jtok>
<jtok eid="40" type="class_or_interface_ref" span="385:5:385:11">String</jtok>
<jtok eid="40" type="local_variable_name" span="385:12:385:13">s</jtok>
<jtok eid="40" type="class_or_interface_ref" span="385:17:385:23">String</jtok>
<jtok eid="40" type="primary_name_ref" span="385:25:385:27">o1</jtok>
<jtok eid="40" type="primary_name_ref" span="387:5:387:10">stack</jtok>
<jtok eid="40" type="method_call" span="387:11:387:15">push</jtok>
<jtok eid="40" type="primary_name_ref" span="387:16:387:17">s</jtok>
<jtok eid="40" type="method_call" span="387:18:387:22">trim</jtok>
<jtok eid="40" type="method_call" span="387:25:387:31">equals</jtok>
<jtok eid="40" type="string_literal" span="387:32:387:34">""</jtok>
<jtok eid="40" type="primary_name_ref" span="387:38:387:40">VM</jtok>
<jtok eid="40" type="qualified_name_ref" span="387:41:387:45">TRUE</jtok>
<jtok eid="40" type="primary_name_ref" span="387:48:387:50">VM</jtok>
<jtok eid="40" type="qualified_name_ref" span="387:51:387:56">FALSE</jtok>
<jtok eid="14" type="primary_name_ref" span="391:3:391:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="391:20:391:23">put</jtok>
<jtok eid="14" type="string_literal" span="391:24:391:38">"format.name$"</jtok>
<jtok eid="14" type="constructor_call" span="391:44:391:62">FormatNameFunction</jtok>
<jtok eid="14" type="primary_name_ref" span="393:3:393:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="393:20:393:23">put</jtok>
<jtok eid="14" type="string_literal" span="393:24:393:29">"if$"</jtok>
<jtok eid="14" type="constructor_call" span="393:35:393:46">BstFunction</jtok>
<jtok eid="41" type="block_comment" span="394:4:399:7">/**
			 * Pops the top three literals (they are two function literals and
			 * an integer literal, in that order); if the integer is greater
			 * than 0, it executes the second literal, else it executes the
			 * first.
			 */</jtok>
<jtok eid="42" type="method_name" span="400:16:400:23">execute</jtok>
<jtok eid="42" type="parameter_type" span="400:24:400:32">BstEntry</jtok>
<jtok eid="42" type="parameter_name" span="400:33:400:40">context</jtok>
<jtok eid="42" type="primary_name_ref" span="401:9:401:14">stack</jtok>
<jtok eid="42" type="method_call" span="401:15:401:19">size</jtok>
<jtok eid="42" type="constructor_call" span="402:16:402:27">VMException</jtok>
<jtok eid="42" type="string_literal" span="402:28:402:74">"Not enough operands on stack for operation ="</jtok>
<jtok eid="42" type="class_or_interface_ref" span="404:5:404:11">Object</jtok>
<jtok eid="42" type="local_variable_name" span="404:12:404:14">f1</jtok>
<jtok eid="42" type="primary_name_ref" span="404:17:404:22">stack</jtok>
<jtok eid="42" type="method_call" span="404:23:404:26">pop</jtok>
<jtok eid="42" type="class_or_interface_ref" span="405:5:405:11">Object</jtok>
<jtok eid="42" type="local_variable_name" span="405:12:405:14">f2</jtok>
<jtok eid="42" type="primary_name_ref" span="405:17:405:22">stack</jtok>
<jtok eid="42" type="method_call" span="405:23:405:26">pop</jtok>
<jtok eid="42" type="class_or_interface_ref" span="406:5:406:11">Object</jtok>
<jtok eid="42" type="local_variable_name" span="406:12:406:13">i</jtok>
<jtok eid="42" type="primary_name_ref" span="406:16:406:21">stack</jtok>
<jtok eid="42" type="method_call" span="406:22:406:25">pop</jtok>
<jtok eid="42" type="primary_name_ref" span="408:11:408:13">f1</jtok>
<jtok eid="42" type="class_or_interface_ref" span="408:25:408:35">Identifier</jtok>
<jtok eid="42" type="primary_name_ref" span="408:39:408:41">f1</jtok>
<jtok eid="42" type="class_or_interface_ref" span="408:53:408:57">Tree</jtok>
<jtok eid="42" type="primary_name_ref" span="409:10:409:12">f2</jtok>
<jtok eid="42" type="class_or_interface_ref" span="409:24:409:34">Identifier</jtok>
<jtok eid="42" type="primary_name_ref" span="409:38:409:40">f2</jtok>
<jtok eid="42" type="class_or_interface_ref" span="409:52:409:56">Tree</jtok>
<jtok eid="42" type="primary_name_ref" span="409:62:409:63">i</jtok>
<jtok eid="42" type="class_or_interface_ref" span="409:75:409:82">Integer</jtok>
<jtok eid="42" type="constructor_call" span="410:16:410:27">VMException</jtok>
<jtok eid="42" type="string_literal" span="410:28:410:77">"Expecting two functions and an integer for if$."</jtok>
<jtok eid="42" type="class_or_interface_ref" span="413:5:413:11">Object</jtok>
<jtok eid="42" type="local_variable_name" span="413:12:413:17">toExe</jtok>
<jtok eid="42" type="class_or_interface_ref" span="414:11:414:18">Integer</jtok>
<jtok eid="42" type="primary_name_ref" span="414:20:414:21">i</jtok>
<jtok eid="42" type="method_call" span="414:23:414:31">intValue</jtok>
<jtok eid="42" type="primary_name_ref" span="415:6:415:11">toExe</jtok>
<jtok eid="42" type="primary_name_ref" span="415:14:415:16">f2</jtok>
<jtok eid="42" type="primary_name_ref" span="417:6:417:11">toExe</jtok>
<jtok eid="42" type="primary_name_ref" span="417:14:417:16">f1</jtok>
<jtok eid="42" type="primary_name_ref" span="419:5:419:7">VM</jtok>
<jtok eid="42" type="method_call" span="419:13:419:29">executeInContext</jtok>
<jtok eid="42" type="primary_name_ref" span="419:30:419:35">toExe</jtok>
<jtok eid="42" type="primary_name_ref" span="419:37:419:44">context</jtok>
<jtok eid="14" type="primary_name_ref" span="423:3:423:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="423:20:423:23">put</jtok>
<jtok eid="14" type="string_literal" span="423:24:423:37">"int.to.chr$"</jtok>
<jtok eid="14" type="constructor_call" span="423:43:423:54">BstFunction</jtok>
<jtok eid="43" type="block_comment" span="424:4:428:7">/**
			 * Pops the top (integer) literal, interpreted as the ASCII integer
			 * value of a single character, converts it to the corresponding
			 * single-character string, and pushes this string.
			 */</jtok>
<jtok eid="44" type="method_name" span="429:16:429:23">execute</jtok>
<jtok eid="44" type="parameter_type" span="429:24:429:32">BstEntry</jtok>
<jtok eid="44" type="parameter_name" span="429:33:429:40">context</jtok>
<jtok eid="44" type="primary_name_ref" span="430:9:430:14">stack</jtok>
<jtok eid="44" type="method_call" span="430:15:430:19">size</jtok>
<jtok eid="44" type="constructor_call" span="431:16:431:27">VMException</jtok>
<jtok eid="44" type="string_literal" span="431:28:431:84">"Not enough operands on stack for operation int.to.chr$"</jtok>
<jtok eid="44" type="class_or_interface_ref" span="433:5:433:11">Object</jtok>
<jtok eid="44" type="local_variable_name" span="433:12:433:14">o1</jtok>
<jtok eid="44" type="primary_name_ref" span="433:17:433:22">stack</jtok>
<jtok eid="44" type="method_call" span="433:23:433:26">pop</jtok>
<jtok eid="44" type="primary_name_ref" span="435:11:435:13">o1</jtok>
<jtok eid="44" type="class_or_interface_ref" span="435:25:435:32">Integer</jtok>
<jtok eid="44" type="constructor_call" span="436:16:436:27">VMException</jtok>
<jtok eid="44" type="string_literal" span="436:28:436:82">"Can only perform operation int.to.chr$ on an Integer"</jtok>
<jtok eid="44" type="class_or_interface_ref" span="439:5:439:12">Integer</jtok>
<jtok eid="44" type="local_variable_name" span="439:13:439:14">i</jtok>
<jtok eid="44" type="class_or_interface_ref" span="439:18:439:25">Integer</jtok>
<jtok eid="44" type="primary_name_ref" span="439:27:439:29">o1</jtok>
<jtok eid="44" type="primary_name_ref" span="441:5:441:10">stack</jtok>
<jtok eid="44" type="method_call" span="441:11:441:15">push</jtok>
<jtok eid="44" type="primary_name_ref" span="441:16:441:22">String</jtok>
<jtok eid="44" type="method_call" span="441:23:441:30">valueOf</jtok>
<jtok eid="44" type="primary_name_ref" span="441:38:441:39">i</jtok>
<jtok eid="44" type="method_call" span="441:40:441:48">intValue</jtok>
<jtok eid="14" type="primary_name_ref" span="445:3:445:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="445:20:445:23">put</jtok>
<jtok eid="14" type="string_literal" span="445:24:445:37">"int.to.str$"</jtok>
<jtok eid="14" type="constructor_call" span="445:43:445:54">BstFunction</jtok>
<jtok eid="45" type="block_comment" span="446:4:449:7">/**
			 * Pops the top (integer) literal, converts it to its (unique)
			 * string equivalent, and pushes this string.
			 */</jtok>
<jtok eid="46" type="method_name" span="450:16:450:23">execute</jtok>
<jtok eid="46" type="parameter_type" span="450:24:450:32">BstEntry</jtok>
<jtok eid="46" type="parameter_name" span="450:33:450:40">context</jtok>
<jtok eid="46" type="primary_name_ref" span="451:9:451:14">stack</jtok>
<jtok eid="46" type="method_call" span="451:15:451:19">size</jtok>
<jtok eid="46" type="constructor_call" span="452:16:452:27">VMException</jtok>
<jtok eid="46" type="string_literal" span="452:28:452:84">"Not enough operands on stack for operation int.to.str$"</jtok>
<jtok eid="46" type="class_or_interface_ref" span="454:5:454:11">Object</jtok>
<jtok eid="46" type="local_variable_name" span="454:12:454:14">o1</jtok>
<jtok eid="46" type="primary_name_ref" span="454:17:454:22">stack</jtok>
<jtok eid="46" type="method_call" span="454:23:454:26">pop</jtok>
<jtok eid="46" type="primary_name_ref" span="456:11:456:13">o1</jtok>
<jtok eid="46" type="class_or_interface_ref" span="456:25:456:32">Integer</jtok>
<jtok eid="46" type="constructor_call" span="457:16:457:27">VMException</jtok>
<jtok eid="46" type="string_literal" span="458:7:458:69">"Can only transform an integer to an string using int.to.str$"</jtok>
<jtok eid="46" type="primary_name_ref" span="461:5:461:10">stack</jtok>
<jtok eid="46" type="method_call" span="461:11:461:15">push</jtok>
<jtok eid="46" type="class_or_interface_ref" span="461:18:461:25">Integer</jtok>
<jtok eid="46" type="primary_name_ref" span="461:27:461:29">o1</jtok>
<jtok eid="46" type="method_call" span="461:31:461:39">toString</jtok>
<jtok eid="14" type="primary_name_ref" span="465:3:465:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="465:20:465:23">put</jtok>
<jtok eid="14" type="string_literal" span="465:24:465:34">"missing$"</jtok>
<jtok eid="14" type="constructor_call" span="465:40:465:51">BstFunction</jtok>
<jtok eid="47" type="block_comment" span="466:4:469:7">/**
			 * Pops the top literal and pushes the integer 1 if it's a missing
			 * field, 0 otherwise.
			 */</jtok>
<jtok eid="48" type="method_name" span="470:16:470:23">execute</jtok>
<jtok eid="48" type="parameter_type" span="470:24:470:32">BstEntry</jtok>
<jtok eid="48" type="parameter_name" span="470:33:470:40">context</jtok>
<jtok eid="48" type="primary_name_ref" span="471:9:471:14">stack</jtok>
<jtok eid="48" type="method_call" span="471:15:471:19">size</jtok>
<jtok eid="48" type="constructor_call" span="472:16:472:27">VMException</jtok>
<jtok eid="48" type="string_literal" span="472:28:472:81">"Not enough operands on stack for operation missing$"</jtok>
<jtok eid="48" type="class_or_interface_ref" span="474:5:474:11">Object</jtok>
<jtok eid="48" type="local_variable_name" span="474:12:474:14">o1</jtok>
<jtok eid="48" type="primary_name_ref" span="474:17:474:22">stack</jtok>
<jtok eid="48" type="method_call" span="474:23:474:26">pop</jtok>
<jtok eid="48" type="primary_name_ref" span="476:9:476:11">o1</jtok>
<jtok eid="48" type="primary_name_ref" span="477:6:477:11">stack</jtok>
<jtok eid="48" type="method_call" span="477:12:477:16">push</jtok>
<jtok eid="48" type="primary_name_ref" span="477:17:477:19">VM</jtok>
<jtok eid="48" type="qualified_name_ref" span="477:20:477:24">TRUE</jtok>
<jtok eid="48" type="primary_name_ref" span="481:11:481:13">o1</jtok>
<jtok eid="48" type="class_or_interface_ref" span="481:25:481:31">String</jtok>
<jtok eid="48" type="method_call" span="482:6:482:10">warn</jtok>
<jtok eid="48" type="string_literal" span="482:11:482:64">"Not a string or missing field in operation missing$"</jtok>
<jtok eid="48" type="primary_name_ref" span="483:6:483:11">stack</jtok>
<jtok eid="48" type="method_call" span="483:12:483:16">push</jtok>
<jtok eid="48" type="primary_name_ref" span="483:17:483:19">VM</jtok>
<jtok eid="48" type="qualified_name_ref" span="483:20:483:24">TRUE</jtok>
<jtok eid="48" type="primary_name_ref" span="487:5:487:10">stack</jtok>
<jtok eid="48" type="method_call" span="487:11:487:15">push</jtok>
<jtok eid="48" type="primary_name_ref" span="487:16:487:18">VM</jtok>
<jtok eid="48" type="qualified_name_ref" span="487:19:487:24">FALSE</jtok>
<jtok eid="14" type="primary_name_ref" span="491:3:491:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="491:20:491:23">put</jtok>
<jtok eid="14" type="string_literal" span="491:24:491:34">"newline$"</jtok>
<jtok eid="14" type="constructor_call" span="491:40:491:51">BstFunction</jtok>
<jtok eid="49" type="block_comment" span="492:4:498:7">/**
			 * Writes onto the bbl file what's accumulated in the output buffer.
			 * It writes a blank line if and only if the output buffer is empty.
			 * Since write$ does reasonable line breaking, you should use this
			 * function only when you want a blank line or an explicit line
			 * break.
			 */</jtok>
<jtok eid="50" type="method_name" span="499:16:499:23">execute</jtok>
<jtok eid="50" type="parameter_type" span="499:24:499:32">BstEntry</jtok>
<jtok eid="50" type="parameter_name" span="499:33:499:40">context</jtok>
<jtok eid="50" type="primary_name_ref" span="500:5:500:7">VM</jtok>
<jtok eid="50" type="qualified_name_ref" span="500:13:500:16">bbl</jtok>
<jtok eid="50" type="method_call" span="500:17:500:23">append</jtok>
<jtok eid="14" type="primary_name_ref" span="504:3:504:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="504:20:504:23">put</jtok>
<jtok eid="14" type="string_literal" span="504:24:504:36">"num.names$"</jtok>
<jtok eid="14" type="constructor_call" span="504:42:504:53">BstFunction</jtok>
<jtok eid="51" type="block_comment" span="505:4:510:7">/**
			 * Pops the top (string) literal and pushes the number of names the
			 * string represents one plus the number of occurrences of the
			 * substring "and" (ignoring case differences) surrounded by
			 * non-null white-space at the top brace level.
			 */</jtok>
<jtok eid="52" type="method_name" span="511:16:511:23">execute</jtok>
<jtok eid="52" type="parameter_type" span="511:24:511:32">BstEntry</jtok>
<jtok eid="52" type="parameter_name" span="511:33:511:40">context</jtok>
<jtok eid="52" type="primary_name_ref" span="512:9:512:14">stack</jtok>
<jtok eid="52" type="method_call" span="512:15:512:19">size</jtok>
<jtok eid="52" type="constructor_call" span="513:16:513:27">VMException</jtok>
<jtok eid="52" type="string_literal" span="513:28:513:83">"Not enough operands on stack for operation num.names$"</jtok>
<jtok eid="52" type="class_or_interface_ref" span="515:5:515:11">Object</jtok>
<jtok eid="52" type="local_variable_name" span="515:12:515:14">o1</jtok>
<jtok eid="52" type="primary_name_ref" span="515:17:515:22">stack</jtok>
<jtok eid="52" type="method_call" span="515:23:515:26">pop</jtok>
<jtok eid="52" type="primary_name_ref" span="517:11:517:13">o1</jtok>
<jtok eid="52" type="class_or_interface_ref" span="517:25:517:31">String</jtok>
<jtok eid="52" type="constructor_call" span="518:16:518:27">VMException</jtok>
<jtok eid="52" type="string_literal" span="518:28:518:82">"Need a string at the top of the stack for num.names$"</jtok>
<jtok eid="52" type="class_or_interface_ref" span="520:5:520:11">String</jtok>
<jtok eid="52" type="local_variable_name" span="520:12:520:13">s</jtok>
<jtok eid="52" type="class_or_interface_ref" span="520:17:520:23">String</jtok>
<jtok eid="52" type="primary_name_ref" span="520:25:520:27">o1</jtok>
<jtok eid="52" type="primary_name_ref" span="522:5:522:10">stack</jtok>
<jtok eid="52" type="method_call" span="522:11:522:15">push</jtok>
<jtok eid="52" type="constructor_call" span="522:20:522:27">Integer</jtok>
<jtok eid="52" type="primary_name_ref" span="522:28:522:38">AuthorList</jtok>
<jtok eid="52" type="method_call" span="522:39:522:52">getAuthorList</jtok>
<jtok eid="52" type="primary_name_ref" span="522:53:522:54">s</jtok>
<jtok eid="52" type="method_call" span="522:56:522:60">size</jtok>
<jtok eid="14" type="primary_name_ref" span="526:3:526:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="526:20:526:23">put</jtok>
<jtok eid="14" type="string_literal" span="526:24:526:30">"pop$"</jtok>
<jtok eid="14" type="constructor_call" span="526:36:526:47">BstFunction</jtok>
<jtok eid="53" type="block_comment" span="527:4:530:7">/**
			 * Pops the top of the stack but doesn't print it; this gets rid of
			 * an unwanted stack literal.
			 */</jtok>
<jtok eid="54" type="method_name" span="531:16:531:23">execute</jtok>
<jtok eid="54" type="parameter_type" span="531:24:531:32">BstEntry</jtok>
<jtok eid="54" type="parameter_name" span="531:33:531:40">context</jtok>
<jtok eid="54" type="primary_name_ref" span="532:5:532:10">stack</jtok>
<jtok eid="54" type="method_call" span="532:11:532:14">pop</jtok>
<jtok eid="14" type="primary_name_ref" span="536:3:536:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="536:20:536:23">put</jtok>
<jtok eid="14" type="string_literal" span="536:24:536:35">"preamble$"</jtok>
<jtok eid="14" type="constructor_call" span="536:41:536:52">BstFunction</jtok>
<jtok eid="55" type="block_comment" span="537:4:543:7">/**
			 * The |built_in| function {\.{preamble\$}} pushes onto the stack
			 * the concatenation of all the \.{preamble} strings read from the
			 * database files. (or the empty string if there where none)
			 * 
			 * @PREAMBLE strings read from the database files.
			 */</jtok>
<jtok eid="56" type="method_name" span="544:16:544:23">execute</jtok>
<jtok eid="56" type="parameter_type" span="544:24:544:32">BstEntry</jtok>
<jtok eid="56" type="parameter_name" span="544:33:544:40">context</jtok>
<jtok eid="56" type="primary_name_ref" span="545:9:545:17">preamble</jtok>
<jtok eid="56" type="primary_name_ref" span="546:6:546:11">stack</jtok>
<jtok eid="56" type="method_call" span="546:12:546:16">push</jtok>
<jtok eid="56" type="primary_name_ref" span="546:17:546:25">preamble</jtok>
<jtok eid="56" type="primary_name_ref" span="548:6:548:11">stack</jtok>
<jtok eid="56" type="method_call" span="548:12:548:16">push</jtok>
<jtok eid="56" type="string_literal" span="548:17:548:19">""</jtok>
<jtok eid="14" type="block_comment" span="554:3:560:6">/**
		 * Pops the top (string) literal, removes nonalphanumeric characters
		 * except for white-space characters and hyphens and ties (these all get
		 * converted to a space), removes certain alphabetic characters
		 * contained in the control sequences associated with a \special
		 * character", and pushes the resulting string.
		 */</jtok>
<jtok eid="14" type="primary_name_ref" span="561:3:561:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="561:20:561:23">put</jtok>
<jtok eid="14" type="string_literal" span="561:24:561:33">"purify$"</jtok>
<jtok eid="14" type="constructor_call" span="561:39:561:53">PurifyFunction</jtok>
<jtok eid="14" type="primary_name_ref" span="563:3:563:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="563:20:563:23">put</jtok>
<jtok eid="14" type="string_literal" span="563:24:563:32">"quote$"</jtok>
<jtok eid="14" type="constructor_call" span="563:38:563:49">BstFunction</jtok>
<jtok eid="57" type="block_comment" span="564:4:566:7">/**
			 * Pushes the string consisting of the double-quote character.
			 */</jtok>
<jtok eid="58" type="method_name" span="567:16:567:23">execute</jtok>
<jtok eid="58" type="parameter_type" span="567:24:567:32">BstEntry</jtok>
<jtok eid="58" type="parameter_name" span="567:33:567:40">context</jtok>
<jtok eid="58" type="primary_name_ref" span="568:5:568:10">stack</jtok>
<jtok eid="58" type="method_call" span="568:11:568:15">push</jtok>
<jtok eid="58" type="string_literal" span="568:16:568:20">"\""</jtok>
<jtok eid="14" type="primary_name_ref" span="572:3:572:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="572:20:572:23">put</jtok>
<jtok eid="14" type="string_literal" span="572:24:572:31">"skip$"</jtok>
<jtok eid="14" type="constructor_call" span="572:37:572:48">BstFunction</jtok>
<jtok eid="59" type="block_comment" span="573:4:575:7">/**
			 * Is a no-op.
			 */</jtok>
<jtok eid="60" type="method_name" span="576:16:576:23">execute</jtok>
<jtok eid="60" type="parameter_type" span="576:24:576:32">BstEntry</jtok>
<jtok eid="60" type="parameter_name" span="576:33:576:40">context</jtok>
<jtok eid="60" type="line_comment" span="577:5:577:28">// Nothing to do! Yeah!</jtok>
<jtok eid="14" type="primary_name_ref" span="581:3:581:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="581:20:581:23">put</jtok>
<jtok eid="14" type="string_literal" span="581:24:581:32">"stack$"</jtok>
<jtok eid="14" type="constructor_call" span="581:38:581:49">BstFunction</jtok>
<jtok eid="61" type="block_comment" span="582:4:585:7">/**
			 * Pops and prints the whole stack; it's meant to be used for style
			 * designers while debugging.
			 */</jtok>
<jtok eid="62" type="method_name" span="586:16:586:23">execute</jtok>
<jtok eid="62" type="parameter_type" span="586:24:586:32">BstEntry</jtok>
<jtok eid="62" type="parameter_name" span="586:33:586:40">context</jtok>
<jtok eid="62" type="primary_name_ref" span="587:13:587:18">stack</jtok>
<jtok eid="62" type="method_call" span="587:19:587:24">empty</jtok>
<jtok eid="62" type="primary_name_ref" span="588:6:588:12">System</jtok>
<jtok eid="62" type="qualified_name_ref" span="588:13:588:16">out</jtok>
<jtok eid="62" type="method_call" span="588:17:588:24">println</jtok>
<jtok eid="62" type="primary_name_ref" span="588:25:588:30">stack</jtok>
<jtok eid="62" type="method_call" span="588:31:588:34">pop</jtok>
<jtok eid="14" type="primary_name_ref" span="593:3:593:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="593:20:593:23">put</jtok>
<jtok eid="14" type="string_literal" span="593:24:593:36">"substring$"</jtok>
<jtok eid="14" type="constructor_call" span="593:42:593:53">BstFunction</jtok>
<jtok eid="63" type="block_comment" span="594:4:602:7">/**
			 * Pops the top three literals (they are the two integers literals
			 * len and start, and a string literal, in that order). It pushes
			 * the substring of the (at most) len consecutive characters
			 * starting at the startth character (assuming 1-based indexing) if
			 * start is positive, and ending at the start-th character
			 * (including) from the end if start is negative (where the first
			 * character from the end is the last character).
			 */</jtok>
<jtok eid="64" type="method_name" span="603:16:603:23">execute</jtok>
<jtok eid="64" type="parameter_type" span="603:24:603:32">BstEntry</jtok>
<jtok eid="64" type="parameter_name" span="603:33:603:40">context</jtok>
<jtok eid="64" type="primary_name_ref" span="604:9:604:14">stack</jtok>
<jtok eid="64" type="method_call" span="604:15:604:19">size</jtok>
<jtok eid="64" type="constructor_call" span="605:16:605:27">VMException</jtok>
<jtok eid="64" type="string_literal" span="605:28:605:83">"Not enough operands on stack for operation substring$"</jtok>
<jtok eid="64" type="class_or_interface_ref" span="607:5:607:11">Object</jtok>
<jtok eid="64" type="local_variable_name" span="607:12:607:14">o1</jtok>
<jtok eid="64" type="primary_name_ref" span="607:17:607:22">stack</jtok>
<jtok eid="64" type="method_call" span="607:23:607:26">pop</jtok>
<jtok eid="64" type="class_or_interface_ref" span="608:5:608:11">Object</jtok>
<jtok eid="64" type="local_variable_name" span="608:12:608:14">o2</jtok>
<jtok eid="64" type="primary_name_ref" span="608:17:608:22">stack</jtok>
<jtok eid="64" type="method_call" span="608:23:608:26">pop</jtok>
<jtok eid="64" type="class_or_interface_ref" span="609:5:609:11">Object</jtok>
<jtok eid="64" type="local_variable_name" span="609:12:609:14">o3</jtok>
<jtok eid="64" type="primary_name_ref" span="609:17:609:22">stack</jtok>
<jtok eid="64" type="method_call" span="609:23:609:26">pop</jtok>
<jtok eid="64" type="primary_name_ref" span="611:12:611:14">o1</jtok>
<jtok eid="64" type="class_or_interface_ref" span="611:26:611:33">Integer</jtok>
<jtok eid="64" type="primary_name_ref" span="611:39:611:41">o2</jtok>
<jtok eid="64" type="class_or_interface_ref" span="611:53:611:60">Integer</jtok>
<jtok eid="64" type="primary_name_ref" span="611:66:611:68">o3</jtok>
<jtok eid="64" type="class_or_interface_ref" span="611:80:611:86">String</jtok>
<jtok eid="64" type="constructor_call" span="612:16:612:27">VMException</jtok>
<jtok eid="64" type="string_literal" span="612:28:612:80">"Expecting two integers and a string for substring$"</jtok>
<jtok eid="64" type="class_or_interface_ref" span="615:5:615:12">Integer</jtok>
<jtok eid="64" type="local_variable_name" span="615:13:615:16">len</jtok>
<jtok eid="64" type="class_or_interface_ref" span="615:20:615:27">Integer</jtok>
<jtok eid="64" type="primary_name_ref" span="615:29:615:31">o1</jtok>
<jtok eid="64" type="class_or_interface_ref" span="616:5:616:12">Integer</jtok>
<jtok eid="64" type="local_variable_name" span="616:13:616:18">start</jtok>
<jtok eid="64" type="class_or_interface_ref" span="616:22:616:29">Integer</jtok>
<jtok eid="64" type="primary_name_ref" span="616:31:616:33">o2</jtok>
<jtok eid="64" type="local_variable_name" span="618:9:618:13">lenI</jtok>
<jtok eid="64" type="primary_name_ref" span="618:16:618:19">len</jtok>
<jtok eid="64" type="method_call" span="618:20:618:28">intValue</jtok>
<jtok eid="64" type="local_variable_name" span="619:9:619:15">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="619:18:619:23">start</jtok>
<jtok eid="64" type="method_call" span="619:24:619:32">intValue</jtok>
<jtok eid="64" type="primary_name_ref" span="621:9:621:13">lenI</jtok>
<jtok eid="64" type="primary_name_ref" span="621:16:621:23">Integer</jtok>
<jtok eid="64" type="qualified_name_ref" span="621:24:621:33">MAX_VALUE</jtok>
<jtok eid="64" type="primary_name_ref" span="622:6:622:10">lenI</jtok>
<jtok eid="64" type="primary_name_ref" span="622:13:622:20">Integer</jtok>
<jtok eid="64" type="qualified_name_ref" span="622:21:622:30">MAX_VALUE</jtok>
<jtok eid="64" type="primary_name_ref" span="624:9:624:15">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="624:18:624:25">Integer</jtok>
<jtok eid="64" type="qualified_name_ref" span="624:26:624:35">MAX_VALUE</jtok>
<jtok eid="64" type="primary_name_ref" span="625:6:625:12">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="625:15:625:22">Integer</jtok>
<jtok eid="64" type="qualified_name_ref" span="625:23:625:32">MAX_VALUE</jtok>
<jtok eid="64" type="primary_name_ref" span="627:9:627:15">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="627:18:627:25">Integer</jtok>
<jtok eid="64" type="qualified_name_ref" span="627:26:627:35">MIN_VALUE</jtok>
<jtok eid="64" type="primary_name_ref" span="628:6:628:12">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="628:16:628:23">Integer</jtok>
<jtok eid="64" type="qualified_name_ref" span="628:24:628:33">MIN_VALUE</jtok>
<jtok eid="64" type="class_or_interface_ref" span="630:5:630:11">String</jtok>
<jtok eid="64" type="local_variable_name" span="630:12:630:13">s</jtok>
<jtok eid="64" type="class_or_interface_ref" span="630:17:630:23">String</jtok>
<jtok eid="64" type="primary_name_ref" span="630:25:630:27">o3</jtok>
<jtok eid="64" type="primary_name_ref" span="632:9:632:15">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="633:6:633:12">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="633:16:633:17">s</jtok>
<jtok eid="64" type="method_call" span="633:18:633:24">length</jtok>
<jtok eid="64" type="primary_name_ref" span="634:6:634:12">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="634:15:634:19">Math</jtok>
<jtok eid="64" type="method_call" span="634:20:634:23">max</jtok>
<jtok eid="64" type="primary_name_ref" span="634:27:634:33">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="634:40:634:44">lenI</jtok>
<jtok eid="64" type="primary_name_ref" span="636:5:636:10">stack</jtok>
<jtok eid="64" type="method_call" span="636:11:636:15">push</jtok>
<jtok eid="64" type="primary_name_ref" span="636:16:636:17">s</jtok>
<jtok eid="64" type="method_call" span="636:18:636:27">substring</jtok>
<jtok eid="64" type="primary_name_ref" span="636:28:636:34">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="636:40:636:44">Math</jtok>
<jtok eid="64" type="method_call" span="636:45:636:48">min</jtok>
<jtok eid="64" type="primary_name_ref" span="636:49:636:55">startI</jtok>
<jtok eid="64" type="primary_name_ref" span="636:62:636:66">lenI</jtok>
<jtok eid="64" type="primary_name_ref" span="636:68:636:69">s</jtok>
<jtok eid="64" type="method_call" span="636:70:636:76">length</jtok>
<jtok eid="14" type="primary_name_ref" span="640:3:640:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="640:20:640:23">put</jtok>
<jtok eid="14" type="string_literal" span="640:24:640:31">"swap$"</jtok>
<jtok eid="14" type="constructor_call" span="640:37:640:48">BstFunction</jtok>
<jtok eid="65" type="block_comment" span="641:4:648:7">/**
			 * Swaps the top two literals on the stack. text.length$ Pops the
			 * top (string) literal, and pushes the number of text char- acters
			 * it contains, where an accented character (more precisely, a
			 * \special character", defined in Section 4) counts as a single
			 * text character, even if it's missing its matching right brace,
			 * and where braces don't count as text characters.
			 */</jtok>
<jtok eid="66" type="method_name" span="649:16:649:23">execute</jtok>
<jtok eid="66" type="parameter_type" span="649:24:649:32">BstEntry</jtok>
<jtok eid="66" type="parameter_name" span="649:33:649:40">context</jtok>
<jtok eid="66" type="primary_name_ref" span="650:9:650:14">stack</jtok>
<jtok eid="66" type="method_call" span="650:15:650:19">size</jtok>
<jtok eid="66" type="constructor_call" span="651:16:651:27">VMException</jtok>
<jtok eid="66" type="string_literal" span="651:28:651:78">"Not enough operands on stack for operation swap$"</jtok>
<jtok eid="66" type="class_or_interface_ref" span="653:5:653:11">Object</jtok>
<jtok eid="66" type="local_variable_name" span="653:12:653:14">f1</jtok>
<jtok eid="66" type="primary_name_ref" span="653:17:653:22">stack</jtok>
<jtok eid="66" type="method_call" span="653:23:653:26">pop</jtok>
<jtok eid="66" type="class_or_interface_ref" span="654:5:654:11">Object</jtok>
<jtok eid="66" type="local_variable_name" span="654:12:654:14">f2</jtok>
<jtok eid="66" type="primary_name_ref" span="654:17:654:22">stack</jtok>
<jtok eid="66" type="method_call" span="654:23:654:26">pop</jtok>
<jtok eid="66" type="primary_name_ref" span="656:5:656:10">stack</jtok>
<jtok eid="66" type="method_call" span="656:11:656:15">push</jtok>
<jtok eid="66" type="primary_name_ref" span="656:16:656:18">f1</jtok>
<jtok eid="66" type="primary_name_ref" span="657:5:657:10">stack</jtok>
<jtok eid="66" type="method_call" span="657:11:657:15">push</jtok>
<jtok eid="66" type="primary_name_ref" span="657:16:657:18">f2</jtok>
<jtok eid="14" type="primary_name_ref" span="661:3:661:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="661:20:661:23">put</jtok>
<jtok eid="14" type="string_literal" span="661:24:661:38">"text.length$"</jtok>
<jtok eid="14" type="constructor_call" span="661:44:661:55">BstFunction</jtok>
<jtok eid="67" type="block_comment" span="662:4:672:7">/**
			 * text.length$ Pops the top (string) literal, and pushes the number
			 * of text characters it contains, where an accented character (more
			 * precisely, a "special character", defined in Section 4) counts as
			 * a single text character, even if it's missing its matching right
			 * brace, and where braces don't count as text characters.
			 * 
			 * From BibTeXing: For the purposes of counting letters in labels,
			 * BibTEX considers everything contained inside the braces as a
			 * single letter.
			 */</jtok>
<jtok eid="68" type="method_name" span="673:16:673:23">execute</jtok>
<jtok eid="68" type="parameter_type" span="673:24:673:32">BstEntry</jtok>
<jtok eid="68" type="parameter_name" span="673:33:673:40">context</jtok>
<jtok eid="68" type="primary_name_ref" span="674:9:674:14">stack</jtok>
<jtok eid="68" type="method_call" span="674:15:674:19">size</jtok>
<jtok eid="68" type="constructor_call" span="675:16:675:27">VMException</jtok>
<jtok eid="68" type="string_literal" span="675:28:675:85">"Not enough operands on stack for operation text.length$"</jtok>
<jtok eid="68" type="class_or_interface_ref" span="677:5:677:11">Object</jtok>
<jtok eid="68" type="local_variable_name" span="677:12:677:14">o1</jtok>
<jtok eid="68" type="primary_name_ref" span="677:17:677:22">stack</jtok>
<jtok eid="68" type="method_call" span="677:23:677:26">pop</jtok>
<jtok eid="68" type="primary_name_ref" span="679:11:679:13">o1</jtok>
<jtok eid="68" type="class_or_interface_ref" span="679:25:679:31">String</jtok>
<jtok eid="68" type="constructor_call" span="680:16:680:27">VMException</jtok>
<jtok eid="68" type="string_literal" span="680:28:680:81">"Can only perform operation on a string text.length$"</jtok>
<jtok eid="68" type="class_or_interface_ref" span="683:5:683:11">String</jtok>
<jtok eid="68" type="local_variable_name" span="683:12:683:13">s</jtok>
<jtok eid="68" type="class_or_interface_ref" span="683:17:683:23">String</jtok>
<jtok eid="68" type="primary_name_ref" span="683:25:683:27">o1</jtok>
<jtok eid="68" type="local_variable_name" span="684:12:684:13">c</jtok>
<jtok eid="68" type="primary_name_ref" span="684:16:684:17">s</jtok>
<jtok eid="68" type="method_call" span="684:18:684:29">toCharArray</jtok>
<jtok eid="68" type="local_variable_name" span="685:9:685:15">result</jtok>
<jtok eid="68" type="line_comment" span="687:5:687:33">// Comments from bibtex.web:</jtok>
<jtok eid="68" type="line_comment" span="689:5:689:38">// sp_ptr := str_start[pop_lit1];</jtok>
<jtok eid="68" type="local_variable_name" span="690:9:690:10">i</jtok>
<jtok eid="68" type="line_comment" span="692:5:692:40">// sp_end := str_start[pop_lit1+1];</jtok>
<jtok eid="68" type="local_variable_name" span="693:9:693:10">n</jtok>
<jtok eid="68" type="primary_name_ref" span="693:13:693:14">s</jtok>
<jtok eid="68" type="method_call" span="693:15:693:21">length</jtok>
<jtok eid="68" type="line_comment" span="695:5:695:28">// sp_brace_level := 0;</jtok>
<jtok eid="68" type="local_variable_name" span="696:9:696:19">braceLevel</jtok>
<jtok eid="68" type="line_comment" span="698:5:698:40">// while (sp_ptr &lt; sp_end) do begin</jtok>
<jtok eid="68" type="primary_name_ref" span="699:12:699:13">i</jtok>
<jtok eid="68" type="primary_name_ref" span="699:16:699:17">n</jtok>
<jtok eid="68" type="line_comment" span="700:6:700:22">// incr(sp_ptr);</jtok>
<jtok eid="68" type="primary_name_ref" span="701:6:701:7">i</jtok>
<jtok eid="68" type="line_comment" span="702:6:702:50">// if (str_pool[sp_ptr-1] = left_brace) then</jtok>
<jtok eid="68" type="line_comment" span="703:6:703:14">// begin</jtok>
<jtok eid="68" type="primary_name_ref" span="704:10:704:11">c</jtok>
<jtok eid="68" type="primary_name_ref" span="704:12:704:13">i</jtok>
<jtok eid="68" type="line_comment" span="705:7:705:31">// incr(sp_brace_level);</jtok>
<jtok eid="68" type="primary_name_ref" span="706:7:706:17">braceLevel</jtok>
<jtok eid="68" type="line_comment" span="707:7:707:62">// if ((sp_brace_level = 1) and (sp_ptr &lt; sp_end)) then</jtok>
<jtok eid="68" type="primary_name_ref" span="708:11:708:21">braceLevel</jtok>
<jtok eid="68" type="primary_name_ref" span="708:30:708:31">i</jtok>
<jtok eid="68" type="primary_name_ref" span="708:34:708:35">n</jtok>
<jtok eid="68" type="line_comment" span="709:8:709:49">// if (str_pool[sp_ptr] = backslash) then</jtok>
<jtok eid="68" type="line_comment" span="710:8:710:16">// begin</jtok>
<jtok eid="68" type="primary_name_ref" span="711:12:711:13">c</jtok>
<jtok eid="68" type="primary_name_ref" span="711:14:711:15">i</jtok>
<jtok eid="68" type="line_comment" span="712:9:712:53">// incr(sp_ptr); {skip over the |backslash|}</jtok>
<jtok eid="68" type="primary_name_ref" span="713:9:713:10">i</jtok>
<jtok eid="68" type="line_comment" span="713:14:713:36">// skip over backslash</jtok>
<jtok eid="68" type="line_comment" span="714:9:714:56">// while ((sp_ptr &lt; sp_end) and (sp_brace_level</jtok>
<jtok eid="68" type="line_comment" span="715:9:715:26">// &gt; 0)) do begin</jtok>
<jtok eid="68" type="primary_name_ref" span="716:16:716:17">i</jtok>
<jtok eid="68" type="primary_name_ref" span="716:20:716:21">n</jtok>
<jtok eid="68" type="primary_name_ref" span="716:25:716:35">braceLevel</jtok>
<jtok eid="68" type="line_comment" span="717:10:717:53">// if (str_pool[sp_ptr] = right_brace) then</jtok>
<jtok eid="68" type="primary_name_ref" span="718:14:718:15">c</jtok>
<jtok eid="68" type="primary_name_ref" span="718:16:718:17">i</jtok>
<jtok eid="68" type="line_comment" span="719:11:719:34">// decr(sp_brace_level)</jtok>
<jtok eid="68" type="primary_name_ref" span="720:11:720:21">braceLevel</jtok>
<jtok eid="68" type="line_comment" span="721:10:721:52">// else if (str_pool[sp_ptr] = left_brace)</jtok>
<jtok eid="68" type="line_comment" span="722:10:722:17">// then</jtok>
<jtok eid="68" type="primary_name_ref" span="723:19:723:20">c</jtok>
<jtok eid="68" type="primary_name_ref" span="723:21:723:22">i</jtok>
<jtok eid="68" type="line_comment" span="725:11:725:35">// incr(sp_brace_level);</jtok>
<jtok eid="68" type="primary_name_ref" span="726:11:726:21">braceLevel</jtok>
<jtok eid="68" type="line_comment" span="727:10:727:26">// incr(sp_ptr);</jtok>
<jtok eid="68" type="primary_name_ref" span="728:10:728:11">i</jtok>
<jtok eid="68" type="line_comment" span="729:10:729:17">// end;</jtok>
<jtok eid="68" type="line_comment" span="731:9:731:33">// incr(num_text_chars);</jtok>
<jtok eid="68" type="primary_name_ref" span="732:9:732:15">result</jtok>
<jtok eid="68" type="line_comment" span="733:9:733:16">// end;</jtok>
<jtok eid="68" type="line_comment" span="735:7:735:13">// end</jtok>
<jtok eid="68" type="line_comment" span="737:6:737:56">// else if (str_pool[sp_ptr-1] = right_brace) then</jtok>
<jtok eid="68" type="line_comment" span="738:6:738:14">// begin</jtok>
<jtok eid="68" type="primary_name_ref" span="739:15:739:16">c</jtok>
<jtok eid="68" type="primary_name_ref" span="739:17:739:18">i</jtok>
<jtok eid="68" type="line_comment" span="740:7:740:38">// if (sp_brace_level &gt; 0) then</jtok>
<jtok eid="68" type="primary_name_ref" span="741:11:741:21">braceLevel</jtok>
<jtok eid="68" type="line_comment" span="742:8:742:32">// decr(sp_brace_level);</jtok>
<jtok eid="68" type="primary_name_ref" span="743:8:743:18">braceLevel</jtok>
<jtok eid="68" type="line_comment" span="744:7:744:13">// end</jtok>
<jtok eid="68" type="line_comment" span="746:6:746:13">// else</jtok>
<jtok eid="68" type="line_comment" span="748:7:748:31">// incr(num_text_chars);</jtok>
<jtok eid="68" type="primary_name_ref" span="749:7:749:13">result</jtok>
<jtok eid="68" type="primary_name_ref" span="751:5:751:10">stack</jtok>
<jtok eid="68" type="method_call" span="751:11:751:15">push</jtok>
<jtok eid="68" type="constructor_call" span="751:20:751:27">Integer</jtok>
<jtok eid="68" type="primary_name_ref" span="751:28:751:34">result</jtok>
<jtok eid="14" type="block_comment" span="755:3:765:6">/**
		 * Pops the top two literals (the integer literal len and a string
		 * literal, in that order). It pushes the substring of the (at most) len
		 * consecutive text characters starting from the beginning of the
		 * string. This function is similar to substring$, but this one
		 * considers a \special character", even if it's missing its matching
		 * right brace, to be a single text character (rather than however many
		 * ASCII characters it actually comprises), and this function doesn't
		 * consider braces to be text characters; furthermore, this function
		 * appends any needed matching right braces.
		 */</jtok>
<jtok eid="14" type="primary_name_ref" span="766:3:766:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="766:20:766:23">put</jtok>
<jtok eid="14" type="string_literal" span="766:24:766:38">"text.prefix$"</jtok>
<jtok eid="14" type="constructor_call" span="766:44:766:62">TextPrefixFunction</jtok>
<jtok eid="14" type="primary_name_ref" span="768:3:768:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="768:20:768:23">put</jtok>
<jtok eid="14" type="string_literal" span="768:24:768:30">"top$"</jtok>
<jtok eid="14" type="constructor_call" span="768:36:768:47">BstFunction</jtok>
<jtok eid="69" type="block_comment" span="769:4:772:7">/**
			 * Pops and prints the top of the stack on the terminal and log
			 * file. It's useful for debugging.
			 */</jtok>
<jtok eid="70" type="method_name" span="773:16:773:23">execute</jtok>
<jtok eid="70" type="parameter_type" span="773:24:773:32">BstEntry</jtok>
<jtok eid="70" type="parameter_name" span="773:33:773:40">context</jtok>
<jtok eid="70" type="primary_name_ref" span="774:5:774:11">System</jtok>
<jtok eid="70" type="qualified_name_ref" span="774:12:774:15">out</jtok>
<jtok eid="70" type="method_call" span="774:16:774:23">println</jtok>
<jtok eid="70" type="primary_name_ref" span="774:24:774:29">stack</jtok>
<jtok eid="70" type="method_call" span="774:30:774:33">pop</jtok>
<jtok eid="14" type="primary_name_ref" span="778:3:778:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="778:20:778:23">put</jtok>
<jtok eid="14" type="string_literal" span="778:24:778:31">"type$"</jtok>
<jtok eid="14" type="constructor_call" span="778:37:778:48">BstFunction</jtok>
<jtok eid="71" type="block_comment" span="779:4:782:7">/**
			 * Pushes the current entry's type (book, article, etc.), but pushes
			 * the null string if the type is either unknown or undefined.
			 */</jtok>
<jtok eid="72" type="method_name" span="783:16:783:23">execute</jtok>
<jtok eid="72" type="parameter_type" span="783:24:783:32">BstEntry</jtok>
<jtok eid="72" type="parameter_name" span="783:33:783:40">context</jtok>
<jtok eid="72" type="primary_name_ref" span="784:5:784:10">stack</jtok>
<jtok eid="72" type="method_call" span="784:11:784:15">push</jtok>
<jtok eid="72" type="primary_name_ref" span="784:16:784:23">context</jtok>
<jtok eid="72" type="qualified_name_ref" span="784:24:784:29">entry</jtok>
<jtok eid="72" type="method_call" span="784:30:784:37">getType</jtok>
<jtok eid="72" type="method_call" span="784:40:784:47">getName</jtok>
<jtok eid="14" type="primary_name_ref" span="788:3:788:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="788:20:788:23">put</jtok>
<jtok eid="14" type="string_literal" span="788:24:788:34">"warning$"</jtok>
<jtok eid="14" type="constructor_call" span="788:40:788:51">BstFunction</jtok>
<jtok eid="73" type="block_comment" span="789:4:793:7">/**
			 * Pops the top (string) literal and prints it following a warning
			 * message. This also increments a count of the number of warning
			 * messages issued.
			 */</jtok>
<jtok eid="73" type="field_name" span="794:8:794:15">warning</jtok>
<jtok eid="74" type="method_name" span="796:16:796:23">execute</jtok>
<jtok eid="74" type="parameter_type" span="796:24:796:32">BstEntry</jtok>
<jtok eid="74" type="parameter_name" span="796:33:796:40">context</jtok>
<jtok eid="74" type="primary_name_ref" span="797:5:797:8">out</jtok>
<jtok eid="74" type="method_call" span="797:9:797:16">println</jtok>
<jtok eid="74" type="string_literal" span="797:17:797:29">"Warning (#"</jtok>
<jtok eid="74" type="primary_name_ref" span="797:33:797:40">warning</jtok>
<jtok eid="74" type="string_literal" span="797:46:797:51">"): "</jtok>
<jtok eid="74" type="primary_name_ref" span="797:54:797:59">stack</jtok>
<jtok eid="74" type="method_call" span="797:60:797:63">pop</jtok>
<jtok eid="14" type="primary_name_ref" span="801:3:801:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="801:20:801:23">put</jtok>
<jtok eid="14" type="string_literal" span="801:24:801:32">"while$"</jtok>
<jtok eid="14" type="constructor_call" span="801:38:801:49">BstFunction</jtok>
<jtok eid="75" type="block_comment" span="802:4:806:7">/**
			 * Pops the top two (function) literals, and keeps executing the
			 * second as long as the (integer) literal left on the stack by
			 * executing the first is greater than 0.
			 */</jtok>
<jtok eid="76" type="method_name" span="807:16:807:23">execute</jtok>
<jtok eid="76" type="parameter_type" span="807:24:807:32">BstEntry</jtok>
<jtok eid="76" type="parameter_name" span="807:33:807:40">context</jtok>
<jtok eid="76" type="primary_name_ref" span="808:9:808:14">stack</jtok>
<jtok eid="76" type="method_call" span="808:15:808:19">size</jtok>
<jtok eid="76" type="constructor_call" span="809:16:809:27">VMException</jtok>
<jtok eid="76" type="string_literal" span="809:28:809:79">"Not enough operands on stack for operation while$"</jtok>
<jtok eid="76" type="class_or_interface_ref" span="811:5:811:11">Object</jtok>
<jtok eid="76" type="local_variable_name" span="811:12:811:14">f2</jtok>
<jtok eid="76" type="primary_name_ref" span="811:17:811:22">stack</jtok>
<jtok eid="76" type="method_call" span="811:23:811:26">pop</jtok>
<jtok eid="76" type="class_or_interface_ref" span="812:5:812:11">Object</jtok>
<jtok eid="76" type="local_variable_name" span="812:12:812:14">f1</jtok>
<jtok eid="76" type="primary_name_ref" span="812:17:812:22">stack</jtok>
<jtok eid="76" type="method_call" span="812:23:812:26">pop</jtok>
<jtok eid="76" type="primary_name_ref" span="814:11:814:13">f1</jtok>
<jtok eid="76" type="class_or_interface_ref" span="814:25:814:35">Identifier</jtok>
<jtok eid="76" type="primary_name_ref" span="814:39:814:41">f1</jtok>
<jtok eid="76" type="class_or_interface_ref" span="814:53:814:57">Tree</jtok>
<jtok eid="76" type="primary_name_ref" span="815:10:815:12">f2</jtok>
<jtok eid="76" type="class_or_interface_ref" span="815:24:815:34">Identifier</jtok>
<jtok eid="76" type="primary_name_ref" span="815:38:815:40">f2</jtok>
<jtok eid="76" type="class_or_interface_ref" span="815:52:815:56">Tree</jtok>
<jtok eid="76" type="constructor_call" span="816:16:816:27">VMException</jtok>
<jtok eid="76" type="string_literal" span="816:28:816:65">"Expecting two functions for while$."</jtok>
<jtok eid="76" type="primary_name_ref" span="820:6:820:8">VM</jtok>
<jtok eid="76" type="method_call" span="820:14:820:30">executeInContext</jtok>
<jtok eid="76" type="primary_name_ref" span="820:31:820:33">f1</jtok>
<jtok eid="76" type="primary_name_ref" span="820:35:820:42">context</jtok>
<jtok eid="76" type="class_or_interface_ref" span="822:6:822:12">Object</jtok>
<jtok eid="76" type="local_variable_name" span="822:13:822:14">i</jtok>
<jtok eid="76" type="primary_name_ref" span="822:17:822:22">stack</jtok>
<jtok eid="76" type="method_call" span="822:23:822:26">pop</jtok>
<jtok eid="76" type="primary_name_ref" span="823:12:823:13">i</jtok>
<jtok eid="76" type="class_or_interface_ref" span="823:25:823:32">Integer</jtok>
<jtok eid="76" type="constructor_call" span="824:17:824:28">VMException</jtok>
<jtok eid="76" type="string_literal" span="825:8:825:68">"First parameter to while has to return an integer but was "</jtok>
<jtok eid="76" type="primary_name_ref" span="825:71:825:72">i</jtok>
<jtok eid="76" type="class_or_interface_ref" span="827:12:827:19">Integer</jtok>
<jtok eid="76" type="primary_name_ref" span="827:21:827:22">i</jtok>
<jtok eid="76" type="method_call" span="827:24:827:32">intValue</jtok>
<jtok eid="76" type="primary_name_ref" span="830:6:830:8">VM</jtok>
<jtok eid="76" type="method_call" span="830:14:830:30">executeInContext</jtok>
<jtok eid="76" type="primary_name_ref" span="830:31:830:33">f2</jtok>
<jtok eid="76" type="primary_name_ref" span="830:35:830:42">context</jtok>
<jtok eid="14" type="primary_name_ref" span="835:3:835:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="835:20:835:23">put</jtok>
<jtok eid="14" type="string_literal" span="835:24:835:32">"width$"</jtok>
<jtok eid="14" type="constructor_call" span="835:38:835:51">WidthFunction</jtok>
<jtok eid="14" type="primary_name_ref" span="837:3:837:19">buildInFunctions</jtok>
<jtok eid="14" type="method_call" span="837:20:837:23">put</jtok>
<jtok eid="14" type="string_literal" span="837:24:837:32">"write$"</jtok>
<jtok eid="14" type="constructor_call" span="837:38:837:49">BstFunction</jtok>
<jtok eid="77" type="block_comment" span="838:4:842:7">/**
			 * Pops the top (string) literal and writes it on the output buffer
			 * (which will result in stuff being written onto the bbl file when
			 * the buffer fills up).
			 */</jtok>
<jtok eid="78" type="method_name" span="843:16:843:23">execute</jtok>
<jtok eid="78" type="parameter_type" span="843:24:843:32">BstEntry</jtok>
<jtok eid="78" type="parameter_name" span="843:33:843:40">context</jtok>
<jtok eid="78" type="class_or_interface_ref" span="844:5:844:11">String</jtok>
<jtok eid="78" type="local_variable_name" span="844:12:844:13">s</jtok>
<jtok eid="78" type="class_or_interface_ref" span="844:17:844:23">String</jtok>
<jtok eid="78" type="primary_name_ref" span="844:25:844:30">stack</jtok>
<jtok eid="78" type="method_call" span="844:31:844:34">pop</jtok>
<jtok eid="78" type="primary_name_ref" span="845:5:845:11">System</jtok>
<jtok eid="78" type="qualified_name_ref" span="845:12:845:15">out</jtok>
<jtok eid="78" type="method_call" span="845:16:845:23">println</jtok>
<jtok eid="78" type="primary_name_ref" span="845:24:845:25">s</jtok>
<jtok eid="78" type="primary_name_ref" span="846:5:846:7">VM</jtok>
<jtok eid="78" type="qualified_name_ref" span="846:13:846:16">bbl</jtok>
<jtok eid="78" type="method_call" span="846:17:846:23">append</jtok>
<jtok eid="78" type="primary_name_ref" span="846:24:846:25">s</jtok>
<jtok eid="79" type="method_name" span="852:20:852:26">assign</jtok>
<jtok eid="79" type="parameter_type" span="852:27:852:35">BstEntry</jtok>
<jtok eid="79" type="parameter_name" span="852:36:852:43">context</jtok>
<jtok eid="79" type="parameter_type" span="852:45:852:51">Object</jtok>
<jtok eid="79" type="parameter_name" span="852:52:852:54">o1</jtok>
<jtok eid="79" type="parameter_type" span="852:56:852:62">Object</jtok>
<jtok eid="79" type="parameter_name" span="852:63:852:65">o2</jtok>
<jtok eid="79" type="primary_name_ref" span="854:9:854:11">o1</jtok>
<jtok eid="79" type="class_or_interface_ref" span="854:23:854:33">Identifier</jtok>
<jtok eid="79" type="primary_name_ref" span="854:40:854:42">o2</jtok>
<jtok eid="79" type="class_or_interface_ref" span="854:54:854:60">String</jtok>
<jtok eid="79" type="primary_name_ref" span="854:64:854:66">o2</jtok>
<jtok eid="79" type="class_or_interface_ref" span="854:78:854:85">Integer</jtok>
<jtok eid="79" type="constructor_call" span="855:14:855:25">VMException</jtok>
<jtok eid="79" type="string_literal" span="855:26:855:46">"Invalid parameters"</jtok>
<jtok eid="79" type="class_or_interface_ref" span="857:3:857:9">String</jtok>
<jtok eid="79" type="local_variable_name" span="857:10:857:14">name</jtok>
<jtok eid="79" type="class_or_interface_ref" span="857:19:857:29">Identifier</jtok>
<jtok eid="79" type="primary_name_ref" span="857:31:857:33">o1</jtok>
<jtok eid="79" type="method_call" span="857:35:857:42">getName</jtok>
<jtok eid="79" type="primary_name_ref" span="859:7:859:9">o2</jtok>
<jtok eid="79" type="class_or_interface_ref" span="859:21:859:27">String</jtok>
<jtok eid="79" type="primary_name_ref" span="861:8:861:15">context</jtok>
<jtok eid="79" type="primary_name_ref" span="861:27:861:34">context</jtok>
<jtok eid="79" type="qualified_name_ref" span="861:35:861:42">strings</jtok>
<jtok eid="79" type="method_call" span="861:43:861:54">containsKey</jtok>
<jtok eid="79" type="primary_name_ref" span="861:55:861:59">name</jtok>
<jtok eid="79" type="primary_name_ref" span="862:5:862:12">context</jtok>
<jtok eid="79" type="qualified_name_ref" span="862:13:862:20">strings</jtok>
<jtok eid="79" type="method_call" span="862:21:862:24">put</jtok>
<jtok eid="79" type="primary_name_ref" span="862:25:862:29">name</jtok>
<jtok eid="79" type="class_or_interface_ref" span="862:32:862:38">String</jtok>
<jtok eid="79" type="primary_name_ref" span="862:40:862:42">o2</jtok>
<jtok eid="79" type="primary_name_ref" span="866:8:866:15">strings</jtok>
<jtok eid="79" type="method_call" span="866:16:866:27">containsKey</jtok>
<jtok eid="79" type="primary_name_ref" span="866:28:866:32">name</jtok>
<jtok eid="79" type="primary_name_ref" span="867:5:867:12">strings</jtok>
<jtok eid="79" type="method_call" span="867:13:867:16">put</jtok>
<jtok eid="79" type="primary_name_ref" span="867:17:867:21">name</jtok>
<jtok eid="79" type="class_or_interface_ref" span="867:24:867:30">String</jtok>
<jtok eid="79" type="primary_name_ref" span="867:32:867:34">o2</jtok>
<jtok eid="79" type="primary_name_ref" span="873:7:873:9">o2</jtok>
<jtok eid="79" type="class_or_interface_ref" span="873:21:873:28">Integer</jtok>
<jtok eid="79" type="primary_name_ref" span="874:8:874:15">context</jtok>
<jtok eid="79" type="primary_name_ref" span="874:27:874:34">context</jtok>
<jtok eid="79" type="qualified_name_ref" span="874:35:874:43">integers</jtok>
<jtok eid="79" type="method_call" span="874:44:874:55">containsKey</jtok>
<jtok eid="79" type="primary_name_ref" span="874:56:874:60">name</jtok>
<jtok eid="79" type="primary_name_ref" span="875:5:875:12">context</jtok>
<jtok eid="79" type="qualified_name_ref" span="875:13:875:21">integers</jtok>
<jtok eid="79" type="method_call" span="875:22:875:25">put</jtok>
<jtok eid="79" type="primary_name_ref" span="875:26:875:30">name</jtok>
<jtok eid="79" type="class_or_interface_ref" span="875:33:875:40">Integer</jtok>
<jtok eid="79" type="primary_name_ref" span="875:42:875:44">o2</jtok>
<jtok eid="79" type="primary_name_ref" span="879:8:879:16">integers</jtok>
<jtok eid="79" type="method_call" span="879:17:879:28">containsKey</jtok>
<jtok eid="79" type="primary_name_ref" span="879:29:879:33">name</jtok>
<jtok eid="79" type="primary_name_ref" span="880:5:880:13">integers</jtok>
<jtok eid="79" type="method_call" span="880:14:880:17">put</jtok>
<jtok eid="79" type="primary_name_ref" span="880:18:880:22">name</jtok>
<jtok eid="79" type="class_or_interface_ref" span="880:25:880:32">Integer</jtok>
<jtok eid="79" type="primary_name_ref" span="880:34:880:36">o2</jtok>
<jtok eid="1" type="class_or_interface_ref" span="888:2:888:12">CommonTree</jtok>
<jtok eid="1" type="field_name" span="888:13:888:17">tree</jtok>
<jtok eid="1" type="class_or_interface_ref" span="890:10:890:22">StringBuffer</jtok>
<jtok eid="1" type="field_name" span="890:23:890:26">bbl</jtok>
<jtok eid="1" type="class_or_interface_ref" span="892:2:892:8">String</jtok>
<jtok eid="1" type="field_name" span="892:9:892:17">preamble</jtok>
<jtok eid="80" type="class_or_interface_ref" span="894:9:894:15">String</jtok>
<jtok eid="80" type="method_name" span="894:16:894:19">run</jtok>
<jtok eid="80" type="parameter_type" span="894:20:894:34">BibtexDatabase</jtok>
<jtok eid="80" type="parameter_name" span="894:35:894:37">db</jtok>
<jtok eid="80" type="primary_name_ref" span="895:3:895:11">preamble</jtok>
<jtok eid="80" type="primary_name_ref" span="895:14:895:16">db</jtok>
<jtok eid="80" type="method_call" span="895:17:895:28">getPreamble</jtok>
<jtok eid="80" type="method_call" span="896:10:896:13">run</jtok>
<jtok eid="80" type="primary_name_ref" span="896:14:896:16">db</jtok>
<jtok eid="80" type="method_call" span="896:17:896:27">getEntries</jtok>
<jtok eid="81" type="class_or_interface_ref" span="899:9:899:15">String</jtok>
<jtok eid="81" type="method_name" span="899:16:899:19">run</jtok>
<jtok eid="81" type="parameter_type" span="899:20:899:30">Collection</jtok>
<jtok eid="81" type="parameter_type" span="899:31:899:42">BibtexEntry</jtok>
<jtok eid="81" type="parameter_name" span="899:44:899:50">bibtex</jtok>
<jtok eid="81" type="method_call" span="901:3:901:8">reset</jtok>
<jtok eid="81" type="line_comment" span="903:5:903:22">// Create entries</jtok>
<jtok eid="81" type="primary_name_ref" span="904:4:904:11">entries</jtok>
<jtok eid="81" type="constructor_call" span="904:18:904:24">Vector</jtok>
<jtok eid="81" type="constructor_call" span="904:25:904:33">BstEntry</jtok>
<jtok eid="81" type="primary_name_ref" span="904:35:904:41">bibtex</jtok>
<jtok eid="81" type="method_call" span="904:42:904:46">size</jtok>
<jtok eid="81" type="class_or_interface_ref" span="905:4:905:16">ListIterator</jtok>
<jtok eid="81" type="class_or_interface_ref" span="905:17:905:25">BstEntry</jtok>
<jtok eid="81" type="local_variable_name" span="905:27:905:28">i</jtok>
<jtok eid="81" type="primary_name_ref" span="905:31:905:38">entries</jtok>
<jtok eid="81" type="method_call" span="905:39:905:51">listIterator</jtok>
<jtok eid="81" type="class_or_interface_ref" span="906:9:906:20">BibtexEntry</jtok>
<jtok eid="81" type="local_variable_name" span="906:21:906:26">entry</jtok>
<jtok eid="81" type="primary_name_ref" span="906:29:906:35">bibtex</jtok>
<jtok eid="81" type="primary_name_ref" span="907:5:907:6">i</jtok>
<jtok eid="81" type="method_call" span="907:7:907:10">add</jtok>
<jtok eid="81" type="constructor_call" span="907:15:907:23">BstEntry</jtok>
<jtok eid="81" type="primary_name_ref" span="907:24:907:29">entry</jtok>
<jtok eid="81" type="line_comment" span="911:3:911:44">// assert tree.getType() == Bst.COMMANDS;</jtok>
<jtok eid="81" type="line_comment" span="913:3:913:8">// Go</jtok>
<jtok eid="81" type="local_variable_name" span="914:12:914:13">i</jtok>
<jtok eid="81" type="primary_name_ref" span="914:19:914:20">i</jtok>
<jtok eid="81" type="primary_name_ref" span="914:23:914:27">tree</jtok>
<jtok eid="81" type="method_call" span="914:28:914:41">getChildCount</jtok>
<jtok eid="81" type="primary_name_ref" span="914:45:914:46">i</jtok>
<jtok eid="81" type="class_or_interface_ref" span="915:4:915:8">Tree</jtok>
<jtok eid="81" type="local_variable_name" span="915:9:915:14">child</jtok>
<jtok eid="81" type="primary_name_ref" span="915:17:915:21">tree</jtok>
<jtok eid="81" type="method_call" span="915:22:915:30">getChild</jtok>
<jtok eid="81" type="primary_name_ref" span="915:31:915:32">i</jtok>
<jtok eid="81" type="primary_name_ref" span="916:12:916:17">child</jtok>
<jtok eid="81" type="method_call" span="916:18:916:25">getType</jtok>
<jtok eid="81" type="primary_name_ref" span="917:9:917:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="917:19:917:26">STRINGS</jtok>
<jtok eid="81" type="method_call" span="918:5:918:12">strings</jtok>
<jtok eid="81" type="primary_name_ref" span="918:13:918:18">child</jtok>
<jtok eid="81" type="primary_name_ref" span="920:9:920:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="920:19:920:27">INTEGERS</jtok>
<jtok eid="81" type="method_call" span="921:5:921:13">integers</jtok>
<jtok eid="81" type="primary_name_ref" span="921:14:921:19">child</jtok>
<jtok eid="81" type="primary_name_ref" span="923:9:923:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="923:19:923:27">FUNCTION</jtok>
<jtok eid="81" type="method_call" span="924:5:924:13">function</jtok>
<jtok eid="81" type="primary_name_ref" span="924:14:924:19">child</jtok>
<jtok eid="81" type="primary_name_ref" span="926:9:926:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="926:19:926:26">EXECUTE</jtok>
<jtok eid="81" type="method_call" span="927:5:927:12">execute</jtok>
<jtok eid="81" type="primary_name_ref" span="927:13:927:18">child</jtok>
<jtok eid="81" type="primary_name_ref" span="929:9:929:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="929:19:929:23">SORT</jtok>
<jtok eid="81" type="method_call" span="930:5:930:9">sort</jtok>
<jtok eid="81" type="primary_name_ref" span="930:10:930:15">child</jtok>
<jtok eid="81" type="primary_name_ref" span="932:9:932:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="932:19:932:26">ITERATE</jtok>
<jtok eid="81" type="method_call" span="933:5:933:12">iterate</jtok>
<jtok eid="81" type="primary_name_ref" span="933:13:933:18">child</jtok>
<jtok eid="81" type="primary_name_ref" span="935:9:935:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="935:19:935:26">REVERSE</jtok>
<jtok eid="81" type="method_call" span="936:5:936:12">reverse</jtok>
<jtok eid="81" type="primary_name_ref" span="936:13:936:18">child</jtok>
<jtok eid="81" type="primary_name_ref" span="938:9:938:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="938:19:938:24">ENTRY</jtok>
<jtok eid="81" type="method_call" span="939:5:939:10">entry</jtok>
<jtok eid="81" type="primary_name_ref" span="939:11:939:16">child</jtok>
<jtok eid="81" type="primary_name_ref" span="941:9:941:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="941:19:941:23">READ</jtok>
<jtok eid="81" type="method_call" span="942:5:942:9">read</jtok>
<jtok eid="81" type="primary_name_ref" span="944:9:944:18">BstParser</jtok>
<jtok eid="81" type="qualified_name_ref" span="944:19:944:24">MACRO</jtok>
<jtok eid="81" type="method_call" span="945:5:945:10">macro</jtok>
<jtok eid="81" type="primary_name_ref" span="945:11:945:16">child</jtok>
<jtok eid="81" type="primary_name_ref" span="950:10:950:13">bbl</jtok>
<jtok eid="81" type="method_call" span="950:14:950:22">toString</jtok>
<jtok eid="82" type="method_name" span="953:15:953:20">reset</jtok>
<jtok eid="82" type="primary_name_ref" span="954:3:954:6">bbl</jtok>
<jtok eid="82" type="constructor_call" span="954:13:954:25">StringBuffer</jtok>
<jtok eid="82" type="primary_name_ref" span="956:3:956:10">entries</jtok>
<jtok eid="82" type="primary_name_ref" span="958:3:958:10">strings</jtok>
<jtok eid="82" type="constructor_call" span="958:17:958:24">HashMap</jtok>
<jtok eid="82" type="constructor_call" span="958:25:958:31">String</jtok>
<jtok eid="82" type="constructor_call" span="958:33:958:39">String</jtok>
<jtok eid="82" type="primary_name_ref" span="960:3:960:11">integers</jtok>
<jtok eid="82" type="constructor_call" span="960:18:960:25">HashMap</jtok>
<jtok eid="82" type="constructor_call" span="960:26:960:32">String</jtok>
<jtok eid="82" type="constructor_call" span="960:34:960:41">Integer</jtok>
<jtok eid="82" type="primary_name_ref" span="961:3:961:11">integers</jtok>
<jtok eid="82" type="method_call" span="961:12:961:15">put</jtok>
<jtok eid="82" type="string_literal" span="961:16:961:28">"entry.max$"</jtok>
<jtok eid="82" type="constructor_call" span="961:34:961:41">Integer</jtok>
<jtok eid="82" type="primary_name_ref" span="961:42:961:49">Integer</jtok>
<jtok eid="82" type="qualified_name_ref" span="961:50:961:59">MAX_VALUE</jtok>
<jtok eid="82" type="primary_name_ref" span="962:3:962:11">integers</jtok>
<jtok eid="82" type="method_call" span="962:12:962:15">put</jtok>
<jtok eid="82" type="string_literal" span="962:16:962:29">"global.max$"</jtok>
<jtok eid="82" type="constructor_call" span="962:35:962:42">Integer</jtok>
<jtok eid="82" type="primary_name_ref" span="962:43:962:50">Integer</jtok>
<jtok eid="82" type="qualified_name_ref" span="962:51:962:60">MAX_VALUE</jtok>
<jtok eid="82" type="primary_name_ref" span="964:3:964:12">functions</jtok>
<jtok eid="82" type="constructor_call" span="964:19:964:26">HashMap</jtok>
<jtok eid="82" type="constructor_call" span="964:27:964:33">String</jtok>
<jtok eid="82" type="constructor_call" span="964:35:964:46">BstFunction</jtok>
<jtok eid="82" type="primary_name_ref" span="965:3:965:12">functions</jtok>
<jtok eid="82" type="method_call" span="965:13:965:19">putAll</jtok>
<jtok eid="82" type="primary_name_ref" span="965:20:965:36">buildInFunctions</jtok>
<jtok eid="82" type="primary_name_ref" span="967:3:967:8">stack</jtok>
<jtok eid="82" type="constructor_call" span="967:15:967:20">Stack</jtok>
<jtok eid="82" type="constructor_call" span="967:21:967:27">Object</jtok>
<jtok eid="1" type="block_comment" span="970:2:979:5">/**
	 * Dredges up from the database file the field values for each entry in the
	 * list. It has no arguments. If a database entry doesn't have a value for a
	 * field (and probably no database entry will have a value for every field),
	 * that field variable is marked as missing for the entry.
	 * 
	 * We use null for the missing entry designator.
	 * 
	 * @param child
	 */</jtok>
<jtok eid="83" type="method_name" span="980:15:980:19">read</jtok>
<jtok eid="83" type="class_or_interface_ref" span="982:3:982:11">Iterator</jtok>
<jtok eid="83" type="class_or_interface_ref" span="982:12:982:20">BstEntry</jtok>
<jtok eid="83" type="local_variable_name" span="982:22:982:23">i</jtok>
<jtok eid="83" type="primary_name_ref" span="982:26:982:33">entries</jtok>
<jtok eid="83" type="method_call" span="982:34:982:42">iterator</jtok>
<jtok eid="83" type="primary_name_ref" span="983:10:983:11">i</jtok>
<jtok eid="83" type="method_call" span="983:12:983:19">hasNext</jtok>
<jtok eid="83" type="class_or_interface_ref" span="984:4:984:12">BstEntry</jtok>
<jtok eid="83" type="local_variable_name" span="984:13:984:14">e</jtok>
<jtok eid="83" type="primary_name_ref" span="984:17:984:18">i</jtok>
<jtok eid="83" type="method_call" span="984:19:984:23">next</jtok>
<jtok eid="83" type="class_or_interface_ref" span="986:9:986:12">Map</jtok>
<jtok eid="83" type="class_or_interface_ref" span="986:13:986:18">Entry</jtok>
<jtok eid="83" type="class_or_interface_ref" span="986:19:986:25">String</jtok>
<jtok eid="83" type="class_or_interface_ref" span="986:27:986:33">String</jtok>
<jtok eid="83" type="local_variable_name" span="986:35:986:41">mEntry</jtok>
<jtok eid="83" type="primary_name_ref" span="986:44:986:45">e</jtok>
<jtok eid="83" type="qualified_name_ref" span="986:46:986:52">fields</jtok>
<jtok eid="83" type="method_call" span="986:53:986:61">entrySet</jtok>
<jtok eid="83" type="class_or_interface_ref" span="987:5:987:11">Object</jtok>
<jtok eid="83" type="local_variable_name" span="987:12:987:22">fieldValue</jtok>
<jtok eid="83" type="primary_name_ref" span="987:25:987:26">e</jtok>
<jtok eid="83" type="qualified_name_ref" span="987:27:987:32">entry</jtok>
<jtok eid="83" type="method_call" span="987:33:987:41">getField</jtok>
<jtok eid="83" type="primary_name_ref" span="987:42:987:48">mEntry</jtok>
<jtok eid="83" type="method_call" span="987:49:987:55">getKey</jtok>
<jtok eid="83" type="primary_name_ref" span="989:5:989:11">mEntry</jtok>
<jtok eid="83" type="method_call" span="989:12:989:20">setValue</jtok>
<jtok eid="83" type="primary_name_ref" span="989:22:989:32">fieldValue</jtok>
<jtok eid="83" type="primary_name_ref" span="989:50:989:60">fieldValue</jtok>
<jtok eid="83" type="method_call" span="989:61:989:69">toString</jtok>
<jtok eid="83" type="primary_name_ref" span="993:3:993:4">i</jtok>
<jtok eid="83" type="primary_name_ref" span="993:7:993:14">entries</jtok>
<jtok eid="83" type="method_call" span="993:15:993:23">iterator</jtok>
<jtok eid="83" type="primary_name_ref" span="994:10:994:11">i</jtok>
<jtok eid="83" type="method_call" span="994:12:994:19">hasNext</jtok>
<jtok eid="83" type="class_or_interface_ref" span="995:4:995:12">BstEntry</jtok>
<jtok eid="83" type="local_variable_name" span="995:13:995:14">e</jtok>
<jtok eid="83" type="primary_name_ref" span="995:17:995:18">i</jtok>
<jtok eid="83" type="method_call" span="995:19:995:23">next</jtok>
<jtok eid="83" type="primary_name_ref" span="996:9:996:10">e</jtok>
<jtok eid="83" type="qualified_name_ref" span="996:11:996:17">fields</jtok>
<jtok eid="83" type="method_call" span="996:18:996:29">containsKey</jtok>
<jtok eid="83" type="string_literal" span="996:30:996:40">"crossref"</jtok>
<jtok eid="83" type="primary_name_ref" span="997:5:997:6">e</jtok>
<jtok eid="83" type="qualified_name_ref" span="997:7:997:13">fields</jtok>
<jtok eid="83" type="method_call" span="997:14:997:17">put</jtok>
<jtok eid="83" type="string_literal" span="997:18:997:28">"crossref"</jtok>
<jtok eid="1" type="block_comment" span="1002:2:1013:5">/**
	 * Defines a string macro. It has two arguments; the first is the macro's
	 * name, which is treated like any other variable or function name, and the
	 * second is its definition, which must be double-quote-delimited. You must
	 * have one for each three-letter month abbreviation; in addition, you
	 * should have one for common journal names. The user's database may
	 * override any definition you define using this command. If you want to
	 * define a string the user can't touch, use the FUNCTION command, which has
	 * a compatible syntax.
	 * 
	 * @param child
	 */</jtok>
<jtok eid="84" type="method_name" span="1014:15:1014:20">macro</jtok>
<jtok eid="84" type="parameter_type" span="1014:21:1014:25">Tree</jtok>
<jtok eid="84" type="parameter_name" span="1014:26:1014:31">child</jtok>
<jtok eid="84" type="class_or_interface_ref" span="1015:3:1015:9">String</jtok>
<jtok eid="84" type="local_variable_name" span="1015:10:1015:14">name</jtok>
<jtok eid="84" type="primary_name_ref" span="1015:17:1015:22">child</jtok>
<jtok eid="84" type="method_call" span="1015:23:1015:31">getChild</jtok>
<jtok eid="84" type="method_call" span="1015:35:1015:42">getText</jtok>
<jtok eid="84" type="class_or_interface_ref" span="1016:3:1016:9">String</jtok>
<jtok eid="84" type="local_variable_name" span="1016:10:1016:21">replacement</jtok>
<jtok eid="84" type="primary_name_ref" span="1016:24:1016:29">child</jtok>
<jtok eid="84" type="method_call" span="1016:30:1016:38">getChild</jtok>
<jtok eid="84" type="method_call" span="1016:42:1016:49">getText</jtok>
<jtok eid="84" type="primary_name_ref" span="1017:3:1017:12">functions</jtok>
<jtok eid="84" type="method_call" span="1017:13:1017:16">put</jtok>
<jtok eid="84" type="primary_name_ref" span="1017:17:1017:21">name</jtok>
<jtok eid="84" type="constructor_call" span="1017:27:1017:40">MacroFunction</jtok>
<jtok eid="84" type="primary_name_ref" span="1017:41:1017:52">replacement</jtok>
<jtok eid="85" type="class_name" span="1020:15:1020:28">MacroFunction</jtok>
<jtok eid="85" type="class_or_interface_ref" span="1020:40:1020:51">BstFunction</jtok>
<jtok eid="85" type="class_or_interface_ref" span="1022:3:1022:9">String</jtok>
<jtok eid="85" type="field_name" span="1022:10:1022:21">replacement</jtok>
<jtok eid="86" type="method_name" span="1024:10:1024:23">MacroFunction</jtok>
<jtok eid="86" type="parameter_type" span="1024:24:1024:30">String</jtok>
<jtok eid="86" type="parameter_name" span="1024:31:1024:42">replacement</jtok>
<jtok eid="86" type="qualified_name_ref" span="1025:9:1025:20">replacement</jtok>
<jtok eid="86" type="primary_name_ref" span="1025:23:1025:34">replacement</jtok>
<jtok eid="87" type="method_name" span="1028:15:1028:22">execute</jtok>
<jtok eid="87" type="parameter_type" span="1028:23:1028:31">BstEntry</jtok>
<jtok eid="87" type="parameter_name" span="1028:32:1028:39">context</jtok>
<jtok eid="87" type="primary_name_ref" span="1029:4:1029:6">VM</jtok>
<jtok eid="87" type="method_call" span="1029:12:1029:16">push</jtok>
<jtok eid="87" type="primary_name_ref" span="1029:17:1029:28">replacement</jtok>
<jtok eid="1" type="block_comment" span="1033:2:1041:5">/*
	 * Declares the fields and entry variables. It has three arguments, each a
	 * (possibly empty) list of variable names. The three lists are of: fields,
	 * integer entry variables, and string entry variables. There is an
	 * additional field that BibTEX automatically declares, crossref, used for
	 * cross ref- erencing. And there is an additional string entry variable
	 * automatically declared, sort.key$, used by the SORT command. Each of
	 * these variables has a value for each entry on the list.
	 */</jtok>
<jtok eid="88" type="method_name" span="1042:15:1042:20">entry</jtok>
<jtok eid="88" type="parameter_type" span="1042:21:1042:25">Tree</jtok>
<jtok eid="88" type="parameter_name" span="1042:26:1042:31">child</jtok>
<jtok eid="88" type="line_comment" span="1044:5:1044:20">// Fields first</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1045:4:1045:8">Tree</jtok>
<jtok eid="88" type="local_variable_name" span="1045:9:1045:10">t</jtok>
<jtok eid="88" type="primary_name_ref" span="1045:13:1045:18">child</jtok>
<jtok eid="88" type="method_call" span="1045:19:1045:27">getChild</jtok>
<jtok eid="88" type="line_comment" span="1046:4:1046:40">// assert t.getType() == Bst.IDLIST;</jtok>
<jtok eid="88" type="local_variable_name" span="1048:13:1048:14">i</jtok>
<jtok eid="88" type="primary_name_ref" span="1048:20:1048:21">i</jtok>
<jtok eid="88" type="primary_name_ref" span="1048:24:1048:25">t</jtok>
<jtok eid="88" type="method_call" span="1048:26:1048:39">getChildCount</jtok>
<jtok eid="88" type="primary_name_ref" span="1048:43:1048:44">i</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1049:5:1049:11">String</jtok>
<jtok eid="88" type="local_variable_name" span="1049:12:1049:16">name</jtok>
<jtok eid="88" type="primary_name_ref" span="1049:19:1049:20">t</jtok>
<jtok eid="88" type="method_call" span="1049:21:1049:29">getChild</jtok>
<jtok eid="88" type="primary_name_ref" span="1049:30:1049:31">i</jtok>
<jtok eid="88" type="method_call" span="1049:33:1049:40">getText</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1051:10:1051:18">BstEntry</jtok>
<jtok eid="88" type="local_variable_name" span="1051:19:1051:24">entry</jtok>
<jtok eid="88" type="primary_name_ref" span="1051:27:1051:34">entries</jtok>
<jtok eid="88" type="primary_name_ref" span="1052:6:1052:11">entry</jtok>
<jtok eid="88" type="qualified_name_ref" span="1052:12:1052:18">fields</jtok>
<jtok eid="88" type="method_call" span="1052:19:1052:22">put</jtok>
<jtok eid="88" type="primary_name_ref" span="1052:23:1052:27">name</jtok>
<jtok eid="88" type="line_comment" span="1056:5:1056:16">// Integers</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1057:4:1057:8">Tree</jtok>
<jtok eid="88" type="local_variable_name" span="1057:9:1057:10">t</jtok>
<jtok eid="88" type="primary_name_ref" span="1057:13:1057:18">child</jtok>
<jtok eid="88" type="method_call" span="1057:19:1057:27">getChild</jtok>
<jtok eid="88" type="line_comment" span="1058:4:1058:40">// assert t.getType() == Bst.IDLIST;</jtok>
<jtok eid="88" type="local_variable_name" span="1060:13:1060:14">i</jtok>
<jtok eid="88" type="primary_name_ref" span="1060:20:1060:21">i</jtok>
<jtok eid="88" type="primary_name_ref" span="1060:24:1060:25">t</jtok>
<jtok eid="88" type="method_call" span="1060:26:1060:39">getChildCount</jtok>
<jtok eid="88" type="primary_name_ref" span="1060:43:1060:44">i</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1061:5:1061:11">String</jtok>
<jtok eid="88" type="local_variable_name" span="1061:12:1061:16">name</jtok>
<jtok eid="88" type="primary_name_ref" span="1061:19:1061:20">t</jtok>
<jtok eid="88" type="method_call" span="1061:21:1061:29">getChild</jtok>
<jtok eid="88" type="primary_name_ref" span="1061:30:1061:31">i</jtok>
<jtok eid="88" type="method_call" span="1061:33:1061:40">getText</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1063:10:1063:18">BstEntry</jtok>
<jtok eid="88" type="local_variable_name" span="1063:19:1063:24">entry</jtok>
<jtok eid="88" type="primary_name_ref" span="1063:27:1063:34">entries</jtok>
<jtok eid="88" type="primary_name_ref" span="1064:6:1064:11">entry</jtok>
<jtok eid="88" type="qualified_name_ref" span="1064:12:1064:20">integers</jtok>
<jtok eid="88" type="method_call" span="1064:21:1064:24">put</jtok>
<jtok eid="88" type="primary_name_ref" span="1064:25:1064:29">name</jtok>
<jtok eid="88" type="constructor_call" span="1064:35:1064:42">Integer</jtok>
<jtok eid="88" type="line_comment" span="1068:5:1068:15">// Strings</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1069:4:1069:8">Tree</jtok>
<jtok eid="88" type="local_variable_name" span="1069:9:1069:10">t</jtok>
<jtok eid="88" type="primary_name_ref" span="1069:13:1069:18">child</jtok>
<jtok eid="88" type="method_call" span="1069:19:1069:27">getChild</jtok>
<jtok eid="88" type="line_comment" span="1070:4:1070:40">// assert t.getType() == Bst.IDLIST;</jtok>
<jtok eid="88" type="local_variable_name" span="1072:13:1072:14">i</jtok>
<jtok eid="88" type="primary_name_ref" span="1072:20:1072:21">i</jtok>
<jtok eid="88" type="primary_name_ref" span="1072:24:1072:25">t</jtok>
<jtok eid="88" type="method_call" span="1072:26:1072:39">getChildCount</jtok>
<jtok eid="88" type="primary_name_ref" span="1072:43:1072:44">i</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1073:5:1073:11">String</jtok>
<jtok eid="88" type="local_variable_name" span="1073:12:1073:16">name</jtok>
<jtok eid="88" type="primary_name_ref" span="1073:19:1073:20">t</jtok>
<jtok eid="88" type="method_call" span="1073:21:1073:29">getChild</jtok>
<jtok eid="88" type="primary_name_ref" span="1073:30:1073:31">i</jtok>
<jtok eid="88" type="method_call" span="1073:33:1073:40">getText</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1074:10:1074:18">BstEntry</jtok>
<jtok eid="88" type="local_variable_name" span="1074:19:1074:24">entry</jtok>
<jtok eid="88" type="primary_name_ref" span="1074:27:1074:34">entries</jtok>
<jtok eid="88" type="primary_name_ref" span="1075:6:1075:11">entry</jtok>
<jtok eid="88" type="qualified_name_ref" span="1075:12:1075:19">strings</jtok>
<jtok eid="88" type="method_call" span="1075:20:1075:23">put</jtok>
<jtok eid="88" type="primary_name_ref" span="1075:24:1075:28">name</jtok>
<jtok eid="88" type="class_or_interface_ref" span="1078:9:1078:17">BstEntry</jtok>
<jtok eid="88" type="local_variable_name" span="1078:18:1078:23">entry</jtok>
<jtok eid="88" type="primary_name_ref" span="1078:26:1078:33">entries</jtok>
<jtok eid="88" type="primary_name_ref" span="1079:5:1079:10">entry</jtok>
<jtok eid="88" type="qualified_name_ref" span="1079:11:1079:18">strings</jtok>
<jtok eid="88" type="method_call" span="1079:19:1079:22">put</jtok>
<jtok eid="88" type="string_literal" span="1079:23:1079:34">"sort.key$"</jtok>
<jtok eid="89" type="method_name" span="1084:15:1084:22">reverse</jtok>
<jtok eid="89" type="parameter_type" span="1084:23:1084:27">Tree</jtok>
<jtok eid="89" type="parameter_name" span="1084:28:1084:33">child</jtok>
<jtok eid="89" type="class_or_interface_ref" span="1086:3:1086:14">BstFunction</jtok>
<jtok eid="89" type="local_variable_name" span="1086:15:1086:16">f</jtok>
<jtok eid="89" type="primary_name_ref" span="1086:19:1086:28">functions</jtok>
<jtok eid="89" type="method_call" span="1086:29:1086:32">get</jtok>
<jtok eid="89" type="primary_name_ref" span="1086:33:1086:38">child</jtok>
<jtok eid="89" type="method_call" span="1086:39:1086:47">getChild</jtok>
<jtok eid="89" type="method_call" span="1086:51:1086:58">getText</jtok>
<jtok eid="89" type="class_or_interface_ref" span="1088:3:1088:15">ListIterator</jtok>
<jtok eid="89" type="class_or_interface_ref" span="1088:16:1088:24">BstEntry</jtok>
<jtok eid="89" type="local_variable_name" span="1088:26:1088:27">i</jtok>
<jtok eid="89" type="primary_name_ref" span="1088:30:1088:37">entries</jtok>
<jtok eid="89" type="method_call" span="1088:38:1088:50">listIterator</jtok>
<jtok eid="89" type="primary_name_ref" span="1088:51:1088:58">entries</jtok>
<jtok eid="89" type="method_call" span="1088:59:1088:63">size</jtok>
<jtok eid="89" type="primary_name_ref" span="1089:10:1089:11">i</jtok>
<jtok eid="89" type="method_call" span="1089:12:1089:23">hasPrevious</jtok>
<jtok eid="89" type="primary_name_ref" span="1090:4:1090:5">f</jtok>
<jtok eid="89" type="method_call" span="1090:6:1090:13">execute</jtok>
<jtok eid="89" type="primary_name_ref" span="1090:14:1090:15">i</jtok>
<jtok eid="89" type="method_call" span="1090:16:1090:24">previous</jtok>
<jtok eid="90" type="method_name" span="1094:15:1094:22">iterate</jtok>
<jtok eid="90" type="parameter_type" span="1094:23:1094:27">Tree</jtok>
<jtok eid="90" type="parameter_name" span="1094:28:1094:33">child</jtok>
<jtok eid="90" type="class_or_interface_ref" span="1095:3:1095:14">BstFunction</jtok>
<jtok eid="90" type="local_variable_name" span="1095:15:1095:16">f</jtok>
<jtok eid="90" type="primary_name_ref" span="1095:19:1095:28">functions</jtok>
<jtok eid="90" type="method_call" span="1095:29:1095:32">get</jtok>
<jtok eid="90" type="primary_name_ref" span="1095:33:1095:38">child</jtok>
<jtok eid="90" type="method_call" span="1095:39:1095:47">getChild</jtok>
<jtok eid="90" type="method_call" span="1095:51:1095:58">getText</jtok>
<jtok eid="90" type="class_or_interface_ref" span="1097:3:1097:11">Iterator</jtok>
<jtok eid="90" type="class_or_interface_ref" span="1097:12:1097:20">BstEntry</jtok>
<jtok eid="90" type="local_variable_name" span="1097:22:1097:23">i</jtok>
<jtok eid="90" type="primary_name_ref" span="1097:26:1097:33">entries</jtok>
<jtok eid="90" type="method_call" span="1097:34:1097:42">iterator</jtok>
<jtok eid="90" type="primary_name_ref" span="1098:10:1098:11">i</jtok>
<jtok eid="90" type="method_call" span="1098:12:1098:19">hasNext</jtok>
<jtok eid="90" type="primary_name_ref" span="1099:4:1099:5">f</jtok>
<jtok eid="90" type="method_call" span="1099:6:1099:13">execute</jtok>
<jtok eid="90" type="primary_name_ref" span="1099:14:1099:15">i</jtok>
<jtok eid="90" type="method_call" span="1099:16:1099:20">next</jtok>
<jtok eid="1" type="block_comment" span="1103:2:1108:5">/**
	 * Sorts the entry list using the values of the string entry variable
	 * sort.key$. It has no arguments.
	 * 
	 * @param child
	 */</jtok>
<jtok eid="91" type="method_name" span="1109:15:1109:19">sort</jtok>
<jtok eid="91" type="parameter_type" span="1109:20:1109:24">Tree</jtok>
<jtok eid="91" type="parameter_name" span="1109:25:1109:30">child</jtok>
<jtok eid="91" type="primary_name_ref" span="1110:3:1110:14">Collections</jtok>
<jtok eid="91" type="method_call" span="1110:15:1110:19">sort</jtok>
<jtok eid="91" type="primary_name_ref" span="1110:20:1110:27">entries</jtok>
<jtok eid="91" type="constructor_call" span="1110:33:1110:43">Comparator</jtok>
<jtok eid="91" type="constructor_call" span="1110:44:1110:52">BstEntry</jtok>
<jtok eid="93" type="method_name" span="1111:15:1111:22">compare</jtok>
<jtok eid="93" type="parameter_type" span="1111:23:1111:31">BstEntry</jtok>
<jtok eid="93" type="parameter_name" span="1111:32:1111:34">o1</jtok>
<jtok eid="93" type="parameter_type" span="1111:36:1111:44">BstEntry</jtok>
<jtok eid="93" type="parameter_name" span="1111:45:1111:47">o2</jtok>
<jtok eid="93" type="primary_name_ref" span="1112:13:1112:15">o1</jtok>
<jtok eid="93" type="qualified_name_ref" span="1112:16:1112:23">strings</jtok>
<jtok eid="93" type="method_call" span="1112:24:1112:27">get</jtok>
<jtok eid="93" type="string_literal" span="1112:28:1112:39">"sort.key$"</jtok>
<jtok eid="93" type="method_call" span="1112:42:1112:51">compareTo</jtok>
<jtok eid="93" type="primary_name_ref" span="1112:52:1112:54">o2</jtok>
<jtok eid="93" type="qualified_name_ref" span="1112:55:1112:62">strings</jtok>
<jtok eid="93" type="method_call" span="1113:7:1113:10">get</jtok>
<jtok eid="93" type="string_literal" span="1113:11:1113:22">"sort.key$"</jtok>
<jtok eid="94" type="method_name" span="1118:14:1118:30">executeInContext</jtok>
<jtok eid="94" type="parameter_type" span="1118:31:1118:37">Object</jtok>
<jtok eid="94" type="parameter_name" span="1118:38:1118:39">o</jtok>
<jtok eid="94" type="parameter_type" span="1118:41:1118:49">BstEntry</jtok>
<jtok eid="94" type="parameter_name" span="1118:50:1118:57">context</jtok>
<jtok eid="94" type="primary_name_ref" span="1119:7:1119:8">o</jtok>
<jtok eid="94" type="class_or_interface_ref" span="1119:20:1119:24">Tree</jtok>
<jtok eid="94" type="class_or_interface_ref" span="1120:4:1120:8">Tree</jtok>
<jtok eid="94" type="local_variable_name" span="1120:9:1120:10">t</jtok>
<jtok eid="94" type="class_or_interface_ref" span="1120:14:1120:18">Tree</jtok>
<jtok eid="94" type="primary_name_ref" span="1120:20:1120:21">o</jtok>
<jtok eid="94" type="constructor_call" span="1121:8:1121:21">StackFunction</jtok>
<jtok eid="94" type="primary_name_ref" span="1121:22:1121:23">t</jtok>
<jtok eid="94" type="method_call" span="1121:25:1121:32">execute</jtok>
<jtok eid="94" type="primary_name_ref" span="1121:33:1121:40">context</jtok>
<jtok eid="94" type="primary_name_ref" span="1122:14:1122:15">o</jtok>
<jtok eid="94" type="class_or_interface_ref" span="1122:27:1122:37">Identifier</jtok>
<jtok eid="94" type="method_call" span="1123:4:1123:11">execute</jtok>
<jtok eid="94" type="class_or_interface_ref" span="1123:14:1123:24">Identifier</jtok>
<jtok eid="94" type="primary_name_ref" span="1123:26:1123:27">o</jtok>
<jtok eid="94" type="method_call" span="1123:29:1123:36">getName</jtok>
<jtok eid="94" type="primary_name_ref" span="1123:40:1123:47">context</jtok>
<jtok eid="95" type="method_name" span="1127:14:1127:21">execute</jtok>
<jtok eid="95" type="parameter_type" span="1127:22:1127:26">Tree</jtok>
<jtok eid="95" type="parameter_name" span="1127:27:1127:32">child</jtok>
<jtok eid="95" type="method_call" span="1128:3:1128:10">execute</jtok>
<jtok eid="95" type="primary_name_ref" span="1128:11:1128:16">child</jtok>
<jtok eid="95" type="method_call" span="1128:17:1128:25">getChild</jtok>
<jtok eid="95" type="method_call" span="1128:29:1128:36">getText</jtok>
<jtok eid="96" type="class_name" span="1131:15:1131:28">StackFunction</jtok>
<jtok eid="96" type="class_or_interface_ref" span="1131:40:1131:51">BstFunction</jtok>
<jtok eid="96" type="class_or_interface_ref" span="1133:3:1133:7">Tree</jtok>
<jtok eid="96" type="field_name" span="1133:8:1133:12">tree</jtok>
<jtok eid="97" type="class_or_interface_ref" span="1135:10:1135:14">Tree</jtok>
<jtok eid="97" type="method_name" span="1135:15:1135:22">getTree</jtok>
<jtok eid="97" type="primary_name_ref" span="1136:11:1136:15">tree</jtok>
<jtok eid="98" type="method_name" span="1139:10:1139:23">StackFunction</jtok>
<jtok eid="98" type="parameter_type" span="1139:24:1139:28">Tree</jtok>
<jtok eid="98" type="parameter_name" span="1139:29:1139:34">stack</jtok>
<jtok eid="98" type="line_comment" span="1140:4:1140:43">// assert stack.getType() == Bst.STACK;</jtok>
<jtok eid="98" type="primary_name_ref" span="1141:4:1141:8">tree</jtok>
<jtok eid="98" type="primary_name_ref" span="1141:11:1141:16">stack</jtok>
<jtok eid="99" type="method_name" span="1144:15:1144:22">execute</jtok>
<jtok eid="99" type="parameter_type" span="1144:23:1144:31">BstEntry</jtok>
<jtok eid="99" type="parameter_name" span="1144:32:1144:39">context</jtok>
<jtok eid="99" type="local_variable_name" span="1146:13:1146:14">i</jtok>
<jtok eid="99" type="primary_name_ref" span="1146:20:1146:21">i</jtok>
<jtok eid="99" type="primary_name_ref" span="1146:24:1146:28">tree</jtok>
<jtok eid="99" type="method_call" span="1146:29:1146:42">getChildCount</jtok>
<jtok eid="99" type="primary_name_ref" span="1146:46:1146:47">i</jtok>
<jtok eid="99" type="class_or_interface_ref" span="1148:5:1148:9">Tree</jtok>
<jtok eid="99" type="local_variable_name" span="1148:10:1148:11">c</jtok>
<jtok eid="99" type="primary_name_ref" span="1148:14:1148:18">tree</jtok>
<jtok eid="99" type="method_call" span="1148:19:1148:27">getChild</jtok>
<jtok eid="99" type="primary_name_ref" span="1148:28:1148:29">i</jtok>
<jtok eid="99" type="primary_name_ref" span="1151:14:1151:15">c</jtok>
<jtok eid="99" type="method_call" span="1151:16:1151:23">getType</jtok>
<jtok eid="99" type="primary_name_ref" span="1152:11:1152:20">BstParser</jtok>
<jtok eid="99" type="qualified_name_ref" span="1152:21:1152:27">STRING</jtok>
<jtok eid="99" type="class_or_interface_ref" span="1153:7:1153:13">String</jtok>
<jtok eid="99" type="local_variable_name" span="1153:14:1153:15">s</jtok>
<jtok eid="99" type="primary_name_ref" span="1153:18:1153:19">c</jtok>
<jtok eid="99" type="method_call" span="1153:20:1153:27">getText</jtok>
<jtok eid="99" type="method_call" span="1154:7:1154:11">push</jtok>
<jtok eid="99" type="primary_name_ref" span="1154:12:1154:13">s</jtok>
<jtok eid="99" type="method_call" span="1154:14:1154:23">substring</jtok>
<jtok eid="99" type="primary_name_ref" span="1154:27:1154:28">s</jtok>
<jtok eid="99" type="method_call" span="1154:29:1154:35">length</jtok>
<jtok eid="99" type="primary_name_ref" span="1157:11:1157:20">BstParser</jtok>
<jtok eid="99" type="qualified_name_ref" span="1157:21:1157:28">INTEGER</jtok>
<jtok eid="99" type="method_call" span="1158:7:1158:11">push</jtok>
<jtok eid="99" type="constructor_call" span="1158:16:1158:23">Integer</jtok>
<jtok eid="99" type="primary_name_ref" span="1158:24:1158:31">Integer</jtok>
<jtok eid="99" type="method_call" span="1158:32:1158:40">parseInt</jtok>
<jtok eid="99" type="primary_name_ref" span="1158:41:1158:42">c</jtok>
<jtok eid="99" type="method_call" span="1158:43:1158:50">getText</jtok>
<jtok eid="99" type="method_call" span="1158:53:1158:62">substring</jtok>
<jtok eid="99" type="primary_name_ref" span="1160:11:1160:20">BstParser</jtok>
<jtok eid="99" type="qualified_name_ref" span="1160:21:1160:27">QUOTED</jtok>
<jtok eid="99" type="method_call" span="1161:7:1161:11">push</jtok>
<jtok eid="99" type="constructor_call" span="1161:16:1161:26">Identifier</jtok>
<jtok eid="99" type="primary_name_ref" span="1161:27:1161:28">c</jtok>
<jtok eid="99" type="method_call" span="1161:29:1161:36">getText</jtok>
<jtok eid="99" type="method_call" span="1161:39:1161:48">substring</jtok>
<jtok eid="99" type="primary_name_ref" span="1163:11:1163:20">BstParser</jtok>
<jtok eid="99" type="qualified_name_ref" span="1163:21:1163:26">STACK</jtok>
<jtok eid="99" type="method_call" span="1164:7:1164:11">push</jtok>
<jtok eid="99" type="primary_name_ref" span="1164:12:1164:13">c</jtok>
<jtok eid="99" type="primary_name_ref" span="1167:7:1167:9">VM</jtok>
<jtok eid="99" type="method_call" span="1167:15:1167:22">execute</jtok>
<jtok eid="99" type="primary_name_ref" span="1167:23:1167:24">c</jtok>
<jtok eid="99" type="method_call" span="1167:25:1167:32">getText</jtok>
<jtok eid="99" type="primary_name_ref" span="1167:36:1167:43">context</jtok>
<jtok eid="99" type="class_or_interface_ref" span="1169:14:1169:25">VMException</jtok>
<jtok eid="99" type="local_variable_name" span="1169:26:1169:27">e</jtok>
<jtok eid="99" type="primary_name_ref" span="1170:10:1170:14">file</jtok>
<jtok eid="99" type="primary_name_ref" span="1171:7:1171:13">System</jtok>
<jtok eid="99" type="qualified_name_ref" span="1171:14:1171:17">err</jtok>
<jtok eid="99" type="method_call" span="1171:18:1171:25">println</jtok>
<jtok eid="99" type="string_literal" span="1171:26:1171:34">"ERROR "</jtok>
<jtok eid="99" type="primary_name_ref" span="1171:37:1171:38">e</jtok>
<jtok eid="99" type="method_call" span="1171:39:1171:49">getMessage</jtok>
<jtok eid="99" type="string_literal" span="1171:54:1171:58">" ("</jtok>
<jtok eid="99" type="primary_name_ref" span="1171:61:1171:65">file</jtok>
<jtok eid="99" type="method_call" span="1171:66:1171:73">getPath</jtok>
<jtok eid="99" type="string_literal" span="1171:78:1171:81">":"</jtok>
<jtok eid="99" type="primary_name_ref" span="1172:10:1172:11">c</jtok>
<jtok eid="99" type="method_call" span="1172:12:1172:19">getLine</jtok>
<jtok eid="99" type="string_literal" span="1172:24:1172:27">")"</jtok>
<jtok eid="99" type="primary_name_ref" span="1174:7:1174:13">System</jtok>
<jtok eid="99" type="qualified_name_ref" span="1174:14:1174:17">err</jtok>
<jtok eid="99" type="method_call" span="1174:18:1174:25">println</jtok>
<jtok eid="99" type="string_literal" span="1174:26:1174:34">"ERROR "</jtok>
<jtok eid="99" type="primary_name_ref" span="1174:37:1174:38">e</jtok>
<jtok eid="99" type="method_call" span="1174:39:1174:49">getMessage</jtok>
<jtok eid="99" type="string_literal" span="1174:54:1174:58">" ("</jtok>
<jtok eid="99" type="primary_name_ref" span="1174:61:1174:62">c</jtok>
<jtok eid="99" type="method_call" span="1174:63:1174:70">getLine</jtok>
<jtok eid="99" type="string_literal" span="1174:75:1174:78">")"</jtok>
<jtok eid="99" type="primary_name_ref" span="1176:12:1176:13">e</jtok>
<jtok eid="100" type="method_name" span="1183:15:1183:19">push</jtok>
<jtok eid="100" type="parameter_type" span="1183:20:1183:24">Tree</jtok>
<jtok eid="100" type="parameter_name" span="1183:25:1183:26">t</jtok>
<jtok eid="100" type="primary_name_ref" span="1184:3:1184:8">stack</jtok>
<jtok eid="100" type="method_call" span="1184:9:1184:13">push</jtok>
<jtok eid="100" type="primary_name_ref" span="1184:14:1184:15">t</jtok>
<jtok eid="101" type="method_name" span="1187:14:1187:21">execute</jtok>
<jtok eid="101" type="parameter_type" span="1187:22:1187:28">String</jtok>
<jtok eid="101" type="parameter_name" span="1187:29:1187:33">name</jtok>
<jtok eid="101" type="parameter_type" span="1187:35:1187:43">BstEntry</jtok>
<jtok eid="101" type="parameter_name" span="1187:44:1187:51">context</jtok>
<jtok eid="101" type="primary_name_ref" span="1189:7:1189:14">context</jtok>
<jtok eid="101" type="primary_name_ref" span="1191:8:1191:15">context</jtok>
<jtok eid="101" type="qualified_name_ref" span="1191:16:1191:22">fields</jtok>
<jtok eid="101" type="method_call" span="1191:23:1191:34">containsKey</jtok>
<jtok eid="101" type="primary_name_ref" span="1191:35:1191:39">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1192:5:1192:10">stack</jtok>
<jtok eid="101" type="method_call" span="1192:11:1192:15">push</jtok>
<jtok eid="101" type="primary_name_ref" span="1192:16:1192:23">context</jtok>
<jtok eid="101" type="qualified_name_ref" span="1192:24:1192:30">fields</jtok>
<jtok eid="101" type="method_call" span="1192:31:1192:34">get</jtok>
<jtok eid="101" type="primary_name_ref" span="1192:35:1192:39">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1195:8:1195:15">context</jtok>
<jtok eid="101" type="qualified_name_ref" span="1195:16:1195:23">strings</jtok>
<jtok eid="101" type="method_call" span="1195:24:1195:35">containsKey</jtok>
<jtok eid="101" type="primary_name_ref" span="1195:36:1195:40">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1196:5:1196:10">stack</jtok>
<jtok eid="101" type="method_call" span="1196:11:1196:15">push</jtok>
<jtok eid="101" type="primary_name_ref" span="1196:16:1196:23">context</jtok>
<jtok eid="101" type="qualified_name_ref" span="1196:24:1196:31">strings</jtok>
<jtok eid="101" type="method_call" span="1196:32:1196:35">get</jtok>
<jtok eid="101" type="primary_name_ref" span="1196:36:1196:40">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1199:8:1199:15">context</jtok>
<jtok eid="101" type="qualified_name_ref" span="1199:16:1199:24">integers</jtok>
<jtok eid="101" type="method_call" span="1199:25:1199:36">containsKey</jtok>
<jtok eid="101" type="primary_name_ref" span="1199:37:1199:41">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1200:5:1200:10">stack</jtok>
<jtok eid="101" type="method_call" span="1200:11:1200:15">push</jtok>
<jtok eid="101" type="primary_name_ref" span="1200:16:1200:23">context</jtok>
<jtok eid="101" type="qualified_name_ref" span="1200:24:1200:32">integers</jtok>
<jtok eid="101" type="method_call" span="1200:33:1200:36">get</jtok>
<jtok eid="101" type="primary_name_ref" span="1200:37:1200:41">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1204:7:1204:14">strings</jtok>
<jtok eid="101" type="method_call" span="1204:15:1204:26">containsKey</jtok>
<jtok eid="101" type="primary_name_ref" span="1204:27:1204:31">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1205:4:1205:9">stack</jtok>
<jtok eid="101" type="method_call" span="1205:10:1205:14">push</jtok>
<jtok eid="101" type="primary_name_ref" span="1205:15:1205:22">strings</jtok>
<jtok eid="101" type="method_call" span="1205:23:1205:26">get</jtok>
<jtok eid="101" type="primary_name_ref" span="1205:27:1205:31">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1208:7:1208:15">integers</jtok>
<jtok eid="101" type="method_call" span="1208:16:1208:27">containsKey</jtok>
<jtok eid="101" type="primary_name_ref" span="1208:28:1208:32">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1209:4:1209:9">stack</jtok>
<jtok eid="101" type="method_call" span="1209:10:1209:14">push</jtok>
<jtok eid="101" type="primary_name_ref" span="1209:15:1209:23">integers</jtok>
<jtok eid="101" type="method_call" span="1209:24:1209:27">get</jtok>
<jtok eid="101" type="primary_name_ref" span="1209:28:1209:32">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1213:7:1213:16">functions</jtok>
<jtok eid="101" type="method_call" span="1213:17:1213:28">containsKey</jtok>
<jtok eid="101" type="primary_name_ref" span="1213:29:1213:33">name</jtok>
<jtok eid="101" type="primary_name_ref" span="1214:4:1214:13">functions</jtok>
<jtok eid="101" type="method_call" span="1214:14:1214:17">get</jtok>
<jtok eid="101" type="primary_name_ref" span="1214:18:1214:22">name</jtok>
<jtok eid="101" type="method_call" span="1214:24:1214:31">execute</jtok>
<jtok eid="101" type="primary_name_ref" span="1214:32:1214:39">context</jtok>
<jtok eid="101" type="constructor_call" span="1218:13:1218:24">VMException</jtok>
<jtok eid="101" type="string_literal" span="1218:25:1218:57">"No matching identifier found: "</jtok>
<jtok eid="101" type="primary_name_ref" span="1218:60:1218:64">name</jtok>
<jtok eid="102" type="method_name" span="1221:15:1221:23">function</jtok>
<jtok eid="102" type="parameter_type" span="1221:24:1221:28">Tree</jtok>
<jtok eid="102" type="parameter_name" span="1221:29:1221:34">child</jtok>
<jtok eid="102" type="class_or_interface_ref" span="1222:3:1222:9">String</jtok>
<jtok eid="102" type="local_variable_name" span="1222:10:1222:14">name</jtok>
<jtok eid="102" type="primary_name_ref" span="1222:17:1222:22">child</jtok>
<jtok eid="102" type="method_call" span="1222:23:1222:31">getChild</jtok>
<jtok eid="102" type="method_call" span="1222:35:1222:42">getText</jtok>
<jtok eid="102" type="class_or_interface_ref" span="1223:3:1223:7">Tree</jtok>
<jtok eid="102" type="local_variable_name" span="1223:8:1223:13">stack</jtok>
<jtok eid="102" type="primary_name_ref" span="1223:16:1223:21">child</jtok>
<jtok eid="102" type="method_call" span="1223:22:1223:30">getChild</jtok>
<jtok eid="102" type="primary_name_ref" span="1224:3:1224:12">functions</jtok>
<jtok eid="102" type="method_call" span="1224:13:1224:16">put</jtok>
<jtok eid="102" type="primary_name_ref" span="1224:17:1224:21">name</jtok>
<jtok eid="102" type="constructor_call" span="1224:27:1224:40">StackFunction</jtok>
<jtok eid="102" type="primary_name_ref" span="1224:41:1224:46">stack</jtok>
<jtok eid="1" type="block_comment" span="1228:2:1236:5">/**
	 * Declares global integer variables. It has one argument, a list of
	 * variable names. There are two such automatically-declared variables,
	 * entry.max$ and global.max$, used for limiting the lengths of string vari-
	 * ables. You may have any number of these commands, but a variable's
	 * declaration must precede its use.
	 * 
	 * @param child
	 */</jtok>
<jtok eid="103" type="method_name" span="1237:15:1237:23">integers</jtok>
<jtok eid="103" type="parameter_type" span="1237:24:1237:28">Tree</jtok>
<jtok eid="103" type="parameter_name" span="1237:29:1237:34">child</jtok>
<jtok eid="103" type="class_or_interface_ref" span="1238:3:1238:7">Tree</jtok>
<jtok eid="103" type="local_variable_name" span="1238:8:1238:9">t</jtok>
<jtok eid="103" type="primary_name_ref" span="1238:12:1238:17">child</jtok>
<jtok eid="103" type="method_call" span="1238:18:1238:26">getChild</jtok>
<jtok eid="103" type="line_comment" span="1239:3:1239:39">// assert t.getType() == Bst.IDLIST;</jtok>
<jtok eid="103" type="local_variable_name" span="1241:12:1241:13">i</jtok>
<jtok eid="103" type="primary_name_ref" span="1241:19:1241:20">i</jtok>
<jtok eid="103" type="primary_name_ref" span="1241:23:1241:24">t</jtok>
<jtok eid="103" type="method_call" span="1241:25:1241:38">getChildCount</jtok>
<jtok eid="103" type="primary_name_ref" span="1241:42:1241:43">i</jtok>
<jtok eid="103" type="class_or_interface_ref" span="1242:4:1242:10">String</jtok>
<jtok eid="103" type="local_variable_name" span="1242:11:1242:15">name</jtok>
<jtok eid="103" type="primary_name_ref" span="1242:18:1242:19">t</jtok>
<jtok eid="103" type="method_call" span="1242:20:1242:28">getChild</jtok>
<jtok eid="103" type="primary_name_ref" span="1242:29:1242:30">i</jtok>
<jtok eid="103" type="method_call" span="1242:32:1242:39">getText</jtok>
<jtok eid="103" type="primary_name_ref" span="1243:4:1243:12">integers</jtok>
<jtok eid="103" type="method_call" span="1243:13:1243:16">put</jtok>
<jtok eid="103" type="primary_name_ref" span="1243:17:1243:21">name</jtok>
<jtok eid="103" type="constructor_call" span="1243:27:1243:34">Integer</jtok>
<jtok eid="1" type="block_comment" span="1247:2:1253:5">/**
	 * Declares global string variables. It has one argument, a list of variable
	 * names. You may have any number of these commands, but a variable's
	 * declaration must precede its use.
	 * 
	 * @param child
	 */</jtok>
<jtok eid="104" type="method_name" span="1254:15:1254:22">strings</jtok>
<jtok eid="104" type="parameter_type" span="1254:23:1254:27">Tree</jtok>
<jtok eid="104" type="parameter_name" span="1254:28:1254:33">child</jtok>
<jtok eid="104" type="class_or_interface_ref" span="1255:3:1255:7">Tree</jtok>
<jtok eid="104" type="local_variable_name" span="1255:8:1255:9">t</jtok>
<jtok eid="104" type="primary_name_ref" span="1255:12:1255:17">child</jtok>
<jtok eid="104" type="method_call" span="1255:18:1255:26">getChild</jtok>
<jtok eid="104" type="line_comment" span="1256:3:1256:39">// assert t.getType() == Bst.IDLIST;</jtok>
<jtok eid="104" type="local_variable_name" span="1258:12:1258:13">i</jtok>
<jtok eid="104" type="primary_name_ref" span="1258:19:1258:20">i</jtok>
<jtok eid="104" type="primary_name_ref" span="1258:23:1258:24">t</jtok>
<jtok eid="104" type="method_call" span="1258:25:1258:38">getChildCount</jtok>
<jtok eid="104" type="primary_name_ref" span="1258:42:1258:43">i</jtok>
<jtok eid="104" type="class_or_interface_ref" span="1259:4:1259:10">String</jtok>
<jtok eid="104" type="local_variable_name" span="1259:11:1259:15">name</jtok>
<jtok eid="104" type="primary_name_ref" span="1259:18:1259:19">t</jtok>
<jtok eid="104" type="method_call" span="1259:20:1259:28">getChild</jtok>
<jtok eid="104" type="primary_name_ref" span="1259:29:1259:30">i</jtok>
<jtok eid="104" type="method_call" span="1259:32:1259:39">getText</jtok>
<jtok eid="104" type="primary_name_ref" span="1260:4:1260:11">strings</jtok>
<jtok eid="104" type="method_call" span="1260:12:1260:15">put</jtok>
<jtok eid="104" type="primary_name_ref" span="1260:16:1260:20">name</jtok>
<jtok eid="105" type="class_name" span="1264:15:1264:23">BstEntry</jtok>
<jtok eid="106" type="method_name" span="1266:10:1266:18">BstEntry</jtok>
<jtok eid="106" type="parameter_type" span="1266:19:1266:30">BibtexEntry</jtok>
<jtok eid="106" type="parameter_name" span="1266:31:1266:32">e</jtok>
<jtok eid="106" type="qualified_name_ref" span="1267:9:1267:14">entry</jtok>
<jtok eid="106" type="primary_name_ref" span="1267:17:1267:18">e</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1270:3:1270:14">BibtexEntry</jtok>
<jtok eid="105" type="field_name" span="1270:15:1270:20">entry</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1272:3:1272:6">Map</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1272:7:1272:13">String</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1272:15:1272:21">String</jtok>
<jtok eid="105" type="field_name" span="1272:23:1272:30">strings</jtok>
<jtok eid="105" type="constructor_call" span="1272:37:1272:44">HashMap</jtok>
<jtok eid="105" type="constructor_call" span="1272:45:1272:51">String</jtok>
<jtok eid="105" type="constructor_call" span="1272:53:1272:59">String</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1274:3:1274:6">Map</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1274:7:1274:13">String</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1274:15:1274:21">String</jtok>
<jtok eid="105" type="field_name" span="1274:23:1274:29">fields</jtok>
<jtok eid="105" type="constructor_call" span="1274:36:1274:43">HashMap</jtok>
<jtok eid="105" type="constructor_call" span="1274:44:1274:50">String</jtok>
<jtok eid="105" type="constructor_call" span="1274:52:1274:58">String</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1276:3:1276:6">Map</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1276:7:1276:13">String</jtok>
<jtok eid="105" type="class_or_interface_ref" span="1276:15:1276:22">Integer</jtok>
<jtok eid="105" type="field_name" span="1276:24:1276:32">integers</jtok>
<jtok eid="105" type="constructor_call" span="1276:39:1276:46">HashMap</jtok>
<jtok eid="105" type="constructor_call" span="1276:47:1276:53">String</jtok>
<jtok eid="105" type="constructor_call" span="1276:55:1276:62">Integer</jtok>
<jtok eid="107" type="class_or_interface_ref" span="1278:10:1278:13">Map</jtok>
<jtok eid="107" type="class_or_interface_ref" span="1278:14:1278:20">String</jtok>
<jtok eid="107" type="class_or_interface_ref" span="1278:22:1278:28">String</jtok>
<jtok eid="107" type="method_name" span="1278:30:1278:39">getFields</jtok>
<jtok eid="107" type="primary_name_ref" span="1279:11:1279:17">fields</jtok>
<jtok eid="108" type="class_or_interface_ref" span="1282:10:1282:21">BibtexEntry</jtok>
<jtok eid="108" type="method_name" span="1282:22:1282:36">getBibtexEntry</jtok>
<jtok eid="108" type="primary_name_ref" span="1283:11:1283:16">entry</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1287:2:1287:8">Vector</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1287:9:1287:17">BstEntry</jtok>
<jtok eid="1" type="field_name" span="1287:19:1287:26">entries</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1289:2:1289:5">Map</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1289:6:1289:12">String</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1289:14:1289:20">String</jtok>
<jtok eid="1" type="field_name" span="1289:22:1289:29">strings</jtok>
<jtok eid="1" type="constructor_call" span="1289:36:1289:43">HashMap</jtok>
<jtok eid="1" type="constructor_call" span="1289:44:1289:50">String</jtok>
<jtok eid="1" type="constructor_call" span="1289:52:1289:58">String</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1291:2:1291:5">Map</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1291:6:1291:12">String</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1291:14:1291:21">Integer</jtok>
<jtok eid="1" type="field_name" span="1291:23:1291:31">integers</jtok>
<jtok eid="1" type="constructor_call" span="1291:38:1291:45">HashMap</jtok>
<jtok eid="1" type="constructor_call" span="1291:46:1291:52">String</jtok>
<jtok eid="1" type="constructor_call" span="1291:54:1291:61">Integer</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1293:2:1293:5">Map</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1293:6:1293:12">String</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1293:14:1293:25">BstFunction</jtok>
<jtok eid="1" type="field_name" span="1293:27:1293:36">functions</jtok>
<jtok eid="1" type="constructor_call" span="1293:43:1293:50">HashMap</jtok>
<jtok eid="1" type="constructor_call" span="1293:51:1293:57">String</jtok>
<jtok eid="1" type="constructor_call" span="1293:59:1293:70">BstFunction</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1295:2:1295:7">Stack</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1295:8:1295:14">Object</jtok>
<jtok eid="1" type="field_name" span="1295:16:1295:21">stack</jtok>
<jtok eid="1" type="constructor_call" span="1295:28:1295:33">Stack</jtok>
<jtok eid="1" type="constructor_call" span="1295:34:1295:40">Object</jtok>
<jtok eid="109" type="method_name" span="1297:14:1297:18">push</jtok>
<jtok eid="109" type="parameter_type" span="1297:19:1297:26">Integer</jtok>
<jtok eid="109" type="parameter_name" span="1297:27:1297:34">integer</jtok>
<jtok eid="109" type="primary_name_ref" span="1298:3:1298:8">stack</jtok>
<jtok eid="109" type="method_call" span="1298:9:1298:13">push</jtok>
<jtok eid="109" type="primary_name_ref" span="1298:14:1298:21">integer</jtok>
<jtok eid="110" type="method_name" span="1301:14:1301:18">push</jtok>
<jtok eid="110" type="parameter_type" span="1301:19:1301:25">String</jtok>
<jtok eid="110" type="parameter_name" span="1301:26:1301:32">string</jtok>
<jtok eid="110" type="primary_name_ref" span="1302:3:1302:8">stack</jtok>
<jtok eid="110" type="method_call" span="1302:9:1302:13">push</jtok>
<jtok eid="110" type="primary_name_ref" span="1302:14:1302:20">string</jtok>
<jtok eid="111" type="method_name" span="1305:14:1305:18">push</jtok>
<jtok eid="111" type="parameter_type" span="1305:19:1305:29">Identifier</jtok>
<jtok eid="111" type="parameter_name" span="1305:30:1305:40">identifier</jtok>
<jtok eid="111" type="primary_name_ref" span="1306:3:1306:8">stack</jtok>
<jtok eid="111" type="method_call" span="1306:9:1306:13">push</jtok>
<jtok eid="111" type="primary_name_ref" span="1306:14:1306:24">identifier</jtok>
<jtok eid="112" type="class_or_interface_ref" span="1310:11:1310:14">Map</jtok>
<jtok eid="112" type="class_or_interface_ref" span="1310:15:1310:21">String</jtok>
<jtok eid="112" type="class_or_interface_ref" span="1310:23:1310:29">String</jtok>
<jtok eid="112" type="method_name" span="1310:31:1310:41">getStrings</jtok>
<jtok eid="112" type="primary_name_ref" span="1310:53:1310:60">strings</jtok>
<jtok eid="113" type="class_or_interface_ref" span="1312:11:1312:14">Map</jtok>
<jtok eid="113" type="class_or_interface_ref" span="1312:15:1312:21">String</jtok>
<jtok eid="113" type="class_or_interface_ref" span="1312:23:1312:30">Integer</jtok>
<jtok eid="113" type="method_name" span="1312:32:1312:43">getIntegers</jtok>
<jtok eid="113" type="primary_name_ref" span="1312:55:1312:63">integers</jtok>
<jtok eid="114" type="class_or_interface_ref" span="1314:11:1314:17">Vector</jtok>
<jtok eid="114" type="class_or_interface_ref" span="1314:18:1314:26">BstEntry</jtok>
<jtok eid="114" type="method_name" span="1314:28:1314:38">getEntries</jtok>
<jtok eid="114" type="primary_name_ref" span="1314:50:1314:57">entries</jtok>
<jtok eid="115" type="class_or_interface_ref" span="1316:10:1316:13">Map</jtok>
<jtok eid="115" type="class_or_interface_ref" span="1316:14:1316:20">String</jtok>
<jtok eid="115" type="class_or_interface_ref" span="1316:22:1316:33">BstFunction</jtok>
<jtok eid="115" type="method_name" span="1316:35:1316:47">getFunctions</jtok>
<jtok eid="115" type="primary_name_ref" span="1316:59:1316:68">functions</jtok>
<jtok eid="116" type="class_or_interface_ref" span="1318:9:1318:14">Stack</jtok>
<jtok eid="116" type="class_or_interface_ref" span="1318:15:1318:21">Object</jtok>
<jtok eid="116" type="method_name" span="1318:23:1318:31">getStack</jtok>
<jtok eid="116" type="primary_name_ref" span="1319:10:1319:15">stack</jtok>
<jtok eid="117" type="method_name" span="1322:14:1322:18">warn</jtok>
<jtok eid="117" type="parameter_type" span="1322:19:1322:25">String</jtok>
<jtok eid="117" type="parameter_name" span="1322:26:1322:32">string</jtok>
<jtok eid="117" type="primary_name_ref" span="1323:3:1323:9">System</jtok>
<jtok eid="117" type="qualified_name_ref" span="1323:10:1323:13">out</jtok>
<jtok eid="117" type="method_call" span="1323:14:1323:21">println</jtok>
<jtok eid="117" type="primary_name_ref" span="1323:22:1323:28">string</jtok>
</jdoc>