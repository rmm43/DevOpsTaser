<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="net.sf.jabref.export.layout.format.Replace" jls="java5">
<jent id="0" type="file" span="0:0:54:1">Source/jabref/src/java/net/sf/jabref/export/layout/format/Replace.java</jent>
<jent id="1" pid="0" type="class" span="34:1:54:1">net.sf.jabref.export.layout.format.Replace</jent>
<jent id="2" pid="1" type="method" span="39:5:47:5">net.sf.jabref.export.layout.format.Replace.setArgument(String)</jent>
<jent id="3" pid="1" type="method" span="49:5:53:5">net.sf.jabref.export.layout.format.Replace.format(String)</jent>
<jtok eid="0" type="block_comment" span="5:1:33:4">/**
 * Formatter that does regexp replacement.
 *
 * To use this formatter, a two-part argument must be given. The parts are
 * separated by a comma. To indicate the comma character, use an escape
 * sequence: \,
 * For inserting newlines and tabs in arguments, use \n and \t, respectively.
 *
 * The first part is the regular expression to search for. Remember that any commma
 * character must be preceded by a backslash, and consequently a literal backslash must
 * be written as a pair of backslashes. A description of Java regular expressions can be
 * found at:
 *   http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html
 *
 * The second part is the text to replace all matches with.
 *
 * For instance:
 *  \format[Replace(and,&amp;)]{\author} :
 *      will output the "author" field after replacing all occurences of "and"
 *      by "&amp;"
 *
 *  \format[Replace(\s,_)]{\author} :
 *      will output the "author" field after replacing all whitespace
 *      by underscores.
 *
 *  \format[Replace(\,,;)]{\author} :
 *      will output the "author" field after replacing all commas by semicolons.
 *
 */</jtok>
<jtok eid="1" type="class_name" span="34:14:34:21">Replace</jtok>
<jtok eid="1" type="class_or_interface_ref" span="34:30:34:58">AbstractParamLayoutFormatter</jtok>
<jtok eid="1" type="class_or_interface_ref" span="36:13:36:19">String</jtok>
<jtok eid="1" type="field_name" span="36:20:36:25">regex</jtok>
<jtok eid="1" type="field_name" span="36:34:36:45">replaceWith</jtok>
<jtok eid="2" type="method_name" span="39:17:39:28">setArgument</jtok>
<jtok eid="2" type="parameter_type" span="39:29:39:35">String</jtok>
<jtok eid="2" type="parameter_name" span="39:36:39:39">arg</jtok>
<jtok eid="2" type="class_or_interface_ref" span="40:9:40:15">String</jtok>
<jtok eid="2" type="local_variable_name" span="40:18:40:23">parts</jtok>
<jtok eid="2" type="method_call" span="40:26:40:39">parseArgument</jtok>
<jtok eid="2" type="primary_name_ref" span="40:40:40:43">arg</jtok>
<jtok eid="2" type="primary_name_ref" span="42:13:42:18">parts</jtok>
<jtok eid="2" type="qualified_name_ref" span="42:19:42:25">length</jtok>
<jtok eid="2" type="line_comment" span="43:21:43:77">// TODO: too few arguments. Print an error message here?</jtok>
<jtok eid="2" type="primary_name_ref" span="44:9:44:14">regex</jtok>
<jtok eid="2" type="primary_name_ref" span="44:17:44:22">parts</jtok>
<jtok eid="2" type="primary_name_ref" span="45:9:45:20">replaceWith</jtok>
<jtok eid="2" type="primary_name_ref" span="45:23:45:28">parts</jtok>
<jtok eid="3" type="class_or_interface_ref" span="49:12:49:18">String</jtok>
<jtok eid="3" type="method_name" span="49:19:49:25">format</jtok>
<jtok eid="3" type="parameter_type" span="49:26:49:32">String</jtok>
<jtok eid="3" type="parameter_name" span="49:33:49:42">fieldText</jtok>
<jtok eid="3" type="primary_name_ref" span="50:13:50:18">regex</jtok>
<jtok eid="3" type="primary_name_ref" span="51:20:51:29">fieldText</jtok>
<jtok eid="3" type="line_comment" span="51:31:51:97">// TODO: argument missing or invalid. Print an error message here?</jtok>
<jtok eid="3" type="primary_name_ref" span="52:16:52:25">fieldText</jtok>
<jtok eid="3" type="method_call" span="52:26:52:36">replaceAll</jtok>
<jtok eid="3" type="primary_name_ref" span="52:37:52:42">regex</jtok>
<jtok eid="3" type="primary_name_ref" span="52:44:52:55">replaceWith</jtok>
</jdoc>