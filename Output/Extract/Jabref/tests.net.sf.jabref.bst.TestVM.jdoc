<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="tests.net.sf.jabref.bst.TestVM" jls="java5">
<jent id="0" type="file" span="0:0:648:1">Source/jabref/src/java/tests/net/sf/jabref/bst/TestVM.java</jent>
<jent id="1" pid="0" type="class" span="22:1:648:1">tests.net.sf.jabref.bst.TestVM</jent>
<jent id="2" pid="1" type="method" span="24:2:32:2">tests.net.sf.jabref.bst.TestVM.testAbbrv()</jent>
<jent id="3" pid="1" type="method" span="34:2:54:2">tests.net.sf.jabref.bst.TestVM.testVMSimple()</jent>
<jent id="4" pid="1" type="method" span="56:2:70:2">tests.net.sf.jabref.bst.TestVM.testLabel()</jent>
<jent id="5" pid="1" type="method" span="72:2:80:2">tests.net.sf.jabref.bst.TestVM.testQuote()</jent>
<jent id="6" pid="1" type="method" span="82:2:95:2">tests.net.sf.jabref.bst.TestVM.testVMFunction1()</jent>
<jent id="7" pid="1" type="method" span="97:2:128:2">tests.net.sf.jabref.bst.TestVM.testVMExecuteSimple()</jent>
<jent id="8" pid="1" type="method" span="130:2:150:2">tests.net.sf.jabref.bst.TestVM.testVMIfSkipPop()</jent>
<jent id="9" pid="1" type="method" span="152:2:174:2">tests.net.sf.jabref.bst.TestVM.testVMArithmetic()</jent>
<jent id="10" pid="1" type="method" span="176:2:195:2">tests.net.sf.jabref.bst.TestVM.testNumNames()</jent>
<jent id="11" pid="1" type="method" span="197:2:218:2">tests.net.sf.jabref.bst.TestVM.testVMStringOps1()</jent>
<jent id="12" pid="1" type="method" span="220:2:247:2">tests.net.sf.jabref.bst.TestVM.testSubstring()</jent>
<jent id="13" pid="1" type="method" span="249:2:265:2">tests.net.sf.jabref.bst.TestVM.testEmpty()</jent>
<jent id="14" pid="1" type="method" span="267:2:277:2">tests.net.sf.jabref.bst.TestVM.testDuplicateEmptyPopSwapIf()</jent>
<jent id="15" pid="1" type="method" span="279:2:305:2">tests.net.sf.jabref.bst.TestVM.testChangeCase()</jent>
<jent id="16" pid="1" type="method" span="307:2:327:2">tests.net.sf.jabref.bst.TestVM.testTextLength()</jent>
<jent id="17" pid="1" type="method" span="329:2:337:2">tests.net.sf.jabref.bst.TestVM.testVMIntToStr()</jent>
<jent id="18" pid="1" type="method" span="339:2:356:2">tests.net.sf.jabref.bst.TestVM.testVMChrToInt()</jent>
<jent id="19" pid="1" type="method" span="358:2:375:2">tests.net.sf.jabref.bst.TestVM.testSort()</jent>
<jent id="20" pid="1" type="method" span="377:2:385:2">tests.net.sf.jabref.bst.TestVM.testBuildIn()</jent>
<jent id="21" pid="1" type="method" span="387:2:397:2">tests.net.sf.jabref.bst.TestVM.testVariables()</jent>
<jent id="22" pid="1" type="method" span="399:2:437:2">tests.net.sf.jabref.bst.TestVM.testWhile()</jent>
<jent id="23" pid="1" type="method" span="439:2:458:2">tests.net.sf.jabref.bst.TestVM.testType()</jent>
<jent id="24" pid="1" type="method" span="460:2:481:2">tests.net.sf.jabref.bst.TestVM.testMissing()</jent>
<jent id="25" pid="1" type="method" span="483:2:509:2">tests.net.sf.jabref.bst.TestVM.testFormatName()</jent>
<jent id="26" pid="1" type="method" span="511:2:530:2">tests.net.sf.jabref.bst.TestVM.testCallType()</jent>
<jent id="27" pid="1" type="method" span="532:2:555:2">tests.net.sf.jabref.bst.TestVM.testIterate()</jent>
<jent id="28" pid="1" type="method" span="557:2:600:2">tests.net.sf.jabref.bst.TestVM.testWidth()</jent>
<jent id="29" pid="1" type="method" span="602:2:612:2">tests.net.sf.jabref.bst.TestVM.testVMSwap()</jent>
<jent id="30" pid="1" type="method" span="614:2:619:2">tests.net.sf.jabref.bst.TestVM.bibtexString2BibtexEntry(String)</jent>
<jent id="31" pid="1" type="method" span="621:2:625:2">tests.net.sf.jabref.bst.TestVM.bibtexEntry2BibtexString(BibtexEntry)</jent>
<jent id="32" pid="1" type="method" span="628:2:635:2">tests.net.sf.jabref.bst.TestVM.t1BibtexString()</jent>
<jent id="33" pid="1" type="method" span="637:2:642:2">tests.net.sf.jabref.bst.TestVM.testHypthenatedName()</jent>
<jent id="34" pid="1" type="method" span="644:2:646:2">tests.net.sf.jabref.bst.TestVM.t1BibtexEntry()</jent>
<jtok eid="1" type="class_name" span="22:14:22:20">TestVM</jtok>
<jtok eid="1" type="class_or_interface_ref" span="22:29:22:37">TestCase</jtok>
<jtok eid="2" type="method_name" span="24:14:24:23">testAbbrv</jtok>
<jtok eid="2" type="throws" span="24:33:24:53">RecognitionException</jtok>
<jtok eid="2" type="throws" span="24:55:24:66">IOException</jtok>
<jtok eid="2" type="class_or_interface_ref" span="25:3:25:5">VM</jtok>
<jtok eid="2" type="local_variable_name" span="25:6:25:8">vm</jtok>
<jtok eid="2" type="constructor_call" span="25:15:25:17">VM</jtok>
<jtok eid="2" type="constructor_call" span="25:22:25:26">File</jtok>
<jtok eid="2" type="string_literal" span="25:27:25:66">"src/tests/net/sf/jabref/bst/abbrv.bst"</jtok>
<jtok eid="2" type="class_or_interface_ref" span="26:3:26:9">Vector</jtok>
<jtok eid="2" type="class_or_interface_ref" span="26:10:26:21">BibtexEntry</jtok>
<jtok eid="2" type="local_variable_name" span="26:23:26:24">v</jtok>
<jtok eid="2" type="constructor_call" span="26:31:26:37">Vector</jtok>
<jtok eid="2" type="constructor_call" span="26:38:26:49">BibtexEntry</jtok>
<jtok eid="2" type="primary_name_ref" span="27:3:27:4">v</jtok>
<jtok eid="2" type="method_call" span="27:5:27:8">add</jtok>
<jtok eid="2" type="method_call" span="27:9:27:22">t1BibtexEntry</jtok>
<jtok eid="2" type="class_or_interface_ref" span="29:3:29:9">String</jtok>
<jtok eid="2" type="local_variable_name" span="29:10:29:18">expected</jtok>
<jtok eid="2" type="string_literal" span="29:21:29:311">"\\begin{thebibliography}{1}\\bibitem{canh05}K.~Crowston, H.~Annabi, J.~Howison, and C.~Masango.\\newblock Effective work practices for floss development: A model and  propositions.\\newblock In {\\em Hawaii International Conference On System Sciences (HICSS)}, 2005.\\end{thebibliography}"</jtok>
<jtok eid="2" type="method_call" span="31:3:31:15">assertEquals</jtok>
<jtok eid="2" type="primary_name_ref" span="31:16:31:24">expected</jtok>
<jtok eid="2" type="method_call" span="31:25:31:35">replaceAll</jtok>
<jtok eid="2" type="string_literal" span="31:36:31:41">"\\s"</jtok>
<jtok eid="2" type="string_literal" span="31:43:31:45">""</jtok>
<jtok eid="2" type="primary_name_ref" span="31:48:31:50">vm</jtok>
<jtok eid="2" type="method_call" span="31:51:31:54">run</jtok>
<jtok eid="2" type="primary_name_ref" span="31:55:31:56">v</jtok>
<jtok eid="2" type="method_call" span="31:58:31:68">replaceAll</jtok>
<jtok eid="2" type="string_literal" span="31:69:31:74">"\\s"</jtok>
<jtok eid="2" type="string_literal" span="31:76:31:78">""</jtok>
<jtok eid="3" type="method_name" span="34:14:34:26">testVMSimple</jtok>
<jtok eid="3" type="throws" span="34:36:34:56">RecognitionException</jtok>
<jtok eid="3" type="throws" span="34:58:34:69">IOException</jtok>
<jtok eid="3" type="class_or_interface_ref" span="36:3:36:5">VM</jtok>
<jtok eid="3" type="local_variable_name" span="36:6:36:8">vm</jtok>
<jtok eid="3" type="constructor_call" span="36:15:36:17">VM</jtok>
<jtok eid="3" type="string_literal" span="36:18:36:20">""</jtok>
<jtok eid="3" type="string_literal" span="36:23:36:34">"ENTRY  { "</jtok>
<jtok eid="3" type="string_literal" span="36:37:36:49">"  address "</jtok>
<jtok eid="3" type="string_literal" span="36:52:36:63">"  author "</jtok>
<jtok eid="3" type="string_literal" span="36:66:36:76">"  title "</jtok>
<jtok eid="3" type="string_literal" span="36:79:36:88">"  type "</jtok>
<jtok eid="3" type="string_literal" span="37:6:37:24">"}  {}  { label }"</jtok>
<jtok eid="3" type="string_literal" span="37:27:37:63">"INTEGERS { output.state before.all"</jtok>
<jtok eid="3" type="string_literal" span="38:6:38:50">" mid.sentence after.sentence after.block }"</jtok>
<jtok eid="3" type="string_literal" span="39:6:39:56">"FUNCTION {init.state.consts}{ #0 'before.all := "</jtok>
<jtok eid="3" type="string_literal" span="40:6:40:74">" #1 'mid.sentence :=  #2 'after.sentence :=  #3 'after.block := } "</jtok>
<jtok eid="3" type="string_literal" span="41:6:41:24">"STRINGS { s t } "</jtok>
<jtok eid="3" type="string_literal" span="41:27:41:33">"READ"</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:3:43:9">Vector</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:10:43:21">BibtexEntry</jtok>
<jtok eid="3" type="local_variable_name" span="43:23:43:24">v</jtok>
<jtok eid="3" type="constructor_call" span="43:31:43:37">Vector</jtok>
<jtok eid="3" type="constructor_call" span="43:38:43:49">BibtexEntry</jtok>
<jtok eid="3" type="primary_name_ref" span="44:3:44:4">v</jtok>
<jtok eid="3" type="method_call" span="44:5:44:8">add</jtok>
<jtok eid="3" type="method_call" span="44:9:44:22">t1BibtexEntry</jtok>
<jtok eid="3" type="primary_name_ref" span="46:3:46:5">vm</jtok>
<jtok eid="3" type="method_call" span="46:6:46:9">run</jtok>
<jtok eid="3" type="primary_name_ref" span="46:10:46:11">v</jtok>
<jtok eid="3" type="method_call" span="48:3:48:15">assertEquals</jtok>
<jtok eid="3" type="primary_name_ref" span="48:19:48:21">vm</jtok>
<jtok eid="3" type="method_call" span="48:22:48:32">getStrings</jtok>
<jtok eid="3" type="method_call" span="48:35:48:39">size</jtok>
<jtok eid="3" type="method_call" span="49:3:49:15">assertEquals</jtok>
<jtok eid="3" type="primary_name_ref" span="49:19:49:21">vm</jtok>
<jtok eid="3" type="method_call" span="49:22:49:33">getIntegers</jtok>
<jtok eid="3" type="method_call" span="49:36:49:40">size</jtok>
<jtok eid="3" type="method_call" span="50:3:50:15">assertEquals</jtok>
<jtok eid="3" type="primary_name_ref" span="50:19:50:21">vm</jtok>
<jtok eid="3" type="method_call" span="50:22:50:32">getEntries</jtok>
<jtok eid="3" type="method_call" span="50:35:50:39">size</jtok>
<jtok eid="3" type="method_call" span="51:3:51:15">assertEquals</jtok>
<jtok eid="3" type="primary_name_ref" span="51:20:51:22">vm</jtok>
<jtok eid="3" type="method_call" span="51:23:51:33">getEntries</jtok>
<jtok eid="3" type="method_call" span="51:36:51:39">get</jtok>
<jtok eid="3" type="method_call" span="51:44:51:53">getFields</jtok>
<jtok eid="3" type="method_call" span="51:56:51:60">size</jtok>
<jtok eid="3" type="method_call" span="52:3:52:15">assertEquals</jtok>
<jtok eid="3" type="primary_name_ref" span="52:20:52:22">vm</jtok>
<jtok eid="3" type="method_call" span="52:23:52:35">getFunctions</jtok>
<jtok eid="3" type="method_call" span="52:38:52:42">size</jtok>
<jtok eid="4" type="method_name" span="56:14:56:23">testLabel</jtok>
<jtok eid="4" type="throws" span="56:33:56:53">RecognitionException</jtok>
<jtok eid="4" type="throws" span="56:55:56:66">IOException</jtok>
<jtok eid="4" type="class_or_interface_ref" span="58:3:58:5">VM</jtok>
<jtok eid="4" type="local_variable_name" span="58:6:58:8">vm</jtok>
<jtok eid="4" type="constructor_call" span="58:15:58:17">VM</jtok>
<jtok eid="4" type="string_literal" span="58:18:58:20">""</jtok>
<jtok eid="4" type="string_literal" span="58:23:58:57">"ENTRY  { title }  {}  { label } "</jtok>
<jtok eid="4" type="string_literal" span="59:6:59:74">"FUNCTION { test } { label #0 = title 'label := #5 label #6 pop$ } "</jtok>
<jtok eid="4" type="string_literal" span="59:77:59:84">"READ "</jtok>
<jtok eid="4" type="string_literal" span="60:6:60:24">"ITERATE { test }"</jtok>
<jtok eid="4" type="class_or_interface_ref" span="62:3:62:9">Vector</jtok>
<jtok eid="4" type="class_or_interface_ref" span="62:10:62:21">BibtexEntry</jtok>
<jtok eid="4" type="local_variable_name" span="62:23:62:24">v</jtok>
<jtok eid="4" type="constructor_call" span="62:31:62:37">Vector</jtok>
<jtok eid="4" type="constructor_call" span="62:38:62:49">BibtexEntry</jtok>
<jtok eid="4" type="primary_name_ref" span="63:3:63:4">v</jtok>
<jtok eid="4" type="method_call" span="63:5:63:8">add</jtok>
<jtok eid="4" type="method_call" span="63:9:63:22">t1BibtexEntry</jtok>
<jtok eid="4" type="primary_name_ref" span="65:3:65:5">vm</jtok>
<jtok eid="4" type="method_call" span="65:6:65:9">run</jtok>
<jtok eid="4" type="primary_name_ref" span="65:10:65:11">v</jtok>
<jtok eid="4" type="method_call" span="67:3:67:15">assertEquals</jtok>
<jtok eid="4" type="string_literal" span="67:16:67:90">"Effective work practices for floss development: A model and propositions"</jtok>
<jtok eid="4" type="primary_name_ref" span="67:92:67:94">vm</jtok>
<jtok eid="4" type="method_call" span="68:5:68:13">getStack</jtok>
<jtok eid="4" type="method_call" span="68:16:68:19">pop</jtok>
<jtok eid="5" type="method_name" span="72:14:72:23">testQuote</jtok>
<jtok eid="5" type="throws" span="72:33:72:53">RecognitionException</jtok>
<jtok eid="5" type="throws" span="72:55:72:66">IOException</jtok>
<jtok eid="5" type="class_or_interface_ref" span="74:3:74:5">VM</jtok>
<jtok eid="5" type="local_variable_name" span="74:6:74:8">vm</jtok>
<jtok eid="5" type="constructor_call" span="74:15:74:17">VM</jtok>
<jtok eid="5" type="string_literal" span="74:18:74:63">"FUNCTION {a}{ quote$ quote$ * } EXECUTE {a}"</jtok>
<jtok eid="5" type="class_or_interface_ref" span="76:3:76:9">Vector</jtok>
<jtok eid="5" type="class_or_interface_ref" span="76:10:76:21">BibtexEntry</jtok>
<jtok eid="5" type="local_variable_name" span="76:23:76:24">v</jtok>
<jtok eid="5" type="constructor_call" span="76:31:76:37">Vector</jtok>
<jtok eid="5" type="constructor_call" span="76:38:76:49">BibtexEntry</jtok>
<jtok eid="5" type="primary_name_ref" span="77:3:77:5">vm</jtok>
<jtok eid="5" type="method_call" span="77:6:77:9">run</jtok>
<jtok eid="5" type="primary_name_ref" span="77:10:77:11">v</jtok>
<jtok eid="5" type="method_call" span="79:3:79:15">assertEquals</jtok>
<jtok eid="5" type="string_literal" span="79:16:79:22">"\"\""</jtok>
<jtok eid="5" type="primary_name_ref" span="79:24:79:26">vm</jtok>
<jtok eid="5" type="method_call" span="79:27:79:35">getStack</jtok>
<jtok eid="5" type="method_call" span="79:38:79:41">pop</jtok>
<jtok eid="6" type="method_name" span="82:14:82:29">testVMFunction1</jtok>
<jtok eid="6" type="throws" span="82:39:82:59">RecognitionException</jtok>
<jtok eid="6" type="throws" span="82:61:82:72">IOException</jtok>
<jtok eid="6" type="class_or_interface_ref" span="84:3:84:5">VM</jtok>
<jtok eid="6" type="local_variable_name" span="84:6:84:8">vm</jtok>
<jtok eid="6" type="constructor_call" span="84:15:84:17">VM</jtok>
<jtok eid="6" type="string_literal" span="84:18:84:70">"FUNCTION {init.state.consts}{ #0 'before.all := } "</jtok>
<jtok eid="6" type="class_or_interface_ref" span="86:3:86:9">Vector</jtok>
<jtok eid="6" type="class_or_interface_ref" span="86:10:86:21">BibtexEntry</jtok>
<jtok eid="6" type="local_variable_name" span="86:23:86:24">v</jtok>
<jtok eid="6" type="constructor_call" span="86:31:86:37">Vector</jtok>
<jtok eid="6" type="constructor_call" span="86:38:86:49">BibtexEntry</jtok>
<jtok eid="6" type="primary_name_ref" span="87:3:87:5">vm</jtok>
<jtok eid="6" type="method_call" span="87:6:87:9">run</jtok>
<jtok eid="6" type="primary_name_ref" span="87:10:87:11">v</jtok>
<jtok eid="6" type="method_call" span="89:3:89:15">assertEquals</jtok>
<jtok eid="6" type="primary_name_ref" span="89:20:89:22">vm</jtok>
<jtok eid="6" type="method_call" span="89:23:89:35">getFunctions</jtok>
<jtok eid="6" type="method_call" span="89:38:89:42">size</jtok>
<jtok eid="6" type="method_call" span="91:3:91:13">assertTrue</jtok>
<jtok eid="6" type="primary_name_ref" span="91:14:91:16">vm</jtok>
<jtok eid="6" type="method_call" span="91:17:91:29">getFunctions</jtok>
<jtok eid="6" type="method_call" span="91:32:91:35">get</jtok>
<jtok eid="6" type="string_literal" span="91:36:91:55">"init.state.consts"</jtok>
<jtok eid="6" type="class_or_interface_ref" span="91:68:91:81">StackFunction</jtok>
<jtok eid="6" type="class_or_interface_ref" span="93:3:93:16">StackFunction</jtok>
<jtok eid="6" type="local_variable_name" span="93:17:93:20">fun</jtok>
<jtok eid="6" type="class_or_interface_ref" span="93:24:93:37">StackFunction</jtok>
<jtok eid="6" type="primary_name_ref" span="93:39:93:41">vm</jtok>
<jtok eid="6" type="method_call" span="93:42:93:54">getFunctions</jtok>
<jtok eid="6" type="method_call" span="93:57:93:60">get</jtok>
<jtok eid="6" type="string_literal" span="93:61:93:80">"init.state.consts"</jtok>
<jtok eid="6" type="method_call" span="94:3:94:15">assertEquals</jtok>
<jtok eid="6" type="primary_name_ref" span="94:19:94:22">fun</jtok>
<jtok eid="6" type="method_call" span="94:23:94:30">getTree</jtok>
<jtok eid="6" type="method_call" span="94:33:94:46">getChildCount</jtok>
<jtok eid="7" type="method_name" span="97:14:97:33">testVMExecuteSimple</jtok>
<jtok eid="7" type="throws" span="97:43:97:63">RecognitionException</jtok>
<jtok eid="7" type="throws" span="97:65:97:76">IOException</jtok>
<jtok eid="7" type="class_or_interface_ref" span="100:4:100:6">VM</jtok>
<jtok eid="7" type="local_variable_name" span="100:7:100:9">vm</jtok>
<jtok eid="7" type="constructor_call" span="100:16:100:18">VM</jtok>
<jtok eid="7" type="string_literal" span="100:19:100:21">""</jtok>
<jtok eid="7" type="string_literal" span="100:24:100:50">"INTEGERS { variable.a } "</jtok>
<jtok eid="7" type="string_literal" span="101:7:101:59">"FUNCTION {init.state.consts}{ #5 'variable.a := } "</jtok>
<jtok eid="7" type="string_literal" span="102:7:102:36">"EXECUTE {init.state.consts}"</jtok>
<jtok eid="7" type="class_or_interface_ref" span="104:4:104:10">Vector</jtok>
<jtok eid="7" type="class_or_interface_ref" span="104:11:104:22">BibtexEntry</jtok>
<jtok eid="7" type="local_variable_name" span="104:24:104:25">v</jtok>
<jtok eid="7" type="constructor_call" span="104:32:104:38">Vector</jtok>
<jtok eid="7" type="constructor_call" span="104:39:104:50">BibtexEntry</jtok>
<jtok eid="7" type="primary_name_ref" span="105:4:105:6">vm</jtok>
<jtok eid="7" type="method_call" span="105:7:105:10">run</jtok>
<jtok eid="7" type="primary_name_ref" span="105:11:105:12">v</jtok>
<jtok eid="7" type="method_call" span="106:4:106:16">assertEquals</jtok>
<jtok eid="7" type="constructor_call" span="106:21:106:28">Integer</jtok>
<jtok eid="7" type="primary_name_ref" span="106:33:106:35">vm</jtok>
<jtok eid="7" type="method_call" span="106:36:106:47">getIntegers</jtok>
<jtok eid="7" type="method_call" span="106:50:106:53">get</jtok>
<jtok eid="7" type="string_literal" span="106:54:106:66">"variable.a"</jtok>
<jtok eid="7" type="class_or_interface_ref" span="109:4:109:6">VM</jtok>
<jtok eid="7" type="local_variable_name" span="109:7:109:9">vm</jtok>
<jtok eid="7" type="constructor_call" span="109:16:109:18">VM</jtok>
<jtok eid="7" type="string_literal" span="109:19:109:43">"FUNCTION {a}{ #5 #5 = "</jtok>
<jtok eid="7" type="string_literal" span="109:46:109:56">"#1 #2 = "</jtok>
<jtok eid="7" type="string_literal" span="109:59:109:69">"#3 #4 &lt; "</jtok>
<jtok eid="7" type="string_literal" span="109:72:109:82">"#4 #3 &lt; "</jtok>
<jtok eid="7" type="string_literal" span="110:7:110:17">"#4 #4 &lt; "</jtok>
<jtok eid="7" type="string_literal" span="110:20:110:30">"#3 #4 &gt; "</jtok>
<jtok eid="7" type="string_literal" span="110:33:110:43">"#4 #3 &gt; "</jtok>
<jtok eid="7" type="string_literal" span="110:46:110:56">"#4 #4 &gt; "</jtok>
<jtok eid="7" type="string_literal" span="110:59:110:75">"\"H\" \"H\" = "</jtok>
<jtok eid="7" type="string_literal" span="111:7:111:26">"\"H\" \"Ha\" = } "</jtok>
<jtok eid="7" type="string_literal" span="111:29:111:42">"EXECUTE {a}"</jtok>
<jtok eid="7" type="class_or_interface_ref" span="113:4:113:10">Vector</jtok>
<jtok eid="7" type="class_or_interface_ref" span="113:11:113:22">BibtexEntry</jtok>
<jtok eid="7" type="local_variable_name" span="113:24:113:25">v</jtok>
<jtok eid="7" type="constructor_call" span="113:32:113:38">Vector</jtok>
<jtok eid="7" type="constructor_call" span="113:39:113:50">BibtexEntry</jtok>
<jtok eid="7" type="primary_name_ref" span="114:4:114:6">vm</jtok>
<jtok eid="7" type="method_call" span="114:7:114:10">run</jtok>
<jtok eid="7" type="primary_name_ref" span="114:11:114:12">v</jtok>
<jtok eid="7" type="method_call" span="116:4:116:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="116:17:116:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="116:20:116:25">FALSE</jtok>
<jtok eid="7" type="primary_name_ref" span="116:27:116:29">vm</jtok>
<jtok eid="7" type="method_call" span="116:30:116:38">getStack</jtok>
<jtok eid="7" type="method_call" span="116:41:116:44">pop</jtok>
<jtok eid="7" type="method_call" span="117:4:117:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="117:17:117:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="117:20:117:24">TRUE</jtok>
<jtok eid="7" type="primary_name_ref" span="117:26:117:28">vm</jtok>
<jtok eid="7" type="method_call" span="117:29:117:37">getStack</jtok>
<jtok eid="7" type="method_call" span="117:40:117:43">pop</jtok>
<jtok eid="7" type="method_call" span="118:4:118:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="118:17:118:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="118:20:118:25">FALSE</jtok>
<jtok eid="7" type="primary_name_ref" span="118:27:118:29">vm</jtok>
<jtok eid="7" type="method_call" span="118:30:118:38">getStack</jtok>
<jtok eid="7" type="method_call" span="118:41:118:44">pop</jtok>
<jtok eid="7" type="method_call" span="119:4:119:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="119:17:119:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="119:20:119:24">TRUE</jtok>
<jtok eid="7" type="primary_name_ref" span="119:26:119:28">vm</jtok>
<jtok eid="7" type="method_call" span="119:29:119:37">getStack</jtok>
<jtok eid="7" type="method_call" span="119:40:119:43">pop</jtok>
<jtok eid="7" type="method_call" span="120:4:120:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="120:17:120:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="120:20:120:25">FALSE</jtok>
<jtok eid="7" type="primary_name_ref" span="120:27:120:29">vm</jtok>
<jtok eid="7" type="method_call" span="120:30:120:38">getStack</jtok>
<jtok eid="7" type="method_call" span="120:41:120:44">pop</jtok>
<jtok eid="7" type="method_call" span="121:4:121:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="121:17:121:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="121:20:121:25">FALSE</jtok>
<jtok eid="7" type="primary_name_ref" span="121:27:121:29">vm</jtok>
<jtok eid="7" type="method_call" span="121:30:121:38">getStack</jtok>
<jtok eid="7" type="method_call" span="121:41:121:44">pop</jtok>
<jtok eid="7" type="method_call" span="122:4:122:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="122:17:122:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="122:20:122:25">FALSE</jtok>
<jtok eid="7" type="primary_name_ref" span="122:27:122:29">vm</jtok>
<jtok eid="7" type="method_call" span="122:30:122:38">getStack</jtok>
<jtok eid="7" type="method_call" span="122:41:122:44">pop</jtok>
<jtok eid="7" type="method_call" span="123:4:123:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="123:17:123:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="123:20:123:24">TRUE</jtok>
<jtok eid="7" type="primary_name_ref" span="123:26:123:28">vm</jtok>
<jtok eid="7" type="method_call" span="123:29:123:37">getStack</jtok>
<jtok eid="7" type="method_call" span="123:40:123:43">pop</jtok>
<jtok eid="7" type="method_call" span="124:4:124:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="124:17:124:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="124:20:124:25">FALSE</jtok>
<jtok eid="7" type="primary_name_ref" span="124:27:124:29">vm</jtok>
<jtok eid="7" type="method_call" span="124:30:124:38">getStack</jtok>
<jtok eid="7" type="method_call" span="124:41:124:44">pop</jtok>
<jtok eid="7" type="method_call" span="125:4:125:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="125:17:125:19">VM</jtok>
<jtok eid="7" type="qualified_name_ref" span="125:20:125:24">TRUE</jtok>
<jtok eid="7" type="primary_name_ref" span="125:26:125:28">vm</jtok>
<jtok eid="7" type="method_call" span="125:29:125:37">getStack</jtok>
<jtok eid="7" type="method_call" span="125:40:125:43">pop</jtok>
<jtok eid="7" type="method_call" span="126:4:126:16">assertEquals</jtok>
<jtok eid="7" type="primary_name_ref" span="126:20:126:22">vm</jtok>
<jtok eid="7" type="method_call" span="126:23:126:31">getStack</jtok>
<jtok eid="7" type="method_call" span="126:34:126:38">size</jtok>
<jtok eid="8" type="method_name" span="130:14:130:29">testVMIfSkipPop</jtok>
<jtok eid="8" type="throws" span="130:39:130:59">RecognitionException</jtok>
<jtok eid="8" type="throws" span="130:61:130:72">IOException</jtok>
<jtok eid="8" type="class_or_interface_ref" span="131:3:131:5">VM</jtok>
<jtok eid="8" type="local_variable_name" span="131:6:131:8">vm</jtok>
<jtok eid="8" type="constructor_call" span="131:15:131:17">VM</jtok>
<jtok eid="8" type="string_literal" span="131:18:131:63">"FUNCTION {not}	{   { #0 }	    { #1 }  if$	}"</jtok>
<jtok eid="8" type="string_literal" span="132:6:132:57">"FUNCTION {and}	{   'skip$	    { pop$ #0 }	  if$	}"</jtok>
<jtok eid="8" type="string_literal" span="133:6:133:56">"FUNCTION {or}	{   { pop$ #1 }	    'skip$	  if$	}"</jtok>
<jtok eid="8" type="string_literal" span="133:59:133:79">"FUNCTION {test} { "</jtok>
<jtok eid="8" type="string_literal" span="134:6:134:48">"#1 #1 and #0 #1 and #1 #0 and #0 #0 and "</jtok>
<jtok eid="8" type="string_literal" span="134:51:134:67">"#0 not #1 not "</jtok>
<jtok eid="8" type="string_literal" span="135:6:135:45">"#1 #1 or #0 #1 or #1 #0 or #0 #0 or }"</jtok>
<jtok eid="8" type="string_literal" span="135:48:135:64">"EXECUTE {test}"</jtok>
<jtok eid="8" type="class_or_interface_ref" span="137:3:137:9">Vector</jtok>
<jtok eid="8" type="class_or_interface_ref" span="137:10:137:21">BibtexEntry</jtok>
<jtok eid="8" type="local_variable_name" span="137:23:137:24">v</jtok>
<jtok eid="8" type="constructor_call" span="137:31:137:37">Vector</jtok>
<jtok eid="8" type="constructor_call" span="137:38:137:49">BibtexEntry</jtok>
<jtok eid="8" type="primary_name_ref" span="138:3:138:5">vm</jtok>
<jtok eid="8" type="method_call" span="138:6:138:9">run</jtok>
<jtok eid="8" type="primary_name_ref" span="138:10:138:11">v</jtok>
<jtok eid="8" type="method_call" span="139:3:139:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="139:16:139:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="139:19:139:24">FALSE</jtok>
<jtok eid="8" type="primary_name_ref" span="139:26:139:28">vm</jtok>
<jtok eid="8" type="method_call" span="139:29:139:37">getStack</jtok>
<jtok eid="8" type="method_call" span="139:40:139:43">pop</jtok>
<jtok eid="8" type="method_call" span="140:3:140:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="140:16:140:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="140:19:140:23">TRUE</jtok>
<jtok eid="8" type="primary_name_ref" span="140:25:140:27">vm</jtok>
<jtok eid="8" type="method_call" span="140:28:140:36">getStack</jtok>
<jtok eid="8" type="method_call" span="140:39:140:42">pop</jtok>
<jtok eid="8" type="method_call" span="141:3:141:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="141:16:141:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="141:19:141:23">TRUE</jtok>
<jtok eid="8" type="primary_name_ref" span="141:25:141:27">vm</jtok>
<jtok eid="8" type="method_call" span="141:28:141:36">getStack</jtok>
<jtok eid="8" type="method_call" span="141:39:141:42">pop</jtok>
<jtok eid="8" type="method_call" span="142:3:142:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="142:16:142:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="142:19:142:23">TRUE</jtok>
<jtok eid="8" type="primary_name_ref" span="142:25:142:27">vm</jtok>
<jtok eid="8" type="method_call" span="142:28:142:36">getStack</jtok>
<jtok eid="8" type="method_call" span="142:39:142:42">pop</jtok>
<jtok eid="8" type="method_call" span="143:3:143:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="143:16:143:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="143:19:143:24">FALSE</jtok>
<jtok eid="8" type="primary_name_ref" span="143:26:143:28">vm</jtok>
<jtok eid="8" type="method_call" span="143:29:143:37">getStack</jtok>
<jtok eid="8" type="method_call" span="143:40:143:43">pop</jtok>
<jtok eid="8" type="method_call" span="144:3:144:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="144:16:144:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="144:19:144:23">TRUE</jtok>
<jtok eid="8" type="primary_name_ref" span="144:25:144:27">vm</jtok>
<jtok eid="8" type="method_call" span="144:28:144:36">getStack</jtok>
<jtok eid="8" type="method_call" span="144:39:144:42">pop</jtok>
<jtok eid="8" type="method_call" span="145:3:145:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="145:16:145:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="145:19:145:24">FALSE</jtok>
<jtok eid="8" type="primary_name_ref" span="145:26:145:28">vm</jtok>
<jtok eid="8" type="method_call" span="145:29:145:37">getStack</jtok>
<jtok eid="8" type="method_call" span="145:40:145:43">pop</jtok>
<jtok eid="8" type="method_call" span="146:3:146:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="146:16:146:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="146:19:146:24">FALSE</jtok>
<jtok eid="8" type="primary_name_ref" span="146:26:146:28">vm</jtok>
<jtok eid="8" type="method_call" span="146:29:146:37">getStack</jtok>
<jtok eid="8" type="method_call" span="146:40:146:43">pop</jtok>
<jtok eid="8" type="method_call" span="147:3:147:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="147:16:147:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="147:19:147:24">FALSE</jtok>
<jtok eid="8" type="primary_name_ref" span="147:26:147:28">vm</jtok>
<jtok eid="8" type="method_call" span="147:29:147:37">getStack</jtok>
<jtok eid="8" type="method_call" span="147:40:147:43">pop</jtok>
<jtok eid="8" type="method_call" span="148:3:148:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="148:16:148:18">VM</jtok>
<jtok eid="8" type="qualified_name_ref" span="148:19:148:23">TRUE</jtok>
<jtok eid="8" type="primary_name_ref" span="148:25:148:27">vm</jtok>
<jtok eid="8" type="method_call" span="148:28:148:36">getStack</jtok>
<jtok eid="8" type="method_call" span="148:39:148:42">pop</jtok>
<jtok eid="8" type="method_call" span="149:3:149:15">assertEquals</jtok>
<jtok eid="8" type="primary_name_ref" span="149:19:149:21">vm</jtok>
<jtok eid="8" type="method_call" span="149:22:149:30">getStack</jtok>
<jtok eid="8" type="method_call" span="149:33:149:37">size</jtok>
<jtok eid="9" type="method_name" span="152:14:152:30">testVMArithmetic</jtok>
<jtok eid="9" type="throws" span="152:40:152:60">RecognitionException</jtok>
<jtok eid="9" type="throws" span="152:62:152:73">IOException</jtok>
<jtok eid="9" type="class_or_interface_ref" span="154:4:154:6">VM</jtok>
<jtok eid="9" type="local_variable_name" span="154:7:154:9">vm</jtok>
<jtok eid="9" type="constructor_call" span="154:16:154:18">VM</jtok>
<jtok eid="9" type="string_literal" span="154:19:154:39">"FUNCTION {test} { "</jtok>
<jtok eid="9" type="string_literal" span="154:42:154:61">"#1 #1 + #5 #2 - }"</jtok>
<jtok eid="9" type="string_literal" span="154:64:154:80">"EXECUTE {test}"</jtok>
<jtok eid="9" type="class_or_interface_ref" span="156:4:156:10">Vector</jtok>
<jtok eid="9" type="class_or_interface_ref" span="156:11:156:22">BibtexEntry</jtok>
<jtok eid="9" type="local_variable_name" span="156:24:156:25">v</jtok>
<jtok eid="9" type="constructor_call" span="156:32:156:38">Vector</jtok>
<jtok eid="9" type="constructor_call" span="156:39:156:50">BibtexEntry</jtok>
<jtok eid="9" type="primary_name_ref" span="157:4:157:6">vm</jtok>
<jtok eid="9" type="method_call" span="157:7:157:10">run</jtok>
<jtok eid="9" type="primary_name_ref" span="157:11:157:12">v</jtok>
<jtok eid="9" type="method_call" span="158:4:158:16">assertEquals</jtok>
<jtok eid="9" type="constructor_call" span="158:21:158:28">Integer</jtok>
<jtok eid="9" type="primary_name_ref" span="158:33:158:35">vm</jtok>
<jtok eid="9" type="method_call" span="158:36:158:44">getStack</jtok>
<jtok eid="9" type="method_call" span="158:47:158:50">pop</jtok>
<jtok eid="9" type="method_call" span="159:4:159:16">assertEquals</jtok>
<jtok eid="9" type="constructor_call" span="159:21:159:28">Integer</jtok>
<jtok eid="9" type="primary_name_ref" span="159:33:159:35">vm</jtok>
<jtok eid="9" type="method_call" span="159:36:159:44">getStack</jtok>
<jtok eid="9" type="method_call" span="159:47:159:50">pop</jtok>
<jtok eid="9" type="method_call" span="160:4:160:16">assertEquals</jtok>
<jtok eid="9" type="primary_name_ref" span="160:20:160:22">vm</jtok>
<jtok eid="9" type="method_call" span="160:23:160:31">getStack</jtok>
<jtok eid="9" type="method_call" span="160:34:160:38">size</jtok>
<jtok eid="9" type="class_or_interface_ref" span="163:4:163:6">VM</jtok>
<jtok eid="9" type="local_variable_name" span="163:7:163:9">vm</jtok>
<jtok eid="9" type="constructor_call" span="163:16:163:18">VM</jtok>
<jtok eid="9" type="string_literal" span="163:19:163:39">"FUNCTION {test} { "</jtok>
<jtok eid="9" type="string_literal" span="163:42:163:68">"#1 \"HELLO\" + #5 #2 - }"</jtok>
<jtok eid="9" type="string_literal" span="163:71:163:87">"EXECUTE {test}"</jtok>
<jtok eid="9" type="class_or_interface_ref" span="165:4:165:10">Vector</jtok>
<jtok eid="9" type="class_or_interface_ref" span="165:11:165:22">BibtexEntry</jtok>
<jtok eid="9" type="local_variable_name" span="165:24:165:25">v</jtok>
<jtok eid="9" type="constructor_call" span="165:32:165:38">Vector</jtok>
<jtok eid="9" type="constructor_call" span="165:39:165:50">BibtexEntry</jtok>
<jtok eid="9" type="primary_name_ref" span="168:5:168:7">vm</jtok>
<jtok eid="9" type="method_call" span="168:8:168:11">run</jtok>
<jtok eid="9" type="primary_name_ref" span="168:12:168:13">v</jtok>
<jtok eid="9" type="method_call" span="169:5:169:9">fail</jtok>
<jtok eid="9" type="class_or_interface_ref" span="170:13:170:24">VMException</jtok>
<jtok eid="9" type="local_variable_name" span="170:25:170:26">e</jtok>
<jtok eid="10" type="method_name" span="176:14:176:26">testNumNames</jtok>
<jtok eid="10" type="throws" span="176:36:176:56">RecognitionException</jtok>
<jtok eid="10" type="throws" span="176:58:176:69">IOException</jtok>
<jtok eid="10" type="class_or_interface_ref" span="178:4:178:6">VM</jtok>
<jtok eid="10" type="local_variable_name" span="178:7:178:9">vm</jtok>
<jtok eid="10" type="constructor_call" span="178:16:178:18">VM</jtok>
<jtok eid="10" type="string_literal" span="178:19:178:79">"FUNCTION {test} { \"Johnny Foo and Mary Bar\" num.names$ }"</jtok>
<jtok eid="10" type="string_literal" span="179:7:179:23">"EXECUTE {test}"</jtok>
<jtok eid="10" type="class_or_interface_ref" span="181:4:181:10">Vector</jtok>
<jtok eid="10" type="class_or_interface_ref" span="181:11:181:22">BibtexEntry</jtok>
<jtok eid="10" type="local_variable_name" span="181:24:181:25">v</jtok>
<jtok eid="10" type="constructor_call" span="181:32:181:38">Vector</jtok>
<jtok eid="10" type="constructor_call" span="181:39:181:50">BibtexEntry</jtok>
<jtok eid="10" type="primary_name_ref" span="182:4:182:6">vm</jtok>
<jtok eid="10" type="method_call" span="182:7:182:10">run</jtok>
<jtok eid="10" type="primary_name_ref" span="182:11:182:12">v</jtok>
<jtok eid="10" type="method_call" span="183:4:183:16">assertEquals</jtok>
<jtok eid="10" type="constructor_call" span="183:21:183:28">Integer</jtok>
<jtok eid="10" type="primary_name_ref" span="183:33:183:35">vm</jtok>
<jtok eid="10" type="method_call" span="183:36:183:44">getStack</jtok>
<jtok eid="10" type="method_call" span="183:47:183:50">pop</jtok>
<jtok eid="10" type="method_call" span="184:4:184:16">assertEquals</jtok>
<jtok eid="10" type="primary_name_ref" span="184:20:184:22">vm</jtok>
<jtok eid="10" type="method_call" span="184:23:184:31">getStack</jtok>
<jtok eid="10" type="method_call" span="184:34:184:38">size</jtok>
<jtok eid="10" type="class_or_interface_ref" span="187:4:187:6">VM</jtok>
<jtok eid="10" type="local_variable_name" span="187:7:187:9">vm</jtok>
<jtok eid="10" type="constructor_call" span="187:16:187:18">VM</jtok>
<jtok eid="10" type="string_literal" span="187:19:187:83">"FUNCTION {test} { \"Johnny Foo { and } Mary Bar\" num.names$ }"</jtok>
<jtok eid="10" type="string_literal" span="188:7:188:23">"EXECUTE {test}"</jtok>
<jtok eid="10" type="class_or_interface_ref" span="190:4:190:10">Vector</jtok>
<jtok eid="10" type="class_or_interface_ref" span="190:11:190:22">BibtexEntry</jtok>
<jtok eid="10" type="local_variable_name" span="190:24:190:25">v</jtok>
<jtok eid="10" type="constructor_call" span="190:32:190:38">Vector</jtok>
<jtok eid="10" type="constructor_call" span="190:39:190:50">BibtexEntry</jtok>
<jtok eid="10" type="primary_name_ref" span="191:4:191:6">vm</jtok>
<jtok eid="10" type="method_call" span="191:7:191:10">run</jtok>
<jtok eid="10" type="primary_name_ref" span="191:11:191:12">v</jtok>
<jtok eid="10" type="method_call" span="192:4:192:16">assertEquals</jtok>
<jtok eid="10" type="constructor_call" span="192:21:192:28">Integer</jtok>
<jtok eid="10" type="primary_name_ref" span="192:33:192:35">vm</jtok>
<jtok eid="10" type="method_call" span="192:36:192:44">getStack</jtok>
<jtok eid="10" type="method_call" span="192:47:192:50">pop</jtok>
<jtok eid="10" type="method_call" span="193:4:193:16">assertEquals</jtok>
<jtok eid="10" type="primary_name_ref" span="193:20:193:22">vm</jtok>
<jtok eid="10" type="method_call" span="193:23:193:31">getStack</jtok>
<jtok eid="10" type="method_call" span="193:34:193:38">size</jtok>
<jtok eid="11" type="method_name" span="197:14:197:30">testVMStringOps1</jtok>
<jtok eid="11" type="throws" span="197:40:197:60">RecognitionException</jtok>
<jtok eid="11" type="throws" span="197:62:197:73">IOException</jtok>
<jtok eid="11" type="class_or_interface_ref" span="199:4:199:6">VM</jtok>
<jtok eid="11" type="local_variable_name" span="199:7:199:9">vm</jtok>
<jtok eid="11" type="constructor_call" span="199:16:199:18">VM</jtok>
<jtok eid="11" type="string_literal" span="200:5:200:88">"FUNCTION {test} { \"H\" \"allo\" * \"Johnny\" add.period$ \"Johnny.\" add.period$"</jtok>
<jtok eid="11" type="string_literal" span="201:8:201:85">"\"Johnny!\" add.period$ \"Johnny?\" add.period$ \"Johnny} }}}\" add.period$"</jtok>
<jtok eid="11" type="string_literal" span="202:8:202:86">"\"Johnny!}\" add.period$ \"Johnny?}\" add.period$ \"Johnny.}\" add.period$ }"</jtok>
<jtok eid="11" type="string_literal" span="203:8:203:24">"EXECUTE {test}"</jtok>
<jtok eid="11" type="class_or_interface_ref" span="205:4:205:10">Vector</jtok>
<jtok eid="11" type="class_or_interface_ref" span="205:11:205:22">BibtexEntry</jtok>
<jtok eid="11" type="local_variable_name" span="205:24:205:25">v</jtok>
<jtok eid="11" type="constructor_call" span="205:32:205:38">Vector</jtok>
<jtok eid="11" type="constructor_call" span="205:39:205:50">BibtexEntry</jtok>
<jtok eid="11" type="primary_name_ref" span="206:4:206:6">vm</jtok>
<jtok eid="11" type="method_call" span="206:7:206:10">run</jtok>
<jtok eid="11" type="primary_name_ref" span="206:11:206:12">v</jtok>
<jtok eid="11" type="method_call" span="207:4:207:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="207:17:207:27">"Johnny.}"</jtok>
<jtok eid="11" type="primary_name_ref" span="207:29:207:31">vm</jtok>
<jtok eid="11" type="method_call" span="207:32:207:40">getStack</jtok>
<jtok eid="11" type="method_call" span="207:43:207:46">pop</jtok>
<jtok eid="11" type="method_call" span="208:4:208:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="208:17:208:27">"Johnny?}"</jtok>
<jtok eid="11" type="primary_name_ref" span="208:29:208:31">vm</jtok>
<jtok eid="11" type="method_call" span="208:32:208:40">getStack</jtok>
<jtok eid="11" type="method_call" span="208:43:208:46">pop</jtok>
<jtok eid="11" type="method_call" span="209:4:209:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="209:17:209:27">"Johnny!}"</jtok>
<jtok eid="11" type="primary_name_ref" span="209:29:209:31">vm</jtok>
<jtok eid="11" type="method_call" span="209:32:209:40">getStack</jtok>
<jtok eid="11" type="method_call" span="209:43:209:46">pop</jtok>
<jtok eid="11" type="method_call" span="210:4:210:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="210:17:210:27">"Johnny.}"</jtok>
<jtok eid="11" type="primary_name_ref" span="210:29:210:31">vm</jtok>
<jtok eid="11" type="method_call" span="210:32:210:40">getStack</jtok>
<jtok eid="11" type="method_call" span="210:43:210:46">pop</jtok>
<jtok eid="11" type="method_call" span="211:4:211:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="211:17:211:26">"Johnny?"</jtok>
<jtok eid="11" type="primary_name_ref" span="211:28:211:30">vm</jtok>
<jtok eid="11" type="method_call" span="211:31:211:39">getStack</jtok>
<jtok eid="11" type="method_call" span="211:42:211:45">pop</jtok>
<jtok eid="11" type="method_call" span="212:4:212:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="212:17:212:26">"Johnny!"</jtok>
<jtok eid="11" type="primary_name_ref" span="212:28:212:30">vm</jtok>
<jtok eid="11" type="method_call" span="212:31:212:39">getStack</jtok>
<jtok eid="11" type="method_call" span="212:42:212:45">pop</jtok>
<jtok eid="11" type="method_call" span="213:4:213:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="213:17:213:26">"Johnny."</jtok>
<jtok eid="11" type="primary_name_ref" span="213:28:213:30">vm</jtok>
<jtok eid="11" type="method_call" span="213:31:213:39">getStack</jtok>
<jtok eid="11" type="method_call" span="213:42:213:45">pop</jtok>
<jtok eid="11" type="method_call" span="214:4:214:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="214:17:214:26">"Johnny."</jtok>
<jtok eid="11" type="primary_name_ref" span="214:28:214:30">vm</jtok>
<jtok eid="11" type="method_call" span="214:31:214:39">getStack</jtok>
<jtok eid="11" type="method_call" span="214:42:214:45">pop</jtok>
<jtok eid="11" type="method_call" span="215:4:215:16">assertEquals</jtok>
<jtok eid="11" type="string_literal" span="215:17:215:24">"Hallo"</jtok>
<jtok eid="11" type="primary_name_ref" span="215:26:215:28">vm</jtok>
<jtok eid="11" type="method_call" span="215:29:215:37">getStack</jtok>
<jtok eid="11" type="method_call" span="215:40:215:43">pop</jtok>
<jtok eid="11" type="method_call" span="216:4:216:16">assertEquals</jtok>
<jtok eid="11" type="primary_name_ref" span="216:20:216:22">vm</jtok>
<jtok eid="11" type="method_call" span="216:23:216:31">getStack</jtok>
<jtok eid="11" type="method_call" span="216:34:216:38">size</jtok>
<jtok eid="12" type="method_name" span="220:14:220:27">testSubstring</jtok>
<jtok eid="12" type="throws" span="220:37:220:57">RecognitionException</jtok>
<jtok eid="12" type="throws" span="220:59:220:70">IOException</jtok>
<jtok eid="12" type="class_or_interface_ref" span="221:3:221:5">VM</jtok>
<jtok eid="12" type="local_variable_name" span="221:6:221:8">vm</jtok>
<jtok eid="12" type="constructor_call" span="221:15:221:17">VM</jtok>
<jtok eid="12" type="string_literal" span="221:18:221:36">"FUNCTION {test} "</jtok>
<jtok eid="12" type="string_literal" span="221:39:221:76">"{ \"123456789\" #2  #1  substring$ "</jtok>
<jtok eid="12" type="line_comment" span="221:79:221:83">// 2</jtok>
<jtok eid="12" type="string_literal" span="222:4:222:48">"  \"123456789\" #4 global.max$ substring$ "</jtok>
<jtok eid="12" type="line_comment" span="222:51:222:60">// 456789</jtok>
<jtok eid="12" type="string_literal" span="223:4:223:41">"  \"123456789\" #1  #9  substring$ "</jtok>
<jtok eid="12" type="line_comment" span="223:44:223:56">// 123456789</jtok>
<jtok eid="12" type="string_literal" span="224:4:224:41">"  \"123456789\" #1  #10 substring$ "</jtok>
<jtok eid="12" type="line_comment" span="224:44:224:56">// 123456789</jtok>
<jtok eid="12" type="string_literal" span="225:4:225:41">"  \"123456789\" #1  #99 substring$ "</jtok>
<jtok eid="12" type="line_comment" span="225:44:225:56">// 123456789</jtok>
<jtok eid="12" type="string_literal" span="227:4:227:41">"  \"123456789\" #-7 #3  substring$ "</jtok>
<jtok eid="12" type="line_comment" span="227:44:227:50">// 123</jtok>
<jtok eid="12" type="string_literal" span="228:4:228:41">"  \"123456789\" #-1 #1  substring$ "</jtok>
<jtok eid="12" type="line_comment" span="228:44:228:48">// 9</jtok>
<jtok eid="12" type="string_literal" span="229:4:229:41">"  \"123456789\" #-1 #3  substring$ "</jtok>
<jtok eid="12" type="line_comment" span="229:44:229:50">// 789</jtok>
<jtok eid="12" type="string_literal" span="230:4:230:41">"  \"123456789\" #-2 #2  substring$ "</jtok>
<jtok eid="12" type="line_comment" span="230:44:230:49">// 78</jtok>
<jtok eid="12" type="string_literal" span="232:4:232:23">"} EXECUTE {test} "</jtok>
<jtok eid="12" type="class_or_interface_ref" span="234:3:234:9">Vector</jtok>
<jtok eid="12" type="class_or_interface_ref" span="234:10:234:21">BibtexEntry</jtok>
<jtok eid="12" type="local_variable_name" span="234:23:234:24">v</jtok>
<jtok eid="12" type="constructor_call" span="234:31:234:37">Vector</jtok>
<jtok eid="12" type="constructor_call" span="234:38:234:49">BibtexEntry</jtok>
<jtok eid="12" type="primary_name_ref" span="235:3:235:5">vm</jtok>
<jtok eid="12" type="method_call" span="235:6:235:9">run</jtok>
<jtok eid="12" type="primary_name_ref" span="235:10:235:11">v</jtok>
<jtok eid="12" type="method_call" span="236:3:236:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="236:16:236:20">"78"</jtok>
<jtok eid="12" type="primary_name_ref" span="236:22:236:24">vm</jtok>
<jtok eid="12" type="method_call" span="236:25:236:33">getStack</jtok>
<jtok eid="12" type="method_call" span="236:36:236:39">pop</jtok>
<jtok eid="12" type="method_call" span="237:3:237:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="237:16:237:21">"789"</jtok>
<jtok eid="12" type="primary_name_ref" span="237:23:237:25">vm</jtok>
<jtok eid="12" type="method_call" span="237:26:237:34">getStack</jtok>
<jtok eid="12" type="method_call" span="237:37:237:40">pop</jtok>
<jtok eid="12" type="method_call" span="238:3:238:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="238:16:238:19">"9"</jtok>
<jtok eid="12" type="primary_name_ref" span="238:21:238:23">vm</jtok>
<jtok eid="12" type="method_call" span="238:24:238:32">getStack</jtok>
<jtok eid="12" type="method_call" span="238:35:238:38">pop</jtok>
<jtok eid="12" type="method_call" span="239:3:239:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="239:16:239:21">"123"</jtok>
<jtok eid="12" type="primary_name_ref" span="239:23:239:25">vm</jtok>
<jtok eid="12" type="method_call" span="239:26:239:34">getStack</jtok>
<jtok eid="12" type="method_call" span="239:37:239:40">pop</jtok>
<jtok eid="12" type="method_call" span="241:3:241:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="241:16:241:27">"123456789"</jtok>
<jtok eid="12" type="primary_name_ref" span="241:29:241:31">vm</jtok>
<jtok eid="12" type="method_call" span="241:32:241:40">getStack</jtok>
<jtok eid="12" type="method_call" span="241:43:241:46">pop</jtok>
<jtok eid="12" type="method_call" span="242:3:242:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="242:16:242:27">"123456789"</jtok>
<jtok eid="12" type="primary_name_ref" span="242:29:242:31">vm</jtok>
<jtok eid="12" type="method_call" span="242:32:242:40">getStack</jtok>
<jtok eid="12" type="method_call" span="242:43:242:46">pop</jtok>
<jtok eid="12" type="method_call" span="243:3:243:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="243:16:243:27">"123456789"</jtok>
<jtok eid="12" type="primary_name_ref" span="243:29:243:31">vm</jtok>
<jtok eid="12" type="method_call" span="243:32:243:40">getStack</jtok>
<jtok eid="12" type="method_call" span="243:43:243:46">pop</jtok>
<jtok eid="12" type="method_call" span="244:3:244:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="244:16:244:24">"456789"</jtok>
<jtok eid="12" type="primary_name_ref" span="244:26:244:28">vm</jtok>
<jtok eid="12" type="method_call" span="244:29:244:37">getStack</jtok>
<jtok eid="12" type="method_call" span="244:40:244:43">pop</jtok>
<jtok eid="12" type="method_call" span="245:3:245:15">assertEquals</jtok>
<jtok eid="12" type="string_literal" span="245:16:245:19">"2"</jtok>
<jtok eid="12" type="primary_name_ref" span="245:21:245:23">vm</jtok>
<jtok eid="12" type="method_call" span="245:24:245:32">getStack</jtok>
<jtok eid="12" type="method_call" span="245:35:245:38">pop</jtok>
<jtok eid="12" type="method_call" span="246:3:246:15">assertEquals</jtok>
<jtok eid="12" type="primary_name_ref" span="246:19:246:21">vm</jtok>
<jtok eid="12" type="method_call" span="246:22:246:30">getStack</jtok>
<jtok eid="12" type="method_call" span="246:33:246:37">size</jtok>
<jtok eid="13" type="method_name" span="249:14:249:23">testEmpty</jtok>
<jtok eid="13" type="throws" span="249:33:249:53">RecognitionException</jtok>
<jtok eid="13" type="throws" span="249:55:249:66">IOException</jtok>
<jtok eid="13" type="class_or_interface_ref" span="250:3:250:5">VM</jtok>
<jtok eid="13" type="local_variable_name" span="250:6:250:8">vm</jtok>
<jtok eid="13" type="constructor_call" span="250:15:250:17">VM</jtok>
<jtok eid="13" type="string_literal" span="250:18:250:73">"ENTRY {title}{}{} READ STRINGS { s } FUNCTION {test} "</jtok>
<jtok eid="13" type="string_literal" span="250:76:250:89">"{ s empty$ "</jtok>
<jtok eid="13" type="line_comment" span="250:92:250:100">// FALSE</jtok>
<jtok eid="13" type="string_literal" span="251:4:251:18">"\"\" empty$ "</jtok>
<jtok eid="13" type="line_comment" span="251:21:251:29">// FALSE</jtok>
<jtok eid="13" type="string_literal" span="252:4:252:21">"\"   \" empty$ "</jtok>
<jtok eid="13" type="line_comment" span="252:24:252:32">// FALSE</jtok>
<jtok eid="13" type="string_literal" span="253:4:253:20">" title empty$ "</jtok>
<jtok eid="13" type="line_comment" span="253:23:253:31">// FALSE</jtok>
<jtok eid="13" type="string_literal" span="254:4:254:43">" \" HALLO \" empty$ } ITERATE {test} "</jtok>
<jtok eid="13" type="class_or_interface_ref" span="256:3:256:9">Vector</jtok>
<jtok eid="13" type="class_or_interface_ref" span="256:10:256:21">BibtexEntry</jtok>
<jtok eid="13" type="local_variable_name" span="256:23:256:24">v</jtok>
<jtok eid="13" type="constructor_call" span="256:31:256:37">Vector</jtok>
<jtok eid="13" type="constructor_call" span="256:38:256:49">BibtexEntry</jtok>
<jtok eid="13" type="primary_name_ref" span="257:3:257:4">v</jtok>
<jtok eid="13" type="method_call" span="257:5:257:8">add</jtok>
<jtok eid="13" type="method_call" span="257:9:257:33">bibtexString2BibtexEntry</jtok>
<jtok eid="13" type="string_literal" span="257:34:257:63">"@article{a, author=\"AAA\"}"</jtok>
<jtok eid="13" type="primary_name_ref" span="258:3:258:5">vm</jtok>
<jtok eid="13" type="method_call" span="258:6:258:9">run</jtok>
<jtok eid="13" type="primary_name_ref" span="258:10:258:11">v</jtok>
<jtok eid="13" type="method_call" span="259:3:259:15">assertEquals</jtok>
<jtok eid="13" type="primary_name_ref" span="259:16:259:18">VM</jtok>
<jtok eid="13" type="qualified_name_ref" span="259:19:259:24">FALSE</jtok>
<jtok eid="13" type="primary_name_ref" span="259:26:259:28">vm</jtok>
<jtok eid="13" type="method_call" span="259:29:259:37">getStack</jtok>
<jtok eid="13" type="method_call" span="259:40:259:43">pop</jtok>
<jtok eid="13" type="method_call" span="260:3:260:15">assertEquals</jtok>
<jtok eid="13" type="primary_name_ref" span="260:16:260:18">VM</jtok>
<jtok eid="13" type="qualified_name_ref" span="260:19:260:23">TRUE</jtok>
<jtok eid="13" type="primary_name_ref" span="260:25:260:27">vm</jtok>
<jtok eid="13" type="method_call" span="260:28:260:36">getStack</jtok>
<jtok eid="13" type="method_call" span="260:39:260:42">pop</jtok>
<jtok eid="13" type="method_call" span="261:3:261:15">assertEquals</jtok>
<jtok eid="13" type="primary_name_ref" span="261:16:261:18">VM</jtok>
<jtok eid="13" type="qualified_name_ref" span="261:19:261:23">TRUE</jtok>
<jtok eid="13" type="primary_name_ref" span="261:25:261:27">vm</jtok>
<jtok eid="13" type="method_call" span="261:28:261:36">getStack</jtok>
<jtok eid="13" type="method_call" span="261:39:261:42">pop</jtok>
<jtok eid="13" type="method_call" span="262:3:262:15">assertEquals</jtok>
<jtok eid="13" type="primary_name_ref" span="262:16:262:18">VM</jtok>
<jtok eid="13" type="qualified_name_ref" span="262:19:262:23">TRUE</jtok>
<jtok eid="13" type="primary_name_ref" span="262:25:262:27">vm</jtok>
<jtok eid="13" type="method_call" span="262:28:262:36">getStack</jtok>
<jtok eid="13" type="method_call" span="262:39:262:42">pop</jtok>
<jtok eid="13" type="method_call" span="263:3:263:15">assertEquals</jtok>
<jtok eid="13" type="primary_name_ref" span="263:16:263:18">VM</jtok>
<jtok eid="13" type="qualified_name_ref" span="263:19:263:23">TRUE</jtok>
<jtok eid="13" type="primary_name_ref" span="263:25:263:27">vm</jtok>
<jtok eid="13" type="method_call" span="263:28:263:36">getStack</jtok>
<jtok eid="13" type="method_call" span="263:39:263:42">pop</jtok>
<jtok eid="13" type="method_call" span="264:3:264:15">assertEquals</jtok>
<jtok eid="13" type="primary_name_ref" span="264:19:264:21">vm</jtok>
<jtok eid="13" type="method_call" span="264:22:264:30">getStack</jtok>
<jtok eid="13" type="method_call" span="264:33:264:37">size</jtok>
<jtok eid="14" type="method_name" span="267:14:267:41">testDuplicateEmptyPopSwapIf</jtok>
<jtok eid="14" type="throws" span="267:51:267:71">RecognitionException</jtok>
<jtok eid="14" type="throws" span="267:73:267:84">IOException</jtok>
<jtok eid="14" type="class_or_interface_ref" span="268:3:268:5">VM</jtok>
<jtok eid="14" type="local_variable_name" span="268:6:268:8">vm</jtok>
<jtok eid="14" type="constructor_call" span="268:15:268:17">VM</jtok>
<jtok eid="14" type="string_literal" span="268:18:268:41">"FUNCTION {emphasize} "</jtok>
<jtok eid="14" type="string_literal" span="268:44:268:66">"{ duplicate$ empty$ "</jtok>
<jtok eid="14" type="string_literal" span="268:69:268:87">"  { pop$ \"\" } "</jtok>
<jtok eid="14" type="string_literal" span="269:6:269:41">"  { \"{\\em \" swap$ * \"}\" * } "</jtok>
<jtok eid="14" type="string_literal" span="269:44:269:52">"  if$ "</jtok>
<jtok eid="14" type="string_literal" span="269:55:269:59">"} "</jtok>
<jtok eid="14" type="string_literal" span="269:62:269:81">"FUNCTION {test} {"</jtok>
<jtok eid="14" type="string_literal" span="270:6:270:25">"  \"\" emphasize "</jtok>
<jtok eid="14" type="string_literal" span="270:28:270:52">"  \"Hello\" emphasize "</jtok>
<jtok eid="14" type="string_literal" span="270:55:270:58">"}"</jtok>
<jtok eid="14" type="string_literal" span="270:61:270:78">"EXECUTE {test} "</jtok>
<jtok eid="14" type="class_or_interface_ref" span="272:3:272:9">Vector</jtok>
<jtok eid="14" type="class_or_interface_ref" span="272:10:272:21">BibtexEntry</jtok>
<jtok eid="14" type="local_variable_name" span="272:23:272:24">v</jtok>
<jtok eid="14" type="constructor_call" span="272:31:272:37">Vector</jtok>
<jtok eid="14" type="constructor_call" span="272:38:272:49">BibtexEntry</jtok>
<jtok eid="14" type="primary_name_ref" span="273:3:273:5">vm</jtok>
<jtok eid="14" type="method_call" span="273:6:273:9">run</jtok>
<jtok eid="14" type="primary_name_ref" span="273:10:273:11">v</jtok>
<jtok eid="14" type="method_call" span="274:3:274:15">assertEquals</jtok>
<jtok eid="14" type="string_literal" span="274:16:274:30">"{\\em Hello}"</jtok>
<jtok eid="14" type="primary_name_ref" span="274:32:274:34">vm</jtok>
<jtok eid="14" type="method_call" span="274:35:274:43">getStack</jtok>
<jtok eid="14" type="method_call" span="274:46:274:49">pop</jtok>
<jtok eid="14" type="method_call" span="275:3:275:15">assertEquals</jtok>
<jtok eid="14" type="string_literal" span="275:16:275:18">""</jtok>
<jtok eid="14" type="primary_name_ref" span="275:20:275:22">vm</jtok>
<jtok eid="14" type="method_call" span="275:23:275:31">getStack</jtok>
<jtok eid="14" type="method_call" span="275:34:275:37">pop</jtok>
<jtok eid="14" type="method_call" span="276:3:276:15">assertEquals</jtok>
<jtok eid="14" type="primary_name_ref" span="276:19:276:21">vm</jtok>
<jtok eid="14" type="method_call" span="276:22:276:30">getStack</jtok>
<jtok eid="14" type="method_call" span="276:33:276:37">size</jtok>
<jtok eid="15" type="method_name" span="279:14:279:28">testChangeCase</jtok>
<jtok eid="15" type="throws" span="279:38:279:58">RecognitionException</jtok>
<jtok eid="15" type="throws" span="279:60:279:71">IOException</jtok>
<jtok eid="15" type="class_or_interface_ref" span="280:3:280:5">VM</jtok>
<jtok eid="15" type="local_variable_name" span="280:6:280:8">vm</jtok>
<jtok eid="15" type="constructor_call" span="280:15:280:17">VM</jtok>
<jtok eid="15" type="string_literal" span="281:4:281:24">"STRINGS { title } "</jtok>
<jtok eid="15" type="string_literal" span="282:7:282:14">"READ "</jtok>
<jtok eid="15" type="string_literal" span="283:7:283:32">"FUNCTION {format.title}"</jtok>
<jtok eid="15" type="string_literal" span="284:7:284:30">" { duplicate$ empty$ "</jtok>
<jtok eid="15" type="string_literal" span="285:7:285:27">"    { pop$ \"\" } "</jtok>
<jtok eid="15" type="string_literal" span="286:7:286:36">"    { \"t\" change.case$ } "</jtok>
<jtok eid="15" type="string_literal" span="287:7:287:15">"  if$ "</jtok>
<jtok eid="15" type="string_literal" span="288:7:288:11">"} "</jtok>
<jtok eid="15" type="string_literal" span="289:7:289:26">"FUNCTION {test} {"</jtok>
<jtok eid="15" type="string_literal" span="290:7:290:59">"  \"hello world\" \"u\" change.case$ format.title "</jtok>
<jtok eid="15" type="string_literal" span="291:7:291:40">"  \"Hello World\" format.title "</jtok>
<jtok eid="15" type="string_literal" span="292:7:292:29">"  \"\" format.title "</jtok>
<jtok eid="15" type="string_literal" span="293:7:293:130">"  \"{A}{D}/{C}ycle: {I}{B}{M}'s {F}ramework for {A}pplication {D}evelopment and {C}ase\" \"u\" change.case$ format.title "</jtok>
<jtok eid="15" type="string_literal" span="294:7:294:10">"}"</jtok>
<jtok eid="15" type="string_literal" span="294:13:294:30">"EXECUTE {test} "</jtok>
<jtok eid="15" type="class_or_interface_ref" span="296:3:296:9">Vector</jtok>
<jtok eid="15" type="class_or_interface_ref" span="296:10:296:21">BibtexEntry</jtok>
<jtok eid="15" type="local_variable_name" span="296:23:296:24">v</jtok>
<jtok eid="15" type="constructor_call" span="296:31:296:37">Vector</jtok>
<jtok eid="15" type="constructor_call" span="296:38:296:49">BibtexEntry</jtok>
<jtok eid="15" type="primary_name_ref" span="297:3:297:5">vm</jtok>
<jtok eid="15" type="method_call" span="297:6:297:9">run</jtok>
<jtok eid="15" type="primary_name_ref" span="297:10:297:11">v</jtok>
<jtok eid="15" type="method_call" span="298:3:298:15">assertEquals</jtok>
<jtok eid="15" type="string_literal" span="299:4:299:88">"{A}{D}/{C}ycle: {I}{B}{M}'s {F}ramework for {A}pplication {D}evelopment and {C}ase"</jtok>
<jtok eid="15" type="primary_name_ref" span="300:4:300:6">vm</jtok>
<jtok eid="15" type="method_call" span="300:7:300:15">getStack</jtok>
<jtok eid="15" type="method_call" span="300:18:300:21">pop</jtok>
<jtok eid="15" type="method_call" span="301:3:301:15">assertEquals</jtok>
<jtok eid="15" type="string_literal" span="301:16:301:18">""</jtok>
<jtok eid="15" type="primary_name_ref" span="301:20:301:22">vm</jtok>
<jtok eid="15" type="method_call" span="301:23:301:31">getStack</jtok>
<jtok eid="15" type="method_call" span="301:34:301:37">pop</jtok>
<jtok eid="15" type="method_call" span="302:3:302:15">assertEquals</jtok>
<jtok eid="15" type="string_literal" span="302:16:302:29">"Hello world"</jtok>
<jtok eid="15" type="primary_name_ref" span="302:31:302:33">vm</jtok>
<jtok eid="15" type="method_call" span="302:34:302:42">getStack</jtok>
<jtok eid="15" type="method_call" span="302:45:302:48">pop</jtok>
<jtok eid="15" type="method_call" span="303:3:303:15">assertEquals</jtok>
<jtok eid="15" type="string_literal" span="303:16:303:29">"Hello world"</jtok>
<jtok eid="15" type="primary_name_ref" span="303:31:303:33">vm</jtok>
<jtok eid="15" type="method_call" span="303:34:303:42">getStack</jtok>
<jtok eid="15" type="method_call" span="303:45:303:48">pop</jtok>
<jtok eid="15" type="method_call" span="304:3:304:15">assertEquals</jtok>
<jtok eid="15" type="primary_name_ref" span="304:19:304:21">vm</jtok>
<jtok eid="15" type="method_call" span="304:22:304:30">getStack</jtok>
<jtok eid="15" type="method_call" span="304:33:304:37">size</jtok>
<jtok eid="16" type="method_name" span="307:14:307:28">testTextLength</jtok>
<jtok eid="16" type="throws" span="307:38:307:58">RecognitionException</jtok>
<jtok eid="16" type="throws" span="307:60:307:71">IOException</jtok>
<jtok eid="16" type="class_or_interface_ref" span="308:3:308:5">VM</jtok>
<jtok eid="16" type="local_variable_name" span="308:6:308:8">vm</jtok>
<jtok eid="16" type="constructor_call" span="308:15:308:17">VM</jtok>
<jtok eid="16" type="string_literal" span="308:18:308:37">"FUNCTION {test} {"</jtok>
<jtok eid="16" type="string_literal" span="308:40:308:73">"  \"hello world\" text.length$ "</jtok>
<jtok eid="16" type="string_literal" span="309:6:309:41">"  \"Hello {W}orld\" text.length$ "</jtok>
<jtok eid="16" type="string_literal" span="309:44:309:66">"  \"\" text.length$ "</jtok>
<jtok eid="16" type="string_literal" span="310:6:310:42">"  \"{A}{D}/{Cycle}\" text.length$ "</jtok>
<jtok eid="16" type="string_literal" span="311:6:311:53">"  \"{\\This is one character}\" text.length$ "</jtok>
<jtok eid="16" type="string_literal" span="312:6:312:69">"  \"{\\This {is} {one} {c{h}}aracter as well}\" text.length$ "</jtok>
<jtok eid="16" type="string_literal" span="313:6:313:43">"  \"{\\And this too\" text.length$ "</jtok>
<jtok eid="16" type="string_literal" span="313:46:313:84">"  \"These are {\\11}\" text.length$ "</jtok>
<jtok eid="16" type="string_literal" span="313:87:313:91">"} "</jtok>
<jtok eid="16" type="string_literal" span="314:6:314:23">"EXECUTE {test} "</jtok>
<jtok eid="16" type="class_or_interface_ref" span="316:3:316:9">Vector</jtok>
<jtok eid="16" type="class_or_interface_ref" span="316:10:316:21">BibtexEntry</jtok>
<jtok eid="16" type="local_variable_name" span="316:23:316:24">v</jtok>
<jtok eid="16" type="constructor_call" span="316:31:316:37">Vector</jtok>
<jtok eid="16" type="constructor_call" span="316:38:316:49">BibtexEntry</jtok>
<jtok eid="16" type="primary_name_ref" span="317:3:317:5">vm</jtok>
<jtok eid="16" type="method_call" span="317:6:317:9">run</jtok>
<jtok eid="16" type="primary_name_ref" span="317:10:317:11">v</jtok>
<jtok eid="16" type="method_call" span="318:3:318:15">assertEquals</jtok>
<jtok eid="16" type="constructor_call" span="318:20:318:27">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="318:33:318:35">vm</jtok>
<jtok eid="16" type="method_call" span="318:36:318:44">getStack</jtok>
<jtok eid="16" type="method_call" span="318:47:318:50">pop</jtok>
<jtok eid="16" type="method_call" span="319:3:319:15">assertEquals</jtok>
<jtok eid="16" type="constructor_call" span="319:20:319:27">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="319:32:319:34">vm</jtok>
<jtok eid="16" type="method_call" span="319:35:319:43">getStack</jtok>
<jtok eid="16" type="method_call" span="319:46:319:49">pop</jtok>
<jtok eid="16" type="method_call" span="320:3:320:15">assertEquals</jtok>
<jtok eid="16" type="constructor_call" span="320:20:320:27">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="320:32:320:34">vm</jtok>
<jtok eid="16" type="method_call" span="320:35:320:43">getStack</jtok>
<jtok eid="16" type="method_call" span="320:46:320:49">pop</jtok>
<jtok eid="16" type="method_call" span="321:3:321:15">assertEquals</jtok>
<jtok eid="16" type="constructor_call" span="321:20:321:27">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="321:32:321:34">vm</jtok>
<jtok eid="16" type="method_call" span="321:35:321:43">getStack</jtok>
<jtok eid="16" type="method_call" span="321:46:321:49">pop</jtok>
<jtok eid="16" type="method_call" span="322:3:322:15">assertEquals</jtok>
<jtok eid="16" type="constructor_call" span="322:20:322:27">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="322:32:322:34">vm</jtok>
<jtok eid="16" type="method_call" span="322:35:322:43">getStack</jtok>
<jtok eid="16" type="method_call" span="322:46:322:49">pop</jtok>
<jtok eid="16" type="method_call" span="323:3:323:15">assertEquals</jtok>
<jtok eid="16" type="constructor_call" span="323:20:323:27">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="323:32:323:34">vm</jtok>
<jtok eid="16" type="method_call" span="323:35:323:43">getStack</jtok>
<jtok eid="16" type="method_call" span="323:46:323:49">pop</jtok>
<jtok eid="16" type="method_call" span="324:3:324:15">assertEquals</jtok>
<jtok eid="16" type="constructor_call" span="324:20:324:27">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="324:33:324:35">vm</jtok>
<jtok eid="16" type="method_call" span="324:36:324:44">getStack</jtok>
<jtok eid="16" type="method_call" span="324:47:324:50">pop</jtok>
<jtok eid="16" type="method_call" span="325:3:325:15">assertEquals</jtok>
<jtok eid="16" type="constructor_call" span="325:20:325:27">Integer</jtok>
<jtok eid="16" type="primary_name_ref" span="325:33:325:35">vm</jtok>
<jtok eid="16" type="method_call" span="325:36:325:44">getStack</jtok>
<jtok eid="16" type="method_call" span="325:47:325:50">pop</jtok>
<jtok eid="16" type="method_call" span="326:3:326:15">assertEquals</jtok>
<jtok eid="16" type="primary_name_ref" span="326:19:326:21">vm</jtok>
<jtok eid="16" type="method_call" span="326:22:326:30">getStack</jtok>
<jtok eid="16" type="method_call" span="326:33:326:37">size</jtok>
<jtok eid="17" type="method_name" span="329:14:329:28">testVMIntToStr</jtok>
<jtok eid="17" type="throws" span="329:38:329:58">RecognitionException</jtok>
<jtok eid="17" type="throws" span="329:60:329:71">IOException</jtok>
<jtok eid="17" type="class_or_interface_ref" span="330:3:330:5">VM</jtok>
<jtok eid="17" type="local_variable_name" span="330:6:330:8">vm</jtok>
<jtok eid="17" type="constructor_call" span="330:15:330:17">VM</jtok>
<jtok eid="17" type="string_literal" span="330:18:330:71">"FUNCTION {test} { #3 int.to.str$ #9999 int.to.str$}"</jtok>
<jtok eid="17" type="string_literal" span="330:74:330:90">"EXECUTE {test}"</jtok>
<jtok eid="17" type="class_or_interface_ref" span="332:3:332:9">Vector</jtok>
<jtok eid="17" type="class_or_interface_ref" span="332:10:332:21">BibtexEntry</jtok>
<jtok eid="17" type="local_variable_name" span="332:23:332:24">v</jtok>
<jtok eid="17" type="constructor_call" span="332:31:332:37">Vector</jtok>
<jtok eid="17" type="constructor_call" span="332:38:332:49">BibtexEntry</jtok>
<jtok eid="17" type="primary_name_ref" span="333:3:333:5">vm</jtok>
<jtok eid="17" type="method_call" span="333:6:333:9">run</jtok>
<jtok eid="17" type="primary_name_ref" span="333:10:333:11">v</jtok>
<jtok eid="17" type="method_call" span="334:3:334:15">assertEquals</jtok>
<jtok eid="17" type="string_literal" span="334:16:334:22">"9999"</jtok>
<jtok eid="17" type="class_or_interface_ref" span="334:25:334:31">String</jtok>
<jtok eid="17" type="primary_name_ref" span="334:33:334:35">vm</jtok>
<jtok eid="17" type="method_call" span="334:36:334:44">getStack</jtok>
<jtok eid="17" type="method_call" span="334:47:334:50">pop</jtok>
<jtok eid="17" type="method_call" span="335:3:335:15">assertEquals</jtok>
<jtok eid="17" type="string_literal" span="335:16:335:19">"3"</jtok>
<jtok eid="17" type="primary_name_ref" span="335:21:335:23">vm</jtok>
<jtok eid="17" type="method_call" span="335:24:335:32">getStack</jtok>
<jtok eid="17" type="method_call" span="335:35:335:38">pop</jtok>
<jtok eid="17" type="method_call" span="336:3:336:15">assertEquals</jtok>
<jtok eid="17" type="primary_name_ref" span="336:19:336:21">vm</jtok>
<jtok eid="17" type="method_call" span="336:22:336:30">getStack</jtok>
<jtok eid="17" type="method_call" span="336:33:336:37">size</jtok>
<jtok eid="18" type="method_name" span="339:14:339:28">testVMChrToInt</jtok>
<jtok eid="18" type="throws" span="339:38:339:58">RecognitionException</jtok>
<jtok eid="18" type="throws" span="339:60:339:71">IOException</jtok>
<jtok eid="18" type="class_or_interface_ref" span="341:4:341:6">VM</jtok>
<jtok eid="18" type="local_variable_name" span="341:7:341:9">vm</jtok>
<jtok eid="18" type="constructor_call" span="341:16:341:18">VM</jtok>
<jtok eid="18" type="string_literal" span="341:19:341:58">"FUNCTION {test} { \"H\" chr.to.int$ }"</jtok>
<jtok eid="18" type="string_literal" span="341:61:341:77">"EXECUTE {test}"</jtok>
<jtok eid="18" type="class_or_interface_ref" span="343:4:343:10">Vector</jtok>
<jtok eid="18" type="class_or_interface_ref" span="343:11:343:22">BibtexEntry</jtok>
<jtok eid="18" type="local_variable_name" span="343:24:343:25">v</jtok>
<jtok eid="18" type="constructor_call" span="343:32:343:38">Vector</jtok>
<jtok eid="18" type="constructor_call" span="343:39:343:50">BibtexEntry</jtok>
<jtok eid="18" type="primary_name_ref" span="344:4:344:6">vm</jtok>
<jtok eid="18" type="method_call" span="344:7:344:10">run</jtok>
<jtok eid="18" type="primary_name_ref" span="344:11:344:12">v</jtok>
<jtok eid="18" type="method_call" span="345:4:345:16">assertEquals</jtok>
<jtok eid="18" type="constructor_call" span="345:21:345:28">Integer</jtok>
<jtok eid="18" type="primary_name_ref" span="345:34:345:36">vm</jtok>
<jtok eid="18" type="method_call" span="345:37:345:45">getStack</jtok>
<jtok eid="18" type="method_call" span="345:48:345:51">pop</jtok>
<jtok eid="18" type="method_call" span="346:4:346:16">assertEquals</jtok>
<jtok eid="18" type="primary_name_ref" span="346:20:346:22">vm</jtok>
<jtok eid="18" type="method_call" span="346:23:346:31">getStack</jtok>
<jtok eid="18" type="method_call" span="346:34:346:38">size</jtok>
<jtok eid="18" type="class_or_interface_ref" span="349:4:349:6">VM</jtok>
<jtok eid="18" type="local_variable_name" span="349:7:349:9">vm</jtok>
<jtok eid="18" type="constructor_call" span="349:16:349:18">VM</jtok>
<jtok eid="18" type="string_literal" span="349:19:349:70">"FUNCTION {test} { \"H\" chr.to.int$ int.to.chr$ }"</jtok>
<jtok eid="18" type="string_literal" span="349:73:349:89">"EXECUTE {test}"</jtok>
<jtok eid="18" type="class_or_interface_ref" span="351:4:351:10">Vector</jtok>
<jtok eid="18" type="class_or_interface_ref" span="351:11:351:22">BibtexEntry</jtok>
<jtok eid="18" type="local_variable_name" span="351:24:351:25">v</jtok>
<jtok eid="18" type="constructor_call" span="351:32:351:38">Vector</jtok>
<jtok eid="18" type="constructor_call" span="351:39:351:50">BibtexEntry</jtok>
<jtok eid="18" type="primary_name_ref" span="352:4:352:6">vm</jtok>
<jtok eid="18" type="method_call" span="352:7:352:10">run</jtok>
<jtok eid="18" type="primary_name_ref" span="352:11:352:12">v</jtok>
<jtok eid="18" type="method_call" span="353:4:353:16">assertEquals</jtok>
<jtok eid="18" type="string_literal" span="353:17:353:20">"H"</jtok>
<jtok eid="18" type="primary_name_ref" span="353:22:353:24">vm</jtok>
<jtok eid="18" type="method_call" span="353:25:353:33">getStack</jtok>
<jtok eid="18" type="method_call" span="353:36:353:39">pop</jtok>
<jtok eid="18" type="method_call" span="354:4:354:16">assertEquals</jtok>
<jtok eid="18" type="primary_name_ref" span="354:20:354:22">vm</jtok>
<jtok eid="18" type="method_call" span="354:23:354:31">getStack</jtok>
<jtok eid="18" type="method_call" span="354:34:354:38">size</jtok>
<jtok eid="19" type="method_name" span="358:14:358:22">testSort</jtok>
<jtok eid="19" type="throws" span="358:32:358:52">RecognitionException</jtok>
<jtok eid="19" type="throws" span="358:54:358:65">IOException</jtok>
<jtok eid="19" type="class_or_interface_ref" span="360:3:360:5">VM</jtok>
<jtok eid="19" type="local_variable_name" span="360:6:360:8">vm</jtok>
<jtok eid="19" type="constructor_call" span="360:15:360:17">VM</jtok>
<jtok eid="19" type="string_literal" span="360:18:360:20">""</jtok>
<jtok eid="19" type="string_literal" span="360:23:360:57">"ENTRY  { title }  { }  { label }"</jtok>
<jtok eid="19" type="string_literal" span="361:6:361:75">"FUNCTION {presort} { cite$ 'sort.key$ := } ITERATE { presort } SORT"</jtok>
<jtok eid="19" type="class_or_interface_ref" span="363:3:363:9">Vector</jtok>
<jtok eid="19" type="class_or_interface_ref" span="363:10:363:21">BibtexEntry</jtok>
<jtok eid="19" type="local_variable_name" span="363:23:363:24">v</jtok>
<jtok eid="19" type="constructor_call" span="363:31:363:37">Vector</jtok>
<jtok eid="19" type="constructor_call" span="363:38:363:49">BibtexEntry</jtok>
<jtok eid="19" type="primary_name_ref" span="364:3:364:4">v</jtok>
<jtok eid="19" type="method_call" span="364:5:364:8">add</jtok>
<jtok eid="19" type="method_call" span="364:9:364:33">bibtexString2BibtexEntry</jtok>
<jtok eid="19" type="string_literal" span="364:34:364:63">"@article{a, author=\"AAA\"}"</jtok>
<jtok eid="19" type="primary_name_ref" span="365:3:365:4">v</jtok>
<jtok eid="19" type="method_call" span="365:5:365:8">add</jtok>
<jtok eid="19" type="method_call" span="365:9:365:33">bibtexString2BibtexEntry</jtok>
<jtok eid="19" type="string_literal" span="365:34:365:63">"@article{b, author=\"BBB\"}"</jtok>
<jtok eid="19" type="primary_name_ref" span="366:3:366:4">v</jtok>
<jtok eid="19" type="method_call" span="366:5:366:8">add</jtok>
<jtok eid="19" type="method_call" span="366:9:366:33">bibtexString2BibtexEntry</jtok>
<jtok eid="19" type="string_literal" span="366:34:366:63">"@article{d, author=\"DDD\"}"</jtok>
<jtok eid="19" type="primary_name_ref" span="367:3:367:4">v</jtok>
<jtok eid="19" type="method_call" span="367:5:367:8">add</jtok>
<jtok eid="19" type="method_call" span="367:9:367:33">bibtexString2BibtexEntry</jtok>
<jtok eid="19" type="string_literal" span="367:34:367:63">"@article{c, author=\"CCC\"}"</jtok>
<jtok eid="19" type="primary_name_ref" span="368:3:368:5">vm</jtok>
<jtok eid="19" type="method_call" span="368:6:368:9">run</jtok>
<jtok eid="19" type="primary_name_ref" span="368:10:368:11">v</jtok>
<jtok eid="19" type="class_or_interface_ref" span="370:3:370:9">Vector</jtok>
<jtok eid="19" type="class_or_interface_ref" span="370:10:370:18">BstEntry</jtok>
<jtok eid="19" type="local_variable_name" span="370:20:370:22">v2</jtok>
<jtok eid="19" type="primary_name_ref" span="370:25:370:27">vm</jtok>
<jtok eid="19" type="method_call" span="370:28:370:38">getEntries</jtok>
<jtok eid="19" type="method_call" span="371:3:371:15">assertEquals</jtok>
<jtok eid="19" type="string_literal" span="371:16:371:19">"a"</jtok>
<jtok eid="19" type="primary_name_ref" span="371:21:371:23">v2</jtok>
<jtok eid="19" type="method_call" span="371:24:371:27">get</jtok>
<jtok eid="19" type="method_call" span="371:31:371:45">getBibtexEntry</jtok>
<jtok eid="19" type="method_call" span="371:48:371:58">getCiteKey</jtok>
<jtok eid="19" type="method_call" span="372:3:372:15">assertEquals</jtok>
<jtok eid="19" type="string_literal" span="372:16:372:19">"b"</jtok>
<jtok eid="19" type="primary_name_ref" span="372:21:372:23">v2</jtok>
<jtok eid="19" type="method_call" span="372:24:372:27">get</jtok>
<jtok eid="19" type="method_call" span="372:31:372:45">getBibtexEntry</jtok>
<jtok eid="19" type="method_call" span="372:48:372:58">getCiteKey</jtok>
<jtok eid="19" type="method_call" span="373:3:373:15">assertEquals</jtok>
<jtok eid="19" type="string_literal" span="373:16:373:19">"c"</jtok>
<jtok eid="19" type="primary_name_ref" span="373:21:373:23">v2</jtok>
<jtok eid="19" type="method_call" span="373:24:373:27">get</jtok>
<jtok eid="19" type="method_call" span="373:31:373:45">getBibtexEntry</jtok>
<jtok eid="19" type="method_call" span="373:48:373:58">getCiteKey</jtok>
<jtok eid="19" type="method_call" span="374:3:374:15">assertEquals</jtok>
<jtok eid="19" type="string_literal" span="374:16:374:19">"d"</jtok>
<jtok eid="19" type="primary_name_ref" span="374:21:374:23">v2</jtok>
<jtok eid="19" type="method_call" span="374:24:374:27">get</jtok>
<jtok eid="19" type="method_call" span="374:31:374:45">getBibtexEntry</jtok>
<jtok eid="19" type="method_call" span="374:48:374:58">getCiteKey</jtok>
<jtok eid="20" type="method_name" span="377:14:377:25">testBuildIn</jtok>
<jtok eid="20" type="throws" span="377:35:377:55">RecognitionException</jtok>
<jtok eid="20" type="throws" span="377:57:377:68">IOException</jtok>
<jtok eid="20" type="class_or_interface_ref" span="378:3:378:5">VM</jtok>
<jtok eid="20" type="local_variable_name" span="378:6:378:8">vm</jtok>
<jtok eid="20" type="constructor_call" span="378:15:378:17">VM</jtok>
<jtok eid="20" type="string_literal" span="378:18:378:41">"EXECUTE {global.max$}"</jtok>
<jtok eid="20" type="class_or_interface_ref" span="380:3:380:9">Vector</jtok>
<jtok eid="20" type="class_or_interface_ref" span="380:10:380:21">BibtexEntry</jtok>
<jtok eid="20" type="local_variable_name" span="380:23:380:24">v</jtok>
<jtok eid="20" type="constructor_call" span="380:31:380:37">Vector</jtok>
<jtok eid="20" type="constructor_call" span="380:38:380:49">BibtexEntry</jtok>
<jtok eid="20" type="primary_name_ref" span="381:3:381:5">vm</jtok>
<jtok eid="20" type="method_call" span="381:6:381:9">run</jtok>
<jtok eid="20" type="primary_name_ref" span="381:10:381:11">v</jtok>
<jtok eid="20" type="method_call" span="383:3:383:15">assertEquals</jtok>
<jtok eid="20" type="constructor_call" span="383:20:383:27">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="383:28:383:35">Integer</jtok>
<jtok eid="20" type="qualified_name_ref" span="383:36:383:45">MAX_VALUE</jtok>
<jtok eid="20" type="primary_name_ref" span="383:48:383:50">vm</jtok>
<jtok eid="20" type="method_call" span="383:51:383:59">getStack</jtok>
<jtok eid="20" type="method_call" span="383:62:383:65">pop</jtok>
<jtok eid="20" type="method_call" span="384:3:384:13">assertTrue</jtok>
<jtok eid="20" type="primary_name_ref" span="384:14:384:16">vm</jtok>
<jtok eid="20" type="method_call" span="384:17:384:25">getStack</jtok>
<jtok eid="20" type="method_call" span="384:28:384:33">empty</jtok>
<jtok eid="21" type="method_name" span="387:14:387:27">testVariables</jtok>
<jtok eid="21" type="throws" span="387:37:387:57">RecognitionException</jtok>
<jtok eid="21" type="throws" span="387:59:387:70">IOException</jtok>
<jtok eid="21" type="class_or_interface_ref" span="389:3:389:5">VM</jtok>
<jtok eid="21" type="local_variable_name" span="389:6:389:8">vm</jtok>
<jtok eid="21" type="constructor_call" span="389:15:389:17">VM</jtok>
<jtok eid="21" type="string_literal" span="389:18:389:60">" STRINGS { t }                          "</jtok>
<jtok eid="21" type="string_literal" span="390:6:390:47">" FUNCTION {not}	{ { #0 } { #1 }  if$ } "</jtok>
<jtok eid="21" type="string_literal" span="391:6:391:69">" FUNCTION {n.dashify} { \"HELLO-WORLD\" 't := t empty$ not } "</jtok>
<jtok eid="21" type="string_literal" span="392:6:392:48">" EXECUTE {n.dashify}                    "</jtok>
<jtok eid="21" type="primary_name_ref" span="394:3:394:5">vm</jtok>
<jtok eid="21" type="method_call" span="394:6:394:9">run</jtok>
<jtok eid="21" type="constructor_call" span="394:14:394:20">Vector</jtok>
<jtok eid="21" type="constructor_call" span="394:21:394:32">BibtexEntry</jtok>
<jtok eid="21" type="method_call" span="396:3:396:15">assertEquals</jtok>
<jtok eid="21" type="primary_name_ref" span="396:16:396:18">VM</jtok>
<jtok eid="21" type="qualified_name_ref" span="396:19:396:23">TRUE</jtok>
<jtok eid="21" type="primary_name_ref" span="396:25:396:27">vm</jtok>
<jtok eid="21" type="method_call" span="396:28:396:36">getStack</jtok>
<jtok eid="21" type="method_call" span="396:39:396:42">pop</jtok>
<jtok eid="22" type="method_name" span="399:14:399:23">testWhile</jtok>
<jtok eid="22" type="throws" span="399:33:399:53">RecognitionException</jtok>
<jtok eid="22" type="throws" span="399:55:399:66">IOException</jtok>
<jtok eid="22" type="class_or_interface_ref" span="401:3:401:5">VM</jtok>
<jtok eid="22" type="local_variable_name" span="401:6:401:8">vm</jtok>
<jtok eid="22" type="constructor_call" span="401:15:401:17">VM</jtok>
<jtok eid="22" type="string_literal" span="402:4:402:31">"STRINGS { t }            "</jtok>
<jtok eid="22" type="string_literal" span="403:7:403:28">"FUNCTION {not}	{   "</jtok>
<jtok eid="22" type="string_literal" span="404:7:404:31">" { #0 } { #1 }  if$ } "</jtok>
<jtok eid="22" type="string_literal" span="405:7:405:43">"FUNCTION {n.dashify}              "</jtok>
<jtok eid="22" type="string_literal" span="406:7:406:43">"{ \"HELLO-WORLD\"                 "</jtok>
<jtok eid="22" type="string_literal" span="407:7:407:43">"  't :=                           "</jtok>
<jtok eid="22" type="string_literal" span="408:7:408:63">" \"\"                                                 "</jtok>
<jtok eid="22" type="string_literal" span="409:7:409:46">"	   { t empty$ not }                 "</jtok>
<jtok eid="22" type="string_literal" span="410:7:410:63">"	   { t #1 #1 substring$ \"-\" =                      "</jtok>
<jtok eid="22" type="string_literal" span="411:7:411:49">"	     { t #1 #2 substring$ \"--\" = not "</jtok>
<jtok eid="22" type="string_literal" span="412:7:412:69">"	          { \"--\" *                                       "</jtok>
<jtok eid="22" type="string_literal" span="413:7:413:72">"	            t #2 global.max$ substring$ 't :=                 "</jtok>
<jtok eid="22" type="string_literal" span="414:7:414:73">"	          }                                                    "</jtok>
<jtok eid="22" type="string_literal" span="415:7:415:70">"	          {   { t #1 #1 substring$ \"-\" = }                "</jtok>
<jtok eid="22" type="string_literal" span="416:7:416:74">"	              { \"-\" *                                         "</jtok>
<jtok eid="22" type="string_literal" span="417:7:417:74">"	                t #2 global.max$ substring$ 't :=               "</jtok>
<jtok eid="22" type="string_literal" span="418:7:418:75">"	              }                                                  "</jtok>
<jtok eid="22" type="string_literal" span="419:7:419:94">"	            while$                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="420:7:420:87">"	          }                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="421:7:421:87">"	        if$                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="422:7:422:83">"	      }                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="423:7:423:77">"	      { t #1 #1 substring$ *                                       "</jtok>
<jtok eid="22" type="string_literal" span="424:7:424:77">"	        t #2 global.max$ substring$ 't :=                          "</jtok>
<jtok eid="22" type="string_literal" span="425:7:425:83">"	      }                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="426:7:426:85">"	      if$                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="427:7:427:81">"	    }                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="428:7:428:84">"	  while$                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="429:7:429:77">"	}                                                                  "</jtok>
<jtok eid="22" type="string_literal" span="430:7:430:30">" EXECUTE {n.dashify} "</jtok>
<jtok eid="22" type="class_or_interface_ref" span="432:3:432:9">Vector</jtok>
<jtok eid="22" type="class_or_interface_ref" span="432:10:432:21">BibtexEntry</jtok>
<jtok eid="22" type="local_variable_name" span="432:23:432:24">v</jtok>
<jtok eid="22" type="constructor_call" span="432:31:432:37">Vector</jtok>
<jtok eid="22" type="constructor_call" span="432:38:432:49">BibtexEntry</jtok>
<jtok eid="22" type="primary_name_ref" span="433:3:433:5">vm</jtok>
<jtok eid="22" type="method_call" span="433:6:433:9">run</jtok>
<jtok eid="22" type="primary_name_ref" span="433:10:433:11">v</jtok>
<jtok eid="22" type="method_call" span="435:3:435:15">assertEquals</jtok>
<jtok eid="22" type="primary_name_ref" span="435:19:435:21">vm</jtok>
<jtok eid="22" type="method_call" span="435:22:435:30">getStack</jtok>
<jtok eid="22" type="method_call" span="435:33:435:37">size</jtok>
<jtok eid="22" type="method_call" span="436:3:436:15">assertEquals</jtok>
<jtok eid="22" type="string_literal" span="436:16:436:30">"HELLO--WORLD"</jtok>
<jtok eid="22" type="primary_name_ref" span="436:32:436:34">vm</jtok>
<jtok eid="22" type="method_call" span="436:35:436:43">getStack</jtok>
<jtok eid="22" type="method_call" span="436:46:436:49">pop</jtok>
<jtok eid="23" type="method_name" span="439:14:439:22">testType</jtok>
<jtok eid="23" type="throws" span="439:32:439:52">RecognitionException</jtok>
<jtok eid="23" type="throws" span="439:54:439:65">IOException</jtok>
<jtok eid="23" type="class_or_interface_ref" span="441:3:441:5">VM</jtok>
<jtok eid="23" type="local_variable_name" span="441:6:441:8">vm</jtok>
<jtok eid="23" type="constructor_call" span="441:15:441:17">VM</jtok>
<jtok eid="23" type="string_literal" span="442:4:442:6">""</jtok>
<jtok eid="23" type="string_literal" span="443:7:443:41">"ENTRY  { title }  { }  { label }"</jtok>
<jtok eid="23" type="string_literal" span="444:7:444:119">"FUNCTION {presort} { cite$ 'sort.key$ := } ITERATE { presort } SORT FUNCTION {test} { type$ } ITERATE { test }"</jtok>
<jtok eid="23" type="class_or_interface_ref" span="446:3:446:9">Vector</jtok>
<jtok eid="23" type="class_or_interface_ref" span="446:10:446:21">BibtexEntry</jtok>
<jtok eid="23" type="local_variable_name" span="446:23:446:24">v</jtok>
<jtok eid="23" type="constructor_call" span="446:31:446:37">Vector</jtok>
<jtok eid="23" type="constructor_call" span="446:38:446:49">BibtexEntry</jtok>
<jtok eid="23" type="primary_name_ref" span="447:3:447:4">v</jtok>
<jtok eid="23" type="method_call" span="447:5:447:8">add</jtok>
<jtok eid="23" type="method_call" span="447:9:447:33">bibtexString2BibtexEntry</jtok>
<jtok eid="23" type="string_literal" span="447:34:447:63">"@article{a, author=\"AAA\"}"</jtok>
<jtok eid="23" type="primary_name_ref" span="448:3:448:4">v</jtok>
<jtok eid="23" type="method_call" span="448:5:448:8">add</jtok>
<jtok eid="23" type="method_call" span="448:9:448:33">bibtexString2BibtexEntry</jtok>
<jtok eid="23" type="string_literal" span="448:34:448:60">"@book{b, author=\"BBB\"}"</jtok>
<jtok eid="23" type="primary_name_ref" span="449:3:449:4">v</jtok>
<jtok eid="23" type="method_call" span="449:5:449:8">add</jtok>
<jtok eid="23" type="method_call" span="449:9:449:33">bibtexString2BibtexEntry</jtok>
<jtok eid="23" type="string_literal" span="449:34:449:60">"@misc{c, author=\"CCC\"}"</jtok>
<jtok eid="23" type="primary_name_ref" span="450:3:450:4">v</jtok>
<jtok eid="23" type="method_call" span="450:5:450:8">add</jtok>
<jtok eid="23" type="method_call" span="450:9:450:33">bibtexString2BibtexEntry</jtok>
<jtok eid="23" type="string_literal" span="450:34:450:69">"@inproceedings{d, author=\"DDD\"}"</jtok>
<jtok eid="23" type="primary_name_ref" span="451:3:451:5">vm</jtok>
<jtok eid="23" type="method_call" span="451:6:451:9">run</jtok>
<jtok eid="23" type="primary_name_ref" span="451:10:451:11">v</jtok>
<jtok eid="23" type="method_call" span="453:3:453:15">assertEquals</jtok>
<jtok eid="23" type="primary_name_ref" span="453:19:453:21">vm</jtok>
<jtok eid="23" type="method_call" span="453:22:453:30">getStack</jtok>
<jtok eid="23" type="method_call" span="453:33:453:37">size</jtok>
<jtok eid="23" type="method_call" span="454:3:454:15">assertEquals</jtok>
<jtok eid="23" type="string_literal" span="454:16:454:31">"Inproceedings"</jtok>
<jtok eid="23" type="primary_name_ref" span="454:33:454:35">vm</jtok>
<jtok eid="23" type="method_call" span="454:36:454:44">getStack</jtok>
<jtok eid="23" type="method_call" span="454:47:454:50">pop</jtok>
<jtok eid="23" type="method_call" span="455:3:455:15">assertEquals</jtok>
<jtok eid="23" type="string_literal" span="455:16:455:22">"Misc"</jtok>
<jtok eid="23" type="primary_name_ref" span="455:24:455:26">vm</jtok>
<jtok eid="23" type="method_call" span="455:27:455:35">getStack</jtok>
<jtok eid="23" type="method_call" span="455:38:455:41">pop</jtok>
<jtok eid="23" type="method_call" span="456:3:456:15">assertEquals</jtok>
<jtok eid="23" type="string_literal" span="456:16:456:22">"Book"</jtok>
<jtok eid="23" type="primary_name_ref" span="456:24:456:26">vm</jtok>
<jtok eid="23" type="method_call" span="456:27:456:35">getStack</jtok>
<jtok eid="23" type="method_call" span="456:38:456:41">pop</jtok>
<jtok eid="23" type="method_call" span="457:3:457:15">assertEquals</jtok>
<jtok eid="23" type="string_literal" span="457:16:457:25">"Article"</jtok>
<jtok eid="23" type="primary_name_ref" span="457:27:457:29">vm</jtok>
<jtok eid="23" type="method_call" span="457:30:457:38">getStack</jtok>
<jtok eid="23" type="method_call" span="457:41:457:44">pop</jtok>
<jtok eid="24" type="method_name" span="460:14:460:25">testMissing</jtok>
<jtok eid="24" type="throws" span="460:35:460:55">RecognitionException</jtok>
<jtok eid="24" type="throws" span="460:57:460:68">IOException</jtok>
<jtok eid="24" type="class_or_interface_ref" span="462:3:462:5">VM</jtok>
<jtok eid="24" type="local_variable_name" span="462:6:462:8">vm</jtok>
<jtok eid="24" type="constructor_call" span="462:15:462:17">VM</jtok>
<jtok eid="24" type="line_comment" span="462:19:462:21">//</jtok>
<jtok eid="24" type="string_literal" span="463:4:463:41">"ENTRY    { title }  { }  { label } "</jtok>
<jtok eid="24" type="line_comment" span="463:44:463:46">//</jtok>
<jtok eid="24" type="string_literal" span="464:5:464:50">"FUNCTION {presort} { cite$ 'sort.key$ := } "</jtok>
<jtok eid="24" type="line_comment" span="464:53:464:55">//</jtok>
<jtok eid="24" type="string_literal" span="465:5:465:26">"ITERATE  {presort} "</jtok>
<jtok eid="24" type="line_comment" span="465:29:465:31">//</jtok>
<jtok eid="24" type="string_literal" span="466:5:466:17">"READ SORT "</jtok>
<jtok eid="24" type="line_comment" span="466:20:466:22">//</jtok>
<jtok eid="24" type="string_literal" span="467:5:467:47">"FUNCTION {test}{ title missing$ cite$ } "</jtok>
<jtok eid="24" type="line_comment" span="467:50:467:52">//</jtok>
<jtok eid="24" type="string_literal" span="468:5:468:24">"ITERATE  { test }"</jtok>
<jtok eid="24" type="class_or_interface_ref" span="470:3:470:9">Vector</jtok>
<jtok eid="24" type="class_or_interface_ref" span="470:10:470:21">BibtexEntry</jtok>
<jtok eid="24" type="local_variable_name" span="470:23:470:24">v</jtok>
<jtok eid="24" type="constructor_call" span="470:31:470:37">Vector</jtok>
<jtok eid="24" type="constructor_call" span="470:38:470:49">BibtexEntry</jtok>
<jtok eid="24" type="primary_name_ref" span="471:3:471:4">v</jtok>
<jtok eid="24" type="method_call" span="471:5:471:8">add</jtok>
<jtok eid="24" type="method_call" span="471:9:471:22">t1BibtexEntry</jtok>
<jtok eid="24" type="primary_name_ref" span="472:3:472:4">v</jtok>
<jtok eid="24" type="method_call" span="472:5:472:8">add</jtok>
<jtok eid="24" type="method_call" span="472:9:472:33">bibtexString2BibtexEntry</jtok>
<jtok eid="24" type="string_literal" span="472:34:472:71">"@article{test, author=\"No title\"}"</jtok>
<jtok eid="24" type="primary_name_ref" span="473:3:473:5">vm</jtok>
<jtok eid="24" type="method_call" span="473:6:473:9">run</jtok>
<jtok eid="24" type="primary_name_ref" span="473:10:473:11">v</jtok>
<jtok eid="24" type="method_call" span="475:3:475:15">assertEquals</jtok>
<jtok eid="24" type="primary_name_ref" span="475:19:475:21">vm</jtok>
<jtok eid="24" type="method_call" span="475:22:475:30">getStack</jtok>
<jtok eid="24" type="method_call" span="475:33:475:37">size</jtok>
<jtok eid="24" type="method_call" span="477:3:477:15">assertEquals</jtok>
<jtok eid="24" type="string_literal" span="477:16:477:22">"test"</jtok>
<jtok eid="24" type="primary_name_ref" span="477:24:477:26">vm</jtok>
<jtok eid="24" type="method_call" span="477:27:477:35">getStack</jtok>
<jtok eid="24" type="method_call" span="477:38:477:41">pop</jtok>
<jtok eid="24" type="method_call" span="478:3:478:15">assertEquals</jtok>
<jtok eid="24" type="constructor_call" span="478:20:478:27">Integer</jtok>
<jtok eid="24" type="primary_name_ref" span="478:32:478:34">vm</jtok>
<jtok eid="24" type="method_call" span="478:35:478:43">getStack</jtok>
<jtok eid="24" type="method_call" span="478:46:478:49">pop</jtok>
<jtok eid="24" type="method_call" span="479:3:479:15">assertEquals</jtok>
<jtok eid="24" type="string_literal" span="479:16:479:24">"canh05"</jtok>
<jtok eid="24" type="primary_name_ref" span="479:26:479:28">vm</jtok>
<jtok eid="24" type="method_call" span="479:29:479:37">getStack</jtok>
<jtok eid="24" type="method_call" span="479:40:479:43">pop</jtok>
<jtok eid="24" type="method_call" span="480:3:480:15">assertEquals</jtok>
<jtok eid="24" type="constructor_call" span="480:20:480:27">Integer</jtok>
<jtok eid="24" type="primary_name_ref" span="480:32:480:34">vm</jtok>
<jtok eid="24" type="method_call" span="480:35:480:43">getStack</jtok>
<jtok eid="24" type="method_call" span="480:46:480:49">pop</jtok>
<jtok eid="25" type="method_name" span="483:14:483:28">testFormatName</jtok>
<jtok eid="25" type="throws" span="483:38:483:58">RecognitionException</jtok>
<jtok eid="25" type="throws" span="483:60:483:71">IOException</jtok>
<jtok eid="25" type="class_or_interface_ref" span="485:4:485:6">VM</jtok>
<jtok eid="25" type="local_variable_name" span="485:7:485:9">vm</jtok>
<jtok eid="25" type="constructor_call" span="485:16:485:18">VM</jtok>
<jtok eid="25" type="string_literal" span="486:5:486:127">"FUNCTION {format}{ \"Charles Louis Xavier Joseph de la Vall{\\'e}e Poussin\" #1 \"{vv~}{ll}{, jj}{, f}?\" format.name$ }"</jtok>
<jtok eid="25" type="string_literal" span="487:8:487:26">"EXECUTE {format}"</jtok>
<jtok eid="25" type="class_or_interface_ref" span="489:4:489:10">Vector</jtok>
<jtok eid="25" type="class_or_interface_ref" span="489:11:489:22">BibtexEntry</jtok>
<jtok eid="25" type="local_variable_name" span="489:24:489:25">v</jtok>
<jtok eid="25" type="constructor_call" span="489:32:489:38">Vector</jtok>
<jtok eid="25" type="constructor_call" span="489:39:489:50">BibtexEntry</jtok>
<jtok eid="25" type="primary_name_ref" span="490:4:490:6">vm</jtok>
<jtok eid="25" type="method_call" span="490:7:490:10">run</jtok>
<jtok eid="25" type="primary_name_ref" span="490:11:490:12">v</jtok>
<jtok eid="25" type="method_call" span="491:4:491:16">assertEquals</jtok>
<jtok eid="25" type="string_literal" span="491:17:491:57">"de~la Vall{\\'e}e~Poussin, C.~L. X.~J?"</jtok>
<jtok eid="25" type="class_or_interface_ref" span="491:60:491:66">String</jtok>
<jtok eid="25" type="primary_name_ref" span="491:68:491:70">vm</jtok>
<jtok eid="25" type="method_call" span="491:71:491:79">getStack</jtok>
<jtok eid="25" type="method_call" span="491:82:491:85">pop</jtok>
<jtok eid="25" type="method_call" span="492:4:492:16">assertEquals</jtok>
<jtok eid="25" type="primary_name_ref" span="492:20:492:22">vm</jtok>
<jtok eid="25" type="method_call" span="492:23:492:31">getStack</jtok>
<jtok eid="25" type="method_call" span="492:34:492:38">size</jtok>
<jtok eid="25" type="class_or_interface_ref" span="495:4:495:6">VM</jtok>
<jtok eid="25" type="local_variable_name" span="495:7:495:9">vm</jtok>
<jtok eid="25" type="constructor_call" span="495:16:495:18">VM</jtok>
<jtok eid="25" type="string_literal" span="495:19:495:55">"ENTRY  { author }  { }  { label } "</jtok>
<jtok eid="25" type="string_literal" span="496:7:496:52">"FUNCTION {presort} { cite$ 'sort.key$ := } "</jtok>
<jtok eid="25" type="string_literal" span="496:55:496:77">"ITERATE { presort } "</jtok>
<jtok eid="25" type="string_literal" span="496:80:496:87">"READ "</jtok>
<jtok eid="25" type="string_literal" span="497:7:497:14">"SORT "</jtok>
<jtok eid="25" type="string_literal" span="497:17:497:88">"FUNCTION {format}{ author #2 \"{vv~}{ll}{, jj}{, f}?\" format.name$ }"</jtok>
<jtok eid="25" type="string_literal" span="498:7:498:25">"ITERATE {format}"</jtok>
<jtok eid="25" type="class_or_interface_ref" span="500:4:500:10">Vector</jtok>
<jtok eid="25" type="class_or_interface_ref" span="500:11:500:22">BibtexEntry</jtok>
<jtok eid="25" type="local_variable_name" span="500:24:500:25">v</jtok>
<jtok eid="25" type="constructor_call" span="500:32:500:38">Vector</jtok>
<jtok eid="25" type="constructor_call" span="500:39:500:50">BibtexEntry</jtok>
<jtok eid="25" type="primary_name_ref" span="501:4:501:5">v</jtok>
<jtok eid="25" type="method_call" span="501:6:501:9">add</jtok>
<jtok eid="25" type="method_call" span="501:10:501:23">t1BibtexEntry</jtok>
<jtok eid="25" type="primary_name_ref" span="502:4:502:5">v</jtok>
<jtok eid="25" type="method_call" span="503:6:503:9">add</jtok>
<jtok eid="25" type="method_call" span="503:10:503:34">bibtexString2BibtexEntry</jtok>
<jtok eid="25" type="string_literal" span="503:35:503:133">"@book{test, author=\"Jonathan Meyer and Charles Louis Xavier Joseph de la Vall{\\'e}e Poussin\"}"</jtok>
<jtok eid="25" type="primary_name_ref" span="504:4:504:6">vm</jtok>
<jtok eid="25" type="method_call" span="504:7:504:10">run</jtok>
<jtok eid="25" type="primary_name_ref" span="504:11:504:12">v</jtok>
<jtok eid="25" type="method_call" span="505:4:505:16">assertEquals</jtok>
<jtok eid="25" type="string_literal" span="505:17:505:57">"de~la Vall{\\'e}e~Poussin, C.~L. X.~J?"</jtok>
<jtok eid="25" type="primary_name_ref" span="505:59:505:61">vm</jtok>
<jtok eid="25" type="method_call" span="505:62:505:70">getStack</jtok>
<jtok eid="25" type="method_call" span="505:73:505:76">pop</jtok>
<jtok eid="25" type="method_call" span="506:4:506:16">assertEquals</jtok>
<jtok eid="25" type="string_literal" span="506:17:506:29">"Annabi, H?"</jtok>
<jtok eid="25" type="primary_name_ref" span="506:31:506:33">vm</jtok>
<jtok eid="25" type="method_call" span="506:34:506:42">getStack</jtok>
<jtok eid="25" type="method_call" span="506:45:506:48">pop</jtok>
<jtok eid="25" type="method_call" span="507:4:507:16">assertEquals</jtok>
<jtok eid="25" type="primary_name_ref" span="507:20:507:22">vm</jtok>
<jtok eid="25" type="method_call" span="507:23:507:31">getStack</jtok>
<jtok eid="25" type="method_call" span="507:34:507:38">size</jtok>
<jtok eid="26" type="method_name" span="511:14:511:26">testCallType</jtok>
<jtok eid="26" type="throws" span="511:36:511:56">RecognitionException</jtok>
<jtok eid="26" type="throws" span="511:58:511:69">IOException</jtok>
<jtok eid="26" type="class_or_interface_ref" span="513:3:513:5">VM</jtok>
<jtok eid="26" type="local_variable_name" span="513:6:513:8">vm</jtok>
<jtok eid="26" type="constructor_call" span="513:15:513:17">VM</jtok>
<jtok eid="26" type="string_literal" span="514:4:514:112">"ENTRY  { title }  { }  { label } FUNCTION {presort} { cite$ 'sort.key$ := } ITERATE { presort } READ SORT "</jtok>
<jtok eid="26" type="string_literal" span="515:7:515:74">"FUNCTION {inproceedings}{ \"InProceedings called on \" title * } "</jtok>
<jtok eid="26" type="string_literal" span="516:7:516:56">"FUNCTION {book}{ \"Book called on \" title * } "</jtok>
<jtok eid="26" type="string_literal" span="516:59:516:84">" ITERATE { call.type$ }"</jtok>
<jtok eid="26" type="class_or_interface_ref" span="518:3:518:9">Vector</jtok>
<jtok eid="26" type="class_or_interface_ref" span="518:10:518:21">BibtexEntry</jtok>
<jtok eid="26" type="local_variable_name" span="518:23:518:24">v</jtok>
<jtok eid="26" type="constructor_call" span="518:31:518:37">Vector</jtok>
<jtok eid="26" type="constructor_call" span="518:38:518:49">BibtexEntry</jtok>
<jtok eid="26" type="primary_name_ref" span="519:3:519:4">v</jtok>
<jtok eid="26" type="method_call" span="519:5:519:8">add</jtok>
<jtok eid="26" type="method_call" span="519:9:519:22">t1BibtexEntry</jtok>
<jtok eid="26" type="primary_name_ref" span="520:3:520:4">v</jtok>
<jtok eid="26" type="method_call" span="520:5:520:8">add</jtok>
<jtok eid="26" type="method_call" span="520:9:520:33">bibtexString2BibtexEntry</jtok>
<jtok eid="26" type="string_literal" span="520:34:520:63">"@book{test, title=\"Test\"}"</jtok>
<jtok eid="26" type="primary_name_ref" span="521:3:521:5">vm</jtok>
<jtok eid="26" type="method_call" span="521:6:521:9">run</jtok>
<jtok eid="26" type="primary_name_ref" span="521:10:521:11">v</jtok>
<jtok eid="26" type="method_call" span="523:3:523:15">assertEquals</jtok>
<jtok eid="26" type="primary_name_ref" span="523:19:523:21">vm</jtok>
<jtok eid="26" type="method_call" span="523:22:523:30">getStack</jtok>
<jtok eid="26" type="method_call" span="523:33:523:37">size</jtok>
<jtok eid="26" type="method_call" span="525:3:525:15">assertEquals</jtok>
<jtok eid="26" type="string_literal" span="525:16:525:37">"Book called on Test"</jtok>
<jtok eid="26" type="primary_name_ref" span="525:39:525:41">vm</jtok>
<jtok eid="26" type="method_call" span="525:42:525:50">getStack</jtok>
<jtok eid="26" type="method_call" span="525:53:525:56">pop</jtok>
<jtok eid="26" type="method_call" span="526:3:526:15">assertEquals</jtok>
<jtok eid="26" type="string_literal" span="527:4:527:102">"InProceedings called on Effective work practices for floss development: A model and propositions"</jtok>
<jtok eid="26" type="primary_name_ref" span="528:4:528:6">vm</jtok>
<jtok eid="26" type="method_call" span="528:7:528:15">getStack</jtok>
<jtok eid="26" type="method_call" span="528:18:528:21">pop</jtok>
<jtok eid="26" type="method_call" span="529:3:529:15">assertEquals</jtok>
<jtok eid="26" type="primary_name_ref" span="529:19:529:21">vm</jtok>
<jtok eid="26" type="method_call" span="529:22:529:30">getStack</jtok>
<jtok eid="26" type="method_call" span="529:33:529:37">size</jtok>
<jtok eid="27" type="method_name" span="532:14:532:25">testIterate</jtok>
<jtok eid="27" type="throws" span="532:35:532:55">RecognitionException</jtok>
<jtok eid="27" type="throws" span="532:57:532:68">IOException</jtok>
<jtok eid="27" type="class_or_interface_ref" span="534:3:534:5">VM</jtok>
<jtok eid="27" type="local_variable_name" span="534:6:534:8">vm</jtok>
<jtok eid="27" type="constructor_call" span="534:15:534:17">VM</jtok>
<jtok eid="27" type="string_literal" span="534:18:534:20">""</jtok>
<jtok eid="27" type="string_literal" span="534:23:534:34">"ENTRY  { "</jtok>
<jtok eid="27" type="string_literal" span="534:37:534:49">"  address "</jtok>
<jtok eid="27" type="string_literal" span="534:52:534:63">"  author "</jtok>
<jtok eid="27" type="string_literal" span="534:66:534:76">"  title "</jtok>
<jtok eid="27" type="string_literal" span="534:79:534:88">"  type "</jtok>
<jtok eid="27" type="string_literal" span="535:6:535:25">"}  {}  { label } "</jtok>
<jtok eid="27" type="string_literal" span="535:28:535:55">"FUNCTION {test}{ cite$ } "</jtok>
<jtok eid="27" type="string_literal" span="535:58:535:65">"READ "</jtok>
<jtok eid="27" type="string_literal" span="535:68:535:86">"ITERATE { test }"</jtok>
<jtok eid="27" type="class_or_interface_ref" span="537:3:537:9">Vector</jtok>
<jtok eid="27" type="class_or_interface_ref" span="537:10:537:21">BibtexEntry</jtok>
<jtok eid="27" type="local_variable_name" span="537:23:537:24">v</jtok>
<jtok eid="27" type="constructor_call" span="537:31:537:37">Vector</jtok>
<jtok eid="27" type="constructor_call" span="537:38:537:49">BibtexEntry</jtok>
<jtok eid="27" type="primary_name_ref" span="538:3:538:4">v</jtok>
<jtok eid="27" type="method_call" span="538:5:538:8">add</jtok>
<jtok eid="27" type="method_call" span="538:9:538:22">t1BibtexEntry</jtok>
<jtok eid="27" type="primary_name_ref" span="540:3:540:4">v</jtok>
<jtok eid="27" type="method_call" span="540:5:540:8">add</jtok>
<jtok eid="27" type="method_call" span="540:9:540:33">bibtexString2BibtexEntry</jtok>
<jtok eid="27" type="string_literal" span="540:34:540:65">"@article{test, title=\"BLA\"}"</jtok>
<jtok eid="27" type="primary_name_ref" span="542:3:542:5">vm</jtok>
<jtok eid="27" type="method_call" span="542:6:542:9">run</jtok>
<jtok eid="27" type="primary_name_ref" span="542:10:542:11">v</jtok>
<jtok eid="27" type="method_call" span="544:3:544:15">assertEquals</jtok>
<jtok eid="27" type="primary_name_ref" span="544:19:544:21">vm</jtok>
<jtok eid="27" type="method_call" span="544:22:544:30">getStack</jtok>
<jtok eid="27" type="method_call" span="544:33:544:37">size</jtok>
<jtok eid="27" type="class_or_interface_ref" span="546:3:546:9">String</jtok>
<jtok eid="27" type="local_variable_name" span="546:10:546:12">s1</jtok>
<jtok eid="27" type="class_or_interface_ref" span="546:16:546:22">String</jtok>
<jtok eid="27" type="primary_name_ref" span="546:24:546:26">vm</jtok>
<jtok eid="27" type="method_call" span="546:27:546:35">getStack</jtok>
<jtok eid="27" type="method_call" span="546:38:546:41">pop</jtok>
<jtok eid="27" type="class_or_interface_ref" span="547:3:547:9">String</jtok>
<jtok eid="27" type="local_variable_name" span="547:10:547:12">s2</jtok>
<jtok eid="27" type="class_or_interface_ref" span="547:16:547:22">String</jtok>
<jtok eid="27" type="primary_name_ref" span="547:24:547:26">vm</jtok>
<jtok eid="27" type="method_call" span="547:27:547:35">getStack</jtok>
<jtok eid="27" type="method_call" span="547:38:547:41">pop</jtok>
<jtok eid="27" type="primary_name_ref" span="549:7:549:9">s1</jtok>
<jtok eid="27" type="method_call" span="549:10:549:16">equals</jtok>
<jtok eid="27" type="string_literal" span="549:17:549:25">"canh05"</jtok>
<jtok eid="27" type="method_call" span="550:4:550:16">assertEquals</jtok>
<jtok eid="27" type="string_literal" span="550:17:550:23">"test"</jtok>
<jtok eid="27" type="primary_name_ref" span="550:25:550:27">s2</jtok>
<jtok eid="27" type="method_call" span="552:4:552:16">assertEquals</jtok>
<jtok eid="27" type="string_literal" span="552:17:552:25">"canh05"</jtok>
<jtok eid="27" type="primary_name_ref" span="552:27:552:29">s2</jtok>
<jtok eid="27" type="method_call" span="553:4:553:16">assertEquals</jtok>
<jtok eid="27" type="string_literal" span="553:17:553:23">"test"</jtok>
<jtok eid="27" type="primary_name_ref" span="553:25:553:27">s1</jtok>
<jtok eid="28" type="method_name" span="557:14:557:23">testWidth</jtok>
<jtok eid="28" type="throws" span="557:33:557:53">RecognitionException</jtok>
<jtok eid="28" type="throws" span="557:55:557:66">IOException</jtok>
<jtok eid="28" type="class_or_interface_ref" span="559:3:559:5">VM</jtok>
<jtok eid="28" type="local_variable_name" span="559:6:559:8">vm</jtok>
<jtok eid="28" type="constructor_call" span="559:15:559:17">VM</jtok>
<jtok eid="28" type="string_literal" span="559:18:559:29">"ENTRY  { "</jtok>
<jtok eid="28" type="string_literal" span="559:32:559:44">"  address "</jtok>
<jtok eid="28" type="string_literal" span="559:47:559:58">"  author "</jtok>
<jtok eid="28" type="string_literal" span="559:61:559:71">"  title "</jtok>
<jtok eid="28" type="string_literal" span="559:74:559:83">"  type "</jtok>
<jtok eid="28" type="string_literal" span="560:6:560:25">"}  {}  { label } "</jtok>
<jtok eid="28" type="line_comment" span="560:28:560:30">//</jtok>
<jtok eid="28" type="string_literal" span="561:4:561:32">"STRINGS { longest.label } "</jtok>
<jtok eid="28" type="line_comment" span="561:35:561:37">//</jtok>
<jtok eid="28" type="string_literal" span="562:4:562:52">"INTEGERS { number.label longest.label.width } "</jtok>
<jtok eid="28" type="line_comment" span="562:55:562:57">//</jtok>
<jtok eid="28" type="string_literal" span="563:4:563:42">"FUNCTION {initialize.longest.label} "</jtok>
<jtok eid="28" type="line_comment" span="563:45:563:47">//</jtok>
<jtok eid="28" type="string_literal" span="564:4:564:31">"{ \"\" 'longest.label := "</jtok>
<jtok eid="28" type="line_comment" span="564:34:564:36">//</jtok>
<jtok eid="28" type="string_literal" span="565:4:565:28">"  #1 'number.label := "</jtok>
<jtok eid="28" type="line_comment" span="565:31:565:33">//</jtok>
<jtok eid="28" type="string_literal" span="566:4:566:35">"  #0 'longest.label.width := "</jtok>
<jtok eid="28" type="line_comment" span="566:38:566:40">//</jtok>
<jtok eid="28" type="string_literal" span="567:4:567:8">"} "</jtok>
<jtok eid="28" type="line_comment" span="567:11:567:13">//</jtok>
<jtok eid="28" type="string_literal" span="568:4:568:7">" "</jtok>
<jtok eid="28" type="line_comment" span="568:10:568:12">//</jtok>
<jtok eid="28" type="string_literal" span="569:4:569:38">"		FUNCTION {longest.label.pass} "</jtok>
<jtok eid="28" type="line_comment" span="569:41:569:43">//</jtok>
<jtok eid="28" type="string_literal" span="570:4:570:45">"		{ number.label int.to.str$ 'label := "</jtok>
<jtok eid="28" type="line_comment" span="570:48:570:50">//</jtok>
<jtok eid="28" type="string_literal" span="571:4:571:45">"		  number.label #1 + 'number.label := "</jtok>
<jtok eid="28" type="line_comment" span="571:48:571:50">//</jtok>
<jtok eid="28" type="string_literal" span="572:4:572:45">"		  label width$ longest.label.width &gt; "</jtok>
<jtok eid="28" type="line_comment" span="572:48:572:50">//</jtok>
<jtok eid="28" type="string_literal" span="573:4:573:38">"		    { label 'longest.label := "</jtok>
<jtok eid="28" type="line_comment" span="573:41:573:43">//</jtok>
<jtok eid="28" type="string_literal" span="574:4:574:51">"		      label width$ 'longest.label.width := "</jtok>
<jtok eid="28" type="line_comment" span="574:54:574:56">//</jtok>
<jtok eid="28" type="string_literal" span="575:4:575:14">"		    } "</jtok>
<jtok eid="28" type="line_comment" span="575:17:575:19">//</jtok>
<jtok eid="28" type="string_literal" span="576:4:576:19">"		    'skip$ "</jtok>
<jtok eid="28" type="line_comment" span="576:22:576:24">//</jtok>
<jtok eid="28" type="string_literal" span="577:4:577:14">"		  if$ "</jtok>
<jtok eid="28" type="line_comment" span="577:17:577:19">//</jtok>
<jtok eid="28" type="string_literal" span="578:4:578:10">"		} "</jtok>
<jtok eid="28" type="line_comment" span="578:13:578:15">//</jtok>
<jtok eid="28" type="string_literal" span="579:4:579:7">" "</jtok>
<jtok eid="28" type="line_comment" span="579:10:579:12">//</jtok>
<jtok eid="28" type="string_literal" span="580:4:580:43">"		EXECUTE {initialize.longest.label} "</jtok>
<jtok eid="28" type="line_comment" span="580:46:580:48">//</jtok>
<jtok eid="28" type="string_literal" span="581:4:581:7">" "</jtok>
<jtok eid="28" type="line_comment" span="581:10:581:12">//</jtok>
<jtok eid="28" type="string_literal" span="582:4:582:37">"		ITERATE {longest.label.pass} "</jtok>
<jtok eid="28" type="line_comment" span="582:40:582:42">//</jtok>
<jtok eid="28" type="string_literal" span="583:4:583:27">"FUNCTION {begin.bib} "</jtok>
<jtok eid="28" type="line_comment" span="583:30:583:32">//</jtok>
<jtok eid="28" type="string_literal" span="584:4:584:24">"{ preamble$ empty$"</jtok>
<jtok eid="28" type="line_comment" span="584:27:584:29">//</jtok>
<jtok eid="28" type="string_literal" span="585:4:585:16">"    'skip$"</jtok>
<jtok eid="28" type="line_comment" span="585:19:585:21">//</jtok>
<jtok eid="28" type="string_literal" span="586:4:586:39">"    { preamble$ write$ newline$ }"</jtok>
<jtok eid="28" type="line_comment" span="586:42:586:44">//</jtok>
<jtok eid="28" type="string_literal" span="587:4:587:11">"  if$"</jtok>
<jtok eid="28" type="line_comment" span="587:14:587:16">//</jtok>
<jtok eid="28" type="string_literal" span="588:4:588:63">"  \"\\begin{thebibliography}{\"  longest.label  * \"}\" *"</jtok>
<jtok eid="28" type="line_comment" span="588:66:588:68">//</jtok>
<jtok eid="28" type="string_literal" span="589:4:589:7">"}"</jtok>
<jtok eid="28" type="line_comment" span="589:10:589:12">//</jtok>
<jtok eid="28" type="string_literal" span="590:4:590:25">"EXECUTE {begin.bib}"</jtok>
<jtok eid="28" type="line_comment" span="590:28:590:30">//</jtok>
<jtok eid="28" type="string_literal" span="591:4:591:6">""</jtok>
<jtok eid="28" type="line_comment" span="591:8:591:10">//</jtok>
<jtok eid="28" type="class_or_interface_ref" span="593:3:593:9">Vector</jtok>
<jtok eid="28" type="class_or_interface_ref" span="593:10:593:21">BibtexEntry</jtok>
<jtok eid="28" type="local_variable_name" span="593:23:593:24">v</jtok>
<jtok eid="28" type="constructor_call" span="593:31:593:37">Vector</jtok>
<jtok eid="28" type="constructor_call" span="593:38:593:49">BibtexEntry</jtok>
<jtok eid="28" type="primary_name_ref" span="594:3:594:4">v</jtok>
<jtok eid="28" type="method_call" span="594:5:594:8">add</jtok>
<jtok eid="28" type="method_call" span="594:9:594:22">t1BibtexEntry</jtok>
<jtok eid="28" type="primary_name_ref" span="596:3:596:5">vm</jtok>
<jtok eid="28" type="method_call" span="596:6:596:9">run</jtok>
<jtok eid="28" type="primary_name_ref" span="596:10:596:11">v</jtok>
<jtok eid="28" type="method_call" span="598:3:598:13">assertTrue</jtok>
<jtok eid="28" type="primary_name_ref" span="598:14:598:16">vm</jtok>
<jtok eid="28" type="method_call" span="598:17:598:28">getIntegers</jtok>
<jtok eid="28" type="method_call" span="598:31:598:42">containsKey</jtok>
<jtok eid="28" type="string_literal" span="598:43:598:64">"longest.label.width"</jtok>
<jtok eid="28" type="method_call" span="599:3:599:15">assertEquals</jtok>
<jtok eid="28" type="string_literal" span="599:16:599:45">"\\begin{thebibliography}{1}"</jtok>
<jtok eid="28" type="primary_name_ref" span="599:47:599:49">vm</jtok>
<jtok eid="28" type="method_call" span="599:50:599:58">getStack</jtok>
<jtok eid="28" type="method_call" span="599:61:599:64">pop</jtok>
<jtok eid="29" type="method_name" span="602:14:602:24">testVMSwap</jtok>
<jtok eid="29" type="throws" span="602:34:602:54">RecognitionException</jtok>
<jtok eid="29" type="throws" span="602:56:602:67">IOException</jtok>
<jtok eid="29" type="class_or_interface_ref" span="604:3:604:5">VM</jtok>
<jtok eid="29" type="local_variable_name" span="604:6:604:8">vm</jtok>
<jtok eid="29" type="constructor_call" span="604:15:604:17">VM</jtok>
<jtok eid="29" type="string_literal" span="604:18:604:68">"FUNCTION {a}{ #3 \"Hallo\" swap$ } EXECUTE { a }"</jtok>
<jtok eid="29" type="class_or_interface_ref" span="606:3:606:9">Vector</jtok>
<jtok eid="29" type="class_or_interface_ref" span="606:10:606:21">BibtexEntry</jtok>
<jtok eid="29" type="local_variable_name" span="606:23:606:24">v</jtok>
<jtok eid="29" type="constructor_call" span="606:31:606:37">Vector</jtok>
<jtok eid="29" type="constructor_call" span="606:38:606:49">BibtexEntry</jtok>
<jtok eid="29" type="primary_name_ref" span="607:3:607:5">vm</jtok>
<jtok eid="29" type="method_call" span="607:6:607:9">run</jtok>
<jtok eid="29" type="primary_name_ref" span="607:10:607:11">v</jtok>
<jtok eid="29" type="method_call" span="609:3:609:15">assertEquals</jtok>
<jtok eid="29" type="primary_name_ref" span="609:19:609:21">vm</jtok>
<jtok eid="29" type="method_call" span="609:22:609:30">getStack</jtok>
<jtok eid="29" type="method_call" span="609:33:609:37">size</jtok>
<jtok eid="29" type="method_call" span="610:3:610:15">assertEquals</jtok>
<jtok eid="29" type="constructor_call" span="610:20:610:27">Integer</jtok>
<jtok eid="29" type="primary_name_ref" span="610:32:610:34">vm</jtok>
<jtok eid="29" type="method_call" span="610:35:610:43">getStack</jtok>
<jtok eid="29" type="method_call" span="610:46:610:49">pop</jtok>
<jtok eid="29" type="method_call" span="611:3:611:15">assertEquals</jtok>
<jtok eid="29" type="string_literal" span="611:16:611:23">"Hallo"</jtok>
<jtok eid="29" type="primary_name_ref" span="611:25:611:27">vm</jtok>
<jtok eid="29" type="method_call" span="611:28:611:36">getStack</jtok>
<jtok eid="29" type="method_call" span="611:39:611:42">pop</jtok>
<jtok eid="30" type="class_or_interface_ref" span="614:16:614:27">BibtexEntry</jtok>
<jtok eid="30" type="method_name" span="614:28:614:52">bibtexString2BibtexEntry</jtok>
<jtok eid="30" type="parameter_type" span="614:53:614:59">String</jtok>
<jtok eid="30" type="parameter_name" span="614:60:614:61">s</jtok>
<jtok eid="30" type="throws" span="614:70:614:81">IOException</jtok>
<jtok eid="30" type="class_or_interface_ref" span="615:3:615:15">ParserResult</jtok>
<jtok eid="30" type="local_variable_name" span="615:16:615:22">result</jtok>
<jtok eid="30" type="primary_name_ref" span="615:25:615:37">BibtexParser</jtok>
<jtok eid="30" type="method_call" span="615:38:615:43">parse</jtok>
<jtok eid="30" type="constructor_call" span="615:48:615:60">StringReader</jtok>
<jtok eid="30" type="primary_name_ref" span="615:61:615:62">s</jtok>
<jtok eid="30" type="class_or_interface_ref" span="616:3:616:13">Collection</jtok>
<jtok eid="30" type="class_or_interface_ref" span="616:14:616:25">BibtexEntry</jtok>
<jtok eid="30" type="local_variable_name" span="616:27:616:28">c</jtok>
<jtok eid="30" type="primary_name_ref" span="616:31:616:37">result</jtok>
<jtok eid="30" type="method_call" span="616:38:616:49">getDatabase</jtok>
<jtok eid="30" type="method_call" span="616:52:616:62">getEntries</jtok>
<jtok eid="30" type="method_call" span="617:3:617:15">assertEquals</jtok>
<jtok eid="30" type="primary_name_ref" span="617:19:617:20">c</jtok>
<jtok eid="30" type="method_call" span="617:21:617:25">size</jtok>
<jtok eid="30" type="primary_name_ref" span="618:10:618:11">c</jtok>
<jtok eid="30" type="method_call" span="618:12:618:20">iterator</jtok>
<jtok eid="30" type="method_call" span="618:23:618:27">next</jtok>
<jtok eid="31" type="class_or_interface_ref" span="621:16:621:22">String</jtok>
<jtok eid="31" type="method_name" span="621:23:621:47">bibtexEntry2BibtexString</jtok>
<jtok eid="31" type="parameter_type" span="621:48:621:59">BibtexEntry</jtok>
<jtok eid="31" type="parameter_name" span="621:60:621:61">e</jtok>
<jtok eid="31" type="throws" span="621:70:621:81">IOException</jtok>
<jtok eid="31" type="class_or_interface_ref" span="622:3:622:15">StringWriter</jtok>
<jtok eid="31" type="local_variable_name" span="622:16:622:18">sw</jtok>
<jtok eid="31" type="constructor_call" span="622:25:622:37">StringWriter</jtok>
<jtok eid="31" type="primary_name_ref" span="623:3:623:4">e</jtok>
<jtok eid="31" type="method_call" span="623:5:623:10">write</jtok>
<jtok eid="31" type="primary_name_ref" span="623:11:623:13">sw</jtok>
<jtok eid="31" type="constructor_call" span="623:19:623:22">net</jtok>
<jtok eid="31" type="constructor_call" span="623:23:623:25">sf</jtok>
<jtok eid="31" type="constructor_call" span="623:26:623:32">jabref</jtok>
<jtok eid="31" type="constructor_call" span="623:33:623:39">export</jtok>
<jtok eid="31" type="constructor_call" span="623:40:623:59">LatexFieldFormatter</jtok>
<jtok eid="31" type="primary_name_ref" span="624:10:624:12">sw</jtok>
<jtok eid="31" type="method_call" span="624:13:624:22">getBuffer</jtok>
<jtok eid="31" type="method_call" span="624:25:624:33">toString</jtok>
<jtok eid="1" type="block_comment" span="627:2:627:17">/* TEST DATA */</jtok>
<jtok eid="32" type="class_or_interface_ref" span="628:9:628:15">String</jtok>
<jtok eid="32" type="method_name" span="628:16:628:30">t1BibtexString</jtok>
<jtok eid="32" type="string_literal" span="629:10:629:36">"@inproceedings{canh05,\n"</jtok>
<jtok eid="32" type="string_literal" span="630:6:630:83">"  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},\n"</jtok>
<jtok eid="32" type="string_literal" span="631:6:631:95">"  title = {Effective work practices for floss development: A model and propositions},\n"</jtok>
<jtok eid="32" type="string_literal" span="632:6:632:85">"  booktitle = {Hawaii International Conference On System Sciences (HICSS)},\n"</jtok>
<jtok eid="32" type="string_literal" span="633:6:633:26">"  year = {2005},\n"</jtok>
<jtok eid="32" type="string_literal" span="633:29:633:52">"  owner = {oezbek},\n"</jtok>
<jtok eid="32" type="string_literal" span="633:55:633:86">"  timestamp = {2006.05.29},\n"</jtok>
<jtok eid="32" type="string_literal" span="634:6:634:64">"  url = {http://james.howison.name/publications.html}}\n"</jtok>
<jtok eid="33" type="method_name" span="637:14:637:33">testHypthenatedName</jtok>
<jtok eid="33" type="throws" span="637:43:637:63">RecognitionException</jtok>
<jtok eid="33" type="throws" span="637:65:637:76">IOException</jtok>
<jtok eid="33" type="class_or_interface_ref" span="638:3:638:5">VM</jtok>
<jtok eid="33" type="local_variable_name" span="638:6:638:8">vm</jtok>
<jtok eid="33" type="constructor_call" span="638:15:638:17">VM</jtok>
<jtok eid="33" type="constructor_call" span="638:22:638:26">File</jtok>
<jtok eid="33" type="string_literal" span="638:27:638:66">"src/tests/net/sf/jabref/bst/abbrv.bst"</jtok>
<jtok eid="33" type="class_or_interface_ref" span="639:3:639:9">Vector</jtok>
<jtok eid="33" type="class_or_interface_ref" span="639:10:639:21">BibtexEntry</jtok>
<jtok eid="33" type="local_variable_name" span="639:23:639:24">v</jtok>
<jtok eid="33" type="constructor_call" span="639:31:639:37">Vector</jtok>
<jtok eid="33" type="constructor_call" span="639:38:639:49">BibtexEntry</jtok>
<jtok eid="33" type="primary_name_ref" span="640:3:640:4">v</jtok>
<jtok eid="33" type="method_call" span="640:5:640:8">add</jtok>
<jtok eid="33" type="method_call" span="640:9:640:33">bibtexString2BibtexEntry</jtok>
<jtok eid="33" type="string_literal" span="640:34:640:84">"@article{canh05, author = \"Jean-Paul Sartre\" }"</jtok>
<jtok eid="33" type="method_call" span="641:3:641:13">assertTrue</jtok>
<jtok eid="33" type="primary_name_ref" span="641:14:641:16">vm</jtok>
<jtok eid="33" type="method_call" span="641:17:641:20">run</jtok>
<jtok eid="33" type="primary_name_ref" span="641:21:641:22">v</jtok>
<jtok eid="33" type="method_call" span="641:24:641:31">indexOf</jtok>
<jtok eid="33" type="string_literal" span="641:32:641:46">"J.-P. Sartre"</jtok>
<jtok eid="34" type="class_or_interface_ref" span="644:9:644:20">BibtexEntry</jtok>
<jtok eid="34" type="method_name" span="644:21:644:34">t1BibtexEntry</jtok>
<jtok eid="34" type="throws" span="644:44:644:55">IOException</jtok>
<jtok eid="34" type="method_call" span="645:10:645:34">bibtexString2BibtexEntry</jtok>
<jtok eid="34" type="method_call" span="645:35:645:49">t1BibtexString</jtok>
</jdoc>