<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="com.microstar.xml.XmlHandler" jls="java5">
<jent id="0" type="file" span="0:0:241:2">Source/jEdit/com/microstar/xml/XmlHandler.java</jent>
<jent id="1" pid="0" type="interface" span="25:1:241:1">com.microstar.xml.XmlHandler</jent>
<jent id="2" pid="1" type="method" span="35:3:36:31">com.microstar.xml.XmlHandler.startDocument()</jent>
<jent id="3" pid="1" type="method" span="47:3:48:31">com.microstar.xml.XmlHandler.endDocument()</jent>
<jent id="4" pid="1" type="method" span="65:3:66:31">com.microstar.xml.XmlHandler.resolveEntity(String,String)</jent>
<jent id="5" pid="1" type="method" span="82:3:83:31">com.microstar.xml.XmlHandler.startExternalEntity(String)</jent>
<jent id="6" pid="1" type="method" span="99:3:100:31">com.microstar.xml.XmlHandler.endExternalEntity(String)</jent>
<jent id="7" pid="1" type="method" span="114:3:115:31">com.microstar.xml.XmlHandler.doctypeDecl(String,String,String)</jent>
<jent id="8" pid="1" type="method" span="137:3:138:31">com.microstar.xml.XmlHandler.attribute(String,String,boolean)</jent>
<jent id="9" pid="1" type="method" span="154:3:155:31">com.microstar.xml.XmlHandler.startElement(String)</jent>
<jent id="10" pid="1" type="method" span="168:3:169:31">com.microstar.xml.XmlHandler.endElement(String)</jent>
<jent id="11" pid="1" type="method" span="186:3:187:31">com.microstar.xml.XmlHandler.charData(char,int,int)</jent>
<jent id="12" pid="1" type="method" span="203:3:204:31">com.microstar.xml.XmlHandler.ignorableWhitespace(char,int,int)</jent>
<jent id="13" pid="1" type="method" span="216:3:217:31">com.microstar.xml.XmlHandler.processingInstruction(String,String)</jent>
<jent id="14" pid="1" type="method" span="238:3:239:31">com.microstar.xml.XmlHandler.error(String,String,int,int)</jent>
<jtok eid="0" type="line_comment" span="1:1:1:44">// XmlHandler.java: the callback interface.</jtok>
<jtok eid="0" type="line_comment" span="2:1:2:49">// NO WARRANTY! See README, and copyright below.</jtok>
<jtok eid="0" type="line_comment" span="3:1:3:59">// $Id: XmlHandler.java 14583 2009-02-06 05:38:53Z ezust $</jtok>
<jtok eid="0" type="block_comment" span="7:1:24:5">/**
  * XML Processing Interface.
  * &lt;p&gt;Whenever you parse an XML document, you must provide an object
  * from a class that implements this interface to receive the parsing 
  * events.
  * &lt;p&gt;If you do not want to implement this entire interface, you
  * can extend the &lt;code&gt;HandlerBase&lt;/code&gt; convenience class and
  * then implement only what you need.
  * &lt;p&gt;If you are using SAX, you should implement the SAX handler
  * interfaces rather than this one.
  * @author Copyright (c) 1997, 1998 by Microstar Software Ltd.
  * @author written by David Megginson &amp;lt;dmeggins@microstar.com&amp;gt;
  * @version 1.1
  * @see org.xml.sax.EntityHandler
  * @see org.xml.sax.DocumentHandler
  * @see org.xml.sax.ErrorHandler
  * @deprecated
  */</jtok>
<jtok eid="1" type="interface_name" span="25:18:25:28">XmlHandler</jtok>
<jtok eid="1" type="block_comment" span="27:3:34:7">/**
    * Start the document.
    * &lt;p&gt;&amp;AElig;lfred will call this method just before it
    * attempts to read the first entity (the root of the document).
    * It is guaranteed that this will be the first method called.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see #endDocument
    */</jtok>
<jtok eid="2" type="method_name" span="35:15:35:28">startDocument</jtok>
<jtok eid="2" type="throws" span="36:12:36:16">java</jtok>
<jtok eid="2" type="throws" span="36:17:36:21">lang</jtok>
<jtok eid="2" type="throws" span="36:22:36:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="39:3:46:7">/**
    * End the document.
    * &lt;p&gt;&amp;AElig;lfred will call this method once, when it has
    * finished parsing the XML document.
    * It is guaranteed that this will be the last method called.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see #startDocument
    */</jtok>
<jtok eid="3" type="method_name" span="47:15:47:26">endDocument</jtok>
<jtok eid="3" type="throws" span="48:12:48:16">java</jtok>
<jtok eid="3" type="throws" span="48:17:48:21">lang</jtok>
<jtok eid="3" type="throws" span="48:22:48:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="51:3:64:7">/**
    * Resolve an External Entity.
    * &lt;p&gt;Give the handler a chance to redirect external entities
    * to different URIs.  &amp;AElig;lfred will call this method for the
    * top-level document entity, for external text (XML) entities, 
    * and the external DTD subset (if any).
    * @param publicId The public identifier, or null if none was supplied.
    * @param systemId The system identifier.
    * @return The replacement system identifier, or null to use
    *         the default.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see #startExternalEntity
    * @see #endExternalEntity
    */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="65:10:65:16">Object</jtok>
<jtok eid="4" type="method_name" span="65:17:65:30">resolveEntity</jtok>
<jtok eid="4" type="parameter_type" span="65:32:65:38">String</jtok>
<jtok eid="4" type="parameter_name" span="65:39:65:47">publicId</jtok>
<jtok eid="4" type="parameter_type" span="65:49:65:55">String</jtok>
<jtok eid="4" type="parameter_name" span="65:56:65:64">systemId</jtok>
<jtok eid="4" type="throws" span="66:12:66:16">java</jtok>
<jtok eid="4" type="throws" span="66:17:66:21">lang</jtok>
<jtok eid="4" type="throws" span="66:22:66:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="69:3:81:7">/**
    * Begin an external entity.
    * &lt;p&gt;&amp;AElig;lfred will call this method at the beginning of
    * each external entity, including the top-level document entity
    * and the external DTD subset (if any).
    * &lt;p&gt;If necessary, you can use this method to track the location
    * of the current entity so that you can resolve relative URIs
    * correctly.
    * @param systemId The URI of the external entity that is starting.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see #endExternalEntity
    * @see #resolveEntity
    */</jtok>
<jtok eid="5" type="method_name" span="82:15:82:34">startExternalEntity</jtok>
<jtok eid="5" type="parameter_type" span="82:36:82:42">String</jtok>
<jtok eid="5" type="parameter_name" span="82:43:82:51">systemId</jtok>
<jtok eid="5" type="throws" span="83:12:83:16">java</jtok>
<jtok eid="5" type="throws" span="83:17:83:21">lang</jtok>
<jtok eid="5" type="throws" span="83:22:83:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="86:3:98:7">/**
    * End an external entity.
    * &lt;p&gt;&amp;AElig;lfred will call this method at the end of
    * each external entity, including the top-level document entity
    * and the external DTD subset.
    * &lt;p&gt;If necessary, you can use this method to track the location
    * of the current entity so that you can resolve relative URIs
    * correctly.
    * @param systemId The URI of the external entity that is ending.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see #startExternalEntity
    * @see #resolveEntity
    */</jtok>
<jtok eid="6" type="method_name" span="99:15:99:32">endExternalEntity</jtok>
<jtok eid="6" type="parameter_type" span="99:34:99:40">String</jtok>
<jtok eid="6" type="parameter_name" span="99:41:99:49">systemId</jtok>
<jtok eid="6" type="throws" span="100:12:100:16">java</jtok>
<jtok eid="6" type="throws" span="100:17:100:21">lang</jtok>
<jtok eid="6" type="throws" span="100:22:100:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="103:3:113:7">/**
    * Document type declaration.
    * &lt;p&gt;&amp;AElig;lfred will call this method when or if it encounters
    * the document type (DOCTYPE) declaration.
    * &lt;p&gt;Please note that the public and system identifiers will
    * not always be a reliable indication of the DTD in use.
    * @param name The document type name.
    * @param publicId The public identifier, or null if unspecified.
    * @param systemId The system identifier, or null if unspecified.
    * @exception java.lang.Exception The handler may throw any exception.
    */</jtok>
<jtok eid="7" type="method_name" span="114:15:114:26">doctypeDecl</jtok>
<jtok eid="7" type="parameter_type" span="114:28:114:34">String</jtok>
<jtok eid="7" type="parameter_name" span="114:35:114:39">name</jtok>
<jtok eid="7" type="parameter_type" span="114:41:114:47">String</jtok>
<jtok eid="7" type="parameter_name" span="114:48:114:56">publicId</jtok>
<jtok eid="7" type="parameter_type" span="114:58:114:64">String</jtok>
<jtok eid="7" type="parameter_name" span="114:65:114:73">systemId</jtok>
<jtok eid="7" type="throws" span="115:12:115:16">java</jtok>
<jtok eid="7" type="throws" span="115:17:115:21">lang</jtok>
<jtok eid="7" type="throws" span="115:22:115:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="118:3:136:7">/**
    * Attribute.
    * &lt;p&gt;&amp;AElig;lfred will call this method once for each attribute 
    * (specified or defaulted) before reporting a startElement event.
    * It is up to your handler to collect the attributes, if
    * necessary.
    * &lt;p&gt;You may use XmlParser.getAttributeType() to find the attribute's
    * declared type.
    * @param name The name of the attribute.
    * @param value The value of the attribute, or null if the attribute
    *        is &lt;code&gt;#IMPLIED&lt;/code&gt;.
    * @param isSpecified True if the value was specified, false if it
    *       was defaulted from the DTD.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see #startElement
    * @see XmlParser#declaredAttributes
    * @see XmlParser#getAttributeType
    * @see XmlParser#getAttributeDefaultValue
    */</jtok>
<jtok eid="8" type="method_name" span="137:15:137:24">attribute</jtok>
<jtok eid="8" type="parameter_type" span="137:26:137:32">String</jtok>
<jtok eid="8" type="parameter_name" span="137:33:137:37">name</jtok>
<jtok eid="8" type="parameter_type" span="137:39:137:45">String</jtok>
<jtok eid="8" type="parameter_name" span="137:46:137:51">value</jtok>
<jtok eid="8" type="parameter_name" span="137:61:137:72">isSpecified</jtok>
<jtok eid="8" type="throws" span="138:12:138:16">java</jtok>
<jtok eid="8" type="throws" span="138:17:138:21">lang</jtok>
<jtok eid="8" type="throws" span="138:22:138:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="141:3:153:7">/**
    * Start an element.
    * &lt;p&gt;&amp;AElig;lfred will call this method at the beginning of each
    * element.  By the time this is called, all of the attributes
    * for the element will already have been reported using the
    * &lt;code&gt;attribute&lt;/code&gt; method.
    * @param elname The element type name.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see #attribute
    * @see #endElement
    * @see XmlParser#declaredElements
    * @see XmlParser#getElementContentType
    */</jtok>
<jtok eid="9" type="method_name" span="154:15:154:27">startElement</jtok>
<jtok eid="9" type="parameter_type" span="154:29:154:35">String</jtok>
<jtok eid="9" type="parameter_name" span="154:36:154:42">elname</jtok>
<jtok eid="9" type="throws" span="155:12:155:16">java</jtok>
<jtok eid="9" type="throws" span="155:17:155:21">lang</jtok>
<jtok eid="9" type="throws" span="155:22:155:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="158:3:167:7">/**
    * End an element.
    * &lt;p&gt;&amp;AElig;lfred will call this method at the end of each element
    * (including EMPTY elements).
    * @param elname The element type name.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see #startElement
    * @see XmlParser#declaredElements
    * @see XmlParser#getElementContentType
    */</jtok>
<jtok eid="10" type="method_name" span="168:15:168:25">endElement</jtok>
<jtok eid="10" type="parameter_type" span="168:27:168:33">String</jtok>
<jtok eid="10" type="parameter_name" span="168:34:168:40">elname</jtok>
<jtok eid="10" type="throws" span="169:12:169:16">java</jtok>
<jtok eid="10" type="throws" span="169:17:169:21">lang</jtok>
<jtok eid="10" type="throws" span="169:22:169:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="172:3:185:7">/**
    * Character data.
    * &lt;p&gt;&amp;AElig;lfred will call this method once for each chunk of
    * character data found in the contents of elements.  Note that
    * the parser may break up a long sequence of characters into
    * smaller chunks and call this method once for each chunk.
    * &lt;p&gt;Do &lt;em&gt;not&lt;/em&gt; attempt to read more than &lt;var&gt;length&lt;/var&gt;
    * characters from the array, or to read before the 
    * &lt;var&gt;start&lt;/var&gt; position.
    * @param ch The character data.
    * @param start The starting position in the array.
    * @param length The number of characters available.
    * @exception java.lang.Exception The handler may throw any exception.
    */</jtok>
<jtok eid="11" type="method_name" span="186:15:186:23">charData</jtok>
<jtok eid="11" type="parameter_name" span="186:30:186:32">ch</jtok>
<jtok eid="11" type="parameter_name" span="186:40:186:45">start</jtok>
<jtok eid="11" type="parameter_name" span="186:51:186:57">length</jtok>
<jtok eid="11" type="throws" span="187:12:187:16">java</jtok>
<jtok eid="11" type="throws" span="187:17:187:21">lang</jtok>
<jtok eid="11" type="throws" span="187:22:187:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="190:3:202:7">/**
    * Ignorable whitespace.
    * &lt;p&gt;&amp;AElig;lfred will call this method once for each sequence
    * of ignorable whitespace in element content (never in mixed content).
    * &lt;p&gt;For details, see section 2.10 of the XML 1.0 recommendation.
    * &lt;p&gt;Do &lt;em&gt;not&lt;/em&gt; attempt to read more than &lt;var&gt;length&lt;/var&gt;
    * characters from the array or to read before the &lt;var&gt;start&lt;/var&gt;
    * position.
    * @param ch The literal whitespace characters.
    * @param start The starting position in the array.
    * @param length The number of whitespace characters available.
    * @exception java.lang.Exception The handler may throw any exception.
    */</jtok>
<jtok eid="12" type="method_name" span="203:15:203:34">ignorableWhitespace</jtok>
<jtok eid="12" type="parameter_name" span="203:41:203:43">ch</jtok>
<jtok eid="12" type="parameter_name" span="203:51:203:56">start</jtok>
<jtok eid="12" type="parameter_name" span="203:62:203:68">length</jtok>
<jtok eid="12" type="throws" span="204:12:204:16">java</jtok>
<jtok eid="12" type="throws" span="204:17:204:21">lang</jtok>
<jtok eid="12" type="throws" span="204:22:204:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="207:3:215:7">/**
    * Processing instruction.
    * &lt;p&gt;&amp;AElig;lfred will call this method once for each
    * processing instruction.  Note that processing instructions may
    * appear outside of the top-level element.  The
    * @param target The target (the name at the start of the PI).
    * @param data The data, if any (the rest of the PI).
    * @exception java.lang.Exception The handler may throw any exception.
    */</jtok>
<jtok eid="13" type="method_name" span="216:15:216:36">processingInstruction</jtok>
<jtok eid="13" type="parameter_type" span="216:38:216:44">String</jtok>
<jtok eid="13" type="parameter_name" span="216:45:216:51">target</jtok>
<jtok eid="13" type="parameter_type" span="216:53:216:59">String</jtok>
<jtok eid="13" type="parameter_name" span="216:60:216:64">data</jtok>
<jtok eid="13" type="throws" span="217:12:217:16">java</jtok>
<jtok eid="13" type="throws" span="217:17:217:21">lang</jtok>
<jtok eid="13" type="throws" span="217:22:217:31">Exception</jtok>
<jtok eid="1" type="block_comment" span="220:3:237:7">/**
    * Fatal XML parsing error.
    * &lt;p&gt;&amp;AElig;lfred will call this method whenever it encounters
    * a serious error.  The parser will attempt to continue past this 
    * point so that you can find more possible error points, but if
    * this method is called you should assume that the document is
    * corrupt and you should not try to use its contents.
    * &lt;p&gt;Note that you can use the &lt;code&gt;XmlException&lt;/code&gt; class
    * to encapsulate all of the information provided, though the
    * use of the class is not mandatory.
    * @param message The error message.
    * @param systemId The system identifier of the entity that 
    *        contains the error.
    * @param line The approximate line number of the error.
    * @param column The approximate column number of the error.
    * @exception java.lang.Exception The handler may throw any exception.
    * @see XmlException
    */</jtok>
<jtok eid="14" type="method_name" span="238:15:238:20">error</jtok>
<jtok eid="14" type="parameter_type" span="238:22:238:28">String</jtok>
<jtok eid="14" type="parameter_name" span="238:29:238:36">message</jtok>
<jtok eid="14" type="parameter_type" span="238:38:238:44">String</jtok>
<jtok eid="14" type="parameter_name" span="238:45:238:53">systemId</jtok>
<jtok eid="14" type="parameter_name" span="238:59:238:63">line</jtok>
<jtok eid="14" type="parameter_name" span="238:69:238:75">column</jtok>
<jtok eid="14" type="throws" span="239:12:239:16">java</jtok>
<jtok eid="14" type="throws" span="239:17:239:21">lang</jtok>
<jtok eid="14" type="throws" span="239:22:239:31">Exception</jtok>
</jdoc>