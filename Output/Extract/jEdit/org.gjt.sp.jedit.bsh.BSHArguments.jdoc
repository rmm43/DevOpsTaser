<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHArguments" jls="java5">
<jent id="0" type="file" span="0:0:74:1">Source/jEdit/org/gjt/sp/jedit/bsh/BSHArguments.java</jent>
<jent id="1" pid="0" type="class" span="37:1:73:1">org.gjt.sp.jedit.bsh.BSHArguments</jent>
<jent id="2" pid="1" type="method" span="39:5:39:39">org.gjt.sp.jedit.bsh.BSHArguments.BSHArguments(int)</jent>
<jent id="3" pid="1" type="method" span="58:5:72:5">org.gjt.sp.jedit.bsh.BSHArguments.getArguments(CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="37:7:37:19">BSHArguments</jtok>
<jtok eid="1" type="class_or_interface_ref" span="37:28:37:38">SimpleNode</jtok>
<jtok eid="2" type="method_name" span="39:5:39:17">BSHArguments</jtok>
<jtok eid="2" type="parameter_name" span="39:22:39:24">id</jtok>
<jtok eid="2" type="primary_name_ref" span="39:34:39:36">id</jtok>
<jtok eid="1" type="block_comment" span="41:2:46:4">/**
		This node holds a set of arguments for a method invocation or
		constructor call.

		Note: arguments are not currently allowed to be VOID.
	*/</jtok>
<jtok eid="1" type="block_comment" span="47:2:57:4">/*
		Disallowing VOIDs here was an easy way to support the throwing of a 
		more descriptive error message on use of an undefined argument to a 
		method call (very common).  If it ever turns out that we need to 
		support that for some reason we'll have to re-evaluate how we get 
		"meta-information" about the arguments in the various invoke() methods 
		that take Object [].  We could either pass BSHArguments down to 
		overloaded forms of the methods or throw an exception subtype 
		including the argument position back up, where the error message would
		be compounded.
	*/</jtok>
<jtok eid="3" type="class_or_interface_ref" span="58:12:58:18">Object</jtok>
<jtok eid="3" type="method_name" span="58:21:58:33">getArguments</jtok>
<jtok eid="3" type="parameter_type" span="58:35:58:44">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="58:45:58:54">callstack</jtok>
<jtok eid="3" type="parameter_type" span="58:56:58:67">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="58:68:58:79">interpreter</jtok>
<jtok eid="3" type="throws" span="59:10:59:19">EvalError</jtok>
<jtok eid="3" type="line_comment" span="61:9:61:31">// evaluate each child</jtok>
<jtok eid="3" type="class_or_interface_ref" span="62:9:62:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="62:18:62:22">args</jtok>
<jtok eid="3" type="constructor_call" span="62:29:62:35">Object</jtok>
<jtok eid="3" type="method_call" span="62:36:62:53">jjtGetNumChildren</jtok>
<jtok eid="3" type="local_variable_name" span="63:17:63:18">i</jtok>
<jtok eid="3" type="primary_name_ref" span="63:24:63:25">i</jtok>
<jtok eid="3" type="primary_name_ref" span="63:28:63:32">args</jtok>
<jtok eid="3" type="qualified_name_ref" span="63:33:63:39">length</jtok>
<jtok eid="3" type="primary_name_ref" span="63:41:63:42">i</jtok>
<jtok eid="3" type="primary_name_ref" span="65:13:65:17">args</jtok>
<jtok eid="3" type="primary_name_ref" span="65:18:65:19">i</jtok>
<jtok eid="3" type="class_or_interface_ref" span="65:25:65:35">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="65:36:65:47">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="65:48:65:49">i</jtok>
<jtok eid="3" type="method_call" span="65:52:65:56">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="65:57:65:66">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="65:68:65:79">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="66:9:66:13">args</jtok>
<jtok eid="3" type="primary_name_ref" span="66:14:66:15">i</jtok>
<jtok eid="3" type="primary_name_ref" span="66:20:66:29">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="66:30:66:34">VOID</jtok>
<jtok eid="3" type="constructor_call" span="67:15:67:24">EvalError</jtok>
<jtok eid="3" type="string_literal" span="67:26:67:48">"Undefined argument: "</jtok>
<jtok eid="3" type="class_or_interface_ref" span="68:8:68:18">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="68:19:68:30">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="68:31:68:32">i</jtok>
<jtok eid="3" type="method_call" span="68:35:68:42">getText</jtok>
<jtok eid="3" type="primary_name_ref" span="68:52:68:61">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="71:16:71:20">args</jtok>
</jdoc>