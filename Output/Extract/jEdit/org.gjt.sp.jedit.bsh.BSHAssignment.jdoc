<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHAssignment" jls="java5">
<jent id="0" type="file" span="0:0:184:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHAssignment.java</jent>
<jent id="1" pid="0" type="class" span="37:1:184:1">org.gjt.sp.jedit.bsh.BSHAssignment</jent>
<jent id="2" pid="1" type="method" span="41:5:41:40">org.gjt.sp.jedit.bsh.BSHAssignment.BSHAssignment(int)</jent>
<jent id="3" pid="1" type="method" span="43:5:145:5">org.gjt.sp.jedit.bsh.BSHAssignment.eval(CallStack,Interpreter)</jent>
<jent id="4" pid="1" type="method" span="147:5:183:5">org.gjt.sp.jedit.bsh.BSHAssignment.operation(Object,Object,int)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="37:7:37:20">BSHAssignment</jtok>
<jtok eid="1" type="class_or_interface_ref" span="37:29:37:39">SimpleNode</jtok>
<jtok eid="1" type="class_or_interface_ref" span="37:51:37:66">ParserConstants</jtok>
<jtok eid="1" type="field_name" span="39:16:39:24">operator</jtok>
<jtok eid="2" type="method_name" span="41:5:41:18">BSHAssignment</jtok>
<jtok eid="2" type="parameter_name" span="41:23:41:25">id</jtok>
<jtok eid="2" type="primary_name_ref" span="41:35:41:37">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:12:43:18">Object</jtok>
<jtok eid="3" type="method_name" span="43:19:43:23">eval</jtok>
<jtok eid="3" type="parameter_type" span="44:3:44:12">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="44:13:44:22">callstack</jtok>
<jtok eid="3" type="parameter_type" span="44:24:44:35">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="44:36:44:47">interpreter</jtok>
<jtok eid="3" type="throws" span="45:10:45:19">EvalError</jtok>
<jtok eid="3" type="class_or_interface_ref" span="47:9:47:29">BSHPrimaryExpression</jtok>
<jtok eid="3" type="local_variable_name" span="47:30:47:37">lhsNode</jtok>
<jtok eid="3" type="class_or_interface_ref" span="48:5:48:25">BSHPrimaryExpression</jtok>
<jtok eid="3" type="method_call" span="48:26:48:37">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="50:8:50:15">lhsNode</jtok>
<jtok eid="3" type="constructor_call" span="51:14:51:30">InterpreterError</jtok>
<jtok eid="3" type="string_literal" span="51:32:51:53">"Error, null LHSnode"</jtok>
<jtok eid="3" type="local_variable_name" span="53:11:53:21">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="53:24:53:35">interpreter</jtok>
<jtok eid="3" type="method_call" span="53:36:53:49">getStrictJava</jtok>
<jtok eid="3" type="class_or_interface_ref" span="54:9:54:12">LHS</jtok>
<jtok eid="3" type="local_variable_name" span="54:13:54:16">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="54:19:54:26">lhsNode</jtok>
<jtok eid="3" type="method_call" span="54:27:54:32">toLHS</jtok>
<jtok eid="3" type="primary_name_ref" span="54:34:54:43">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="54:45:54:56">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="55:14:55:17">lhs</jtok>
<jtok eid="3" type="constructor_call" span="56:23:56:39">InterpreterError</jtok>
<jtok eid="3" type="string_literal" span="56:41:56:58">"Error, null LHS"</jtok>
<jtok eid="3" type="line_comment" span="58:3:58:73">// For operator-assign operations save the lhs value before evaluating</jtok>
<jtok eid="3" type="line_comment" span="59:3:59:68">// the rhs.  This is correct Java behavior for postfix operations</jtok>
<jtok eid="3" type="line_comment" span="60:3:60:44">// e.g. i=1; i+=i++; // should be 2 not 3</jtok>
<jtok eid="3" type="class_or_interface_ref" span="61:3:61:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="61:10:61:18">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="62:8:62:16">operator</jtok>
<jtok eid="3" type="primary_name_ref" span="62:20:62:26">ASSIGN</jtok>
<jtok eid="3" type="line_comment" span="62:29:62:65">// assign doesn't need the pre-value</jtok>
<jtok eid="3" type="primary_name_ref" span="64:5:64:13">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="64:16:64:19">lhs</jtok>
<jtok eid="3" type="method_call" span="64:20:64:28">getValue</jtok>
<jtok eid="3" type="class_or_interface_ref" span="65:14:65:27">UtilEvalError</jtok>
<jtok eid="3" type="local_variable_name" span="65:28:65:29">e</jtok>
<jtok eid="3" type="primary_name_ref" span="66:11:66:12">e</jtok>
<jtok eid="3" type="method_call" span="66:13:66:24">toEvalError</jtok>
<jtok eid="3" type="primary_name_ref" span="66:32:66:41">callstack</jtok>
<jtok eid="3" type="class_or_interface_ref" span="69:9:69:19">SimpleNode</jtok>
<jtok eid="3" type="local_variable_name" span="69:20:69:27">rhsNode</jtok>
<jtok eid="3" type="class_or_interface_ref" span="69:31:69:41">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="69:42:69:53">jjtGetChild</jtok>
<jtok eid="3" type="class_or_interface_ref" span="71:9:71:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="71:16:71:19">rhs</jtok>
<jtok eid="3" type="line_comment" span="73:3:73:35">// implement "blocks" foo = { };</jtok>
<jtok eid="3" type="line_comment" span="74:3:74:40">// if ( rhsNode instanceof BSHBlock )</jtok>
<jtok eid="3" type="line_comment" span="75:3:75:14">//    rsh =</jtok>
<jtok eid="3" type="line_comment" span="76:3:76:10">// else</jtok>
<jtok eid="3" type="primary_name_ref" span="77:9:77:12">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="77:15:77:22">rhsNode</jtok>
<jtok eid="3" type="method_call" span="77:23:77:27">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="77:28:77:37">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="77:39:77:50">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="79:14:79:17">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="79:21:79:30">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="79:31:79:35">VOID</jtok>
<jtok eid="3" type="constructor_call" span="80:23:80:32">EvalError</jtok>
<jtok eid="3" type="string_literal" span="80:33:80:51">"Void assignment."</jtok>
<jtok eid="3" type="primary_name_ref" span="80:59:80:68">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="83:11:83:19">operator</jtok>
<jtok eid="3" type="primary_name_ref" span="85:10:85:16">ASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="86:13:86:16">lhs</jtok>
<jtok eid="3" type="method_call" span="86:17:86:23">assign</jtok>
<jtok eid="3" type="primary_name_ref" span="86:25:86:28">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="86:30:86:40">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="88:10:88:20">PLUSASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="89:13:89:16">lhs</jtok>
<jtok eid="3" type="method_call" span="89:17:89:23">assign</jtok>
<jtok eid="3" type="method_call" span="90:7:90:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="90:17:90:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="90:27:90:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="90:32:90:36">PLUS</jtok>
<jtok eid="3" type="primary_name_ref" span="90:39:90:49">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="92:19:92:30">MINUSASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="93:13:93:16">lhs</jtok>
<jtok eid="3" type="method_call" span="93:17:93:23">assign</jtok>
<jtok eid="3" type="method_call" span="94:7:94:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="94:17:94:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="94:27:94:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="94:32:94:37">MINUS</jtok>
<jtok eid="3" type="primary_name_ref" span="94:40:94:50">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="96:10:96:20">STARASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="97:13:97:16">lhs</jtok>
<jtok eid="3" type="method_call" span="97:17:97:23">assign</jtok>
<jtok eid="3" type="method_call" span="98:7:98:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="98:17:98:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="98:27:98:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="98:32:98:36">STAR</jtok>
<jtok eid="3" type="primary_name_ref" span="98:39:98:49">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="100:19:100:30">SLASHASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="101:13:101:16">lhs</jtok>
<jtok eid="3" type="method_call" span="101:17:101:23">assign</jtok>
<jtok eid="3" type="method_call" span="102:7:102:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="102:17:102:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="102:27:102:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="102:32:102:37">SLASH</jtok>
<jtok eid="3" type="primary_name_ref" span="102:40:102:50">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="104:19:104:28">ANDASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="105:10:105:20">ANDASSIGNX</jtok>
<jtok eid="3" type="primary_name_ref" span="106:13:106:16">lhs</jtok>
<jtok eid="3" type="method_call" span="106:17:106:23">assign</jtok>
<jtok eid="3" type="method_call" span="107:7:107:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="107:17:107:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="107:27:107:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="107:32:107:39">BIT_AND</jtok>
<jtok eid="3" type="primary_name_ref" span="107:42:107:52">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="109:19:109:27">ORASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="110:19:110:28">ORASSIGNX</jtok>
<jtok eid="3" type="primary_name_ref" span="111:25:111:28">lhs</jtok>
<jtok eid="3" type="method_call" span="111:29:111:35">assign</jtok>
<jtok eid="3" type="method_call" span="112:7:112:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="112:17:112:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="112:27:112:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="112:32:112:38">BIT_OR</jtok>
<jtok eid="3" type="primary_name_ref" span="112:41:112:51">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="114:19:114:28">XORASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="115:25:115:28">lhs</jtok>
<jtok eid="3" type="method_call" span="115:29:115:35">assign</jtok>
<jtok eid="3" type="method_call" span="116:7:116:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="116:17:116:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="116:27:116:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="116:32:116:35">XOR</jtok>
<jtok eid="3" type="primary_name_ref" span="116:38:116:48">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="118:19:118:28">MODASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="119:25:119:28">lhs</jtok>
<jtok eid="3" type="method_call" span="119:29:119:35">assign</jtok>
<jtok eid="3" type="method_call" span="120:7:120:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="120:17:120:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="120:27:120:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="120:32:120:35">MOD</jtok>
<jtok eid="3" type="primary_name_ref" span="120:38:120:48">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="122:19:122:31">LSHIFTASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="123:19:123:32">LSHIFTASSIGNX</jtok>
<jtok eid="3" type="primary_name_ref" span="124:25:124:28">lhs</jtok>
<jtok eid="3" type="method_call" span="124:29:124:35">assign</jtok>
<jtok eid="3" type="method_call" span="125:7:125:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="125:17:125:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="125:27:125:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="125:32:125:38">LSHIFT</jtok>
<jtok eid="3" type="primary_name_ref" span="125:41:125:51">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="127:19:127:37">RSIGNEDSHIFTASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="128:19:128:38">RSIGNEDSHIFTASSIGNX</jtok>
<jtok eid="3" type="primary_name_ref" span="129:25:129:28">lhs</jtok>
<jtok eid="3" type="method_call" span="129:29:129:35">assign</jtok>
<jtok eid="3" type="method_call" span="130:6:130:15">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="130:16:130:24">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="130:26:130:29">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="130:31:130:43">RSIGNEDSHIFT</jtok>
<jtok eid="3" type="primary_name_ref" span="130:47:130:57">strictJava</jtok>
<jtok eid="3" type="primary_name_ref" span="132:19:132:39">RUNSIGNEDSHIFTASSIGN</jtok>
<jtok eid="3" type="primary_name_ref" span="133:19:133:40">RUNSIGNEDSHIFTASSIGNX</jtok>
<jtok eid="3" type="primary_name_ref" span="134:25:134:28">lhs</jtok>
<jtok eid="3" type="method_call" span="134:29:134:35">assign</jtok>
<jtok eid="3" type="method_call" span="135:7:135:16">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="135:17:135:25">lhsValue</jtok>
<jtok eid="3" type="primary_name_ref" span="135:27:135:30">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="135:32:135:46">RUNSIGNEDSHIFT</jtok>
<jtok eid="3" type="primary_name_ref" span="136:7:136:17">strictJava</jtok>
<jtok eid="3" type="constructor_call" span="139:16:139:32">InterpreterError</jtok>
<jtok eid="3" type="string_literal" span="140:7:140:49">"unimplemented operator in assignment BSH"</jtok>
<jtok eid="3" type="class_or_interface_ref" span="142:13:142:26">UtilEvalError</jtok>
<jtok eid="3" type="local_variable_name" span="142:27:142:28">e</jtok>
<jtok eid="3" type="primary_name_ref" span="143:10:143:11">e</jtok>
<jtok eid="3" type="method_call" span="143:12:143:23">toEvalError</jtok>
<jtok eid="3" type="primary_name_ref" span="143:31:143:40">callstack</jtok>
<jtok eid="4" type="class_or_interface_ref" span="147:13:147:19">Object</jtok>
<jtok eid="4" type="method_name" span="147:20:147:29">operation</jtok>
<jtok eid="4" type="parameter_type" span="147:31:147:37">Object</jtok>
<jtok eid="4" type="parameter_name" span="147:38:147:41">lhs</jtok>
<jtok eid="4" type="parameter_type" span="147:43:147:49">Object</jtok>
<jtok eid="4" type="parameter_name" span="147:50:147:53">rhs</jtok>
<jtok eid="4" type="parameter_name" span="147:59:147:63">kind</jtok>
<jtok eid="4" type="throws" span="148:10:148:23">UtilEvalError</jtok>
<jtok eid="4" type="block_comment" span="150:3:155:5">/*
			Implement String += value;
			According to the JLS, value may be anything.
			In BeanShell, we'll disallow VOID (undefined) values.
			(or should we map them to the empty string?)
		*/</jtok>
<jtok eid="4" type="primary_name_ref" span="156:8:156:11">lhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="156:23:156:29">String</jtok>
<jtok eid="4" type="primary_name_ref" span="156:33:156:36">rhs</jtok>
<jtok eid="4" type="primary_name_ref" span="156:40:156:49">Primitive</jtok>
<jtok eid="4" type="qualified_name_ref" span="156:50:156:54">VOID</jtok>
<jtok eid="4" type="primary_name_ref" span="157:9:157:13">kind</jtok>
<jtok eid="4" type="primary_name_ref" span="157:17:157:21">PLUS</jtok>
<jtok eid="4" type="constructor_call" span="158:15:158:28">UtilEvalError</jtok>
<jtok eid="4" type="string_literal" span="159:6:159:45">"Use of non + operator with String LHS"</jtok>
<jtok eid="4" type="class_or_interface_ref" span="161:12:161:18">String</jtok>
<jtok eid="4" type="primary_name_ref" span="161:19:161:22">lhs</jtok>
<jtok eid="4" type="primary_name_ref" span="161:25:161:28">rhs</jtok>
<jtok eid="4" type="primary_name_ref" span="164:14:164:17">lhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="164:29:164:38">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="164:42:164:45">rhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="164:57:164:66">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="165:16:165:19">lhs</jtok>
<jtok eid="4" type="primary_name_ref" span="165:23:165:32">Primitive</jtok>
<jtok eid="4" type="qualified_name_ref" span="165:33:165:37">VOID</jtok>
<jtok eid="4" type="primary_name_ref" span="165:41:165:44">rhs</jtok>
<jtok eid="4" type="primary_name_ref" span="165:48:165:57">Primitive</jtok>
<jtok eid="4" type="qualified_name_ref" span="165:58:165:62">VOID</jtok>
<jtok eid="4" type="constructor_call" span="166:27:166:40">UtilEvalError</jtok>
<jtok eid="4" type="string_literal" span="167:6:167:57">"Illegal use of undefined object or 'void' literal"</jtok>
<jtok eid="4" type="primary_name_ref" span="168:23:168:26">lhs</jtok>
<jtok eid="4" type="primary_name_ref" span="168:30:168:39">Primitive</jtok>
<jtok eid="4" type="qualified_name_ref" span="168:40:168:44">NULL</jtok>
<jtok eid="4" type="primary_name_ref" span="168:48:168:51">rhs</jtok>
<jtok eid="4" type="primary_name_ref" span="168:55:168:64">Primitive</jtok>
<jtok eid="4" type="qualified_name_ref" span="168:65:168:69">NULL</jtok>
<jtok eid="4" type="constructor_call" span="169:27:169:40">UtilEvalError</jtok>
<jtok eid="4" type="string_literal" span="170:6:170:52">"Illegal use of null object or 'null' literal"</jtok>
<jtok eid="4" type="primary_name_ref" span="173:14:173:17">lhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="173:29:173:36">Boolean</jtok>
<jtok eid="4" type="primary_name_ref" span="173:40:173:43">lhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="173:55:173:64">Character</jtok>
<jtok eid="4" type="primary_name_ref" span="174:14:174:17">lhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="174:29:174:35">Number</jtok>
<jtok eid="4" type="primary_name_ref" span="174:39:174:42">lhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="174:54:174:63">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="175:14:175:17">rhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="175:29:175:36">Boolean</jtok>
<jtok eid="4" type="primary_name_ref" span="175:40:175:43">rhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="175:55:175:64">Character</jtok>
<jtok eid="4" type="primary_name_ref" span="176:14:176:17">rhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="176:29:176:35">Number</jtok>
<jtok eid="4" type="primary_name_ref" span="176:39:176:42">rhs</jtok>
<jtok eid="4" type="class_or_interface_ref" span="176:54:176:63">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="178:20:178:29">Primitive</jtok>
<jtok eid="4" type="method_call" span="178:30:178:45">binaryOperation</jtok>
<jtok eid="4" type="primary_name_ref" span="178:46:178:49">lhs</jtok>
<jtok eid="4" type="primary_name_ref" span="178:51:178:54">rhs</jtok>
<jtok eid="4" type="primary_name_ref" span="178:56:178:60">kind</jtok>
<jtok eid="4" type="constructor_call" span="181:19:181:32">UtilEvalError</jtok>
<jtok eid="4" type="string_literal" span="181:33:181:68">"Non primitive value in operator: "</jtok>
<jtok eid="4" type="primary_name_ref" span="182:13:182:16">lhs</jtok>
<jtok eid="4" type="method_call" span="182:17:182:25">getClass</jtok>
<jtok eid="4" type="string_literal" span="182:30:182:33">" "</jtok>
<jtok eid="4" type="primary_name_ref" span="182:36:182:46">tokenImage</jtok>
<jtok eid="4" type="primary_name_ref" span="182:47:182:51">kind</jtok>
<jtok eid="4" type="string_literal" span="182:55:182:58">" "</jtok>
<jtok eid="4" type="primary_name_ref" span="182:61:182:64">rhs</jtok>
<jtok eid="4" type="method_call" span="182:65:182:73">getClass</jtok>
</jdoc>