<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHBinaryExpression" jls="java5">
<jent id="0" type="file" span="0:0:227:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHBinaryExpression.java</jent>
<jent id="1" pid="0" type="class" span="42:1:227:1">org.gjt.sp.jedit.bsh.BSHBinaryExpression</jent>
<jent id="2" pid="1" type="method" span="47:5:47:46">org.gjt.sp.jedit.bsh.BSHBinaryExpression.BSHBinaryExpression(int)</jent>
<jent id="3" pid="1" type="method" span="49:5:210:5">org.gjt.sp.jedit.bsh.BSHBinaryExpression.eval(CallStack,Interpreter)</jent>
<jent id="4" pid="1" type="method" span="215:2:218:2">org.gjt.sp.jedit.bsh.BSHBinaryExpression.isPrimitiveValue(Object)</jent>
<jent id="5" pid="1" type="method" span="223:2:226:2">org.gjt.sp.jedit.bsh.BSHBinaryExpression.isWrapper(Object)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="37:1:41:3">/**
	Implement binary expressions...
	Note: this is too complicated... need some cleanup and simplification.
	@see Primitive.binaryOperation
*/</jtok>
<jtok eid="1" type="class_name" span="42:7:42:26">BSHBinaryExpression</jtok>
<jtok eid="1" type="class_or_interface_ref" span="42:35:42:45">SimpleNode</jtok>
<jtok eid="1" type="class_or_interface_ref" span="43:13:43:28">ParserConstants</jtok>
<jtok eid="1" type="field_name" span="45:16:45:20">kind</jtok>
<jtok eid="2" type="method_name" span="47:5:47:24">BSHBinaryExpression</jtok>
<jtok eid="2" type="parameter_name" span="47:29:47:31">id</jtok>
<jtok eid="2" type="primary_name_ref" span="47:41:47:43">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="49:12:49:18">Object</jtok>
<jtok eid="3" type="method_name" span="49:19:49:23">eval</jtok>
<jtok eid="3" type="parameter_type" span="49:25:49:34">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="49:35:49:44">callstack</jtok>
<jtok eid="3" type="parameter_type" span="49:46:49:57">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="49:58:49:69">interpreter</jtok>
<jtok eid="3" type="throws" span="50:10:50:19">EvalError</jtok>
<jtok eid="3" type="class_or_interface_ref" span="52:9:52:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="52:16:52:19">lhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="52:24:52:34">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="52:35:52:46">jjtGetChild</jtok>
<jtok eid="3" type="method_call" span="52:51:52:55">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="52:56:52:65">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="52:67:52:78">interpreter</jtok>
<jtok eid="3" type="block_comment" span="54:3:56:5">/*
			Doing instanceof?  Next node is a type.
		*/</jtok>
<jtok eid="3" type="primary_name_ref" span="57:13:57:17">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="57:21:57:31">INSTANCEOF</jtok>
<jtok eid="3" type="line_comment" span="59:4:59:50">// null object ref is not instance of any type</jtok>
<jtok eid="3" type="primary_name_ref" span="60:9:60:12">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="60:16:60:25">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="60:26:60:30">NULL</jtok>
<jtok eid="3" type="constructor_call" span="61:16:61:25">Primitive</jtok>
<jtok eid="3" type="class_or_interface_ref" span="63:13:63:18">Class</jtok>
<jtok eid="3" type="local_variable_name" span="63:19:63:22">rhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="63:27:63:34">BSHType</jtok>
<jtok eid="3" type="method_call" span="63:35:63:46">jjtGetChild</jtok>
<jtok eid="3" type="method_call" span="63:51:63:58">getType</jtok>
<jtok eid="3" type="primary_name_ref" span="64:5:64:14">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="64:16:64:27">interpreter</jtok>
<jtok eid="3" type="block_comment" span="65:3:69:5">/*
			// primitive (number or void) cannot be tested for instanceof
            if (lhs instanceof Primitive)
				throw new EvalError("Cannot be instance of primitive type." );
		*/</jtok>
<jtok eid="3" type="block_comment" span="70:4:75:6">/*
				Primitive (number or void) is not normally an instanceof
				anything.  But for internal use we'll test true for the
				bsh.Primitive class.  
				i.e. (5 instanceof bsh.Primitive) will be true
			*/</jtok>
<jtok eid="3" type="primary_name_ref" span="76:9:76:12">lhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="76:24:76:33">Primitive</jtok>
<jtok eid="3" type="primary_name_ref" span="77:10:77:13">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="77:17:77:20">org</jtok>
<jtok eid="3" type="qualified_name_ref" span="77:21:77:24">gjt</jtok>
<jtok eid="3" type="qualified_name_ref" span="77:25:77:27">sp</jtok>
<jtok eid="3" type="qualified_name_ref" span="77:28:77:33">jedit</jtok>
<jtok eid="3" type="qualified_name_ref" span="77:34:77:37">bsh</jtok>
<jtok eid="3" type="qualified_name_ref" span="77:38:77:47">Primitive</jtok>
<jtok eid="3" type="constructor_call" span="78:17:78:26">Primitive</jtok>
<jtok eid="3" type="constructor_call" span="80:17:80:26">Primitive</jtok>
<jtok eid="3" type="line_comment" span="82:4:82:68">// General case - performe the instanceof based on assignability</jtok>
<jtok eid="3" type="local_variable_name" span="83:21:83:24">ret</jtok>
<jtok eid="3" type="primary_name_ref" span="83:27:83:32">Types</jtok>
<jtok eid="3" type="method_call" span="83:33:83:53">isJavaBaseAssignable</jtok>
<jtok eid="3" type="primary_name_ref" span="83:55:83:58">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="83:60:83:63">lhs</jtok>
<jtok eid="3" type="method_call" span="83:64:83:72">getClass</jtok>
<jtok eid="3" type="constructor_call" span="84:24:84:33">Primitive</jtok>
<jtok eid="3" type="primary_name_ref" span="84:34:84:37">ret</jtok>
<jtok eid="3" type="line_comment" span="88:3:88:54">// The following two boolean checks were tacked on.</jtok>
<jtok eid="3" type="line_comment" span="89:3:89:42">// This could probably be smoothed out.</jtok>
<jtok eid="3" type="block_comment" span="91:3:94:5">/*
			Look ahead and short circuit evaluation of the rhs if:
				we're a boolean AND and the lhs is false.
		*/</jtok>
<jtok eid="3" type="primary_name_ref" span="95:8:95:12">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="95:16:95:24">BOOL_AND</jtok>
<jtok eid="3" type="primary_name_ref" span="95:28:95:32">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="95:36:95:45">BOOL_ANDX</jtok>
<jtok eid="3" type="class_or_interface_ref" span="96:4:96:10">Object</jtok>
<jtok eid="3" type="local_variable_name" span="96:11:96:14">obj</jtok>
<jtok eid="3" type="primary_name_ref" span="96:17:96:20">lhs</jtok>
<jtok eid="3" type="method_call" span="97:9:97:25">isPrimitiveValue</jtok>
<jtok eid="3" type="primary_name_ref" span="97:26:97:29">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="98:5:98:8">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="98:13:98:22">Primitive</jtok>
<jtok eid="3" type="primary_name_ref" span="98:23:98:26">lhs</jtok>
<jtok eid="3" type="method_call" span="98:28:98:36">getValue</jtok>
<jtok eid="3" type="primary_name_ref" span="99:9:99:12">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="99:24:99:31">Boolean</jtok>
<jtok eid="3" type="class_or_interface_ref" span="100:9:100:16">Boolean</jtok>
<jtok eid="3" type="primary_name_ref" span="100:17:100:20">obj</jtok>
<jtok eid="3" type="method_call" span="100:22:100:34">booleanValue</jtok>
<jtok eid="3" type="constructor_call" span="101:16:101:25">Primitive</jtok>
<jtok eid="3" type="block_comment" span="103:3:106:5">/*
			Look ahead and short circuit evaluation of the rhs if:
				we're a boolean AND and the lhs is false.
		*/</jtok>
<jtok eid="3" type="primary_name_ref" span="107:8:107:12">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="107:16:107:23">BOOL_OR</jtok>
<jtok eid="3" type="primary_name_ref" span="107:27:107:31">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="107:35:107:43">BOOL_ORX</jtok>
<jtok eid="3" type="class_or_interface_ref" span="108:4:108:10">Object</jtok>
<jtok eid="3" type="local_variable_name" span="108:11:108:14">obj</jtok>
<jtok eid="3" type="primary_name_ref" span="108:17:108:20">lhs</jtok>
<jtok eid="3" type="method_call" span="109:9:109:25">isPrimitiveValue</jtok>
<jtok eid="3" type="primary_name_ref" span="109:26:109:29">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="110:5:110:8">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="110:13:110:22">Primitive</jtok>
<jtok eid="3" type="primary_name_ref" span="110:23:110:26">lhs</jtok>
<jtok eid="3" type="method_call" span="110:28:110:36">getValue</jtok>
<jtok eid="3" type="primary_name_ref" span="111:9:111:12">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="111:24:111:31">Boolean</jtok>
<jtok eid="3" type="class_or_interface_ref" span="112:9:112:16">Boolean</jtok>
<jtok eid="3" type="primary_name_ref" span="112:17:112:20">obj</jtok>
<jtok eid="3" type="method_call" span="112:22:112:34">booleanValue</jtok>
<jtok eid="3" type="constructor_call" span="113:16:113:25">Primitive</jtok>
<jtok eid="3" type="line_comment" span="116:3:116:64">// end stuff that was tacked on for boolean short-circuiting.</jtok>
<jtok eid="3" type="block_comment" span="118:3:121:5">/*
			Are both the lhs and rhs either wrappers or primitive values?
			do binary op
		*/</jtok>
<jtok eid="3" type="local_variable_name" span="122:11:122:23">isLhsWrapper</jtok>
<jtok eid="3" type="method_call" span="122:26:122:35">isWrapper</jtok>
<jtok eid="3" type="primary_name_ref" span="122:37:122:40">lhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="123:9:123:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="123:16:123:19">rhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="123:24:123:34">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="123:35:123:46">jjtGetChild</jtok>
<jtok eid="3" type="method_call" span="123:51:123:55">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="123:56:123:65">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="123:67:123:78">interpreter</jtok>
<jtok eid="3" type="local_variable_name" span="124:11:124:23">isRhsWrapper</jtok>
<jtok eid="3" type="method_call" span="124:26:124:35">isWrapper</jtok>
<jtok eid="3" type="primary_name_ref" span="124:37:124:40">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="126:6:126:18">isLhsWrapper</jtok>
<jtok eid="3" type="method_call" span="126:22:126:38">isPrimitiveValue</jtok>
<jtok eid="3" type="primary_name_ref" span="126:40:126:43">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="127:9:127:21">isRhsWrapper</jtok>
<jtok eid="3" type="method_call" span="127:25:127:41">isPrimitiveValue</jtok>
<jtok eid="3" type="primary_name_ref" span="127:43:127:46">rhs</jtok>
<jtok eid="3" type="line_comment" span="130:4:130:49">// Special case for EQ on two wrapper objects</jtok>
<jtok eid="3" type="primary_name_ref" span="131:10:131:22">isLhsWrapper</jtok>
<jtok eid="3" type="primary_name_ref" span="131:26:131:38">isRhsWrapper</jtok>
<jtok eid="3" type="primary_name_ref" span="131:42:131:46">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="131:50:131:52">EQ</jtok>
<jtok eid="3" type="block_comment" span="133:5:136:7">/*  
					Don't auto-unwrap wrappers (preserve identity semantics)
					FALL THROUGH TO OBJECT OPERATIONS BELOW.
				*/</jtok>
<jtok eid="3" type="primary_name_ref" span="139:13:139:22">Primitive</jtok>
<jtok eid="3" type="method_call" span="139:23:139:38">binaryOperation</jtok>
<jtok eid="3" type="primary_name_ref" span="139:39:139:42">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="139:44:139:47">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="139:49:139:53">kind</jtok>
<jtok eid="3" type="class_or_interface_ref" span="140:15:140:28">UtilEvalError</jtok>
<jtok eid="3" type="local_variable_name" span="140:29:140:30">e</jtok>
<jtok eid="3" type="primary_name_ref" span="141:12:141:13">e</jtok>
<jtok eid="3" type="method_call" span="141:14:141:25">toEvalError</jtok>
<jtok eid="3" type="primary_name_ref" span="141:33:141:42">callstack</jtok>
<jtok eid="3" type="block_comment" span="144:2:175:4">/*
	Doing the following makes it hard to use untyped vars...
	e.g. if ( arg == null ) ...what if arg is a primitive?
	The answer is that we should test only if the var is typed...?
	need to get that info here...

		else
		{
		// Do we have a mixture of primitive values and non-primitives ?  
		// (primitiveValue = not null, not void)

		int primCount = 0;
		if ( isPrimitiveValue( lhs ) )
			++primCount;
		if ( isPrimitiveValue( rhs ) )
			++primCount;

		if ( primCount &gt; 1 )
			// both primitive types, should have been handled above
			throw new InterpreterError("should not be here");
		else 
		if ( primCount == 1 )
			// mixture of one and the other
			throw new EvalError("Operator: '" + tokenImage[kind]
				+"' inappropriate for object / primitive combination.", 
				this, callstack );

		// else fall through to handle both non-primitive types

		// end check for primitive and non-primitive mix 
		}
	*/</jtok>
<jtok eid="3" type="block_comment" span="177:3:180:5">/*
			Treat lhs and rhs as arbitrary objects and do the operation.
			(including NULL and VOID represented by their Primitive types)
		*/</jtok>
<jtok eid="3" type="line_comment" span="181:3:181:73">//System.out.println("binary op arbitrary obj: {"+lhs+"}, {"+rhs+"}");</jtok>
<jtok eid="3" type="primary_name_ref" span="182:16:182:20">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="184:18:184:20">EQ</jtok>
<jtok eid="3" type="constructor_call" span="185:28:185:37">Primitive</jtok>
<jtok eid="3" type="primary_name_ref" span="185:39:185:42">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="185:46:185:49">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="187:18:187:20">NE</jtok>
<jtok eid="3" type="constructor_call" span="188:28:188:37">Primitive</jtok>
<jtok eid="3" type="primary_name_ref" span="188:39:188:42">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="188:46:188:49">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="190:18:190:22">PLUS</jtok>
<jtok eid="3" type="primary_name_ref" span="191:20:191:23">lhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="191:35:191:41">String</jtok>
<jtok eid="3" type="primary_name_ref" span="191:45:191:48">rhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="191:60:191:66">String</jtok>
<jtok eid="3" type="primary_name_ref" span="192:28:192:31">lhs</jtok>
<jtok eid="3" type="method_call" span="192:32:192:40">toString</jtok>
<jtok eid="3" type="primary_name_ref" span="192:45:192:48">rhs</jtok>
<jtok eid="3" type="method_call" span="192:49:192:57">toString</jtok>
<jtok eid="3" type="line_comment" span="194:13:194:47">// FALL THROUGH TO DEFAULT CASE!!!</jtok>
<jtok eid="3" type="primary_name_ref" span="197:20:197:23">lhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="197:35:197:44">Primitive</jtok>
<jtok eid="3" type="primary_name_ref" span="197:48:197:51">rhs</jtok>
<jtok eid="3" type="class_or_interface_ref" span="197:63:197:72">Primitive</jtok>
<jtok eid="3" type="primary_name_ref" span="198:26:198:29">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="198:33:198:42">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="198:43:198:47">VOID</jtok>
<jtok eid="3" type="primary_name_ref" span="198:51:198:54">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="198:58:198:67">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="198:68:198:72">VOID</jtok>
<jtok eid="3" type="constructor_call" span="199:35:199:44">EvalError</jtok>
<jtok eid="3" type="string_literal" span="200:5:200:66">"illegal use of undefined variable, class, or 'void' literal"</jtok>
<jtok eid="3" type="primary_name_ref" span="201:14:201:23">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="203:11:203:14">lhs</jtok>
<jtok eid="3" type="primary_name_ref" span="203:18:203:27">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="203:28:203:32">NULL</jtok>
<jtok eid="3" type="primary_name_ref" span="203:36:203:39">rhs</jtok>
<jtok eid="3" type="primary_name_ref" span="203:43:203:52">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="203:53:203:57">NULL</jtok>
<jtok eid="3" type="constructor_call" span="204:35:204:44">EvalError</jtok>
<jtok eid="3" type="string_literal" span="205:5:205:50">"illegal use of null value or 'null' literal"</jtok>
<jtok eid="3" type="primary_name_ref" span="205:58:205:67">callstack</jtok>
<jtok eid="3" type="constructor_call" span="207:27:207:36">EvalError</jtok>
<jtok eid="3" type="string_literal" span="207:37:207:50">"Operator: '"</jtok>
<jtok eid="3" type="primary_name_ref" span="207:53:207:63">tokenImage</jtok>
<jtok eid="3" type="primary_name_ref" span="207:64:207:68">kind</jtok>
<jtok eid="3" type="string_literal" span="208:21:208:50">"' inappropriate for objects"</jtok>
<jtok eid="3" type="primary_name_ref" span="208:58:208:67">callstack</jtok>
<jtok eid="1" type="block_comment" span="212:2:214:4">/*
		object is a non-null and non-void Primitive type
	*/</jtok>
<jtok eid="4" type="method_name" span="215:18:215:34">isPrimitiveValue</jtok>
<jtok eid="4" type="parameter_type" span="215:36:215:42">Object</jtok>
<jtok eid="4" type="parameter_name" span="215:43:215:46">obj</jtok>
<jtok eid="4" type="primary_name_ref" span="216:19:216:22">obj</jtok>
<jtok eid="4" type="class_or_interface_ref" span="216:34:216:43">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="217:8:217:11">obj</jtok>
<jtok eid="4" type="primary_name_ref" span="217:15:217:24">Primitive</jtok>
<jtok eid="4" type="qualified_name_ref" span="217:25:217:29">VOID</jtok>
<jtok eid="4" type="primary_name_ref" span="217:35:217:38">obj</jtok>
<jtok eid="4" type="primary_name_ref" span="217:42:217:51">Primitive</jtok>
<jtok eid="4" type="qualified_name_ref" span="217:52:217:56">NULL</jtok>
<jtok eid="1" type="block_comment" span="220:2:222:4">/*
		object is a java.lang wrapper for boolean, char, or number type
	*/</jtok>
<jtok eid="5" type="method_name" span="223:18:223:27">isWrapper</jtok>
<jtok eid="5" type="parameter_type" span="223:29:223:35">Object</jtok>
<jtok eid="5" type="parameter_name" span="223:36:223:39">obj</jtok>
<jtok eid="5" type="primary_name_ref" span="224:18:224:21">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="224:33:224:40">Boolean</jtok>
<jtok eid="5" type="primary_name_ref" span="225:4:225:7">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="225:19:225:28">Character</jtok>
<jtok eid="5" type="primary_name_ref" span="225:32:225:35">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="225:47:225:53">Number</jtok>
</jdoc>