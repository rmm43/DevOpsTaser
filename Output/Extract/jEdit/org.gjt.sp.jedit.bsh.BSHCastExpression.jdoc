<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHCastExpression" jls="java5">
<jent id="0" type="file" span="0:0:72:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHCastExpression.java</jent>
<jent id="1" pid="0" type="class" span="44:1:72:1">org.gjt.sp.jedit.bsh.BSHCastExpression</jent>
<jent id="2" pid="1" type="method" span="46:5:46:51">org.gjt.sp.jedit.bsh.BSHCastExpression.BSHCastExpression(int)</jent>
<jent id="3" pid="1" type="method" span="51:2:70:5">org.gjt.sp.jedit.bsh.BSHCastExpression.eval(CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="37:1:43:3">/**
	Implement casts.

	I think it should be possible to simplify some of the code here by
	using the Types.getAssignableForm() method, but I haven't looked 
	into it.
*/</jtok>
<jtok eid="1" type="class_name" span="44:7:44:24">BSHCastExpression</jtok>
<jtok eid="1" type="class_or_interface_ref" span="44:33:44:43">SimpleNode</jtok>
<jtok eid="2" type="method_name" span="46:12:46:29">BSHCastExpression</jtok>
<jtok eid="2" type="parameter_name" span="46:34:46:36">id</jtok>
<jtok eid="2" type="primary_name_ref" span="46:46:46:48">id</jtok>
<jtok eid="1" type="block_comment" span="48:2:50:4">/**
		@return the result of the cast.
	*/</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:9:51:15">Object</jtok>
<jtok eid="3" type="method_name" span="51:16:51:20">eval</jtok>
<jtok eid="3" type="parameter_type" span="52:3:52:12">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="52:13:52:22">callstack</jtok>
<jtok eid="3" type="parameter_type" span="52:24:52:35">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="52:36:52:47">interpreter</jtok>
<jtok eid="3" type="throws" span="52:57:52:66">EvalError</jtok>
<jtok eid="3" type="class_or_interface_ref" span="54:3:54:12">NameSpace</jtok>
<jtok eid="3" type="local_variable_name" span="54:13:54:22">namespace</jtok>
<jtok eid="3" type="primary_name_ref" span="54:25:54:34">callstack</jtok>
<jtok eid="3" type="method_call" span="54:35:54:38">top</jtok>
<jtok eid="3" type="class_or_interface_ref" span="55:9:55:14">Class</jtok>
<jtok eid="3" type="local_variable_name" span="55:15:55:21">toType</jtok>
<jtok eid="3" type="class_or_interface_ref" span="55:26:55:33">BSHType</jtok>
<jtok eid="3" type="method_call" span="55:34:55:45">jjtGetChild</jtok>
<jtok eid="3" type="method_call" span="55:50:55:57">getType</jtok>
<jtok eid="3" type="primary_name_ref" span="56:4:56:13">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="56:15:56:26">interpreter</jtok>
<jtok eid="3" type="class_or_interface_ref" span="57:3:57:13">SimpleNode</jtok>
<jtok eid="3" type="local_variable_name" span="57:14:57:24">expression</jtok>
<jtok eid="3" type="class_or_interface_ref" span="57:28:57:38">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="57:39:57:50">jjtGetChild</jtok>
<jtok eid="3" type="line_comment" span="59:9:59:35">// evaluate the expression</jtok>
<jtok eid="3" type="class_or_interface_ref" span="60:9:60:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="60:16:60:25">fromValue</jtok>
<jtok eid="3" type="primary_name_ref" span="60:28:60:38">expression</jtok>
<jtok eid="3" type="method_call" span="60:39:60:43">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="60:44:60:53">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="60:55:60:66">interpreter</jtok>
<jtok eid="3" type="class_or_interface_ref" span="61:9:61:14">Class</jtok>
<jtok eid="3" type="local_variable_name" span="61:15:61:23">fromType</jtok>
<jtok eid="3" type="primary_name_ref" span="61:26:61:35">fromValue</jtok>
<jtok eid="3" type="method_call" span="61:36:61:44">getClass</jtok>
<jtok eid="3" type="line_comment" span="63:3:63:60">// TODO: need to add isJavaCastable() test for strictJava</jtok>
<jtok eid="3" type="line_comment" span="64:3:64:40">// (as opposed to isJavaAssignable())</jtok>
<jtok eid="3" type="primary_name_ref" span="66:11:66:16">Types</jtok>
<jtok eid="3" type="method_call" span="66:17:66:27">castObject</jtok>
<jtok eid="3" type="primary_name_ref" span="66:29:66:38">fromValue</jtok>
<jtok eid="3" type="primary_name_ref" span="66:40:66:46">toType</jtok>
<jtok eid="3" type="primary_name_ref" span="66:48:66:53">Types</jtok>
<jtok eid="3" type="qualified_name_ref" span="66:54:66:58">CAST</jtok>
<jtok eid="3" type="class_or_interface_ref" span="67:13:67:26">UtilEvalError</jtok>
<jtok eid="3" type="local_variable_name" span="67:27:67:28">e</jtok>
<jtok eid="3" type="primary_name_ref" span="68:10:68:11">e</jtok>
<jtok eid="3" type="method_call" span="68:12:68:23">toEvalError</jtok>
<jtok eid="3" type="primary_name_ref" span="68:31:68:40">callstack</jtok>
</jdoc>