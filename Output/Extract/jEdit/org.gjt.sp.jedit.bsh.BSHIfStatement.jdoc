<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHIfStatement" jls="java5">
<jent id="0" type="file" span="0:0:78:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHIfStatement.java</jent>
<jent id="1" pid="0" type="class" span="37:1:78:1">org.gjt.sp.jedit.bsh.BSHIfStatement</jent>
<jent id="2" pid="1" type="method" span="39:5:39:41">org.gjt.sp.jedit.bsh.BSHIfStatement.BSHIfStatement(int)</jent>
<jent id="3" pid="1" type="method" span="41:5:57:5">org.gjt.sp.jedit.bsh.BSHIfStatement.eval(CallStack,Interpreter)</jent>
<jent id="4" pid="1" type="method" span="59:5:77:5">org.gjt.sp.jedit.bsh.BSHIfStatement.evaluateCondition(SimpleNode,CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="37:7:37:21">BSHIfStatement</jtok>
<jtok eid="1" type="class_or_interface_ref" span="37:30:37:40">SimpleNode</jtok>
<jtok eid="2" type="method_name" span="39:5:39:19">BSHIfStatement</jtok>
<jtok eid="2" type="parameter_name" span="39:24:39:26">id</jtok>
<jtok eid="2" type="primary_name_ref" span="39:36:39:38">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="41:12:41:18">Object</jtok>
<jtok eid="3" type="method_name" span="41:19:41:23">eval</jtok>
<jtok eid="3" type="parameter_type" span="41:24:41:33">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="41:34:41:43">callstack</jtok>
<jtok eid="3" type="parameter_type" span="41:45:41:56">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="41:57:41:68">interpreter</jtok>
<jtok eid="3" type="throws" span="42:10:42:19">EvalError</jtok>
<jtok eid="3" type="class_or_interface_ref" span="44:9:44:15">Object</jtok>
<jtok eid="3" type="local_variable_name" span="44:16:44:19">ret</jtok>
<jtok eid="3" type="method_call" span="46:13:46:30">evaluateCondition</jtok>
<jtok eid="3" type="class_or_interface_ref" span="47:5:47:15">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="47:16:47:27">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="47:32:47:41">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="47:43:47:54">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="48:13:48:16">ret</jtok>
<jtok eid="3" type="class_or_interface_ref" span="48:21:48:31">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="48:32:48:43">jjtGetChild</jtok>
<jtok eid="3" type="method_call" span="48:48:48:52">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="48:53:48:62">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="48:64:48:75">interpreter</jtok>
<jtok eid="3" type="method_call" span="50:16:50:33">jjtGetNumChildren</jtok>
<jtok eid="3" type="primary_name_ref" span="51:17:51:20">ret</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:25:51:35">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="51:36:51:47">jjtGetChild</jtok>
<jtok eid="3" type="method_call" span="51:52:51:56">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="51:57:51:66">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="51:68:51:79">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="53:12:53:15">ret</jtok>
<jtok eid="3" type="class_or_interface_ref" span="53:27:53:40">ReturnControl</jtok>
<jtok eid="3" type="primary_name_ref" span="54:20:54:23">ret</jtok>
<jtok eid="3" type="primary_name_ref" span="56:20:56:29">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="56:30:56:34">VOID</jtok>
<jtok eid="4" type="method_name" span="59:27:59:44">evaluateCondition</jtok>
<jtok eid="4" type="parameter_type" span="60:3:60:13">SimpleNode</jtok>
<jtok eid="4" type="parameter_name" span="60:14:60:21">condExp</jtok>
<jtok eid="4" type="parameter_type" span="60:23:60:32">CallStack</jtok>
<jtok eid="4" type="parameter_name" span="60:33:60:42">callstack</jtok>
<jtok eid="4" type="parameter_type" span="60:44:60:55">Interpreter</jtok>
<jtok eid="4" type="parameter_name" span="60:56:60:67">interpreter</jtok>
<jtok eid="4" type="throws" span="61:10:61:19">EvalError</jtok>
<jtok eid="4" type="class_or_interface_ref" span="63:9:63:15">Object</jtok>
<jtok eid="4" type="local_variable_name" span="63:16:63:19">obj</jtok>
<jtok eid="4" type="primary_name_ref" span="63:22:63:29">condExp</jtok>
<jtok eid="4" type="method_call" span="63:30:63:34">eval</jtok>
<jtok eid="4" type="primary_name_ref" span="63:35:63:44">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="63:46:63:57">interpreter</jtok>
<jtok eid="4" type="primary_name_ref" span="64:12:64:15">obj</jtok>
<jtok eid="4" type="class_or_interface_ref" span="64:27:64:36">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="65:9:65:12">obj</jtok>
<jtok eid="4" type="primary_name_ref" span="65:16:65:25">Primitive</jtok>
<jtok eid="4" type="qualified_name_ref" span="65:26:65:30">VOID</jtok>
<jtok eid="4" type="constructor_call" span="66:15:66:24">EvalError</jtok>
<jtok eid="4" type="string_literal" span="66:25:66:59">"Condition evaluates to void type"</jtok>
<jtok eid="4" type="primary_name_ref" span="67:6:67:13">condExp</jtok>
<jtok eid="4" type="primary_name_ref" span="67:15:67:24">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="68:13:68:16">obj</jtok>
<jtok eid="4" type="class_or_interface_ref" span="68:21:68:30">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="68:31:68:34">obj</jtok>
<jtok eid="4" type="method_call" span="68:36:68:44">getValue</jtok>
<jtok eid="4" type="primary_name_ref" span="71:12:71:15">obj</jtok>
<jtok eid="4" type="class_or_interface_ref" span="71:27:71:34">Boolean</jtok>
<jtok eid="4" type="class_or_interface_ref" span="72:22:72:29">Boolean</jtok>
<jtok eid="4" type="primary_name_ref" span="72:30:72:33">obj</jtok>
<jtok eid="4" type="method_call" span="72:35:72:47">booleanValue</jtok>
<jtok eid="4" type="constructor_call" span="74:23:74:32">EvalError</jtok>
<jtok eid="4" type="string_literal" span="75:5:75:55">"Condition must evaluate to a Boolean or boolean."</jtok>
<jtok eid="4" type="primary_name_ref" span="76:5:76:12">condExp</jtok>
<jtok eid="4" type="primary_name_ref" span="76:14:76:23">callstack</jtok>
</jdoc>