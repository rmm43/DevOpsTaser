<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHMethodInvocation" jls="java5">
<jent id="0" type="file" span="0:0:103:1">Source/jEdit/org/gjt/sp/jedit/bsh/BSHMethodInvocation.java</jent>
<jent id="1" pid="0" type="class" span="39:1:102:1">org.gjt.sp.jedit.bsh.BSHMethodInvocation</jent>
<jent id="2" pid="1" type="method" span="41:2:41:44">org.gjt.sp.jedit.bsh.BSHMethodInvocation.BSHMethodInvocation(int)</jent>
<jent id="3" pid="1" type="method" span="43:2:45:2">org.gjt.sp.jedit.bsh.BSHMethodInvocation.getNameNode()</jent>
<jent id="4" pid="1" type="method" span="47:2:49:2">org.gjt.sp.jedit.bsh.BSHMethodInvocation.getArgsNode()</jent>
<jent id="5" pid="1" type="method" span="55:2:101:2">org.gjt.sp.jedit.bsh.BSHMethodInvocation.eval(CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="39:7:39:26">BSHMethodInvocation</jtok>
<jtok eid="1" type="class_or_interface_ref" span="39:35:39:45">SimpleNode</jtok>
<jtok eid="2" type="method_name" span="41:2:41:21">BSHMethodInvocation</jtok>
<jtok eid="2" type="parameter_name" span="41:27:41:29">id</jtok>
<jtok eid="2" type="primary_name_ref" span="41:39:41:41">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:2:43:18">BSHAmbiguousName</jtok>
<jtok eid="3" type="method_name" span="43:19:43:30">getNameNode</jtok>
<jtok eid="3" type="class_or_interface_ref" span="44:11:44:27">BSHAmbiguousName</jtok>
<jtok eid="3" type="method_call" span="44:28:44:39">jjtGetChild</jtok>
<jtok eid="4" type="class_or_interface_ref" span="47:2:47:14">BSHArguments</jtok>
<jtok eid="4" type="method_name" span="47:15:47:26">getArgsNode</jtok>
<jtok eid="4" type="class_or_interface_ref" span="48:11:48:23">BSHArguments</jtok>
<jtok eid="4" type="method_call" span="48:24:48:35">jjtGetChild</jtok>
<jtok eid="1" type="block_comment" span="51:2:54:4">/**
		Evaluate the method invocation with the specified callstack and 
		interpreter
	*/</jtok>
<jtok eid="5" type="class_or_interface_ref" span="55:9:55:15">Object</jtok>
<jtok eid="5" type="method_name" span="55:16:55:20">eval</jtok>
<jtok eid="5" type="parameter_type" span="55:22:55:31">CallStack</jtok>
<jtok eid="5" type="parameter_name" span="55:32:55:41">callstack</jtok>
<jtok eid="5" type="parameter_type" span="55:43:55:54">Interpreter</jtok>
<jtok eid="5" type="parameter_name" span="55:55:55:66">interpreter</jtok>
<jtok eid="5" type="throws" span="56:10:56:19">EvalError</jtok>
<jtok eid="5" type="class_or_interface_ref" span="58:3:58:12">NameSpace</jtok>
<jtok eid="5" type="local_variable_name" span="58:13:58:22">namespace</jtok>
<jtok eid="5" type="primary_name_ref" span="58:25:58:34">callstack</jtok>
<jtok eid="5" type="method_call" span="58:35:58:38">top</jtok>
<jtok eid="5" type="class_or_interface_ref" span="59:3:59:19">BSHAmbiguousName</jtok>
<jtok eid="5" type="local_variable_name" span="59:20:59:28">nameNode</jtok>
<jtok eid="5" type="method_call" span="59:31:59:42">getNameNode</jtok>
<jtok eid="5" type="line_comment" span="61:3:61:71">// Do not evaluate methods this() or super() in class instance space</jtok>
<jtok eid="5" type="line_comment" span="62:3:62:33">// (i.e. inside a constructor)</jtok>
<jtok eid="5" type="primary_name_ref" span="63:8:63:17">namespace</jtok>
<jtok eid="5" type="method_call" span="63:18:63:27">getParent</jtok>
<jtok eid="5" type="primary_name_ref" span="63:41:63:50">namespace</jtok>
<jtok eid="5" type="method_call" span="63:51:63:60">getParent</jtok>
<jtok eid="5" type="qualified_name_ref" span="63:63:63:70">isClass</jtok>
<jtok eid="5" type="primary_name_ref" span="64:9:64:17">nameNode</jtok>
<jtok eid="5" type="qualified_name_ref" span="64:18:64:22">text</jtok>
<jtok eid="5" type="method_call" span="64:23:64:29">equals</jtok>
<jtok eid="5" type="string_literal" span="64:30:64:37">"super"</jtok>
<jtok eid="5" type="primary_name_ref" span="64:42:64:50">nameNode</jtok>
<jtok eid="5" type="qualified_name_ref" span="64:51:64:55">text</jtok>
<jtok eid="5" type="method_call" span="64:56:64:62">equals</jtok>
<jtok eid="5" type="string_literal" span="64:63:64:69">"this"</jtok>
<jtok eid="5" type="primary_name_ref" span="66:11:66:20">Primitive</jtok>
<jtok eid="5" type="qualified_name_ref" span="66:21:66:25">VOID</jtok>
<jtok eid="5" type="class_or_interface_ref" span="68:3:68:7">Name</jtok>
<jtok eid="5" type="local_variable_name" span="68:8:68:12">name</jtok>
<jtok eid="5" type="primary_name_ref" span="68:15:68:23">nameNode</jtok>
<jtok eid="5" type="method_call" span="68:24:68:31">getName</jtok>
<jtok eid="5" type="primary_name_ref" span="68:32:68:41">namespace</jtok>
<jtok eid="5" type="class_or_interface_ref" span="69:3:69:9">Object</jtok>
<jtok eid="5" type="local_variable_name" span="69:12:69:16">args</jtok>
<jtok eid="5" type="method_call" span="69:19:69:30">getArgsNode</jtok>
<jtok eid="5" type="method_call" span="69:33:69:45">getArguments</jtok>
<jtok eid="5" type="primary_name_ref" span="69:46:69:55">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="69:57:69:68">interpreter</jtok>
<jtok eid="5" type="line_comment" span="71:1:71:69">// This try/catch block is replicated is BSHPrimarySuffix... need to</jtok>
<jtok eid="5" type="line_comment" span="72:1:72:38">// factor out common functionality...</jtok>
<jtok eid="5" type="line_comment" span="73:1:73:20">// Move to Reflect?</jtok>
<jtok eid="5" type="primary_name_ref" span="75:11:75:15">name</jtok>
<jtok eid="5" type="method_call" span="75:16:75:28">invokeMethod</jtok>
<jtok eid="5" type="primary_name_ref" span="75:30:75:41">interpreter</jtok>
<jtok eid="5" type="primary_name_ref" span="75:43:75:47">args</jtok>
<jtok eid="5" type="primary_name_ref" span="75:49:75:58">callstack</jtok>
<jtok eid="5" type="class_or_interface_ref" span="76:13:76:25">ReflectError</jtok>
<jtok eid="5" type="local_variable_name" span="76:26:76:27">e</jtok>
<jtok eid="5" type="constructor_call" span="77:14:77:23">EvalError</jtok>
<jtok eid="5" type="string_literal" span="78:5:78:35">"Error in method invocation: "</jtok>
<jtok eid="5" type="primary_name_ref" span="78:38:78:39">e</jtok>
<jtok eid="5" type="method_call" span="78:40:78:50">getMessage</jtok>
<jtok eid="5" type="primary_name_ref" span="79:11:79:20">callstack</jtok>
<jtok eid="5" type="class_or_interface_ref" span="80:13:80:38">InvocationTargetException</jtok>
<jtok eid="5" type="local_variable_name" span="80:39:80:40">e</jtok>
<jtok eid="5" type="class_or_interface_ref" span="82:4:82:10">String</jtok>
<jtok eid="5" type="local_variable_name" span="82:11:82:14">msg</jtok>
<jtok eid="5" type="string_literal" span="82:17:82:37">"Method Invocation "</jtok>
<jtok eid="5" type="primary_name_ref" span="82:38:82:42">name</jtok>
<jtok eid="5" type="class_or_interface_ref" span="83:4:83:13">Throwable</jtok>
<jtok eid="5" type="local_variable_name" span="83:14:83:16">te</jtok>
<jtok eid="5" type="primary_name_ref" span="83:19:83:20">e</jtok>
<jtok eid="5" type="method_call" span="83:21:83:39">getTargetException</jtok>
<jtok eid="5" type="block_comment" span="85:4:89:6">/*
				Try to squeltch the native code stack trace if the exception
				was caused by a reflective call back into the bsh interpreter
				(e.g. eval() or source()
			*/</jtok>
<jtok eid="5" type="local_variable_name" span="90:12:90:20">isNative</jtok>
<jtok eid="5" type="primary_name_ref" span="91:9:91:11">te</jtok>
<jtok eid="5" type="class_or_interface_ref" span="91:23:91:32">EvalError</jtok>
<jtok eid="5" type="primary_name_ref" span="92:10:92:12">te</jtok>
<jtok eid="5" type="class_or_interface_ref" span="92:24:92:35">TargetError</jtok>
<jtok eid="5" type="primary_name_ref" span="93:6:93:14">isNative</jtok>
<jtok eid="5" type="class_or_interface_ref" span="93:19:93:30">TargetError</jtok>
<jtok eid="5" type="primary_name_ref" span="93:31:93:33">te</jtok>
<jtok eid="5" type="method_call" span="93:35:93:47">inNativeCode</jtok>
<jtok eid="5" type="primary_name_ref" span="95:6:95:14">isNative</jtok>
<jtok eid="5" type="constructor_call" span="97:14:97:25">TargetError</jtok>
<jtok eid="5" type="primary_name_ref" span="97:27:97:30">msg</jtok>
<jtok eid="5" type="primary_name_ref" span="97:32:97:34">te</jtok>
<jtok eid="5" type="primary_name_ref" span="97:42:97:51">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="97:53:97:61">isNative</jtok>
<jtok eid="5" type="class_or_interface_ref" span="98:13:98:26">UtilEvalError</jtok>
<jtok eid="5" type="local_variable_name" span="98:27:98:28">e</jtok>
<jtok eid="5" type="primary_name_ref" span="99:10:99:11">e</jtok>
<jtok eid="5" type="method_call" span="99:12:99:23">toEvalError</jtok>
<jtok eid="5" type="primary_name_ref" span="99:31:99:40">callstack</jtok>
</jdoc>