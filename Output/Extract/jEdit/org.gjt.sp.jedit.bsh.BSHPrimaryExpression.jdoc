<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHPrimaryExpression" jls="java5">
<jent id="0" type="file" span="0:0:118:1">Source/jEdit/org/gjt/sp/jedit/bsh/BSHPrimaryExpression.java</jent>
<jent id="1" pid="0" type="class" span="37:1:117:1">org.gjt.sp.jedit.bsh.BSHPrimaryExpression</jent>
<jent id="2" pid="1" type="method" span="39:2:39:44">org.gjt.sp.jedit.bsh.BSHPrimaryExpression.BSHPrimaryExpression(int)</jent>
<jent id="3" pid="1" type="method" span="44:2:48:2">org.gjt.sp.jedit.bsh.BSHPrimaryExpression.eval(CallStack,Interpreter)</jent>
<jent id="4" pid="1" type="method" span="53:2:62:2">org.gjt.sp.jedit.bsh.BSHPrimaryExpression.toLHS(CallStack,Interpreter)</jent>
<jent id="5" pid="1" type="method" span="72:2:116:2">org.gjt.sp.jedit.bsh.BSHPrimaryExpression.eval(boolean,CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="37:7:37:27">BSHPrimaryExpression</jtok>
<jtok eid="1" type="class_or_interface_ref" span="37:36:37:46">SimpleNode</jtok>
<jtok eid="2" type="method_name" span="39:2:39:22">BSHPrimaryExpression</jtok>
<jtok eid="2" type="parameter_name" span="39:27:39:29">id</jtok>
<jtok eid="2" type="primary_name_ref" span="39:39:39:41">id</jtok>
<jtok eid="1" type="block_comment" span="41:2:43:4">/**
		Evaluate to a value object.
	*/</jtok>
<jtok eid="3" type="class_or_interface_ref" span="44:9:44:15">Object</jtok>
<jtok eid="3" type="method_name" span="44:16:44:20">eval</jtok>
<jtok eid="3" type="parameter_type" span="44:22:44:31">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="44:32:44:41">callstack</jtok>
<jtok eid="3" type="parameter_type" span="44:43:44:54">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="44:55:44:66">interpreter</jtok>
<jtok eid="3" type="throws" span="45:10:45:19">EvalError</jtok>
<jtok eid="3" type="method_call" span="47:10:47:14">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="47:23:47:32">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="47:34:47:45">interpreter</jtok>
<jtok eid="1" type="block_comment" span="50:2:52:4">/**
		Evaluate to a value object.
	*/</jtok>
<jtok eid="4" type="class_or_interface_ref" span="53:9:53:12">LHS</jtok>
<jtok eid="4" type="method_name" span="53:13:53:18">toLHS</jtok>
<jtok eid="4" type="parameter_type" span="53:20:53:29">CallStack</jtok>
<jtok eid="4" type="parameter_name" span="53:30:53:39">callstack</jtok>
<jtok eid="4" type="parameter_type" span="53:41:53:52">Interpreter</jtok>
<jtok eid="4" type="parameter_name" span="53:53:53:64">interpreter</jtok>
<jtok eid="4" type="throws" span="54:10:54:19">EvalError</jtok>
<jtok eid="4" type="class_or_interface_ref" span="56:3:56:9">Object</jtok>
<jtok eid="4" type="local_variable_name" span="56:10:56:13">obj</jtok>
<jtok eid="4" type="method_call" span="56:16:56:20">eval</jtok>
<jtok eid="4" type="primary_name_ref" span="56:28:56:37">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="56:39:56:50">interpreter</jtok>
<jtok eid="4" type="primary_name_ref" span="58:11:58:14">obj</jtok>
<jtok eid="4" type="class_or_interface_ref" span="58:26:58:29">LHS</jtok>
<jtok eid="4" type="constructor_call" span="59:14:59:23">EvalError</jtok>
<jtok eid="4" type="string_literal" span="59:24:59:42">"Can't assign to:"</jtok>
<jtok eid="4" type="primary_name_ref" span="59:50:59:59">callstack</jtok>
<jtok eid="4" type="class_or_interface_ref" span="61:12:61:15">LHS</jtok>
<jtok eid="4" type="primary_name_ref" span="61:16:61:19">obj</jtok>
<jtok eid="1" type="block_comment" span="64:2:71:4">/*
		Our children are a prefix expression and any number of suffixes.
		&lt;p&gt;

		We don't eval() any nodes until the suffixes have had an
		opportunity to work through them.  This lets the suffixes decide
		how to interpret an ambiguous name (e.g. for the .class operation).
	*/</jtok>
<jtok eid="5" type="class_or_interface_ref" span="72:10:72:16">Object</jtok>
<jtok eid="5" type="method_name" span="72:17:72:21">eval</jtok>
<jtok eid="5" type="parameter_name" span="72:31:72:36">toLHS</jtok>
<jtok eid="5" type="parameter_type" span="73:3:73:12">CallStack</jtok>
<jtok eid="5" type="parameter_name" span="73:13:73:22">callstack</jtok>
<jtok eid="5" type="parameter_type" span="73:24:73:35">Interpreter</jtok>
<jtok eid="5" type="parameter_name" span="73:36:73:47">interpreter</jtok>
<jtok eid="5" type="throws" span="74:10:74:19">EvalError</jtok>
<jtok eid="5" type="class_or_interface_ref" span="76:3:76:9">Object</jtok>
<jtok eid="5" type="local_variable_name" span="76:10:76:13">obj</jtok>
<jtok eid="5" type="method_call" span="76:16:76:27">jjtGetChild</jtok>
<jtok eid="5" type="local_variable_name" span="77:7:77:18">numChildren</jtok>
<jtok eid="5" type="method_call" span="77:21:77:38">jjtGetNumChildren</jtok>
<jtok eid="5" type="local_variable_name" span="79:11:79:12">i</jtok>
<jtok eid="5" type="primary_name_ref" span="79:16:79:17">i</jtok>
<jtok eid="5" type="primary_name_ref" span="79:18:79:29">numChildren</jtok>
<jtok eid="5" type="primary_name_ref" span="79:31:79:32">i</jtok>
<jtok eid="5" type="primary_name_ref" span="80:4:80:7">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="80:12:80:28">BSHPrimarySuffix</jtok>
<jtok eid="5" type="method_call" span="80:29:80:40">jjtGetChild</jtok>
<jtok eid="5" type="primary_name_ref" span="80:41:80:42">i</jtok>
<jtok eid="5" type="method_call" span="80:45:80:53">doSuffix</jtok>
<jtok eid="5" type="primary_name_ref" span="81:5:81:8">obj</jtok>
<jtok eid="5" type="primary_name_ref" span="81:10:81:15">toLHS</jtok>
<jtok eid="5" type="primary_name_ref" span="81:17:81:26">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="81:28:81:39">interpreter</jtok>
<jtok eid="5" type="block_comment" span="83:3:86:5">/*
			If the result is a Node eval() it to an object or LHS
			(as determined by toLHS)
		*/</jtok>
<jtok eid="5" type="primary_name_ref" span="87:8:87:11">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="87:23:87:33">SimpleNode</jtok>
<jtok eid="5" type="primary_name_ref" span="88:9:88:12">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="88:24:88:40">BSHAmbiguousName</jtok>
<jtok eid="5" type="primary_name_ref" span="89:10:89:15">toLHS</jtok>
<jtok eid="5" type="primary_name_ref" span="90:6:90:9">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="90:14:90:30">BSHAmbiguousName</jtok>
<jtok eid="5" type="primary_name_ref" span="90:31:90:34">obj</jtok>
<jtok eid="5" type="method_call" span="90:36:90:41">toLHS</jtok>
<jtok eid="5" type="primary_name_ref" span="91:7:91:16">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="91:18:91:29">interpreter</jtok>
<jtok eid="5" type="primary_name_ref" span="93:6:93:9">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="93:14:93:30">BSHAmbiguousName</jtok>
<jtok eid="5" type="primary_name_ref" span="93:31:93:34">obj</jtok>
<jtok eid="5" type="method_call" span="93:36:93:44">toObject</jtok>
<jtok eid="5" type="primary_name_ref" span="94:7:94:16">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="94:18:94:29">interpreter</jtok>
<jtok eid="5" type="line_comment" span="96:5:96:35">// Some arbitrary kind of node</jtok>
<jtok eid="5" type="primary_name_ref" span="97:10:97:15">toLHS</jtok>
<jtok eid="5" type="line_comment" span="98:6:98:23">// is this right?</jtok>
<jtok eid="5" type="constructor_call" span="99:16:99:25">EvalError</jtok>
<jtok eid="5" type="string_literal" span="99:26:99:51">"Can't assign to prefix."</jtok>
<jtok eid="5" type="primary_name_ref" span="100:13:100:22">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="102:6:102:9">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="102:14:102:24">SimpleNode</jtok>
<jtok eid="5" type="primary_name_ref" span="102:25:102:28">obj</jtok>
<jtok eid="5" type="method_call" span="102:30:102:34">eval</jtok>
<jtok eid="5" type="primary_name_ref" span="102:35:102:44">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="102:46:102:57">interpreter</jtok>
<jtok eid="5" type="line_comment" span="104:3:104:55">// return LHS or value object as determined by toLHS</jtok>
<jtok eid="5" type="primary_name_ref" span="105:8:105:11">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="105:23:105:26">LHS</jtok>
<jtok eid="5" type="primary_name_ref" span="106:9:106:14">toLHS</jtok>
<jtok eid="5" type="primary_name_ref" span="107:12:107:15">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="110:15:110:18">LHS</jtok>
<jtok eid="5" type="primary_name_ref" span="110:19:110:22">obj</jtok>
<jtok eid="5" type="method_call" span="110:24:110:32">getValue</jtok>
<jtok eid="5" type="class_or_interface_ref" span="111:15:111:28">UtilEvalError</jtok>
<jtok eid="5" type="local_variable_name" span="111:29:111:30">e</jtok>
<jtok eid="5" type="primary_name_ref" span="112:12:112:13">e</jtok>
<jtok eid="5" type="method_call" span="112:14:112:25">toEvalError</jtok>
<jtok eid="5" type="primary_name_ref" span="112:33:112:42">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="115:11:115:14">obj</jtok>
</jdoc>