<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHPrimarySuffix" jls="java5">
<jent id="0" type="file" span="0:0:304:1">Source/jEdit/org/gjt/sp/jedit/bsh/BSHPrimarySuffix.java</jent>
<jent id="1" pid="0" type="class" span="40:1:303:1">org.gjt.sp.jedit.bsh.BSHPrimarySuffix</jent>
<jent id="2" pid="1" type="method" span="52:2:52:40">org.gjt.sp.jedit.bsh.BSHPrimarySuffix.BSHPrimarySuffix(int)</jent>
<jent id="3" pid="1" type="method" span="67:2:137:2">org.gjt.sp.jedit.bsh.BSHPrimarySuffix.doSuffix(Object,boolean,CallStack,Interpreter)</jent>
<jent id="4" pid="1" type="method" span="143:2:204:2">org.gjt.sp.jedit.bsh.BSHPrimarySuffix.doName(Object,boolean,CallStack,Interpreter)</jent>
<jent id="5" pid="1" type="method" span="208:2:233:2">org.gjt.sp.jedit.bsh.BSHPrimarySuffix.getIndexAux(Object,CallStack,Interpreter,SimpleNode)</jent>
<jent id="6" pid="1" type="method" span="239:2:253:2">org.gjt.sp.jedit.bsh.BSHPrimarySuffix.doIndex(Object,boolean,CallStack,Interpreter)</jent>
<jent id="7" pid="1" type="method" span="259:2:302:2">org.gjt.sp.jedit.bsh.BSHPrimarySuffix.doProperty(boolean,Object,CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="40:7:40:23">BSHPrimarySuffix</jtok>
<jtok eid="1" type="class_or_interface_ref" span="40:32:40:42">SimpleNode</jtok>
<jtok eid="1" type="field_name" span="43:3:43:8">CLASS</jtok>
<jtok eid="1" type="field_name" span="44:3:44:8">INDEX</jtok>
<jtok eid="1" type="field_name" span="45:3:45:7">NAME</jtok>
<jtok eid="1" type="field_name" span="46:3:46:11">PROPERTY</jtok>
<jtok eid="1" type="field_name" span="48:13:48:22">operation</jtok>
<jtok eid="1" type="class_or_interface_ref" span="49:2:49:8">Object</jtok>
<jtok eid="1" type="field_name" span="49:9:49:14">index</jtok>
<jtok eid="1" type="class_or_interface_ref" span="50:9:50:15">String</jtok>
<jtok eid="1" type="field_name" span="50:16:50:21">field</jtok>
<jtok eid="2" type="method_name" span="52:2:52:18">BSHPrimarySuffix</jtok>
<jtok eid="2" type="parameter_name" span="52:23:52:25">id</jtok>
<jtok eid="2" type="primary_name_ref" span="52:35:52:37">id</jtok>
<jtok eid="1" type="block_comment" span="54:2:66:4">/*
		Perform a suffix operation on the given object and return the 
		new value.
		&lt;p&gt;

		obj will be a Node when suffix evaluation begins, allowing us to
		interpret it contextually. (e.g. for .class) Thereafter it will be 
		an value object or LHS (as determined by toLHS).
		&lt;p&gt;
		
		We must handle the toLHS case at each point here.
		&lt;p&gt;
	*/</jtok>
<jtok eid="3" type="class_or_interface_ref" span="67:9:67:15">Object</jtok>
<jtok eid="3" type="method_name" span="67:16:67:24">doSuffix</jtok>
<jtok eid="3" type="parameter_type" span="68:3:68:9">Object</jtok>
<jtok eid="3" type="parameter_name" span="68:10:68:13">obj</jtok>
<jtok eid="3" type="parameter_name" span="68:23:68:28">toLHS</jtok>
<jtok eid="3" type="parameter_type" span="69:3:69:12">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="69:13:69:22">callstack</jtok>
<jtok eid="3" type="parameter_type" span="69:24:69:35">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="69:36:69:47">interpreter</jtok>
<jtok eid="3" type="throws" span="70:10:70:19">EvalError</jtok>
<jtok eid="3" type="line_comment" span="72:3:72:38">// Handle ".class" suffix operation</jtok>
<jtok eid="3" type="line_comment" span="73:3:73:30">// Prefix must be a BSHType</jtok>
<jtok eid="3" type="primary_name_ref" span="74:8:74:17">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="74:21:74:26">CLASS</jtok>
<jtok eid="3" type="primary_name_ref" span="75:9:75:12">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="75:24:75:31">BSHType</jtok>
<jtok eid="3" type="primary_name_ref" span="76:10:76:15">toLHS</jtok>
<jtok eid="3" type="constructor_call" span="77:16:77:25">EvalError</jtok>
<jtok eid="3" type="string_literal" span="77:26:77:47">"Can't assign .class"</jtok>
<jtok eid="3" type="primary_name_ref" span="78:13:78:22">callstack</jtok>
<jtok eid="3" type="class_or_interface_ref" span="79:5:79:14">NameSpace</jtok>
<jtok eid="3" type="local_variable_name" span="79:15:79:24">namespace</jtok>
<jtok eid="3" type="primary_name_ref" span="79:27:79:36">callstack</jtok>
<jtok eid="3" type="method_call" span="79:37:79:40">top</jtok>
<jtok eid="3" type="class_or_interface_ref" span="80:14:80:21">BSHType</jtok>
<jtok eid="3" type="primary_name_ref" span="80:22:80:25">obj</jtok>
<jtok eid="3" type="method_call" span="80:27:80:34">getType</jtok>
<jtok eid="3" type="primary_name_ref" span="80:36:80:45">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="80:47:80:58">interpreter</jtok>
<jtok eid="3" type="constructor_call" span="82:15:82:24">EvalError</jtok>
<jtok eid="3" type="string_literal" span="83:6:83:50">"Attempt to use .class suffix on non class."</jtok>
<jtok eid="3" type="primary_name_ref" span="84:12:84:21">callstack</jtok>
<jtok eid="3" type="block_comment" span="86:3:97:5">/*
			Evaluate our prefix if it needs evaluating first.
			If this is the first evaluation our prefix mayb be a Node 
			(directly from the PrimaryPrefix) - eval() it to an object.  
			If it's an LHS, resolve to a value.

			Note: The ambiguous name construct is now necessary where the node 
			may be an ambiguous name.  If this becomes common we might want to 
			make a static method nodeToObject() or something.  The point is 
			that we can't just eval() - we need to direct the evaluation to 
			the context sensitive type of result; namely object, class, etc.
		*/</jtok>
<jtok eid="3" type="primary_name_ref" span="98:8:98:11">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="98:23:98:33">SimpleNode</jtok>
<jtok eid="3" type="primary_name_ref" span="99:9:99:12">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="99:24:99:40">BSHAmbiguousName</jtok>
<jtok eid="3" type="primary_name_ref" span="100:5:100:8">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="100:13:100:29">BSHAmbiguousName</jtok>
<jtok eid="3" type="primary_name_ref" span="100:30:100:33">obj</jtok>
<jtok eid="3" type="method_call" span="100:35:100:43">toObject</jtok>
<jtok eid="3" type="primary_name_ref" span="100:44:100:53">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="100:55:100:66">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="102:5:102:8">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="102:13:102:23">SimpleNode</jtok>
<jtok eid="3" type="primary_name_ref" span="102:24:102:27">obj</jtok>
<jtok eid="3" type="method_call" span="102:29:102:33">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="102:34:102:43">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="102:45:102:56">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="104:9:104:12">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="104:24:104:27">LHS</jtok>
<jtok eid="3" type="primary_name_ref" span="106:6:106:9">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="106:14:106:17">LHS</jtok>
<jtok eid="3" type="primary_name_ref" span="106:18:106:21">obj</jtok>
<jtok eid="3" type="method_call" span="106:23:106:31">getValue</jtok>
<jtok eid="3" type="class_or_interface_ref" span="107:15:107:28">UtilEvalError</jtok>
<jtok eid="3" type="local_variable_name" span="107:29:107:30">e</jtok>
<jtok eid="3" type="primary_name_ref" span="108:12:108:13">e</jtok>
<jtok eid="3" type="method_call" span="108:14:108:25">toEvalError</jtok>
<jtok eid="3" type="primary_name_ref" span="108:33:108:42">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="113:11:113:20">operation</jtok>
<jtok eid="3" type="primary_name_ref" span="115:10:115:15">INDEX</jtok>
<jtok eid="3" type="method_call" span="116:13:116:20">doIndex</jtok>
<jtok eid="3" type="primary_name_ref" span="116:22:116:25">obj</jtok>
<jtok eid="3" type="primary_name_ref" span="116:27:116:32">toLHS</jtok>
<jtok eid="3" type="primary_name_ref" span="116:34:116:43">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="116:45:116:56">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="118:10:118:14">NAME</jtok>
<jtok eid="3" type="method_call" span="119:13:119:19">doName</jtok>
<jtok eid="3" type="primary_name_ref" span="119:21:119:24">obj</jtok>
<jtok eid="3" type="primary_name_ref" span="119:26:119:31">toLHS</jtok>
<jtok eid="3" type="primary_name_ref" span="119:33:119:42">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="119:44:119:55">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="121:10:121:18">PROPERTY</jtok>
<jtok eid="3" type="method_call" span="122:13:122:23">doProperty</jtok>
<jtok eid="3" type="primary_name_ref" span="122:25:122:30">toLHS</jtok>
<jtok eid="3" type="primary_name_ref" span="122:32:122:35">obj</jtok>
<jtok eid="3" type="primary_name_ref" span="122:37:122:46">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="122:48:122:59">interpreter</jtok>
<jtok eid="3" type="constructor_call" span="125:16:125:32">InterpreterError</jtok>
<jtok eid="3" type="string_literal" span="125:34:125:55">"Unknown suffix type"</jtok>
<jtok eid="3" type="class_or_interface_ref" span="128:9:128:21">ReflectError</jtok>
<jtok eid="3" type="local_variable_name" span="128:22:128:23">e</jtok>
<jtok eid="3" type="constructor_call" span="130:14:130:23">EvalError</jtok>
<jtok eid="3" type="string_literal" span="130:24:130:44">"reflection error: "</jtok>
<jtok eid="3" type="primary_name_ref" span="130:47:130:48">e</jtok>
<jtok eid="3" type="primary_name_ref" span="130:56:130:65">callstack</jtok>
<jtok eid="3" type="class_or_interface_ref" span="132:9:132:34">InvocationTargetException</jtok>
<jtok eid="3" type="local_variable_name" span="132:35:132:36">e</jtok>
<jtok eid="3" type="constructor_call" span="134:14:134:25">TargetError</jtok>
<jtok eid="3" type="string_literal" span="134:27:134:45">"target exception"</jtok>
<jtok eid="3" type="primary_name_ref" span="134:47:134:48">e</jtok>
<jtok eid="3" type="method_call" span="134:49:134:67">getTargetException</jtok>
<jtok eid="3" type="primary_name_ref" span="135:11:135:20">callstack</jtok>
<jtok eid="1" type="block_comment" span="139:2:142:4">/*
		Field access, .length on array, or a method invocation
		Must handle toLHS case for each.
	*/</jtok>
<jtok eid="4" type="class_or_interface_ref" span="143:10:143:16">Object</jtok>
<jtok eid="4" type="method_name" span="143:17:143:23">doName</jtok>
<jtok eid="4" type="parameter_type" span="144:3:144:9">Object</jtok>
<jtok eid="4" type="parameter_name" span="144:10:144:13">obj</jtok>
<jtok eid="4" type="parameter_name" span="144:23:144:28">toLHS</jtok>
<jtok eid="4" type="parameter_type" span="145:3:145:12">CallStack</jtok>
<jtok eid="4" type="parameter_name" span="145:13:145:22">callstack</jtok>
<jtok eid="4" type="parameter_type" span="145:24:145:35">Interpreter</jtok>
<jtok eid="4" type="parameter_name" span="145:36:145:47">interpreter</jtok>
<jtok eid="4" type="throws" span="146:10:146:19">EvalError</jtok>
<jtok eid="4" type="throws" span="146:21:146:33">ReflectError</jtok>
<jtok eid="4" type="throws" span="146:35:146:60">InvocationTargetException</jtok>
<jtok eid="4" type="line_comment" span="149:4:149:23">// .length on array</jtok>
<jtok eid="4" type="primary_name_ref" span="150:9:150:14">field</jtok>
<jtok eid="4" type="method_call" span="150:15:150:21">equals</jtok>
<jtok eid="4" type="string_literal" span="150:22:150:30">"length"</jtok>
<jtok eid="4" type="primary_name_ref" span="150:35:150:38">obj</jtok>
<jtok eid="4" type="method_call" span="150:39:150:47">getClass</jtok>
<jtok eid="4" type="method_call" span="150:50:150:57">isArray</jtok>
<jtok eid="4" type="primary_name_ref" span="151:10:151:15">toLHS</jtok>
<jtok eid="4" type="constructor_call" span="152:16:152:25">EvalError</jtok>
<jtok eid="4" type="string_literal" span="153:7:153:34">"Can't assign array length"</jtok>
<jtok eid="4" type="primary_name_ref" span="153:42:153:51">callstack</jtok>
<jtok eid="4" type="constructor_call" span="155:17:155:26">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="155:27:155:32">Array</jtok>
<jtok eid="4" type="method_call" span="155:33:155:42">getLength</jtok>
<jtok eid="4" type="primary_name_ref" span="155:43:155:46">obj</jtok>
<jtok eid="4" type="line_comment" span="157:4:157:19">// field access</jtok>
<jtok eid="4" type="method_call" span="158:9:158:26">jjtGetNumChildren</jtok>
<jtok eid="4" type="primary_name_ref" span="159:10:159:15">toLHS</jtok>
<jtok eid="4" type="primary_name_ref" span="160:13:160:20">Reflect</jtok>
<jtok eid="4" type="method_call" span="160:21:160:38">getLHSObjectField</jtok>
<jtok eid="4" type="primary_name_ref" span="160:39:160:42">obj</jtok>
<jtok eid="4" type="primary_name_ref" span="160:44:160:49">field</jtok>
<jtok eid="4" type="primary_name_ref" span="162:13:162:20">Reflect</jtok>
<jtok eid="4" type="method_call" span="162:21:162:40">getObjectFieldValue</jtok>
<jtok eid="4" type="primary_name_ref" span="162:42:162:45">obj</jtok>
<jtok eid="4" type="primary_name_ref" span="162:47:162:52">field</jtok>
<jtok eid="4" type="line_comment" span="164:4:164:24">// Method invocation</jtok>
<jtok eid="4" type="line_comment" span="165:4:165:66">// (LHS or non LHS evaluation can both encounter method calls)</jtok>
<jtok eid="4" type="class_or_interface_ref" span="166:4:166:10">Object</jtok>
<jtok eid="4" type="local_variable_name" span="166:13:166:15">oa</jtok>
<jtok eid="4" type="class_or_interface_ref" span="166:20:166:32">BSHArguments</jtok>
<jtok eid="4" type="method_call" span="166:33:166:44">jjtGetChild</jtok>
<jtok eid="4" type="method_call" span="166:49:166:61">getArguments</jtok>
<jtok eid="4" type="primary_name_ref" span="167:5:167:14">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="167:16:167:27">interpreter</jtok>
<jtok eid="4" type="line_comment" span="169:3:169:11">// TODO:</jtok>
<jtok eid="4" type="line_comment" span="170:3:170:67">// Note: this try/catch block is copied from BSHMethodInvocation</jtok>
<jtok eid="4" type="line_comment" span="171:3:171:67">// we need to factor out this common functionality and make sure</jtok>
<jtok eid="4" type="line_comment" span="172:3:172:64">// we handle all cases ... (e.g. property style access, etc.)</jtok>
<jtok eid="4" type="line_comment" span="173:3:173:34">// maybe move this to Reflect ?</jtok>
<jtok eid="4" type="primary_name_ref" span="175:12:175:19">Reflect</jtok>
<jtok eid="4" type="method_call" span="175:20:175:38">invokeObjectMethod</jtok>
<jtok eid="4" type="primary_name_ref" span="176:6:176:9">obj</jtok>
<jtok eid="4" type="primary_name_ref" span="176:11:176:16">field</jtok>
<jtok eid="4" type="primary_name_ref" span="176:18:176:20">oa</jtok>
<jtok eid="4" type="primary_name_ref" span="176:22:176:33">interpreter</jtok>
<jtok eid="4" type="primary_name_ref" span="176:35:176:44">callstack</jtok>
<jtok eid="4" type="class_or_interface_ref" span="177:14:177:26">ReflectError</jtok>
<jtok eid="4" type="local_variable_name" span="177:27:177:28">e</jtok>
<jtok eid="4" type="constructor_call" span="178:15:178:24">EvalError</jtok>
<jtok eid="4" type="string_literal" span="179:6:179:36">"Error in method invocation: "</jtok>
<jtok eid="4" type="primary_name_ref" span="179:39:179:40">e</jtok>
<jtok eid="4" type="method_call" span="179:41:179:51">getMessage</jtok>
<jtok eid="4" type="primary_name_ref" span="180:12:180:21">callstack</jtok>
<jtok eid="4" type="class_or_interface_ref" span="181:14:181:39">InvocationTargetException</jtok>
<jtok eid="4" type="local_variable_name" span="181:40:181:41">e</jtok>
<jtok eid="4" type="class_or_interface_ref" span="183:5:183:11">String</jtok>
<jtok eid="4" type="local_variable_name" span="183:12:183:15">msg</jtok>
<jtok eid="4" type="string_literal" span="183:18:183:38">"Method Invocation "</jtok>
<jtok eid="4" type="primary_name_ref" span="183:39:183:44">field</jtok>
<jtok eid="4" type="class_or_interface_ref" span="184:5:184:14">Throwable</jtok>
<jtok eid="4" type="local_variable_name" span="184:15:184:17">te</jtok>
<jtok eid="4" type="primary_name_ref" span="184:20:184:21">e</jtok>
<jtok eid="4" type="method_call" span="184:22:184:40">getTargetException</jtok>
<jtok eid="4" type="block_comment" span="186:5:190:7">/*
					Try to squeltch the native code stack trace if the exception
					was caused by a reflective call back into the bsh interpreter
					(e.g. eval() or source()
				*/</jtok>
<jtok eid="4" type="local_variable_name" span="191:13:191:21">isNative</jtok>
<jtok eid="4" type="primary_name_ref" span="192:10:192:12">te</jtok>
<jtok eid="4" type="class_or_interface_ref" span="192:24:192:33">EvalError</jtok>
<jtok eid="4" type="primary_name_ref" span="193:11:193:13">te</jtok>
<jtok eid="4" type="class_or_interface_ref" span="193:25:193:36">TargetError</jtok>
<jtok eid="4" type="primary_name_ref" span="194:7:194:15">isNative</jtok>
<jtok eid="4" type="class_or_interface_ref" span="194:20:194:31">TargetError</jtok>
<jtok eid="4" type="primary_name_ref" span="194:32:194:34">te</jtok>
<jtok eid="4" type="method_call" span="194:36:194:48">inNativeCode</jtok>
<jtok eid="4" type="primary_name_ref" span="196:7:196:15">isNative</jtok>
<jtok eid="4" type="constructor_call" span="198:15:198:26">TargetError</jtok>
<jtok eid="4" type="primary_name_ref" span="198:28:198:31">msg</jtok>
<jtok eid="4" type="primary_name_ref" span="198:33:198:35">te</jtok>
<jtok eid="4" type="primary_name_ref" span="198:43:198:52">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="198:54:198:62">isNative</jtok>
<jtok eid="4" type="class_or_interface_ref" span="201:13:201:26">UtilEvalError</jtok>
<jtok eid="4" type="local_variable_name" span="201:27:201:28">e</jtok>
<jtok eid="4" type="primary_name_ref" span="202:10:202:11">e</jtok>
<jtok eid="4" type="method_call" span="202:12:202:23">toEvalError</jtok>
<jtok eid="4" type="primary_name_ref" span="202:31:202:40">callstack</jtok>
<jtok eid="1" type="block_comment" span="206:2:207:4">/**
	*/</jtok>
<jtok eid="5" type="method_name" span="208:13:208:24">getIndexAux</jtok>
<jtok eid="5" type="parameter_type" span="209:3:209:9">Object</jtok>
<jtok eid="5" type="parameter_name" span="209:10:209:13">obj</jtok>
<jtok eid="5" type="parameter_type" span="209:15:209:24">CallStack</jtok>
<jtok eid="5" type="parameter_name" span="209:25:209:34">callstack</jtok>
<jtok eid="5" type="parameter_type" span="209:36:209:47">Interpreter</jtok>
<jtok eid="5" type="parameter_name" span="209:48:209:59">interpreter</jtok>
<jtok eid="5" type="parameter_type" span="210:3:210:13">SimpleNode</jtok>
<jtok eid="5" type="parameter_name" span="210:14:210:24">callerInfo</jtok>
<jtok eid="5" type="throws" span="211:10:211:19">EvalError</jtok>
<jtok eid="5" type="primary_name_ref" span="213:9:213:12">obj</jtok>
<jtok eid="5" type="method_call" span="213:13:213:21">getClass</jtok>
<jtok eid="5" type="method_call" span="213:24:213:31">isArray</jtok>
<jtok eid="5" type="constructor_call" span="214:14:214:23">EvalError</jtok>
<jtok eid="5" type="string_literal" span="214:24:214:38">"Not an array"</jtok>
<jtok eid="5" type="primary_name_ref" span="214:40:214:50">callerInfo</jtok>
<jtok eid="5" type="primary_name_ref" span="214:52:214:61">callstack</jtok>
<jtok eid="5" type="local_variable_name" span="216:7:216:12">index</jtok>
<jtok eid="5" type="class_or_interface_ref" span="218:4:218:10">Object</jtok>
<jtok eid="5" type="local_variable_name" span="218:11:218:19">indexVal</jtok>
<jtok eid="5" type="class_or_interface_ref" span="219:7:219:17">SimpleNode</jtok>
<jtok eid="5" type="primary_name_ref" span="219:18:219:28">callerInfo</jtok>
<jtok eid="5" type="method_call" span="219:29:219:40">jjtGetChild</jtok>
<jtok eid="5" type="method_call" span="219:45:219:49">eval</jtok>
<jtok eid="5" type="primary_name_ref" span="220:6:220:15">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="220:17:220:28">interpreter</jtok>
<jtok eid="5" type="primary_name_ref" span="221:11:221:19">indexVal</jtok>
<jtok eid="5" type="class_or_interface_ref" span="221:31:221:40">Primitive</jtok>
<jtok eid="5" type="primary_name_ref" span="222:5:222:13">indexVal</jtok>
<jtok eid="5" type="primary_name_ref" span="222:16:222:21">Types</jtok>
<jtok eid="5" type="method_call" span="222:22:222:32">castObject</jtok>
<jtok eid="5" type="primary_name_ref" span="223:6:223:14">indexVal</jtok>
<jtok eid="5" type="primary_name_ref" span="223:16:223:23">Integer</jtok>
<jtok eid="5" type="qualified_name_ref" span="223:24:223:28">TYPE</jtok>
<jtok eid="5" type="primary_name_ref" span="223:30:223:35">Types</jtok>
<jtok eid="5" type="qualified_name_ref" span="223:36:223:46">ASSIGNMENT</jtok>
<jtok eid="5" type="primary_name_ref" span="224:4:224:9">index</jtok>
<jtok eid="5" type="class_or_interface_ref" span="224:14:224:23">Primitive</jtok>
<jtok eid="5" type="primary_name_ref" span="224:24:224:32">indexVal</jtok>
<jtok eid="5" type="method_call" span="224:34:224:42">intValue</jtok>
<jtok eid="5" type="class_or_interface_ref" span="225:12:225:25">UtilEvalError</jtok>
<jtok eid="5" type="local_variable_name" span="225:26:225:27">e</jtok>
<jtok eid="5" type="primary_name_ref" span="226:4:226:15">Interpreter</jtok>
<jtok eid="5" type="method_call" span="226:16:226:21">debug</jtok>
<jtok eid="5" type="string_literal" span="226:22:226:33">"doIndex: "</jtok>
<jtok eid="5" type="primary_name_ref" span="226:34:226:35">e</jtok>
<jtok eid="5" type="primary_name_ref" span="227:10:227:11">e</jtok>
<jtok eid="5" type="method_call" span="227:12:227:23">toEvalError</jtok>
<jtok eid="5" type="string_literal" span="228:5:228:51">"Arrays may only be indexed by integer types."</jtok>
<jtok eid="5" type="primary_name_ref" span="229:5:229:15">callerInfo</jtok>
<jtok eid="5" type="primary_name_ref" span="229:17:229:26">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="232:10:232:15">index</jtok>
<jtok eid="1" type="block_comment" span="235:2:238:4">/**
		array index.
		Must handle toLHS case.
	*/</jtok>
<jtok eid="6" type="class_or_interface_ref" span="239:10:239:16">Object</jtok>
<jtok eid="6" type="method_name" span="239:17:239:24">doIndex</jtok>
<jtok eid="6" type="parameter_type" span="240:3:240:9">Object</jtok>
<jtok eid="6" type="parameter_name" span="240:10:240:13">obj</jtok>
<jtok eid="6" type="parameter_name" span="240:23:240:28">toLHS</jtok>
<jtok eid="6" type="parameter_type" span="241:3:241:12">CallStack</jtok>
<jtok eid="6" type="parameter_name" span="241:13:241:22">callstack</jtok>
<jtok eid="6" type="parameter_type" span="241:24:241:35">Interpreter</jtok>
<jtok eid="6" type="parameter_name" span="241:36:241:47">interpreter</jtok>
<jtok eid="6" type="throws" span="242:10:242:19">EvalError</jtok>
<jtok eid="6" type="throws" span="242:21:242:33">ReflectError</jtok>
<jtok eid="6" type="local_variable_name" span="244:7:244:12">index</jtok>
<jtok eid="6" type="method_call" span="244:15:244:26">getIndexAux</jtok>
<jtok eid="6" type="primary_name_ref" span="244:28:244:31">obj</jtok>
<jtok eid="6" type="primary_name_ref" span="244:33:244:42">callstack</jtok>
<jtok eid="6" type="primary_name_ref" span="244:44:244:55">interpreter</jtok>
<jtok eid="6" type="primary_name_ref" span="245:8:245:13">toLHS</jtok>
<jtok eid="6" type="constructor_call" span="246:15:246:18">LHS</jtok>
<jtok eid="6" type="primary_name_ref" span="246:19:246:22">obj</jtok>
<jtok eid="6" type="primary_name_ref" span="246:24:246:29">index</jtok>
<jtok eid="6" type="primary_name_ref" span="249:12:249:19">Reflect</jtok>
<jtok eid="6" type="method_call" span="249:20:249:28">getIndex</jtok>
<jtok eid="6" type="primary_name_ref" span="249:29:249:32">obj</jtok>
<jtok eid="6" type="primary_name_ref" span="249:34:249:39">index</jtok>
<jtok eid="6" type="class_or_interface_ref" span="250:14:250:27">UtilEvalError</jtok>
<jtok eid="6" type="local_variable_name" span="250:28:250:29">e</jtok>
<jtok eid="6" type="primary_name_ref" span="251:11:251:12">e</jtok>
<jtok eid="6" type="method_call" span="251:13:251:24">toEvalError</jtok>
<jtok eid="6" type="primary_name_ref" span="251:32:251:41">callstack</jtok>
<jtok eid="1" type="block_comment" span="255:2:258:4">/**
		Property access.
		Must handle toLHS case.
	*/</jtok>
<jtok eid="7" type="class_or_interface_ref" span="259:10:259:16">Object</jtok>
<jtok eid="7" type="method_name" span="259:17:259:27">doProperty</jtok>
<jtok eid="7" type="parameter_name" span="259:37:259:42">toLHS</jtok>
<jtok eid="7" type="parameter_type" span="260:3:260:9">Object</jtok>
<jtok eid="7" type="parameter_name" span="260:10:260:13">obj</jtok>
<jtok eid="7" type="parameter_type" span="260:15:260:24">CallStack</jtok>
<jtok eid="7" type="parameter_name" span="260:25:260:34">callstack</jtok>
<jtok eid="7" type="parameter_type" span="260:36:260:47">Interpreter</jtok>
<jtok eid="7" type="parameter_name" span="260:48:260:59">interpreter</jtok>
<jtok eid="7" type="throws" span="261:10:261:19">EvalError</jtok>
<jtok eid="7" type="primary_name_ref" span="263:6:263:9">obj</jtok>
<jtok eid="7" type="primary_name_ref" span="263:13:263:22">Primitive</jtok>
<jtok eid="7" type="qualified_name_ref" span="263:23:263:27">VOID</jtok>
<jtok eid="7" type="constructor_call" span="264:14:264:23">EvalError</jtok>
<jtok eid="7" type="string_literal" span="265:4:265:68">"Attempt to access property on undefined variable or class name"</jtok>
<jtok eid="7" type="primary_name_ref" span="266:11:266:20">callstack</jtok>
<jtok eid="7" type="primary_name_ref" span="268:8:268:11">obj</jtok>
<jtok eid="7" type="class_or_interface_ref" span="268:23:268:32">Primitive</jtok>
<jtok eid="7" type="constructor_call" span="269:14:269:23">EvalError</jtok>
<jtok eid="7" type="string_literal" span="269:24:269:67">"Attempt to access property on a primitive"</jtok>
<jtok eid="7" type="primary_name_ref" span="270:11:270:20">callstack</jtok>
<jtok eid="7" type="class_or_interface_ref" span="272:3:272:9">Object</jtok>
<jtok eid="7" type="local_variable_name" span="272:10:272:15">value</jtok>
<jtok eid="7" type="class_or_interface_ref" span="272:20:272:30">SimpleNode</jtok>
<jtok eid="7" type="method_call" span="272:31:272:42">jjtGetChild</jtok>
<jtok eid="7" type="method_call" span="272:47:272:51">eval</jtok>
<jtok eid="7" type="primary_name_ref" span="273:4:273:13">callstack</jtok>
<jtok eid="7" type="primary_name_ref" span="273:15:273:26">interpreter</jtok>
<jtok eid="7" type="primary_name_ref" span="275:11:275:16">value</jtok>
<jtok eid="7" type="class_or_interface_ref" span="275:28:275:34">String</jtok>
<jtok eid="7" type="constructor_call" span="276:14:276:23">EvalError</jtok>
<jtok eid="7" type="string_literal" span="277:5:277:58">"Property expression must be a String or identifier."</jtok>
<jtok eid="7" type="primary_name_ref" span="278:11:278:20">callstack</jtok>
<jtok eid="7" type="primary_name_ref" span="280:8:280:13">toLHS</jtok>
<jtok eid="7" type="constructor_call" span="281:15:281:18">LHS</jtok>
<jtok eid="7" type="primary_name_ref" span="281:19:281:22">obj</jtok>
<jtok eid="7" type="class_or_interface_ref" span="281:25:281:31">String</jtok>
<jtok eid="7" type="primary_name_ref" span="281:32:281:37">value</jtok>
<jtok eid="7" type="line_comment" span="283:3:283:47">// Property style access to Hashtable or Map</jtok>
<jtok eid="7" type="class_or_interface_ref" span="284:3:284:20">CollectionManager</jtok>
<jtok eid="7" type="local_variable_name" span="284:21:284:23">cm</jtok>
<jtok eid="7" type="primary_name_ref" span="284:26:284:43">CollectionManager</jtok>
<jtok eid="7" type="method_call" span="284:44:284:64">getCollectionManager</jtok>
<jtok eid="7" type="primary_name_ref" span="285:8:285:10">cm</jtok>
<jtok eid="7" type="method_call" span="285:11:285:16">isMap</jtok>
<jtok eid="7" type="primary_name_ref" span="285:18:285:21">obj</jtok>
<jtok eid="7" type="class_or_interface_ref" span="287:4:287:10">Object</jtok>
<jtok eid="7" type="local_variable_name" span="287:11:287:14">val</jtok>
<jtok eid="7" type="primary_name_ref" span="287:17:287:19">cm</jtok>
<jtok eid="7" type="method_call" span="287:20:287:30">getFromMap</jtok>
<jtok eid="7" type="primary_name_ref" span="287:32:287:35">obj</jtok>
<jtok eid="7" type="primary_name_ref" span="287:37:287:42">value</jtok>
<jtok eid="7" type="block_comment" span="287:42:287:49">/*key*/</jtok>
<jtok eid="7" type="primary_name_ref" span="288:13:288:16">val</jtok>
<jtok eid="7" type="primary_name_ref" span="288:28:288:31">val</jtok>
<jtok eid="7" type="primary_name_ref" span="288:34:288:43">Primitive</jtok>
<jtok eid="7" type="qualified_name_ref" span="288:44:288:48">NULL</jtok>
<jtok eid="7" type="primary_name_ref" span="288:51:288:54">val</jtok>
<jtok eid="7" type="primary_name_ref" span="292:11:292:18">Reflect</jtok>
<jtok eid="7" type="method_call" span="292:19:292:36">getObjectProperty</jtok>
<jtok eid="7" type="primary_name_ref" span="292:38:292:41">obj</jtok>
<jtok eid="7" type="class_or_interface_ref" span="292:44:292:50">String</jtok>
<jtok eid="7" type="primary_name_ref" span="292:51:292:56">value</jtok>
<jtok eid="7" type="class_or_interface_ref" span="294:11:294:24">UtilEvalError</jtok>
<jtok eid="7" type="local_variable_name" span="294:25:294:26">e</jtok>
<jtok eid="7" type="primary_name_ref" span="296:10:296:11">e</jtok>
<jtok eid="7" type="method_call" span="296:12:296:23">toEvalError</jtok>
<jtok eid="7" type="string_literal" span="296:25:296:37">"Property: "</jtok>
<jtok eid="7" type="primary_name_ref" span="296:38:296:43">value</jtok>
<jtok eid="7" type="primary_name_ref" span="296:51:296:60">callstack</jtok>
<jtok eid="7" type="class_or_interface_ref" span="298:10:298:22">ReflectError</jtok>
<jtok eid="7" type="local_variable_name" span="298:23:298:24">e</jtok>
<jtok eid="7" type="constructor_call" span="300:14:300:23">EvalError</jtok>
<jtok eid="7" type="string_literal" span="300:24:300:44">"No such property: "</jtok>
<jtok eid="7" type="primary_name_ref" span="300:47:300:52">value</jtok>
<jtok eid="7" type="primary_name_ref" span="300:60:300:69">callstack</jtok>
</jdoc>