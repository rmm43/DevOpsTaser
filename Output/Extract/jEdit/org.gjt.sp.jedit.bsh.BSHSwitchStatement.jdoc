<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHSwitchStatement" jls="java5">
<jent id="0" type="file" span="0:0:136:1">Source/jEdit/org/gjt/sp/jedit/bsh/BSHSwitchStatement.java</jent>
<jent id="1" pid="0" type="class" span="36:1:135:1">org.gjt.sp.jedit.bsh.BSHSwitchStatement</jent>
<jent id="2" pid="1" type="method" span="41:2:41:49">org.gjt.sp.jedit.bsh.BSHSwitchStatement.BSHSwitchStatement(int)</jent>
<jent id="3" pid="1" type="method" span="43:5:109:2">org.gjt.sp.jedit.bsh.BSHSwitchStatement.eval(CallStack,Interpreter)</jent>
<jent id="4" pid="1" type="method" span="115:2:134:2">org.gjt.sp.jedit.bsh.BSHSwitchStatement.primitiveEquals(Object,Object,CallStack,SimpleNode)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="36:7:36:25">BSHSwitchStatement</jtok>
<jtok eid="1" type="class_or_interface_ref" span="37:10:37:20">SimpleNode</jtok>
<jtok eid="1" type="class_or_interface_ref" span="38:13:38:28">ParserConstants</jtok>
<jtok eid="2" type="method_name" span="41:9:41:27">BSHSwitchStatement</jtok>
<jtok eid="2" type="parameter_name" span="41:32:41:34">id</jtok>
<jtok eid="2" type="primary_name_ref" span="41:44:41:46">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:12:43:18">Object</jtok>
<jtok eid="3" type="method_name" span="43:19:43:23">eval</jtok>
<jtok eid="3" type="parameter_type" span="43:25:43:34">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="43:35:43:44">callstack</jtok>
<jtok eid="3" type="parameter_type" span="43:46:43:57">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="43:58:43:69">interpreter</jtok>
<jtok eid="3" type="throws" span="44:10:44:19">EvalError</jtok>
<jtok eid="3" type="local_variable_name" span="46:7:46:15">numchild</jtok>
<jtok eid="3" type="method_call" span="46:18:46:35">jjtGetNumChildren</jtok>
<jtok eid="3" type="local_variable_name" span="47:7:47:12">child</jtok>
<jtok eid="3" type="class_or_interface_ref" span="48:3:48:13">SimpleNode</jtok>
<jtok eid="3" type="local_variable_name" span="48:14:48:23">switchExp</jtok>
<jtok eid="3" type="class_or_interface_ref" span="48:28:48:38">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="48:39:48:50">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="48:51:48:56">child</jtok>
<jtok eid="3" type="class_or_interface_ref" span="49:3:49:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="49:10:49:19">switchVal</jtok>
<jtok eid="3" type="primary_name_ref" span="49:22:49:31">switchExp</jtok>
<jtok eid="3" type="method_call" span="49:32:49:36">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="49:38:49:47">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="49:49:49:60">interpreter</jtok>
<jtok eid="3" type="block_comment" span="51:3:54:5">/*
			Note: this could be made clearer by adding an inner class for the
			cases and an object context for the child traversal.
		*/</jtok>
<jtok eid="3" type="line_comment" span="55:3:55:17">// first label</jtok>
<jtok eid="3" type="class_or_interface_ref" span="56:3:56:17">BSHSwitchLabel</jtok>
<jtok eid="3" type="local_variable_name" span="56:18:56:23">label</jtok>
<jtok eid="3" type="class_or_interface_ref" span="57:3:57:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="57:10:57:14">node</jtok>
<jtok eid="3" type="class_or_interface_ref" span="58:3:58:16">ReturnControl</jtok>
<jtok eid="3" type="local_variable_name" span="58:17:58:30">returnControl</jtok>
<jtok eid="3" type="line_comment" span="60:3:60:25">// get the first label</jtok>
<jtok eid="3" type="primary_name_ref" span="61:8:61:13">child</jtok>
<jtok eid="3" type="primary_name_ref" span="61:17:61:25">numchild</jtok>
<jtok eid="3" type="constructor_call" span="62:14:62:23">EvalError</jtok>
<jtok eid="3" type="string_literal" span="62:24:62:49">"Empty switch statement."</jtok>
<jtok eid="3" type="primary_name_ref" span="62:57:62:66">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="63:3:63:8">label</jtok>
<jtok eid="3" type="class_or_interface_ref" span="63:13:63:27">BSHSwitchLabel</jtok>
<jtok eid="3" type="method_call" span="63:28:63:39">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="63:40:63:45">child</jtok>
<jtok eid="3" type="line_comment" span="65:3:65:64">// while more labels or blocks and haven't hit return control</jtok>
<jtok eid="3" type="primary_name_ref" span="66:11:66:16">child</jtok>
<jtok eid="3" type="primary_name_ref" span="66:19:66:27">numchild</jtok>
<jtok eid="3" type="primary_name_ref" span="66:31:66:44">returnControl</jtok>
<jtok eid="3" type="line_comment" span="68:4:68:46">// if label is default or equals switchVal</jtok>
<jtok eid="3" type="primary_name_ref" span="69:9:69:14">label</jtok>
<jtok eid="3" type="qualified_name_ref" span="69:15:69:24">isDefault</jtok>
<jtok eid="3" type="method_call" span="70:8:70:23">primitiveEquals</jtok>
<jtok eid="3" type="primary_name_ref" span="71:6:71:15">switchVal</jtok>
<jtok eid="3" type="primary_name_ref" span="71:17:71:22">label</jtok>
<jtok eid="3" type="method_call" span="71:23:71:27">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="71:29:71:38">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="71:40:71:51">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="72:6:72:15">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="72:17:72:26">switchExp</jtok>
<jtok eid="3" type="line_comment" span="75:5:75:63">// execute nodes, skipping labels, until a break or return</jtok>
<jtok eid="3" type="primary_name_ref" span="76:13:76:18">child</jtok>
<jtok eid="3" type="primary_name_ref" span="76:21:76:29">numchild</jtok>
<jtok eid="3" type="primary_name_ref" span="78:6:78:10">node</jtok>
<jtok eid="3" type="method_call" span="78:13:78:24">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="78:25:78:30">child</jtok>
<jtok eid="3" type="primary_name_ref" span="79:11:79:15">node</jtok>
<jtok eid="3" type="class_or_interface_ref" span="79:27:79:41">BSHSwitchLabel</jtok>
<jtok eid="3" type="line_comment" span="81:6:81:16">// eval it</jtok>
<jtok eid="3" type="class_or_interface_ref" span="82:6:82:12">Object</jtok>
<jtok eid="3" type="local_variable_name" span="82:13:82:18">value</jtok>
<jtok eid="3" type="class_or_interface_ref" span="83:9:83:19">SimpleNode</jtok>
<jtok eid="3" type="primary_name_ref" span="83:20:83:24">node</jtok>
<jtok eid="3" type="method_call" span="83:26:83:30">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="83:32:83:41">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="83:43:83:54">interpreter</jtok>
<jtok eid="3" type="line_comment" span="85:6:85:48">// should check to disallow continue here?</jtok>
<jtok eid="3" type="primary_name_ref" span="86:11:86:16">value</jtok>
<jtok eid="3" type="class_or_interface_ref" span="86:28:86:41">ReturnControl</jtok>
<jtok eid="3" type="primary_name_ref" span="87:7:87:20">returnControl</jtok>
<jtok eid="3" type="class_or_interface_ref" span="87:24:87:37">ReturnControl</jtok>
<jtok eid="3" type="primary_name_ref" span="87:38:87:43">value</jtok>
<jtok eid="3" type="line_comment" span="93:5:93:35">// skip nodes until next label</jtok>
<jtok eid="3" type="primary_name_ref" span="94:13:94:18">child</jtok>
<jtok eid="3" type="primary_name_ref" span="94:21:94:29">numchild</jtok>
<jtok eid="3" type="primary_name_ref" span="96:6:96:10">node</jtok>
<jtok eid="3" type="method_call" span="96:13:96:24">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="96:25:96:30">child</jtok>
<jtok eid="3" type="primary_name_ref" span="97:11:97:15">node</jtok>
<jtok eid="3" type="class_or_interface_ref" span="97:27:97:41">BSHSwitchLabel</jtok>
<jtok eid="3" type="primary_name_ref" span="98:7:98:12">label</jtok>
<jtok eid="3" type="class_or_interface_ref" span="98:16:98:30">BSHSwitchLabel</jtok>
<jtok eid="3" type="primary_name_ref" span="98:31:98:35">node</jtok>
<jtok eid="3" type="primary_name_ref" span="105:8:105:21">returnControl</jtok>
<jtok eid="3" type="primary_name_ref" span="105:33:105:46">returnControl</jtok>
<jtok eid="3" type="qualified_name_ref" span="105:47:105:51">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="105:55:105:61">RETURN</jtok>
<jtok eid="3" type="primary_name_ref" span="106:11:106:24">returnControl</jtok>
<jtok eid="3" type="primary_name_ref" span="108:11:108:20">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="108:21:108:25">VOID</jtok>
<jtok eid="1" type="block_comment" span="111:2:114:4">/**
		Helper method for testing equals on two primitive or boxable objects.
		yuck: factor this out into Primitive.java
	*/</jtok>
<jtok eid="4" type="method_name" span="115:18:115:33">primitiveEquals</jtok>
<jtok eid="4" type="parameter_type" span="116:3:116:9">Object</jtok>
<jtok eid="4" type="parameter_name" span="116:10:116:19">switchVal</jtok>
<jtok eid="4" type="parameter_type" span="116:21:116:27">Object</jtok>
<jtok eid="4" type="parameter_name" span="116:28:116:37">targetVal</jtok>
<jtok eid="4" type="parameter_type" span="117:3:117:12">CallStack</jtok>
<jtok eid="4" type="parameter_name" span="117:13:117:22">callstack</jtok>
<jtok eid="4" type="parameter_type" span="117:24:117:34">SimpleNode</jtok>
<jtok eid="4" type="parameter_name" span="117:35:117:44">switchExp</jtok>
<jtok eid="4" type="throws" span="118:10:118:19">EvalError</jtok>
<jtok eid="4" type="primary_name_ref" span="120:8:120:17">switchVal</jtok>
<jtok eid="4" type="class_or_interface_ref" span="120:29:120:38">Primitive</jtok>
<jtok eid="4" type="primary_name_ref" span="120:42:120:51">targetVal</jtok>
<jtok eid="4" type="class_or_interface_ref" span="120:63:120:72">Primitive</jtok>
<jtok eid="4" type="line_comment" span="122:5:122:60">// binaryOperation can return Primitive or wrapper type</jtok>
<jtok eid="4" type="class_or_interface_ref" span="123:5:123:11">Object</jtok>
<jtok eid="4" type="local_variable_name" span="123:12:123:18">result</jtok>
<jtok eid="4" type="primary_name_ref" span="123:21:123:30">Primitive</jtok>
<jtok eid="4" type="method_call" span="123:31:123:46">binaryOperation</jtok>
<jtok eid="4" type="primary_name_ref" span="124:6:124:15">switchVal</jtok>
<jtok eid="4" type="primary_name_ref" span="124:17:124:26">targetVal</jtok>
<jtok eid="4" type="primary_name_ref" span="124:28:124:43">ParserConstants</jtok>
<jtok eid="4" type="qualified_name_ref" span="124:44:124:46">EQ</jtok>
<jtok eid="4" type="primary_name_ref" span="125:5:125:11">result</jtok>
<jtok eid="4" type="primary_name_ref" span="125:14:125:23">Primitive</jtok>
<jtok eid="4" type="method_call" span="125:24:125:30">unwrap</jtok>
<jtok eid="4" type="primary_name_ref" span="125:32:125:38">result</jtok>
<jtok eid="4" type="primary_name_ref" span="126:12:126:18">result</jtok>
<jtok eid="4" type="method_call" span="126:19:126:25">equals</jtok>
<jtok eid="4" type="primary_name_ref" span="126:27:126:34">Boolean</jtok>
<jtok eid="4" type="qualified_name_ref" span="126:35:126:39">TRUE</jtok>
<jtok eid="4" type="class_or_interface_ref" span="127:14:127:27">UtilEvalError</jtok>
<jtok eid="4" type="local_variable_name" span="127:28:127:29">e</jtok>
<jtok eid="4" type="primary_name_ref" span="128:11:128:12">e</jtok>
<jtok eid="4" type="method_call" span="128:13:128:24">toEvalError</jtok>
<jtok eid="4" type="string_literal" span="129:6:129:22">"Switch value: "</jtok>
<jtok eid="4" type="primary_name_ref" span="129:23:129:32">switchExp</jtok>
<jtok eid="4" type="method_call" span="129:33:129:40">getText</jtok>
<jtok eid="4" type="string_literal" span="129:43:129:47">": "</jtok>
<jtok eid="4" type="primary_name_ref" span="130:12:130:21">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="133:11:133:20">switchVal</jtok>
<jtok eid="4" type="method_call" span="133:21:133:27">equals</jtok>
<jtok eid="4" type="primary_name_ref" span="133:29:133:38">targetVal</jtok>
</jdoc>