<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHTryStatement" jls="java5">
<jent id="0" type="file" span="0:0:190:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHTryStatement.java</jent>
<jent id="1" pid="0" type="class" span="39:1:190:1">org.gjt.sp.jedit.bsh.BSHTryStatement</jent>
<jent id="2" pid="1" type="method" span="41:2:44:2">org.gjt.sp.jedit.bsh.BSHTryStatement.BSHTryStatement(int)</jent>
<jent id="3" pid="1" type="method" span="46:2:189:2">org.gjt.sp.jedit.bsh.BSHTryStatement.eval(CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="39:7:39:22">BSHTryStatement</jtok>
<jtok eid="1" type="class_or_interface_ref" span="39:31:39:41">SimpleNode</jtok>
<jtok eid="2" type="method_name" span="41:2:41:17">BSHTryStatement</jtok>
<jtok eid="2" type="parameter_name" span="41:22:41:24">id</jtok>
<jtok eid="2" type="primary_name_ref" span="43:9:43:11">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="46:9:46:15">Object</jtok>
<jtok eid="3" type="method_name" span="46:16:46:20">eval</jtok>
<jtok eid="3" type="parameter_type" span="46:22:46:31">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="46:32:46:41">callstack</jtok>
<jtok eid="3" type="parameter_type" span="46:43:46:54">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="46:55:46:66">interpreter</jtok>
<jtok eid="3" type="throws" span="47:10:47:19">EvalError</jtok>
<jtok eid="3" type="class_or_interface_ref" span="49:3:49:11">BSHBlock</jtok>
<jtok eid="3" type="local_variable_name" span="49:12:49:20">tryBlock</jtok>
<jtok eid="3" type="class_or_interface_ref" span="49:25:49:33">BSHBlock</jtok>
<jtok eid="3" type="method_call" span="49:34:49:45">jjtGetChild</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:3:51:9">Vector</jtok>
<jtok eid="3" type="local_variable_name" span="51:10:51:21">catchParams</jtok>
<jtok eid="3" type="constructor_call" span="51:28:51:34">Vector</jtok>
<jtok eid="3" type="class_or_interface_ref" span="52:3:52:9">Vector</jtok>
<jtok eid="3" type="local_variable_name" span="52:10:52:21">catchBlocks</jtok>
<jtok eid="3" type="constructor_call" span="52:28:52:34">Vector</jtok>
<jtok eid="3" type="local_variable_name" span="54:7:54:13">nchild</jtok>
<jtok eid="3" type="method_call" span="54:16:54:33">jjtGetNumChildren</jtok>
<jtok eid="3" type="class_or_interface_ref" span="55:3:55:7">Node</jtok>
<jtok eid="3" type="local_variable_name" span="55:8:55:12">node</jtok>
<jtok eid="3" type="local_variable_name" span="56:7:56:8">i</jtok>
<jtok eid="3" type="primary_name_ref" span="57:10:57:11">i</jtok>
<jtok eid="3" type="primary_name_ref" span="57:14:57:20">nchild</jtok>
<jtok eid="3" type="primary_name_ref" span="57:27:57:31">node</jtok>
<jtok eid="3" type="method_call" span="57:34:57:45">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="57:46:57:47">i</jtok>
<jtok eid="3" type="class_or_interface_ref" span="57:63:57:81">BSHFormalParameter</jtok>
<jtok eid="3" type="primary_name_ref" span="59:4:59:15">catchParams</jtok>
<jtok eid="3" type="method_call" span="59:16:59:26">addElement</jtok>
<jtok eid="3" type="primary_name_ref" span="59:27:59:31">node</jtok>
<jtok eid="3" type="primary_name_ref" span="60:4:60:15">catchBlocks</jtok>
<jtok eid="3" type="method_call" span="60:16:60:26">addElement</jtok>
<jtok eid="3" type="method_call" span="60:27:60:38">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="60:39:60:40">i</jtok>
<jtok eid="3" type="primary_name_ref" span="61:4:61:8">node</jtok>
<jtok eid="3" type="line_comment" span="63:3:63:18">// finaly block</jtok>
<jtok eid="3" type="class_or_interface_ref" span="64:3:64:11">BSHBlock</jtok>
<jtok eid="3" type="local_variable_name" span="64:12:64:24">finallyBlock</jtok>
<jtok eid="3" type="primary_name_ref" span="65:6:65:10">node</jtok>
<jtok eid="3" type="primary_name_ref" span="66:4:66:16">finallyBlock</jtok>
<jtok eid="3" type="class_or_interface_ref" span="66:20:66:28">BSHBlock</jtok>
<jtok eid="3" type="primary_name_ref" span="66:29:66:33">node</jtok>
<jtok eid="3" type="line_comment" span="68:1:68:22">// Why both of these?</jtok>
<jtok eid="3" type="class_or_interface_ref" span="70:3:70:14">TargetError</jtok>
<jtok eid="3" type="local_variable_name" span="70:15:70:21">target</jtok>
<jtok eid="3" type="class_or_interface_ref" span="71:3:71:12">Throwable</jtok>
<jtok eid="3" type="local_variable_name" span="71:13:71:19">thrown</jtok>
<jtok eid="3" type="class_or_interface_ref" span="72:3:72:9">Object</jtok>
<jtok eid="3" type="local_variable_name" span="72:10:72:13">ret</jtok>
<jtok eid="3" type="block_comment" span="74:3:83:5">/*
			Evaluate the contents of the try { } block and catch any resulting
			TargetErrors generated by the script.
			We save the callstack depth and if an exception is thrown we pop
			back to that depth before contiuing.  The exception short circuited
			any intervening method context pops.

			Note: we the stack info... what do we do with it?  append
			to exception message?
		*/</jtok>
<jtok eid="3" type="local_variable_name" span="84:7:84:21">callstackDepth</jtok>
<jtok eid="3" type="primary_name_ref" span="84:24:84:33">callstack</jtok>
<jtok eid="3" type="method_call" span="84:34:84:39">depth</jtok>
<jtok eid="3" type="primary_name_ref" span="86:4:86:7">ret</jtok>
<jtok eid="3" type="primary_name_ref" span="86:10:86:18">tryBlock</jtok>
<jtok eid="3" type="method_call" span="86:19:86:23">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="86:24:86:33">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="86:35:86:46">interpreter</jtok>
<jtok eid="3" type="class_or_interface_ref" span="88:10:88:21">TargetError</jtok>
<jtok eid="3" type="local_variable_name" span="88:22:88:23">e</jtok>
<jtok eid="3" type="primary_name_ref" span="89:4:89:10">target</jtok>
<jtok eid="3" type="primary_name_ref" span="89:13:89:14">e</jtok>
<jtok eid="3" type="class_or_interface_ref" span="90:4:90:10">String</jtok>
<jtok eid="3" type="local_variable_name" span="90:11:90:20">stackInfo</jtok>
<jtok eid="3" type="string_literal" span="90:23:90:36">"Bsh Stack: "</jtok>
<jtok eid="3" type="primary_name_ref" span="91:12:91:21">callstack</jtok>
<jtok eid="3" type="method_call" span="91:22:91:27">depth</jtok>
<jtok eid="3" type="primary_name_ref" span="91:32:91:46">callstackDepth</jtok>
<jtok eid="3" type="primary_name_ref" span="92:5:92:14">stackInfo</jtok>
<jtok eid="3" type="string_literal" span="92:18:92:22">"\t"</jtok>
<jtok eid="3" type="primary_name_ref" span="92:25:92:34">callstack</jtok>
<jtok eid="3" type="method_call" span="92:35:92:38">pop</jtok>
<jtok eid="3" type="string_literal" span="92:42:92:46">"\n"</jtok>
<jtok eid="3" type="line_comment" span="95:3:95:29">// unwrap the target error</jtok>
<jtok eid="3" type="primary_name_ref" span="96:8:96:14">target</jtok>
<jtok eid="3" type="primary_name_ref" span="97:4:97:10">thrown</jtok>
<jtok eid="3" type="primary_name_ref" span="97:13:97:19">target</jtok>
<jtok eid="3" type="method_call" span="97:20:97:29">getTarget</jtok>
<jtok eid="3" type="line_comment" span="100:3:100:43">// If we have an exception, find a catch</jtok>
<jtok eid="3" type="primary_name_ref" span="101:7:101:13">thrown</jtok>
<jtok eid="3" type="local_variable_name" span="103:8:103:9">n</jtok>
<jtok eid="3" type="primary_name_ref" span="103:12:103:23">catchParams</jtok>
<jtok eid="3" type="method_call" span="103:24:103:28">size</jtok>
<jtok eid="3" type="primary_name_ref" span="104:8:104:9">i</jtok>
<jtok eid="3" type="primary_name_ref" span="104:13:104:14">i</jtok>
<jtok eid="3" type="primary_name_ref" span="104:15:104:16">n</jtok>
<jtok eid="3" type="primary_name_ref" span="104:18:104:19">i</jtok>
<jtok eid="3" type="line_comment" span="106:5:106:23">// Get catch block</jtok>
<jtok eid="3" type="class_or_interface_ref" span="107:5:107:23">BSHFormalParameter</jtok>
<jtok eid="3" type="local_variable_name" span="107:24:107:26">fp</jtok>
<jtok eid="3" type="class_or_interface_ref" span="108:7:108:25">BSHFormalParameter</jtok>
<jtok eid="3" type="primary_name_ref" span="108:26:108:37">catchParams</jtok>
<jtok eid="3" type="method_call" span="108:38:108:47">elementAt</jtok>
<jtok eid="3" type="primary_name_ref" span="108:48:108:49">i</jtok>
<jtok eid="3" type="line_comment" span="110:5:110:63">// Should cache this subject to classloader change message</jtok>
<jtok eid="3" type="line_comment" span="111:5:111:62">// Evaluation of the formal parameter simply resolves its</jtok>
<jtok eid="3" type="line_comment" span="112:5:112:64">// type via the specified namespace.. it doesn't modify the</jtok>
<jtok eid="3" type="line_comment" span="113:5:113:18">// namespace.</jtok>
<jtok eid="3" type="primary_name_ref" span="114:5:114:7">fp</jtok>
<jtok eid="3" type="method_call" span="114:8:114:12">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="114:14:114:23">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="114:25:114:36">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="116:10:116:12">fp</jtok>
<jtok eid="3" type="qualified_name_ref" span="116:13:116:17">type</jtok>
<jtok eid="3" type="primary_name_ref" span="116:29:116:40">interpreter</jtok>
<jtok eid="3" type="method_call" span="116:41:116:54">getStrictJava</jtok>
<jtok eid="3" type="constructor_call" span="117:16:117:25">EvalError</jtok>
<jtok eid="3" type="string_literal" span="118:7:118:42">"(Strict Java) Untyped catch block"</jtok>
<jtok eid="3" type="primary_name_ref" span="118:50:118:59">callstack</jtok>
<jtok eid="3" type="line_comment" span="120:5:120:49">// If the param is typed check assignability</jtok>
<jtok eid="3" type="primary_name_ref" span="121:10:121:12">fp</jtok>
<jtok eid="3" type="qualified_name_ref" span="121:13:121:17">type</jtok>
<jtok eid="3" type="primary_name_ref" span="123:7:123:13">thrown</jtok>
<jtok eid="3" type="class_or_interface_ref" span="123:17:123:26">Throwable</jtok>
<jtok eid="3" type="primary_name_ref" span="123:27:123:32">Types</jtok>
<jtok eid="3" type="method_call" span="123:33:123:43">castObject</jtok>
<jtok eid="3" type="primary_name_ref" span="124:8:124:14">thrown</jtok>
<jtok eid="3" type="block_comment" span="124:14:124:21">/*rsh*/</jtok>
<jtok eid="3" type="primary_name_ref" span="124:23:124:25">fp</jtok>
<jtok eid="3" type="qualified_name_ref" span="124:26:124:30">type</jtok>
<jtok eid="3" type="block_comment" span="124:30:124:41">/*lhsType*/</jtok>
<jtok eid="3" type="primary_name_ref" span="124:43:124:48">Types</jtok>
<jtok eid="3" type="qualified_name_ref" span="124:49:124:59">ASSIGNMENT</jtok>
<jtok eid="3" type="class_or_interface_ref" span="125:15:125:28">UtilEvalError</jtok>
<jtok eid="3" type="local_variable_name" span="125:29:125:30">e</jtok>
<jtok eid="3" type="block_comment" span="126:7:132:9">/*
							Catch the mismatch and continue to try the next
							Note: this is innefficient, should have an
							isAssignableFrom() that doesn't throw
							// TODO: we do now have a way to test assignment
							// 	in castObject(), use it?
						*/</jtok>
<jtok eid="3" type="line_comment" span="136:5:136:40">// Found match, execute catch block</jtok>
<jtok eid="3" type="class_or_interface_ref" span="137:5:137:13">BSHBlock</jtok>
<jtok eid="3" type="local_variable_name" span="137:14:137:16">cb</jtok>
<jtok eid="3" type="class_or_interface_ref" span="137:20:137:28">BSHBlock</jtok>
<jtok eid="3" type="primary_name_ref" span="137:30:137:41">catchBlocks</jtok>
<jtok eid="3" type="method_call" span="137:42:137:51">elementAt</jtok>
<jtok eid="3" type="primary_name_ref" span="137:52:137:53">i</jtok>
<jtok eid="3" type="line_comment" span="139:5:139:37">// Prepare to execute the block.</jtok>
<jtok eid="3" type="line_comment" span="140:5:140:61">// We must create a new BlockNameSpace to hold the catch</jtok>
<jtok eid="3" type="line_comment" span="141:5:141:65">// parameter and swap it on the stack after initializing it.</jtok>
<jtok eid="3" type="class_or_interface_ref" span="143:5:143:14">NameSpace</jtok>
<jtok eid="3" type="local_variable_name" span="143:15:143:33">enclosingNameSpace</jtok>
<jtok eid="3" type="primary_name_ref" span="143:36:143:45">callstack</jtok>
<jtok eid="3" type="method_call" span="143:46:143:49">top</jtok>
<jtok eid="3" type="class_or_interface_ref" span="144:5:144:19">BlockNameSpace</jtok>
<jtok eid="3" type="local_variable_name" span="144:20:144:31">cbNameSpace</jtok>
<jtok eid="3" type="constructor_call" span="145:10:145:24">BlockNameSpace</jtok>
<jtok eid="3" type="primary_name_ref" span="145:26:145:44">enclosingNameSpace</jtok>
<jtok eid="3" type="primary_name_ref" span="148:11:148:13">fp</jtok>
<jtok eid="3" type="qualified_name_ref" span="148:14:148:18">type</jtok>
<jtok eid="3" type="primary_name_ref" span="148:22:148:40">BSHFormalParameter</jtok>
<jtok eid="3" type="qualified_name_ref" span="148:41:148:48">UNTYPED</jtok>
<jtok eid="3" type="line_comment" span="149:7:149:55">// set an untyped variable directly in the block</jtok>
<jtok eid="3" type="primary_name_ref" span="150:7:150:18">cbNameSpace</jtok>
<jtok eid="3" type="method_call" span="150:19:150:35">setBlockVariable</jtok>
<jtok eid="3" type="primary_name_ref" span="150:37:150:39">fp</jtok>
<jtok eid="3" type="qualified_name_ref" span="150:40:150:44">name</jtok>
<jtok eid="3" type="primary_name_ref" span="150:46:150:52">thrown</jtok>
<jtok eid="3" type="line_comment" span="153:7:153:54">// set a typed variable (directly in the block)</jtok>
<jtok eid="3" type="class_or_interface_ref" span="154:7:154:16">Modifiers</jtok>
<jtok eid="3" type="local_variable_name" span="154:17:154:26">modifiers</jtok>
<jtok eid="3" type="constructor_call" span="154:33:154:42">Modifiers</jtok>
<jtok eid="3" type="primary_name_ref" span="155:7:155:18">cbNameSpace</jtok>
<jtok eid="3" type="method_call" span="155:19:155:35">setTypedVariable</jtok>
<jtok eid="3" type="primary_name_ref" span="156:8:156:10">fp</jtok>
<jtok eid="3" type="qualified_name_ref" span="156:11:156:15">name</jtok>
<jtok eid="3" type="primary_name_ref" span="156:17:156:19">fp</jtok>
<jtok eid="3" type="qualified_name_ref" span="156:20:156:24">type</jtok>
<jtok eid="3" type="primary_name_ref" span="156:26:156:32">thrown</jtok>
<jtok eid="3" type="constructor_call" span="156:38:156:47">Modifiers</jtok>
<jtok eid="3" type="block_comment" span="156:49:156:57">/*none*/</jtok>
<jtok eid="3" type="class_or_interface_ref" span="158:15:158:28">UtilEvalError</jtok>
<jtok eid="3" type="local_variable_name" span="158:29:158:30">e</jtok>
<jtok eid="3" type="constructor_call" span="159:16:159:32">InterpreterError</jtok>
<jtok eid="3" type="string_literal" span="160:7:160:52">"Unable to set var in catch block namespace."</jtok>
<jtok eid="3" type="line_comment" span="163:5:163:47">// put cbNameSpace on the top of the stack</jtok>
<jtok eid="3" type="primary_name_ref" span="164:5:164:14">callstack</jtok>
<jtok eid="3" type="method_call" span="164:15:164:19">swap</jtok>
<jtok eid="3" type="primary_name_ref" span="164:21:164:32">cbNameSpace</jtok>
<jtok eid="3" type="primary_name_ref" span="166:6:166:9">ret</jtok>
<jtok eid="3" type="primary_name_ref" span="166:12:166:14">cb</jtok>
<jtok eid="3" type="method_call" span="166:15:166:19">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="166:21:166:30">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="166:32:166:43">interpreter</jtok>
<jtok eid="3" type="line_comment" span="168:6:168:20">// put it back</jtok>
<jtok eid="3" type="primary_name_ref" span="169:6:169:15">callstack</jtok>
<jtok eid="3" type="method_call" span="169:16:169:20">swap</jtok>
<jtok eid="3" type="primary_name_ref" span="169:22:169:40">enclosingNameSpace</jtok>
<jtok eid="3" type="primary_name_ref" span="172:5:172:11">target</jtok>
<jtok eid="3" type="line_comment" span="172:21:172:38">// handled target</jtok>
<jtok eid="3" type="line_comment" span="177:3:177:28">// evaluate finally block</jtok>
<jtok eid="3" type="primary_name_ref" span="178:6:178:18">finallyBlock</jtok>
<jtok eid="3" type="primary_name_ref" span="179:4:179:7">ret</jtok>
<jtok eid="3" type="primary_name_ref" span="179:10:179:22">finallyBlock</jtok>
<jtok eid="3" type="method_call" span="179:23:179:27">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="179:28:179:37">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="179:39:179:50">interpreter</jtok>
<jtok eid="3" type="line_comment" span="181:3:181:48">// exception fell through, throw it upward...</jtok>
<jtok eid="3" type="primary_name_ref" span="182:6:182:12">target</jtok>
<jtok eid="3" type="primary_name_ref" span="183:10:183:16">target</jtok>
<jtok eid="3" type="primary_name_ref" span="185:6:185:9">ret</jtok>
<jtok eid="3" type="class_or_interface_ref" span="185:21:185:34">ReturnControl</jtok>
<jtok eid="3" type="primary_name_ref" span="186:11:186:14">ret</jtok>
<jtok eid="3" type="primary_name_ref" span="188:11:188:20">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="188:21:188:25">VOID</jtok>
</jdoc>