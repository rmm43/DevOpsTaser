<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHType" jls="java5">
<jent id="0" type="file" span="0:0:218:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHType.java</jent>
<jent id="1" pid="0" type="class" span="39:1:218:1">org.gjt.sp.jedit.bsh.BSHType</jent>
<jent id="2" pid="1" type="method" span="61:5:63:2">org.gjt.sp.jedit.bsh.BSHType.BSHType(int)</jent>
<jent id="3" pid="1" type="method" span="69:5:71:2">org.gjt.sp.jedit.bsh.BSHType.addArrayDimension()</jent>
<jent id="4" pid="1" type="method" span="73:2:75:2">org.gjt.sp.jedit.bsh.BSHType.getTypeNode()</jent>
<jent id="5" pid="1" type="method" span="84:5:140:5">org.gjt.sp.jedit.bsh.BSHType.getTypeDescriptor(CallStack,Interpreter,String)</jent>
<jent id="6" pid="1" type="method" span="142:5:176:5">org.gjt.sp.jedit.bsh.BSHType.getType(CallStack,Interpreter)</jent>
<jent id="7" pid="1" type="method" span="183:2:185:2">org.gjt.sp.jedit.bsh.BSHType.getBaseType()</jent>
<jent id="8" pid="1" type="method" span="190:2:192:2">org.gjt.sp.jedit.bsh.BSHType.getArrayDims()</jent>
<jent id="9" pid="1" type="method" span="194:2:197:2">org.gjt.sp.jedit.bsh.BSHType.classLoaderChanged()</jent>
<jent id="10" pid="1" type="method" span="199:2:217:2">org.gjt.sp.jedit.bsh.BSHType.getTypeDescriptor(Class)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="39:7:39:14">BSHType</jtok>
<jtok eid="1" type="class_or_interface_ref" span="39:23:39:33">SimpleNode</jtok>
<jtok eid="1" type="class_or_interface_ref" span="40:13:40:28">BshClassManager</jtok>
<jtok eid="1" type="class_or_interface_ref" span="40:29:40:37">Listener</jtok>
<jtok eid="1" type="block_comment" span="42:2:46:4">/**
		baseType is used during evaluation of full type and retained for the
		case where we are an array type.
		In the case where we are not an array this will be the same as type.
	*/</jtok>
<jtok eid="1" type="class_or_interface_ref" span="47:10:47:15">Class</jtok>
<jtok eid="1" type="field_name" span="47:16:47:24">baseType</jtok>
<jtok eid="1" type="block_comment" span="48:2:51:4">/** 
		If we are an array type this will be non zero and indicate the 
		dimensionality of the array.  e.g. 2 for String[][];
	*/</jtok>
<jtok eid="1" type="field_name" span="52:17:52:26">arrayDims</jtok>
<jtok eid="1" type="block_comment" span="54:2:56:4">/** 
		Internal cache of the type.  Cleared on classloader change.
	*/</jtok>
<jtok eid="1" type="class_or_interface_ref" span="57:13:57:18">Class</jtok>
<jtok eid="1" type="field_name" span="57:19:57:23">type</jtok>
<jtok eid="1" type="class_or_interface_ref" span="59:2:59:8">String</jtok>
<jtok eid="1" type="field_name" span="59:9:59:19">descriptor</jtok>
<jtok eid="2" type="method_name" span="61:5:61:12">BSHType</jtok>
<jtok eid="2" type="parameter_name" span="61:17:61:19">id</jtok>
<jtok eid="2" type="primary_name_ref" span="62:9:62:11">id</jtok>
<jtok eid="1" type="block_comment" span="65:2:68:4">/**
		Used by the grammar to indicate dimensions of array types 
		during parsing.
	*/</jtok>
<jtok eid="3" type="method_name" span="69:17:69:34">addArrayDimension</jtok>
<jtok eid="3" type="primary_name_ref" span="70:3:70:12">arrayDims</jtok>
<jtok eid="4" type="class_or_interface_ref" span="73:2:73:12">SimpleNode</jtok>
<jtok eid="4" type="method_name" span="73:13:73:24">getTypeNode</jtok>
<jtok eid="4" type="class_or_interface_ref" span="74:17:74:27">SimpleNode</jtok>
<jtok eid="4" type="method_call" span="74:28:74:39">jjtGetChild</jtok>
<jtok eid="1" type="block_comment" span="77:5:83:4">/**
		 Returns a class descriptor for this type.
		 If the type is an ambiguous name (object type) evaluation is 
		 attempted through the namespace in order to resolve imports.
		 If it is not found and the name is non-compound we assume the default
		 package for the name.
	*/</jtok>
<jtok eid="5" type="class_or_interface_ref" span="84:12:84:18">String</jtok>
<jtok eid="5" type="method_name" span="84:19:84:36">getTypeDescriptor</jtok>
<jtok eid="5" type="parameter_type" span="85:3:85:12">CallStack</jtok>
<jtok eid="5" type="parameter_name" span="85:13:85:22">callstack</jtok>
<jtok eid="5" type="parameter_type" span="85:24:85:35">Interpreter</jtok>
<jtok eid="5" type="parameter_name" span="85:36:85:47">interpreter</jtok>
<jtok eid="5" type="parameter_type" span="85:49:85:55">String</jtok>
<jtok eid="5" type="parameter_name" span="85:56:85:70">defaultPackage</jtok>
<jtok eid="5" type="line_comment" span="87:9:87:43">// return cached type if available</jtok>
<jtok eid="5" type="primary_name_ref" span="88:8:88:18">descriptor</jtok>
<jtok eid="5" type="primary_name_ref" span="89:11:89:21">descriptor</jtok>
<jtok eid="5" type="class_or_interface_ref" span="91:3:91:9">String</jtok>
<jtok eid="5" type="local_variable_name" span="91:10:91:20">descriptor</jtok>
<jtok eid="5" type="line_comment" span="92:9:92:69">//  first node will either be PrimitiveType or AmbiguousName</jtok>
<jtok eid="5" type="class_or_interface_ref" span="93:9:93:19">SimpleNode</jtok>
<jtok eid="5" type="local_variable_name" span="93:20:93:24">node</jtok>
<jtok eid="5" type="method_call" span="93:27:93:38">getTypeNode</jtok>
<jtok eid="5" type="primary_name_ref" span="94:14:94:18">node</jtok>
<jtok eid="5" type="class_or_interface_ref" span="94:30:94:46">BSHPrimitiveType</jtok>
<jtok eid="5" type="primary_name_ref" span="95:13:95:23">descriptor</jtok>
<jtok eid="5" type="method_call" span="95:26:95:43">getTypeDescriptor</jtok>
<jtok eid="5" type="class_or_interface_ref" span="95:47:95:63">BSHPrimitiveType</jtok>
<jtok eid="5" type="primary_name_ref" span="95:64:95:68">node</jtok>
<jtok eid="5" type="qualified_name_ref" span="95:70:95:74">type</jtok>
<jtok eid="5" type="class_or_interface_ref" span="98:13:98:19">String</jtok>
<jtok eid="5" type="local_variable_name" span="98:20:98:28">clasName</jtok>
<jtok eid="5" type="class_or_interface_ref" span="98:33:98:49">BSHAmbiguousName</jtok>
<jtok eid="5" type="primary_name_ref" span="98:50:98:54">node</jtok>
<jtok eid="5" type="qualified_name_ref" span="98:56:98:60">text</jtok>
<jtok eid="5" type="class_or_interface_ref" span="99:4:99:19">BshClassManager</jtok>
<jtok eid="5" type="local_variable_name" span="99:20:99:23">bcm</jtok>
<jtok eid="5" type="primary_name_ref" span="99:26:99:37">interpreter</jtok>
<jtok eid="5" type="method_call" span="99:38:99:53">getClassManager</jtok>
<jtok eid="5" type="line_comment" span="100:4:100:64">// Note: incorrect here - we are using the hack in bsh class</jtok>
<jtok eid="5" type="line_comment" span="101:4:101:69">// manager that allows lookup by base name.  We need to eliminate</jtok>
<jtok eid="5" type="line_comment" span="102:4:102:70">// this limitation by working through imports.  See notes in class</jtok>
<jtok eid="5" type="line_comment" span="103:4:103:15">// manager.</jtok>
<jtok eid="5" type="class_or_interface_ref" span="104:4:104:10">String</jtok>
<jtok eid="5" type="local_variable_name" span="104:11:104:24">definingClass</jtok>
<jtok eid="5" type="primary_name_ref" span="104:27:104:30">bcm</jtok>
<jtok eid="5" type="method_call" span="104:31:104:51">getClassBeingDefined</jtok>
<jtok eid="5" type="primary_name_ref" span="104:53:104:61">clasName</jtok>
<jtok eid="5" type="class_or_interface_ref" span="106:13:106:18">Class</jtok>
<jtok eid="5" type="local_variable_name" span="106:19:106:23">clas</jtok>
<jtok eid="5" type="primary_name_ref" span="107:9:107:22">definingClass</jtok>
<jtok eid="5" type="primary_name_ref" span="110:6:110:10">clas</jtok>
<jtok eid="5" type="class_or_interface_ref" span="110:15:110:31">BSHAmbiguousName</jtok>
<jtok eid="5" type="primary_name_ref" span="110:32:110:36">node</jtok>
<jtok eid="5" type="method_call" span="110:38:110:45">toClass</jtok>
<jtok eid="5" type="primary_name_ref" span="111:7:111:16">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="111:18:111:29">interpreter</jtok>
<jtok eid="5" type="class_or_interface_ref" span="112:15:112:24">EvalError</jtok>
<jtok eid="5" type="local_variable_name" span="112:25:112:26">e</jtok>
<jtok eid="5" type="line_comment" span="113:6:113:65">//throw new InterpreterError("unable to resolve type: "+e);</jtok>
<jtok eid="5" type="line_comment" span="114:6:114:39">// ignore and try default package</jtok>
<jtok eid="5" type="line_comment" span="115:6:115:64">//System.out.println("BSHType: "+node+" class not found");</jtok>
<jtok eid="5" type="primary_name_ref" span="118:5:118:13">clasName</jtok>
<jtok eid="5" type="primary_name_ref" span="118:16:118:29">definingClass</jtok>
<jtok eid="5" type="primary_name_ref" span="120:9:120:13">clas</jtok>
<jtok eid="5" type="line_comment" span="122:5:122:47">//System.out.println("found clas: "+clas);</jtok>
<jtok eid="5" type="primary_name_ref" span="123:14:123:24">descriptor</jtok>
<jtok eid="5" type="method_call" span="123:27:123:44">getTypeDescriptor</jtok>
<jtok eid="5" type="primary_name_ref" span="123:46:123:50">clas</jtok>
<jtok eid="5" type="primary_name_ref" span="126:10:126:24">defaultPackage</jtok>
<jtok eid="5" type="primary_name_ref" span="126:36:126:40">Name</jtok>
<jtok eid="5" type="method_call" span="126:41:126:51">isCompound</jtok>
<jtok eid="5" type="primary_name_ref" span="126:53:126:61">clasName</jtok>
<jtok eid="5" type="primary_name_ref" span="127:15:127:25">descriptor</jtok>
<jtok eid="5" type="string_literal" span="127:28:127:31">"L"</jtok>
<jtok eid="5" type="primary_name_ref" span="127:34:127:42">clasName</jtok>
<jtok eid="5" type="method_call" span="127:43:127:50">replace</jtok>
<jtok eid="5" type="string_literal" span="127:62:127:65">";"</jtok>
<jtok eid="5" type="primary_name_ref" span="129:15:129:25">descriptor</jtok>
<jtok eid="5" type="string_literal" span="130:7:130:10">"L"</jtok>
<jtok eid="5" type="primary_name_ref" span="130:11:130:25">defaultPackage</jtok>
<jtok eid="5" type="method_call" span="130:26:130:33">replace</jtok>
<jtok eid="5" type="string_literal" span="130:43:130:46">"/"</jtok>
<jtok eid="5" type="primary_name_ref" span="130:47:130:55">clasName</jtok>
<jtok eid="5" type="string_literal" span="130:58:130:61">";"</jtok>
<jtok eid="5" type="local_variable_name" span="134:11:134:12">i</jtok>
<jtok eid="5" type="primary_name_ref" span="134:16:134:17">i</jtok>
<jtok eid="5" type="primary_name_ref" span="134:18:134:27">arrayDims</jtok>
<jtok eid="5" type="primary_name_ref" span="134:29:134:30">i</jtok>
<jtok eid="5" type="primary_name_ref" span="135:4:135:14">descriptor</jtok>
<jtok eid="5" type="string_literal" span="135:17:135:20">"["</jtok>
<jtok eid="5" type="primary_name_ref" span="135:21:135:31">descriptor</jtok>
<jtok eid="5" type="qualified_name_ref" span="137:8:137:18">descriptor</jtok>
<jtok eid="5" type="primary_name_ref" span="137:21:137:31">descriptor</jtok>
<jtok eid="5" type="line_comment" span="138:2:138:69">//System.out.println("BSHType: returning descriptor: "+descriptor);</jtok>
<jtok eid="5" type="primary_name_ref" span="139:16:139:26">descriptor</jtok>
<jtok eid="6" type="class_or_interface_ref" span="142:12:142:17">Class</jtok>
<jtok eid="6" type="method_name" span="142:18:142:25">getType</jtok>
<jtok eid="6" type="parameter_type" span="142:27:142:36">CallStack</jtok>
<jtok eid="6" type="parameter_name" span="142:37:142:46">callstack</jtok>
<jtok eid="6" type="parameter_type" span="142:48:142:59">Interpreter</jtok>
<jtok eid="6" type="parameter_name" span="142:60:142:71">interpreter</jtok>
<jtok eid="6" type="throws" span="143:10:143:19">EvalError</jtok>
<jtok eid="6" type="line_comment" span="145:9:145:43">// return cached type if available</jtok>
<jtok eid="6" type="primary_name_ref" span="146:8:146:12">type</jtok>
<jtok eid="6" type="primary_name_ref" span="147:11:147:15">type</jtok>
<jtok eid="6" type="line_comment" span="149:9:149:69">//  first node will either be PrimitiveType or AmbiguousName</jtok>
<jtok eid="6" type="class_or_interface_ref" span="150:9:150:19">SimpleNode</jtok>
<jtok eid="6" type="local_variable_name" span="150:20:150:24">node</jtok>
<jtok eid="6" type="method_call" span="150:27:150:38">getTypeNode</jtok>
<jtok eid="6" type="primary_name_ref" span="151:14:151:18">node</jtok>
<jtok eid="6" type="class_or_interface_ref" span="151:30:151:46">BSHPrimitiveType</jtok>
<jtok eid="6" type="primary_name_ref" span="152:13:152:21">baseType</jtok>
<jtok eid="6" type="class_or_interface_ref" span="152:26:152:42">BSHPrimitiveType</jtok>
<jtok eid="6" type="primary_name_ref" span="152:43:152:47">node</jtok>
<jtok eid="6" type="method_call" span="152:49:152:56">getType</jtok>
<jtok eid="6" type="primary_name_ref" span="154:13:154:21">baseType</jtok>
<jtok eid="6" type="class_or_interface_ref" span="154:26:154:42">BSHAmbiguousName</jtok>
<jtok eid="6" type="primary_name_ref" span="154:43:154:47">node</jtok>
<jtok eid="6" type="method_call" span="154:49:154:56">toClass</jtok>
<jtok eid="6" type="primary_name_ref" span="155:5:155:14">callstack</jtok>
<jtok eid="6" type="primary_name_ref" span="155:16:155:27">interpreter</jtok>
<jtok eid="6" type="primary_name_ref" span="157:14:157:23">arrayDims</jtok>
<jtok eid="6" type="line_comment" span="159:17:159:71">// Get the type by constructing a prototype array with</jtok>
<jtok eid="6" type="line_comment" span="160:5:160:50">// arbitrary (zero) length in each dimension.</jtok>
<jtok eid="6" type="local_variable_name" span="161:23:161:27">dims</jtok>
<jtok eid="6" type="primary_name_ref" span="161:38:161:47">arrayDims</jtok>
<jtok eid="6" type="line_comment" span="161:50:161:76">// int array default zeros</jtok>
<jtok eid="6" type="class_or_interface_ref" span="162:17:162:23">Object</jtok>
<jtok eid="6" type="local_variable_name" span="162:24:162:27">obj</jtok>
<jtok eid="6" type="primary_name_ref" span="162:30:162:35">Array</jtok>
<jtok eid="6" type="method_call" span="162:36:162:47">newInstance</jtok>
<jtok eid="6" type="primary_name_ref" span="162:48:162:56">baseType</jtok>
<jtok eid="6" type="primary_name_ref" span="162:58:162:62">dims</jtok>
<jtok eid="6" type="primary_name_ref" span="163:17:163:21">type</jtok>
<jtok eid="6" type="primary_name_ref" span="163:24:163:27">obj</jtok>
<jtok eid="6" type="method_call" span="163:28:163:36">getClass</jtok>
<jtok eid="6" type="class_or_interface_ref" span="164:21:164:30">Exception</jtok>
<jtok eid="6" type="local_variable_name" span="164:31:164:32">e</jtok>
<jtok eid="6" type="constructor_call" span="165:27:165:36">EvalError</jtok>
<jtok eid="6" type="string_literal" span="165:37:165:68">"Couldn't construct array type"</jtok>
<jtok eid="6" type="primary_name_ref" span="166:12:166:21">callstack</jtok>
<jtok eid="6" type="primary_name_ref" span="169:13:169:17">type</jtok>
<jtok eid="6" type="primary_name_ref" span="169:20:169:28">baseType</jtok>
<jtok eid="6" type="line_comment" span="171:3:171:62">// hack... sticking to first interpreter that resolves this</jtok>
<jtok eid="6" type="line_comment" span="172:3:172:44">// see comments on type instance variable</jtok>
<jtok eid="6" type="primary_name_ref" span="173:3:173:14">interpreter</jtok>
<jtok eid="6" type="method_call" span="173:15:173:30">getClassManager</jtok>
<jtok eid="6" type="method_call" span="173:33:173:44">addListener</jtok>
<jtok eid="6" type="primary_name_ref" span="175:16:175:20">type</jtok>
<jtok eid="1" type="block_comment" span="178:2:182:4">/**
		baseType is used during evaluation of full type and retained for the
		case where we are an array type.
		In the case where we are not an array this will be the same as type.
	*/</jtok>
<jtok eid="7" type="class_or_interface_ref" span="183:9:183:14">Class</jtok>
<jtok eid="7" type="method_name" span="183:15:183:26">getBaseType</jtok>
<jtok eid="7" type="primary_name_ref" span="184:10:184:18">baseType</jtok>
<jtok eid="1" type="block_comment" span="186:2:189:4">/** 
		If we are an array type this will be non zero and indicate the 
		dimensionality of the array.  e.g. 2 for String[][];
	*/</jtok>
<jtok eid="8" type="method_name" span="190:13:190:25">getArrayDims</jtok>
<jtok eid="8" type="primary_name_ref" span="191:10:191:19">arrayDims</jtok>
<jtok eid="9" type="method_name" span="194:14:194:32">classLoaderChanged</jtok>
<jtok eid="9" type="primary_name_ref" span="195:3:195:7">type</jtok>
<jtok eid="9" type="primary_name_ref" span="196:3:196:11">baseType</jtok>
<jtok eid="10" type="class_or_interface_ref" span="199:16:199:22">String</jtok>
<jtok eid="10" type="method_name" span="199:23:199:40">getTypeDescriptor</jtok>
<jtok eid="10" type="parameter_type" span="199:42:199:47">Class</jtok>
<jtok eid="10" type="parameter_name" span="199:48:199:52">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="201:8:201:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="201:16:201:23">Boolean</jtok>
<jtok eid="10" type="qualified_name_ref" span="201:24:201:28">TYPE</jtok>
<jtok eid="10" type="string_literal" span="201:38:201:41">"Z"</jtok>
<jtok eid="10" type="primary_name_ref" span="202:8:202:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="202:16:202:25">Character</jtok>
<jtok eid="10" type="qualified_name_ref" span="202:26:202:30">TYPE</jtok>
<jtok eid="10" type="string_literal" span="202:40:202:43">"C"</jtok>
<jtok eid="10" type="primary_name_ref" span="203:8:203:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="203:16:203:20">Byte</jtok>
<jtok eid="10" type="qualified_name_ref" span="203:21:203:25">TYPE</jtok>
<jtok eid="10" type="string_literal" span="203:35:203:38">"B"</jtok>
<jtok eid="10" type="primary_name_ref" span="204:8:204:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="204:16:204:21">Short</jtok>
<jtok eid="10" type="qualified_name_ref" span="204:22:204:26">TYPE</jtok>
<jtok eid="10" type="string_literal" span="204:36:204:39">"S"</jtok>
<jtok eid="10" type="primary_name_ref" span="205:8:205:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="205:16:205:23">Integer</jtok>
<jtok eid="10" type="qualified_name_ref" span="205:24:205:28">TYPE</jtok>
<jtok eid="10" type="string_literal" span="205:38:205:41">"I"</jtok>
<jtok eid="10" type="primary_name_ref" span="206:8:206:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="206:16:206:20">Long</jtok>
<jtok eid="10" type="qualified_name_ref" span="206:21:206:25">TYPE</jtok>
<jtok eid="10" type="string_literal" span="206:35:206:38">"J"</jtok>
<jtok eid="10" type="primary_name_ref" span="207:8:207:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="207:16:207:21">Float</jtok>
<jtok eid="10" type="qualified_name_ref" span="207:22:207:26">TYPE</jtok>
<jtok eid="10" type="string_literal" span="207:36:207:39">"F"</jtok>
<jtok eid="10" type="primary_name_ref" span="208:8:208:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="208:16:208:22">Double</jtok>
<jtok eid="10" type="qualified_name_ref" span="208:23:208:27">TYPE</jtok>
<jtok eid="10" type="string_literal" span="208:37:208:40">"D"</jtok>
<jtok eid="10" type="primary_name_ref" span="209:8:209:12">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="209:16:209:20">Void</jtok>
<jtok eid="10" type="qualified_name_ref" span="209:21:209:25">TYPE</jtok>
<jtok eid="10" type="string_literal" span="209:35:209:38">"V"</jtok>
<jtok eid="10" type="line_comment" span="210:2:210:36">// Is getName() ok?  test with 1.1</jtok>
<jtok eid="10" type="class_or_interface_ref" span="211:3:211:9">String</jtok>
<jtok eid="10" type="local_variable_name" span="211:10:211:14">name</jtok>
<jtok eid="10" type="primary_name_ref" span="211:17:211:21">clas</jtok>
<jtok eid="10" type="method_call" span="211:22:211:29">getName</jtok>
<jtok eid="10" type="method_call" span="211:32:211:39">replace</jtok>
<jtok eid="10" type="primary_name_ref" span="213:8:213:12">name</jtok>
<jtok eid="10" type="method_call" span="213:13:213:23">startsWith</jtok>
<jtok eid="10" type="string_literal" span="213:24:213:27">"["</jtok>
<jtok eid="10" type="primary_name_ref" span="213:32:213:36">name</jtok>
<jtok eid="10" type="method_call" span="213:37:213:45">endsWith</jtok>
<jtok eid="10" type="string_literal" span="213:46:213:49">";"</jtok>
<jtok eid="10" type="primary_name_ref" span="214:11:214:15">name</jtok>
<jtok eid="10" type="string_literal" span="216:11:216:14">"L"</jtok>
<jtok eid="10" type="primary_name_ref" span="216:16:216:20">name</jtok>
<jtok eid="10" type="method_call" span="216:21:216:28">replace</jtok>
<jtok eid="10" type="string_literal" span="216:39:216:42">";"</jtok>
</jdoc>