<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHWhileStatement" jls="java5">
<jent id="0" type="file" span="0:0:99:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHWhileStatement.java</jent>
<jent id="1" pid="0" type="class" span="40:1:99:1">org.gjt.sp.jedit.bsh.BSHWhileStatement</jent>
<jent id="2" pid="1" type="method" span="44:5:44:44">org.gjt.sp.jedit.bsh.BSHWhileStatement.BSHWhileStatement(int)</jent>
<jent id="3" pid="1" type="method" span="46:5:97:5">org.gjt.sp.jedit.bsh.BSHWhileStatement.eval(CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="37:1:39:3">/**
	This class handles both while(){} statements and do{}while() statements.
*/</jtok>
<jtok eid="1" type="class_name" span="40:7:40:24">BSHWhileStatement</jtok>
<jtok eid="1" type="class_or_interface_ref" span="40:33:40:43">SimpleNode</jtok>
<jtok eid="1" type="class_or_interface_ref" span="40:55:40:70">ParserConstants</jtok>
<jtok eid="1" type="field_name" span="42:17:42:30">isDoStatement</jtok>
<jtok eid="2" type="method_name" span="44:5:44:22">BSHWhileStatement</jtok>
<jtok eid="2" type="parameter_name" span="44:27:44:29">id</jtok>
<jtok eid="2" type="primary_name_ref" span="44:39:44:41">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="46:12:46:18">Object</jtok>
<jtok eid="3" type="method_name" span="46:19:46:23">eval</jtok>
<jtok eid="3" type="parameter_type" span="46:25:46:34">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="46:35:46:44">callstack</jtok>
<jtok eid="3" type="parameter_type" span="46:46:46:57">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="46:58:46:69">interpreter</jtok>
<jtok eid="3" type="throws" span="47:10:47:19">EvalError</jtok>
<jtok eid="3" type="local_variable_name" span="49:7:49:15">numChild</jtok>
<jtok eid="3" type="method_call" span="49:18:49:35">jjtGetNumChildren</jtok>
<jtok eid="3" type="line_comment" span="51:3:51:59">// Order of body and condition is swapped for do / while</jtok>
<jtok eid="3" type="class_or_interface_ref" span="52:9:52:19">SimpleNode</jtok>
<jtok eid="3" type="local_variable_name" span="52:20:52:27">condExp</jtok>
<jtok eid="3" type="local_variable_name" span="52:29:52:33">body</jtok>
<jtok eid="3" type="primary_name_ref" span="54:8:54:21">isDoStatement</jtok>
<jtok eid="3" type="primary_name_ref" span="55:4:55:11">condExp</jtok>
<jtok eid="3" type="class_or_interface_ref" span="55:15:55:25">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="55:26:55:37">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="56:4:56:8">body</jtok>
<jtok eid="3" type="class_or_interface_ref" span="56:11:56:21">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="56:22:56:33">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="58:4:58:11">condExp</jtok>
<jtok eid="3" type="class_or_interface_ref" span="58:15:58:25">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="58:26:58:37">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="59:9:59:17">numChild</jtok>
<jtok eid="3" type="line_comment" span="59:24:59:63">// has body, else just for side effects</jtok>
<jtok eid="3" type="primary_name_ref" span="60:5:60:9">body</jtok>
<jtok eid="3" type="class_or_interface_ref" span="60:12:60:22">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="60:23:60:34">jjtGetChild</jtok>
<jtok eid="3" type="local_variable_name" span="63:11:63:21">doOnceFlag</jtok>
<jtok eid="3" type="primary_name_ref" span="63:24:63:37">isDoStatement</jtok>
<jtok eid="3" type="primary_name_ref" span="65:4:65:14">doOnceFlag</jtok>
<jtok eid="3" type="primary_name_ref" span="66:4:66:18">BSHIfStatement</jtok>
<jtok eid="3" type="method_call" span="66:19:66:36">evaluateCondition</jtok>
<jtok eid="3" type="primary_name_ref" span="66:37:66:44">condExp</jtok>
<jtok eid="3" type="primary_name_ref" span="66:46:66:55">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="66:57:66:68">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="69:9:69:13">body</jtok>
<jtok eid="3" type="line_comment" span="69:24:69:35">// no body?</jtok>
<jtok eid="3" type="class_or_interface_ref" span="72:4:72:10">Object</jtok>
<jtok eid="3" type="local_variable_name" span="72:11:72:14">ret</jtok>
<jtok eid="3" type="primary_name_ref" span="72:17:72:21">body</jtok>
<jtok eid="3" type="method_call" span="72:22:72:26">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="72:27:72:36">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="72:38:72:49">interpreter</jtok>
<jtok eid="3" type="local_variable_name" span="74:12:74:20">breakout</jtok>
<jtok eid="3" type="primary_name_ref" span="75:7:75:10">ret</jtok>
<jtok eid="3" type="class_or_interface_ref" span="75:22:75:35">ReturnControl</jtok>
<jtok eid="3" type="class_or_interface_ref" span="77:14:77:27">ReturnControl</jtok>
<jtok eid="3" type="primary_name_ref" span="77:28:77:31">ret</jtok>
<jtok eid="3" type="qualified_name_ref" span="77:33:77:37">kind</jtok>
<jtok eid="3" type="primary_name_ref" span="79:11:79:17">RETURN</jtok>
<jtok eid="3" type="primary_name_ref" span="80:14:80:17">ret</jtok>
<jtok eid="3" type="primary_name_ref" span="82:11:82:19">CONTINUE</jtok>
<jtok eid="3" type="primary_name_ref" span="85:11:85:16">BREAK</jtok>
<jtok eid="3" type="primary_name_ref" span="86:7:86:15">breakout</jtok>
<jtok eid="3" type="primary_name_ref" span="90:7:90:15">breakout</jtok>
<jtok eid="3" type="primary_name_ref" span="93:4:93:14">doOnceFlag</jtok>
<jtok eid="3" type="primary_name_ref" span="96:16:96:25">Primitive</jtok>
<jtok eid="3" type="qualified_name_ref" span="96:26:96:30">VOID</jtok>
</jdoc>