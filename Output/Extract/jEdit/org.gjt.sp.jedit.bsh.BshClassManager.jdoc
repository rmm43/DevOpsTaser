<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BshClassManager" jls="java5">
<jent id="0" type="file" span="0:0:649:2">Source/jEdit/org/gjt/sp/jedit/bsh/BshClassManager.java</jent>
<jent id="1" pid="0" type="class" span="80:1:649:1">org.gjt.sp.jedit.bsh.BshClassManager</jent>
<jent id="2" pid="1" type="method" span="126:5:150:5">org.gjt.sp.jedit.bsh.BshClassManager.createClassManager(Interpreter)</jent>
<jent id="3" pid="1" type="method" span="152:5:154:5">org.gjt.sp.jedit.bsh.BshClassManager.classExists(String)</jent>
<jent id="4" pid="1" type="method" span="164:5:181:5">org.gjt.sp.jedit.bsh.BshClassManager.classForName(String)</jent>
<jent id="5" pid="1" type="method" span="184:5:204:5">org.gjt.sp.jedit.bsh.BshClassManager.loadSourceClass(String)</jent>
<jent id="6" pid="1" type="method" span="220:5:248:5">org.gjt.sp.jedit.bsh.BshClassManager.plainClassForName(String)</jent>
<jent id="7" pid="1" type="method" span="254:5:266:5">org.gjt.sp.jedit.bsh.BshClassManager.getResource(String)</jent>
<jent id="8" pid="1" type="method" span="271:5:283:5">org.gjt.sp.jedit.bsh.BshClassManager.getResourceAsStream(String)</jent>
<jent id="9" pid="1" type="method" span="292:5:297:5">org.gjt.sp.jedit.bsh.BshClassManager.cacheClassInfo(String,Class)</jent>
<jent id="10" pid="1" type="method" span="305:5:317:5">org.gjt.sp.jedit.bsh.BshClassManager.cacheResolvedMethod(Class,Class[],Method)</jent>
<jent id="11" pid="1" type="method" span="324:5:345:5">org.gjt.sp.jedit.bsh.BshClassManager.getResolvedMethod(Class,String,Class[],boolean)</jent>
<jent id="12" pid="1" type="method" span="350:5:356:5">org.gjt.sp.jedit.bsh.BshClassManager.clearCaches()</jent>
<jent id="13" pid="1" type="method" span="369:5:373:5">org.gjt.sp.jedit.bsh.BshClassManager.setClassLoader(ClassLoader)</jent>
<jent id="14" pid="1" type="method" span="375:5:377:5">org.gjt.sp.jedit.bsh.BshClassManager.addClassPath(URL)</jent>
<jent id="15" pid="1" type="method" span="382:5:384:5">org.gjt.sp.jedit.bsh.BshClassManager.reset()</jent>
<jent id="16" pid="1" type="method" span="390:5:394:5">org.gjt.sp.jedit.bsh.BshClassManager.setClassPath(URL[])</jent>
<jent id="17" pid="1" type="method" span="402:5:404:5">org.gjt.sp.jedit.bsh.BshClassManager.reloadAllClasses()</jent>
<jent id="18" pid="1" type="method" span="411:5:415:5">org.gjt.sp.jedit.bsh.BshClassManager.reloadClasses(String[])</jent>
<jent id="19" pid="1" type="method" span="423:5:427:5">org.gjt.sp.jedit.bsh.BshClassManager.reloadPackage(String)</jent>
<jent id="20" pid="1" type="method" span="441:5:445:5">org.gjt.sp.jedit.bsh.BshClassManager.doSuperImport()</jent>
<jent id="21" pid="1" type="method" span="450:5:453:5">org.gjt.sp.jedit.bsh.BshClassManager.hasSuperImport()</jent>
<jent id="22" pid="1" type="method" span="459:5:463:5">org.gjt.sp.jedit.bsh.BshClassManager.getClassNameByUnqName(String)</jent>
<jent id="23" pid="1" type="method" span="465:5:465:45">org.gjt.sp.jedit.bsh.BshClassManager.addListener(Listener)</jent>
<jent id="24" pid="1" type="method" span="467:5:467:48">org.gjt.sp.jedit.bsh.BshClassManager.removeListener(Listener)</jent>
<jent id="25" pid="1" type="method" span="469:5:471:5">org.gjt.sp.jedit.bsh.BshClassManager.dump(PrintWriter)</jent>
<jent id="26" pid="1" type="method" span="486:5:500:5">org.gjt.sp.jedit.bsh.BshClassManager.definingClass(String)</jent>
<jent id="27" pid="1" type="method" span="502:5:504:5">org.gjt.sp.jedit.bsh.BshClassManager.isClassBeingDefined(String)</jent>
<jent id="28" pid="1" type="method" span="510:5:513:5">org.gjt.sp.jedit.bsh.BshClassManager.getClassBeingDefined(String)</jent>
<jent id="29" pid="1" type="method" span="519:5:523:5">org.gjt.sp.jedit.bsh.BshClassManager.doneDefiningClass(String)</jent>
<jent id="30" pid="1" type="method" span="529:5:558:5">org.gjt.sp.jedit.bsh.BshClassManager.defineClass(String,byte[])</jent>
<jent id="31" pid="1" type="method" span="560:5:560:43">org.gjt.sp.jedit.bsh.BshClassManager.classLoaderChanged()</jent>
<jent id="32" pid="1" type="method" span="566:5:570:5">org.gjt.sp.jedit.bsh.BshClassManager.noClassDefFound(String,Error)</jent>
<jent id="33" pid="1" type="method" span="572:5:575:5">org.gjt.sp.jedit.bsh.BshClassManager.cmUnavailable()</jent>
<jent id="34" pid="1" type="interface" span="577:5:580:5">org.gjt.sp.jedit.bsh.BshClassManager.Listener</jent>
<jent id="35" pid="34" type="method" span="579:9:579:41">org.gjt.sp.jedit.bsh.BshClassManager.Listener.classLoaderChanged()</jent>
<jent id="36" pid="1" type="class" span="597:5:648:5">org.gjt.sp.jedit.bsh.BshClassManager.SignatureKey</jent>
<jent id="37" pid="36" type="method" span="604:9:608:9">org.gjt.sp.jedit.bsh.BshClassManager.SignatureKey.SignatureKey(Class,String,Class[])</jent>
<jent id="38" pid="36" type="method" span="610:9:623:9">org.gjt.sp.jedit.bsh.BshClassManager.SignatureKey.hashCode()</jent>
<jent id="39" pid="36" type="method" span="625:9:647:9">org.gjt.sp.jedit.bsh.BshClassManager.SignatureKey.equals(Object)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    *
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="43:1:58:3">/**
    BshClassManager manages all classloading in BeanShell.
    It also supports a dynamically loaded extension (bsh.classpath package)
    which allows classpath extension and class file reloading.

    Currently the extension relies on 1.2 for BshClassLoader and weak
    references.

    See http://www.beanshell.org/manual/classloading.html for details
    on the bsh classloader architecture.
    &lt;p&gt;

    Bsh has a multi-tiered class loading architecture.  No class loader is
    used unless/until the classpath is modified or a class is reloaded.
    &lt;p&gt;
*/</jtok>
<jtok eid="0" type="block_comment" span="59:1:79:3">/*
    Implementation notes:

    Note: we may need some synchronization in here

    Note on version dependency:  This base class is JDK 1.1 compatible,
    however we are forced to use weak references in the full featured
    implementation (the optional bsh.classpath package) to accomodate all of
    the fleeting namespace listeners as they fall out of scope.  (NameSpaces
    must be informed if the class space changes so that they can un-cache
    names).
    &lt;p&gt;

    Perhaps a simpler idea would be to have entities that reference cached
    types always perform a light weight check with a counter / reference
    value and use that to detect changes in the namespace.  This puts the
    burden on the consumer to check at appropriate times, but could eliminate
    the need for the listener system in many places and the necessity of weak
    references in this package.
    &lt;p&gt;
*/</jtok>
<jtok eid="1" type="class_name" span="80:14:80:29">BshClassManager</jtok>
<jtok eid="1" type="block_comment" span="82:5:82:68">/** Identifier for no value item.  Use a hashtable as a Set. */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="83:20:83:26">Object</jtok>
<jtok eid="1" type="field_name" span="83:27:83:34">NOVALUE</jtok>
<jtok eid="1" type="constructor_call" span="83:41:83:47">Object</jtok>
<jtok eid="1" type="block_comment" span="84:5:87:7">/**
        The interpreter which created the class manager
        This is used to load scripted classes from source files.
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="88:13:88:24">Interpreter</jtok>
<jtok eid="1" type="field_name" span="88:25:88:45">declaringInterpreter</jtok>
<jtok eid="1" type="block_comment" span="90:5:92:7">/**
        An external classloader supplied by the setClassLoader() command.
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="93:15:93:26">ClassLoader</jtok>
<jtok eid="1" type="field_name" span="93:27:93:46">externalClassLoader</jtok>
<jtok eid="1" type="block_comment" span="95:5:99:7">/**
        Global cache for things we know are classes.
        Note: these should probably be re-implemented with Soft references.
        (as opposed to strong or Weak)
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="100:25:100:34">Hashtable</jtok>
<jtok eid="1" type="field_name" span="100:35:100:53">absoluteClassCache</jtok>
<jtok eid="1" type="constructor_call" span="100:60:100:69">Hashtable</jtok>
<jtok eid="1" type="block_comment" span="101:5:105:7">/**
        Global cache for things we know are *not* classes.
        Note: these should probably be re-implemented with Soft references.
        (as opposed to strong or Weak)
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="106:25:106:34">Hashtable</jtok>
<jtok eid="1" type="field_name" span="106:35:106:53">absoluteNonClasses</jtok>
<jtok eid="1" type="constructor_call" span="106:60:106:69">Hashtable</jtok>
<jtok eid="1" type="block_comment" span="108:5:112:7">/**
        Caches for resolved object and static methods.
        We keep these maps separate to support fast lookup in the general case
        where the method may be either.
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="113:25:113:34">Hashtable</jtok>
<jtok eid="1" type="field_name" span="113:35:113:56">resolvedObjectMethods</jtok>
<jtok eid="1" type="constructor_call" span="113:63:113:72">Hashtable</jtok>
<jtok eid="1" type="class_or_interface_ref" span="114:25:114:34">Hashtable</jtok>
<jtok eid="1" type="field_name" span="114:35:114:56">resolvedStaticMethods</jtok>
<jtok eid="1" type="constructor_call" span="114:63:114:72">Hashtable</jtok>
<jtok eid="1" type="class_or_interface_ref" span="116:25:116:34">Hashtable</jtok>
<jtok eid="1" type="field_name" span="116:35:116:50">definingClasses</jtok>
<jtok eid="1" type="constructor_call" span="116:57:116:66">Hashtable</jtok>
<jtok eid="1" type="class_or_interface_ref" span="117:25:117:34">Hashtable</jtok>
<jtok eid="1" type="field_name" span="117:35:117:59">definingClassesBaseNames</jtok>
<jtok eid="1" type="constructor_call" span="117:66:117:75">Hashtable</jtok>
<jtok eid="1" type="block_comment" span="119:5:125:7">/**
        Create a new instance of the class manager.
        Class manager instnaces are now associated with the interpreter.

        @see org.gjt.sp.jedit.bsh.Interpreter#getClassManager() getClassManager
        @see org.gjt.sp.jedit.bsh.Interpreter#setClassLoader(ClassLoader) setClassLoader
    */</jtok>
<jtok eid="2" type="class_or_interface_ref" span="126:19:126:34">BshClassManager</jtok>
<jtok eid="2" type="method_name" span="126:35:126:53">createClassManager</jtok>
<jtok eid="2" type="parameter_type" span="126:55:126:66">Interpreter</jtok>
<jtok eid="2" type="parameter_name" span="126:67:126:78">interpreter</jtok>
<jtok eid="2" type="class_or_interface_ref" span="128:9:128:24">BshClassManager</jtok>
<jtok eid="2" type="local_variable_name" span="128:25:128:32">manager</jtok>
<jtok eid="2" type="line_comment" span="130:9:130:74">// Do we have the necessary jdk1.2 packages and optional package?</jtok>
<jtok eid="2" type="primary_name_ref" span="131:14:131:26">Capabilities</jtok>
<jtok eid="2" type="method_call" span="131:27:131:38">classExists</jtok>
<jtok eid="2" type="string_literal" span="131:39:131:68">"java.lang.ref.WeakReference"</jtok>
<jtok eid="2" type="primary_name_ref" span="132:16:132:28">Capabilities</jtok>
<jtok eid="2" type="method_call" span="132:29:132:40">classExists</jtok>
<jtok eid="2" type="string_literal" span="132:41:132:60">"java.util.HashMap"</jtok>
<jtok eid="2" type="primary_name_ref" span="133:16:133:28">Capabilities</jtok>
<jtok eid="2" type="method_call" span="133:29:133:40">classExists</jtok>
<jtok eid="2" type="string_literal" span="133:41:133:90">"org.gjt.sp.jedit.bsh.classpath.ClassManagerImpl"</jtok>
<jtok eid="2" type="line_comment" span="136:17:136:42">// Try to load the module</jtok>
<jtok eid="2" type="line_comment" span="137:17:137:78">// don't refer to it directly here or we're dependent upon it</jtok>
<jtok eid="2" type="class_or_interface_ref" span="138:17:138:22">Class</jtok>
<jtok eid="2" type="local_variable_name" span="138:23:138:27">clas</jtok>
<jtok eid="2" type="primary_name_ref" span="138:30:138:35">Class</jtok>
<jtok eid="2" type="method_call" span="138:36:138:43">forName</jtok>
<jtok eid="2" type="string_literal" span="138:45:138:94">"org.gjt.sp.jedit.bsh.classpath.ClassManagerImpl"</jtok>
<jtok eid="2" type="primary_name_ref" span="139:17:139:24">manager</jtok>
<jtok eid="2" type="class_or_interface_ref" span="139:28:139:43">BshClassManager</jtok>
<jtok eid="2" type="primary_name_ref" span="139:44:139:48">clas</jtok>
<jtok eid="2" type="method_call" span="139:49:139:60">newInstance</jtok>
<jtok eid="2" type="class_or_interface_ref" span="140:23:140:32">Exception</jtok>
<jtok eid="2" type="local_variable_name" span="140:33:140:34">e</jtok>
<jtok eid="2" type="constructor_call" span="141:27:141:43">InterpreterError</jtok>
<jtok eid="2" type="string_literal" span="141:44:141:74">"Error loading classmanager: "</jtok>
<jtok eid="2" type="primary_name_ref" span="141:75:141:76">e</jtok>
<jtok eid="2" type="primary_name_ref" span="144:13:144:20">manager</jtok>
<jtok eid="2" type="constructor_call" span="144:27:144:42">BshClassManager</jtok>
<jtok eid="2" type="primary_name_ref" span="146:14:146:25">interpreter</jtok>
<jtok eid="2" type="primary_name_ref" span="147:13:147:24">interpreter</jtok>
<jtok eid="2" type="constructor_call" span="147:31:147:42">Interpreter</jtok>
<jtok eid="2" type="primary_name_ref" span="148:9:148:16">manager</jtok>
<jtok eid="2" type="qualified_name_ref" span="148:17:148:37">declaringInterpreter</jtok>
<jtok eid="2" type="primary_name_ref" span="148:40:148:51">interpreter</jtok>
<jtok eid="2" type="primary_name_ref" span="149:16:149:23">manager</jtok>
<jtok eid="3" type="method_name" span="152:20:152:31">classExists</jtok>
<jtok eid="3" type="parameter_type" span="152:33:152:39">String</jtok>
<jtok eid="3" type="parameter_name" span="152:40:152:44">name</jtok>
<jtok eid="3" type="method_call" span="153:18:153:30">classForName</jtok>
<jtok eid="3" type="primary_name_ref" span="153:32:153:36">name</jtok>
<jtok eid="1" type="block_comment" span="156:5:163:7">/**
        Load the specified class by name, taking into account added classpath
        and reloaded classes, etc.
        Note: Again, this is just a trivial implementation.
        See bsh.classpath.ClassManagerImpl for the fully functional class
        management package.
        @return the class or null
    */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="164:12:164:17">Class</jtok>
<jtok eid="4" type="method_name" span="164:18:164:30">classForName</jtok>
<jtok eid="4" type="parameter_type" span="164:32:164:38">String</jtok>
<jtok eid="4" type="parameter_name" span="164:39:164:43">name</jtok>
<jtok eid="4" type="method_call" span="166:14:166:33">isClassBeingDefined</jtok>
<jtok eid="4" type="primary_name_ref" span="166:35:166:39">name</jtok>
<jtok eid="4" type="constructor_call" span="167:23:167:39">InterpreterError</jtok>
<jtok eid="4" type="string_literal" span="168:17:168:77">"Attempting to load class in the process of being defined: "</jtok>
<jtok eid="4" type="primary_name_ref" span="169:18:169:22">name</jtok>
<jtok eid="4" type="class_or_interface_ref" span="171:9:171:14">Class</jtok>
<jtok eid="4" type="local_variable_name" span="171:15:171:19">clas</jtok>
<jtok eid="4" type="primary_name_ref" span="173:13:173:17">clas</jtok>
<jtok eid="4" type="method_call" span="173:20:173:37">plainClassForName</jtok>
<jtok eid="4" type="primary_name_ref" span="173:39:173:43">name</jtok>
<jtok eid="4" type="class_or_interface_ref" span="174:19:174:41">ClassNotFoundException</jtok>
<jtok eid="4" type="local_variable_name" span="174:42:174:43">e</jtok>
<jtok eid="4" type="block_comment" span="174:48:174:58">/*ignore*/</jtok>
<jtok eid="4" type="line_comment" span="176:9:176:30">// try scripted class</jtok>
<jtok eid="4" type="primary_name_ref" span="177:14:177:18">clas</jtok>
<jtok eid="4" type="primary_name_ref" span="178:13:178:17">clas</jtok>
<jtok eid="4" type="method_call" span="178:20:178:35">loadSourceClass</jtok>
<jtok eid="4" type="primary_name_ref" span="178:37:178:41">name</jtok>
<jtok eid="4" type="primary_name_ref" span="180:16:180:20">clas</jtok>
<jtok eid="1" type="line_comment" span="183:5:183:48">// Move me to classpath/ClassManagerImpl???</jtok>
<jtok eid="5" type="class_or_interface_ref" span="184:15:184:20">Class</jtok>
<jtok eid="5" type="method_name" span="184:21:184:36">loadSourceClass</jtok>
<jtok eid="5" type="parameter_type" span="184:38:184:44">String</jtok>
<jtok eid="5" type="parameter_name" span="184:45:184:49">name</jtok>
<jtok eid="5" type="class_or_interface_ref" span="186:9:186:15">String</jtok>
<jtok eid="5" type="local_variable_name" span="186:16:186:24">fileName</jtok>
<jtok eid="5" type="string_literal" span="186:27:186:30">"/"</jtok>
<jtok eid="5" type="primary_name_ref" span="186:31:186:35">name</jtok>
<jtok eid="5" type="method_call" span="186:36:186:43">replace</jtok>
<jtok eid="5" type="string_literal" span="186:53:186:60">".java"</jtok>
<jtok eid="5" type="class_or_interface_ref" span="187:9:187:20">InputStream</jtok>
<jtok eid="5" type="local_variable_name" span="187:21:187:23">in</jtok>
<jtok eid="5" type="method_call" span="187:26:187:45">getResourceAsStream</jtok>
<jtok eid="5" type="primary_name_ref" span="187:47:187:55">fileName</jtok>
<jtok eid="5" type="primary_name_ref" span="188:14:188:16">in</jtok>
<jtok eid="5" type="primary_name_ref" span="192:13:192:19">System</jtok>
<jtok eid="5" type="qualified_name_ref" span="192:20:192:23">out</jtok>
<jtok eid="5" type="method_call" span="192:24:192:31">println</jtok>
<jtok eid="5" type="string_literal" span="192:32:192:66">"Loading class from source file: "</jtok>
<jtok eid="5" type="primary_name_ref" span="192:67:192:75">fileName</jtok>
<jtok eid="5" type="primary_name_ref" span="193:13:193:33">declaringInterpreter</jtok>
<jtok eid="5" type="method_call" span="193:34:193:38">eval</jtok>
<jtok eid="5" type="constructor_call" span="193:44:193:61">InputStreamReader</jtok>
<jtok eid="5" type="primary_name_ref" span="193:62:193:64">in</jtok>
<jtok eid="5" type="class_or_interface_ref" span="194:19:194:28">EvalError</jtok>
<jtok eid="5" type="local_variable_name" span="194:29:194:30">e</jtok>
<jtok eid="5" type="line_comment" span="195:13:195:22">// ignore</jtok>
<jtok eid="5" type="primary_name_ref" span="196:13:196:19">System</jtok>
<jtok eid="5" type="qualified_name_ref" span="196:20:196:23">err</jtok>
<jtok eid="5" type="method_call" span="196:24:196:31">println</jtok>
<jtok eid="5" type="primary_name_ref" span="196:33:196:34">e</jtok>
<jtok eid="5" type="method_call" span="199:20:199:37">plainClassForName</jtok>
<jtok eid="5" type="primary_name_ref" span="199:39:199:43">name</jtok>
<jtok eid="5" type="class_or_interface_ref" span="200:19:200:41">ClassNotFoundException</jtok>
<jtok eid="5" type="local_variable_name" span="200:42:200:43">e</jtok>
<jtok eid="5" type="primary_name_ref" span="201:13:201:19">System</jtok>
<jtok eid="5" type="qualified_name_ref" span="201:20:201:23">err</jtok>
<jtok eid="5" type="method_call" span="201:24:201:31">println</jtok>
<jtok eid="5" type="string_literal" span="201:32:201:66">"Class not found in source file: "</jtok>
<jtok eid="5" type="primary_name_ref" span="201:67:201:71">name</jtok>
<jtok eid="1" type="block_comment" span="206:5:219:7">/**
        Perform a plain Class.forName() or call the externally provided
        classloader.
        If a BshClassManager implementation is loaded the call will be
        delegated to it, to allow for additional hooks.
        &lt;p/&gt;

        This simply wraps that bottom level class lookup call and provides a
        central point for monitoring and handling certain Java version
        dependent bugs, etc.

        @see #classForName( String )
        @return the class
    */</jtok>
<jtok eid="6" type="class_or_interface_ref" span="220:12:220:17">Class</jtok>
<jtok eid="6" type="method_name" span="220:18:220:35">plainClassForName</jtok>
<jtok eid="6" type="parameter_type" span="220:37:220:43">String</jtok>
<jtok eid="6" type="parameter_name" span="220:44:220:48">name</jtok>
<jtok eid="6" type="throws" span="221:16:221:38">ClassNotFoundException</jtok>
<jtok eid="6" type="class_or_interface_ref" span="223:9:223:14">Class</jtok>
<jtok eid="6" type="local_variable_name" span="223:15:223:16">c</jtok>
<jtok eid="6" type="primary_name_ref" span="226:18:226:37">externalClassLoader</jtok>
<jtok eid="6" type="primary_name_ref" span="227:17:227:18">c</jtok>
<jtok eid="6" type="primary_name_ref" span="227:21:227:40">externalClassLoader</jtok>
<jtok eid="6" type="method_call" span="227:41:227:50">loadClass</jtok>
<jtok eid="6" type="primary_name_ref" span="227:52:227:56">name</jtok>
<jtok eid="6" type="primary_name_ref" span="229:17:229:18">c</jtok>
<jtok eid="6" type="primary_name_ref" span="229:21:229:26">Class</jtok>
<jtok eid="6" type="method_call" span="229:27:229:34">forName</jtok>
<jtok eid="6" type="primary_name_ref" span="229:36:229:40">name</jtok>
<jtok eid="6" type="method_call" span="231:13:231:27">cacheClassInfo</jtok>
<jtok eid="6" type="primary_name_ref" span="231:29:231:33">name</jtok>
<jtok eid="6" type="primary_name_ref" span="231:35:231:36">c</jtok>
<jtok eid="6" type="block_comment" span="233:9:242:11">/*
            Original note: Jdk under Win is throwing these to
            warn about lower case / upper case possible mismatch.
            e.g. bsh.console bsh.Console

            Update: Prior to 1.3 we were squeltching NoClassDefFoundErrors
            which was very annoying.  I cannot reproduce the original problem
            and this was never a valid solution.  If there are legacy VMs that
            have problems we can include a more specific test for them here.
        */</jtok>
<jtok eid="6" type="class_or_interface_ref" span="243:19:243:39">NoClassDefFoundError</jtok>
<jtok eid="6" type="local_variable_name" span="243:40:243:41">e</jtok>
<jtok eid="6" type="method_call" span="244:19:244:34">noClassDefFound</jtok>
<jtok eid="6" type="primary_name_ref" span="244:36:244:40">name</jtok>
<jtok eid="6" type="primary_name_ref" span="244:42:244:43">e</jtok>
<jtok eid="6" type="primary_name_ref" span="247:16:247:17">c</jtok>
<jtok eid="1" type="block_comment" span="250:5:253:7">/**
        Get a resource URL using the BeanShell classpath
        @param path should be an absolute path
    */</jtok>
<jtok eid="7" type="class_or_interface_ref" span="254:12:254:15">URL</jtok>
<jtok eid="7" type="method_name" span="254:16:254:27">getResource</jtok>
<jtok eid="7" type="parameter_type" span="254:29:254:35">String</jtok>
<jtok eid="7" type="parameter_name" span="254:36:254:40">path</jtok>
<jtok eid="7" type="class_or_interface_ref" span="256:9:256:12">URL</jtok>
<jtok eid="7" type="local_variable_name" span="256:13:256:16">url</jtok>
<jtok eid="7" type="primary_name_ref" span="257:14:257:33">externalClassLoader</jtok>
<jtok eid="7" type="line_comment" span="259:13:259:50">// classloader wants no leading slash</jtok>
<jtok eid="7" type="primary_name_ref" span="260:13:260:16">url</jtok>
<jtok eid="7" type="primary_name_ref" span="260:19:260:38">externalClassLoader</jtok>
<jtok eid="7" type="method_call" span="260:39:260:50">getResource</jtok>
<jtok eid="7" type="primary_name_ref" span="260:52:260:56">path</jtok>
<jtok eid="7" type="method_call" span="260:57:260:66">substring</jtok>
<jtok eid="7" type="primary_name_ref" span="262:14:262:17">url</jtok>
<jtok eid="7" type="primary_name_ref" span="263:13:263:16">url</jtok>
<jtok eid="7" type="primary_name_ref" span="263:19:263:30">Interpreter</jtok>
<jtok eid="7" type="method_call" span="263:37:263:48">getResource</jtok>
<jtok eid="7" type="primary_name_ref" span="263:50:263:54">path</jtok>
<jtok eid="7" type="primary_name_ref" span="265:16:265:19">url</jtok>
<jtok eid="1" type="block_comment" span="267:5:270:7">/**
        Get a resource stream using the BeanShell classpath
        @param path should be an absolute path
    */</jtok>
<jtok eid="8" type="class_or_interface_ref" span="271:12:271:23">InputStream</jtok>
<jtok eid="8" type="method_name" span="271:24:271:43">getResourceAsStream</jtok>
<jtok eid="8" type="parameter_type" span="271:45:271:51">String</jtok>
<jtok eid="8" type="parameter_name" span="271:52:271:56">path</jtok>
<jtok eid="8" type="class_or_interface_ref" span="273:9:273:20">InputStream</jtok>
<jtok eid="8" type="local_variable_name" span="273:21:273:23">in</jtok>
<jtok eid="8" type="primary_name_ref" span="274:14:274:33">externalClassLoader</jtok>
<jtok eid="8" type="line_comment" span="276:13:276:50">// classloader wants no leading slash</jtok>
<jtok eid="8" type="primary_name_ref" span="277:13:277:15">in</jtok>
<jtok eid="8" type="primary_name_ref" span="277:18:277:37">externalClassLoader</jtok>
<jtok eid="8" type="method_call" span="277:38:277:57">getResourceAsStream</jtok>
<jtok eid="8" type="primary_name_ref" span="277:59:277:63">path</jtok>
<jtok eid="8" type="method_call" span="277:64:277:73">substring</jtok>
<jtok eid="8" type="primary_name_ref" span="279:14:279:16">in</jtok>
<jtok eid="8" type="primary_name_ref" span="280:13:280:15">in</jtok>
<jtok eid="8" type="primary_name_ref" span="280:18:280:29">Interpreter</jtok>
<jtok eid="8" type="method_call" span="280:36:280:55">getResourceAsStream</jtok>
<jtok eid="8" type="primary_name_ref" span="280:57:280:61">path</jtok>
<jtok eid="8" type="primary_name_ref" span="282:16:282:18">in</jtok>
<jtok eid="1" type="block_comment" span="285:5:291:7">/**
        Cache info about whether name is a class or not.
        @param value
            if value is non-null, cache the class
            if value is null, set the flag that it is *not* a class to
            speed later resolution
    */</jtok>
<jtok eid="9" type="method_name" span="292:17:292:31">cacheClassInfo</jtok>
<jtok eid="9" type="parameter_type" span="292:33:292:39">String</jtok>
<jtok eid="9" type="parameter_name" span="292:40:292:44">name</jtok>
<jtok eid="9" type="parameter_type" span="292:46:292:51">Class</jtok>
<jtok eid="9" type="parameter_name" span="292:52:292:57">value</jtok>
<jtok eid="9" type="primary_name_ref" span="293:14:293:19">value</jtok>
<jtok eid="9" type="primary_name_ref" span="294:13:294:31">absoluteClassCache</jtok>
<jtok eid="9" type="method_call" span="294:32:294:35">put</jtok>
<jtok eid="9" type="primary_name_ref" span="294:37:294:41">name</jtok>
<jtok eid="9" type="primary_name_ref" span="294:43:294:48">value</jtok>
<jtok eid="9" type="primary_name_ref" span="296:13:296:31">absoluteNonClasses</jtok>
<jtok eid="9" type="method_call" span="296:32:296:35">put</jtok>
<jtok eid="9" type="primary_name_ref" span="296:37:296:41">name</jtok>
<jtok eid="9" type="primary_name_ref" span="296:43:296:50">NOVALUE</jtok>
<jtok eid="1" type="block_comment" span="299:5:304:7">/**
        Cache a resolved (possibly overloaded) method based on the
        argument types used to invoke it, subject to classloader change.
        Static and Object methods are cached separately to support fast lookup
        in the general case where either will do.
    */</jtok>
<jtok eid="10" type="method_name" span="305:17:305:36">cacheResolvedMethod</jtok>
<jtok eid="10" type="parameter_type" span="306:9:306:14">Class</jtok>
<jtok eid="10" type="parameter_name" span="306:15:306:19">clas</jtok>
<jtok eid="10" type="parameter_type" span="306:21:306:26">Class</jtok>
<jtok eid="10" type="parameter_name" span="306:30:306:35">types</jtok>
<jtok eid="10" type="parameter_type" span="306:37:306:43">Method</jtok>
<jtok eid="10" type="parameter_name" span="306:44:306:50">method</jtok>
<jtok eid="10" type="primary_name_ref" span="308:14:308:25">Interpreter</jtok>
<jtok eid="10" type="qualified_name_ref" span="308:26:308:31">DEBUG</jtok>
<jtok eid="10" type="primary_name_ref" span="309:13:309:24">Interpreter</jtok>
<jtok eid="10" type="method_call" span="309:25:309:30">debug</jtok>
<jtok eid="10" type="string_literal" span="310:17:310:48">"cacheResolvedMethod putting: "</jtok>
<jtok eid="10" type="primary_name_ref" span="310:51:310:55">clas</jtok>
<jtok eid="10" type="string_literal" span="310:57:310:60">" "</jtok>
<jtok eid="10" type="primary_name_ref" span="310:62:310:68">method</jtok>
<jtok eid="10" type="class_or_interface_ref" span="312:9:312:21">SignatureKey</jtok>
<jtok eid="10" type="local_variable_name" span="312:22:312:24">sk</jtok>
<jtok eid="10" type="constructor_call" span="312:31:312:43">SignatureKey</jtok>
<jtok eid="10" type="primary_name_ref" span="312:45:312:49">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="312:51:312:57">method</jtok>
<jtok eid="10" type="method_call" span="312:58:312:65">getName</jtok>
<jtok eid="10" type="primary_name_ref" span="312:69:312:74">types</jtok>
<jtok eid="10" type="primary_name_ref" span="313:14:313:22">Modifier</jtok>
<jtok eid="10" type="method_call" span="313:23:313:31">isStatic</jtok>
<jtok eid="10" type="primary_name_ref" span="313:33:313:39">method</jtok>
<jtok eid="10" type="method_call" span="313:40:313:52">getModifiers</jtok>
<jtok eid="10" type="primary_name_ref" span="314:13:314:34">resolvedStaticMethods</jtok>
<jtok eid="10" type="method_call" span="314:35:314:38">put</jtok>
<jtok eid="10" type="primary_name_ref" span="314:40:314:42">sk</jtok>
<jtok eid="10" type="primary_name_ref" span="314:44:314:50">method</jtok>
<jtok eid="10" type="primary_name_ref" span="316:13:316:34">resolvedObjectMethods</jtok>
<jtok eid="10" type="method_call" span="316:35:316:38">put</jtok>
<jtok eid="10" type="primary_name_ref" span="316:40:316:42">sk</jtok>
<jtok eid="10" type="primary_name_ref" span="316:44:316:50">method</jtok>
<jtok eid="1" type="block_comment" span="319:5:323:7">/**
        Return a previously cached resolved method.
        @param onlyStatic specifies that only a static method may be returned.
        @return the Method or null
    */</jtok>
<jtok eid="11" type="class_or_interface_ref" span="324:15:324:21">Method</jtok>
<jtok eid="11" type="method_name" span="324:22:324:39">getResolvedMethod</jtok>
<jtok eid="11" type="parameter_type" span="325:9:325:14">Class</jtok>
<jtok eid="11" type="parameter_name" span="325:15:325:19">clas</jtok>
<jtok eid="11" type="parameter_type" span="325:21:325:27">String</jtok>
<jtok eid="11" type="parameter_name" span="325:28:325:38">methodName</jtok>
<jtok eid="11" type="parameter_type" span="325:40:325:45">Class</jtok>
<jtok eid="11" type="parameter_name" span="325:49:325:54">types</jtok>
<jtok eid="11" type="parameter_name" span="325:64:325:74">onlyStatic</jtok>
<jtok eid="11" type="class_or_interface_ref" span="327:9:327:21">SignatureKey</jtok>
<jtok eid="11" type="local_variable_name" span="327:22:327:24">sk</jtok>
<jtok eid="11" type="constructor_call" span="327:31:327:43">SignatureKey</jtok>
<jtok eid="11" type="primary_name_ref" span="327:45:327:49">clas</jtok>
<jtok eid="11" type="primary_name_ref" span="327:51:327:61">methodName</jtok>
<jtok eid="11" type="primary_name_ref" span="327:63:327:68">types</jtok>
<jtok eid="11" type="line_comment" span="329:9:329:50">// Try static and then object, if allowed</jtok>
<jtok eid="11" type="line_comment" span="330:9:330:62">// Note that the Java compiler should not allow both.</jtok>
<jtok eid="11" type="class_or_interface_ref" span="331:9:331:15">Method</jtok>
<jtok eid="11" type="local_variable_name" span="331:16:331:22">method</jtok>
<jtok eid="11" type="class_or_interface_ref" span="331:26:331:32">Method</jtok>
<jtok eid="11" type="primary_name_ref" span="331:33:331:54">resolvedStaticMethods</jtok>
<jtok eid="11" type="method_call" span="331:55:331:58">get</jtok>
<jtok eid="11" type="primary_name_ref" span="331:60:331:62">sk</jtok>
<jtok eid="11" type="primary_name_ref" span="332:14:332:20">method</jtok>
<jtok eid="11" type="primary_name_ref" span="332:33:332:43">onlyStatic</jtok>
<jtok eid="11" type="primary_name_ref" span="333:13:333:19">method</jtok>
<jtok eid="11" type="class_or_interface_ref" span="333:23:333:29">Method</jtok>
<jtok eid="11" type="primary_name_ref" span="333:30:333:51">resolvedObjectMethods</jtok>
<jtok eid="11" type="method_call" span="333:52:333:55">get</jtok>
<jtok eid="11" type="primary_name_ref" span="333:57:333:59">sk</jtok>
<jtok eid="11" type="primary_name_ref" span="335:14:335:25">Interpreter</jtok>
<jtok eid="11" type="qualified_name_ref" span="335:26:335:31">DEBUG</jtok>
<jtok eid="11" type="primary_name_ref" span="337:18:337:24">method</jtok>
<jtok eid="11" type="primary_name_ref" span="338:17:338:28">Interpreter</jtok>
<jtok eid="11" type="method_call" span="338:29:338:34">debug</jtok>
<jtok eid="11" type="string_literal" span="339:21:339:53">"getResolvedMethod cache MISS: "</jtok>
<jtok eid="11" type="primary_name_ref" span="339:56:339:60">clas</jtok>
<jtok eid="11" type="string_literal" span="339:62:339:67">" - "</jtok>
<jtok eid="11" type="primary_name_ref" span="339:68:339:78">methodName</jtok>
<jtok eid="11" type="primary_name_ref" span="341:17:341:28">Interpreter</jtok>
<jtok eid="11" type="method_call" span="341:29:341:34">debug</jtok>
<jtok eid="11" type="string_literal" span="342:21:342:52">"getResolvedMethod cache HIT: "</jtok>
<jtok eid="11" type="primary_name_ref" span="342:55:342:59">clas</jtok>
<jtok eid="11" type="string_literal" span="342:61:342:66">" - "</jtok>
<jtok eid="11" type="primary_name_ref" span="342:68:342:74">method</jtok>
<jtok eid="11" type="primary_name_ref" span="344:16:344:22">method</jtok>
<jtok eid="1" type="block_comment" span="347:5:349:7">/**
        Clear the caches in BshClassManager
    */</jtok>
<jtok eid="12" type="method_name" span="350:20:350:31">clearCaches</jtok>
<jtok eid="12" type="primary_name_ref" span="352:9:352:27">absoluteNonClasses</jtok>
<jtok eid="12" type="constructor_call" span="352:34:352:43">Hashtable</jtok>
<jtok eid="12" type="primary_name_ref" span="353:9:353:27">absoluteClassCache</jtok>
<jtok eid="12" type="constructor_call" span="353:34:353:43">Hashtable</jtok>
<jtok eid="12" type="primary_name_ref" span="354:9:354:30">resolvedObjectMethods</jtok>
<jtok eid="12" type="constructor_call" span="354:37:354:46">Hashtable</jtok>
<jtok eid="12" type="primary_name_ref" span="355:9:355:30">resolvedStaticMethods</jtok>
<jtok eid="12" type="constructor_call" span="355:37:355:46">Hashtable</jtok>
<jtok eid="1" type="block_comment" span="358:5:368:7">/**
        Set an external class loader.  BeanShell will use this at the same
        point it would otherwise use the plain Class.forName().
        i.e. if no explicit classpath management is done from the script
        (addClassPath(), setClassPath(), reloadClasses()) then BeanShell will
        only use the supplied classloader.  If additional classpath management
        is done then BeanShell will perform that in addition to the supplied
        external classloader.
        However BeanShell is not currently able to reload
        classes supplied through the external classloader.
    */</jtok>
<jtok eid="13" type="method_name" span="369:17:369:31">setClassLoader</jtok>
<jtok eid="13" type="parameter_type" span="369:33:369:44">ClassLoader</jtok>
<jtok eid="13" type="parameter_name" span="369:45:369:55">externalCL</jtok>
<jtok eid="13" type="primary_name_ref" span="371:9:371:28">externalClassLoader</jtok>
<jtok eid="13" type="primary_name_ref" span="371:31:371:41">externalCL</jtok>
<jtok eid="13" type="method_call" span="372:9:372:27">classLoaderChanged</jtok>
<jtok eid="14" type="method_name" span="375:17:375:29">addClassPath</jtok>
<jtok eid="14" type="parameter_type" span="375:31:375:34">URL</jtok>
<jtok eid="14" type="parameter_name" span="375:35:375:39">path</jtok>
<jtok eid="14" type="throws" span="376:16:376:27">IOException</jtok>
<jtok eid="1" type="block_comment" span="379:5:381:7">/**
        Clear all loaders and start over.  No class loading.
    */</jtok>
<jtok eid="15" type="method_name" span="382:17:382:22">reset</jtok>
<jtok eid="15" type="method_call" span="383:9:383:20">clearCaches</jtok>
<jtok eid="1" type="block_comment" span="386:5:389:7">/**
        Set a new base classpath and create a new base classloader.
        This means all types change.
    */</jtok>
<jtok eid="16" type="method_name" span="390:17:390:29">setClassPath</jtok>
<jtok eid="16" type="parameter_type" span="390:31:390:34">URL</jtok>
<jtok eid="16" type="parameter_name" span="390:38:390:40">cp</jtok>
<jtok eid="16" type="throws" span="391:16:391:29">UtilEvalError</jtok>
<jtok eid="16" type="method_call" span="393:15:393:28">cmUnavailable</jtok>
<jtok eid="1" type="block_comment" span="396:5:401:7">/**
        Overlay the entire path with a new class loader.
        Set the base path to the user path + base path.

        No point in including the boot class path (can't reload thos).
    */</jtok>
<jtok eid="17" type="method_name" span="402:17:402:33">reloadAllClasses</jtok>
<jtok eid="17" type="throws" span="402:43:402:56">UtilEvalError</jtok>
<jtok eid="17" type="method_call" span="403:15:403:28">cmUnavailable</jtok>
<jtok eid="1" type="block_comment" span="406:5:410:7">/**
        Reloading classes means creating a new classloader and using it
        whenever we are asked for classes in the appropriate space.
        For this we use a DiscreteFilesClassLoader
    */</jtok>
<jtok eid="18" type="method_name" span="411:17:411:30">reloadClasses</jtok>
<jtok eid="18" type="parameter_type" span="411:32:411:38">String</jtok>
<jtok eid="18" type="parameter_name" span="411:42:411:52">classNames</jtok>
<jtok eid="18" type="throws" span="412:16:412:29">UtilEvalError</jtok>
<jtok eid="18" type="method_call" span="414:15:414:28">cmUnavailable</jtok>
<jtok eid="1" type="block_comment" span="417:5:422:7">/**
        Reload all classes in the specified package: e.g. "com.sun.tools"

        The special package name "&lt;unpackaged&gt;" can be used to refer
        to unpackaged classes.
    */</jtok>
<jtok eid="19" type="method_name" span="423:17:423:30">reloadPackage</jtok>
<jtok eid="19" type="parameter_type" span="423:32:423:38">String</jtok>
<jtok eid="19" type="parameter_name" span="423:39:423:43">pack</jtok>
<jtok eid="19" type="throws" span="424:16:424:29">UtilEvalError</jtok>
<jtok eid="19" type="method_call" span="426:15:426:28">cmUnavailable</jtok>
<jtok eid="1" type="block_comment" span="429:5:435:7">/**
        This has been removed from the interface to shield the core from the
        rest of the classpath package. If you need the classpath you will have
        to cast the classmanager to its impl.

        public BshClassPath getClassPath() throws ClassPathException;
    */</jtok>
<jtok eid="1" type="block_comment" span="437:5:440:7">/**
        Support for "import *;"
        Hide details in here as opposed to NameSpace.
    */</jtok>
<jtok eid="20" type="method_name" span="441:20:441:33">doSuperImport</jtok>
<jtok eid="20" type="throws" span="442:16:442:29">UtilEvalError</jtok>
<jtok eid="20" type="method_call" span="444:15:444:28">cmUnavailable</jtok>
<jtok eid="1" type="block_comment" span="447:5:449:7">/**
        A "super import" ("import *") operation has been performed.
    */</jtok>
<jtok eid="21" type="method_name" span="450:23:450:37">hasSuperImport</jtok>
<jtok eid="1" type="block_comment" span="455:5:458:7">/**
        Return the name or null if none is found,
        Throw an ClassPathException containing detail if name is ambigous.
    */</jtok>
<jtok eid="22" type="class_or_interface_ref" span="459:15:459:21">String</jtok>
<jtok eid="22" type="method_name" span="459:22:459:43">getClassNameByUnqName</jtok>
<jtok eid="22" type="parameter_type" span="459:45:459:51">String</jtok>
<jtok eid="22" type="parameter_name" span="459:52:459:56">name</jtok>
<jtok eid="22" type="throws" span="460:16:460:29">UtilEvalError</jtok>
<jtok eid="22" type="method_call" span="462:15:462:28">cmUnavailable</jtok>
<jtok eid="23" type="method_name" span="465:17:465:28">addListener</jtok>
<jtok eid="23" type="parameter_type" span="465:30:465:38">Listener</jtok>
<jtok eid="23" type="parameter_name" span="465:39:465:40">l</jtok>
<jtok eid="24" type="method_name" span="467:17:467:31">removeListener</jtok>
<jtok eid="24" type="parameter_type" span="467:33:467:41">Listener</jtok>
<jtok eid="24" type="parameter_name" span="467:42:467:43">l</jtok>
<jtok eid="25" type="method_name" span="469:17:469:21">dump</jtok>
<jtok eid="25" type="parameter_type" span="469:23:469:34">PrintWriter</jtok>
<jtok eid="25" type="parameter_name" span="469:35:469:37">pw</jtok>
<jtok eid="25" type="primary_name_ref" span="470:9:470:11">pw</jtok>
<jtok eid="25" type="method_call" span="470:12:470:19">println</jtok>
<jtok eid="25" type="string_literal" span="470:20:470:56">"BshClassManager: no class manager."</jtok>
<jtok eid="1" type="block_comment" span="473:5:476:7">/**
        Flag the class name as being in the process of being defined.
        The class manager will not attempt to load it.
    */</jtok>
<jtok eid="1" type="block_comment" span="477:5:485:7">/*
        Note: this implementation is temporary. We currently keep a flat
        namespace of the base name of classes.  i.e. BeanShell cannot be in the
        process of defining two classes in different packages with the same
        base name.  To remove this limitation requires that we work through
        namespace imports in an analogous (or using the same path) as regular
        class import resolution.  This workaround should handle most cases
        so we'll try it for now.
    */</jtok>
<jtok eid="26" type="method_name" span="486:20:486:33">definingClass</jtok>
<jtok eid="26" type="parameter_type" span="486:35:486:41">String</jtok>
<jtok eid="26" type="parameter_name" span="486:42:486:51">className</jtok>
<jtok eid="26" type="class_or_interface_ref" span="487:9:487:15">String</jtok>
<jtok eid="26" type="local_variable_name" span="487:16:487:24">baseName</jtok>
<jtok eid="26" type="primary_name_ref" span="487:27:487:31">Name</jtok>
<jtok eid="26" type="method_call" span="487:32:487:38">suffix</jtok>
<jtok eid="26" type="primary_name_ref" span="487:39:487:48">className</jtok>
<jtok eid="26" type="local_variable_name" span="488:13:488:14">i</jtok>
<jtok eid="26" type="primary_name_ref" span="488:17:488:25">baseName</jtok>
<jtok eid="26" type="method_call" span="488:26:488:33">indexOf</jtok>
<jtok eid="26" type="string_literal" span="488:34:488:37">"$"</jtok>
<jtok eid="26" type="primary_name_ref" span="489:14:489:15">i</jtok>
<jtok eid="26" type="primary_name_ref" span="490:13:490:21">baseName</jtok>
<jtok eid="26" type="primary_name_ref" span="490:24:490:32">baseName</jtok>
<jtok eid="26" type="method_call" span="490:33:490:42">substring</jtok>
<jtok eid="26" type="primary_name_ref" span="490:43:490:44">i</jtok>
<jtok eid="26" type="class_or_interface_ref" span="491:9:491:15">String</jtok>
<jtok eid="26" type="local_variable_name" span="491:16:491:19">cur</jtok>
<jtok eid="26" type="class_or_interface_ref" span="491:23:491:29">String</jtok>
<jtok eid="26" type="primary_name_ref" span="491:30:491:54">definingClassesBaseNames</jtok>
<jtok eid="26" type="method_call" span="491:55:491:58">get</jtok>
<jtok eid="26" type="primary_name_ref" span="491:60:491:68">baseName</jtok>
<jtok eid="26" type="primary_name_ref" span="492:14:492:17">cur</jtok>
<jtok eid="26" type="constructor_call" span="493:23:493:39">InterpreterError</jtok>
<jtok eid="26" type="string_literal" span="493:40:493:66">"Defining class problem: "</jtok>
<jtok eid="26" type="primary_name_ref" span="493:67:493:76">className</jtok>
<jtok eid="26" type="string_literal" span="494:18:494:77">": BeanShell cannot yet simultaneously define two or more "</jtok>
<jtok eid="26" type="string_literal" span="495:18:495:76">"dependant classes of the same name.  Attempt to define: "</jtok>
<jtok eid="26" type="primary_name_ref" span="496:19:496:28">className</jtok>
<jtok eid="26" type="string_literal" span="496:30:496:49">" while defining: "</jtok>
<jtok eid="26" type="primary_name_ref" span="496:50:496:53">cur</jtok>
<jtok eid="26" type="primary_name_ref" span="498:9:498:24">definingClasses</jtok>
<jtok eid="26" type="method_call" span="498:25:498:28">put</jtok>
<jtok eid="26" type="primary_name_ref" span="498:30:498:39">className</jtok>
<jtok eid="26" type="primary_name_ref" span="498:41:498:48">NOVALUE</jtok>
<jtok eid="26" type="primary_name_ref" span="499:9:499:33">definingClassesBaseNames</jtok>
<jtok eid="26" type="method_call" span="499:34:499:37">put</jtok>
<jtok eid="26" type="primary_name_ref" span="499:39:499:47">baseName</jtok>
<jtok eid="26" type="primary_name_ref" span="499:49:499:58">className</jtok>
<jtok eid="27" type="method_name" span="502:23:502:42">isClassBeingDefined</jtok>
<jtok eid="27" type="parameter_type" span="502:44:502:50">String</jtok>
<jtok eid="27" type="parameter_name" span="502:51:502:60">className</jtok>
<jtok eid="27" type="primary_name_ref" span="503:16:503:31">definingClasses</jtok>
<jtok eid="27" type="method_call" span="503:32:503:35">get</jtok>
<jtok eid="27" type="primary_name_ref" span="503:37:503:46">className</jtok>
<jtok eid="1" type="block_comment" span="506:5:509:7">/**
        This method is a temporary workaround used with definingClass.
        It is to be removed at some point.
    */</jtok>
<jtok eid="28" type="class_or_interface_ref" span="510:15:510:21">String</jtok>
<jtok eid="28" type="method_name" span="510:22:510:42">getClassBeingDefined</jtok>
<jtok eid="28" type="parameter_type" span="510:44:510:50">String</jtok>
<jtok eid="28" type="parameter_name" span="510:51:510:60">className</jtok>
<jtok eid="28" type="class_or_interface_ref" span="511:9:511:15">String</jtok>
<jtok eid="28" type="local_variable_name" span="511:16:511:24">baseName</jtok>
<jtok eid="28" type="primary_name_ref" span="511:27:511:31">Name</jtok>
<jtok eid="28" type="method_call" span="511:32:511:38">suffix</jtok>
<jtok eid="28" type="primary_name_ref" span="511:39:511:48">className</jtok>
<jtok eid="28" type="class_or_interface_ref" span="512:17:512:23">String</jtok>
<jtok eid="28" type="primary_name_ref" span="512:24:512:48">definingClassesBaseNames</jtok>
<jtok eid="28" type="method_call" span="512:49:512:52">get</jtok>
<jtok eid="28" type="primary_name_ref" span="512:54:512:62">baseName</jtok>
<jtok eid="1" type="block_comment" span="515:5:518:7">/**
        Indicate that the specified class name has been defined and may be
        loaded normally.
    */</jtok>
<jtok eid="29" type="method_name" span="519:20:519:37">doneDefiningClass</jtok>
<jtok eid="29" type="parameter_type" span="519:39:519:45">String</jtok>
<jtok eid="29" type="parameter_name" span="519:46:519:55">className</jtok>
<jtok eid="29" type="class_or_interface_ref" span="520:9:520:15">String</jtok>
<jtok eid="29" type="local_variable_name" span="520:16:520:24">baseName</jtok>
<jtok eid="29" type="primary_name_ref" span="520:27:520:31">Name</jtok>
<jtok eid="29" type="method_call" span="520:32:520:38">suffix</jtok>
<jtok eid="29" type="primary_name_ref" span="520:39:520:48">className</jtok>
<jtok eid="29" type="primary_name_ref" span="521:9:521:24">definingClasses</jtok>
<jtok eid="29" type="method_call" span="521:25:521:31">remove</jtok>
<jtok eid="29" type="primary_name_ref" span="521:33:521:42">className</jtok>
<jtok eid="29" type="primary_name_ref" span="522:9:522:33">definingClassesBaseNames</jtok>
<jtok eid="29" type="method_call" span="522:34:522:40">remove</jtok>
<jtok eid="29" type="primary_name_ref" span="522:42:522:50">baseName</jtok>
<jtok eid="1" type="block_comment" span="525:5:528:7">/*
        The real implementation in the classpath.ClassManagerImpl handles
        reloading of the generated classes.
    */</jtok>
<jtok eid="30" type="class_or_interface_ref" span="529:12:529:17">Class</jtok>
<jtok eid="30" type="method_name" span="529:18:529:29">defineClass</jtok>
<jtok eid="30" type="parameter_type" span="529:31:529:37">String</jtok>
<jtok eid="30" type="parameter_name" span="529:38:529:42">name</jtok>
<jtok eid="30" type="parameter_name" span="529:52:529:56">code</jtok>
<jtok eid="30" type="constructor_call" span="531:19:531:35">InterpreterError</jtok>
<jtok eid="30" type="string_literal" span="531:36:531:58">"Can't create class ("</jtok>
<jtok eid="30" type="primary_name_ref" span="531:59:531:63">name</jtok>
<jtok eid="30" type="string_literal" span="532:14:532:48">") without class manager package."</jtok>
<jtok eid="30" type="block_comment" span="533:5:557:7">/*
        Old implementation injected classes into the parent classloader.
        This was incorrect behavior for several reasons.  The biggest problem
        is that classes could therefore only be defined once across all
        executions of the script...

        ClassLoader cl = this.getClass().getClassLoader();
        Class clas;
        try {
            clas = (Class)Reflect.invokeObjectMethod(
                cl, "defineClass",
                new Object [] {
                    name, code,
                    new Primitive( (int)0 )/offset/,
                    new Primitive( code.length )/len/
                },
                (Interpreter)null, (CallStack)null, (SimpleNode)null
            );
        } catch ( Exception e ) {
            e.printStackTrace();
            throw new InterpreterError("Unable to define class: "+ e );
        }
        absoluteNonClasses.remove( name ); // may have been axed previously
        return clas;
    */</jtok>
<jtok eid="31" type="method_name" span="560:20:560:38">classLoaderChanged</jtok>
<jtok eid="1" type="block_comment" span="562:5:565:7">/**
        Annotate the NoClassDefFoundError with some info about the class
        we were trying to load.
    */</jtok>
<jtok eid="32" type="class_or_interface_ref" span="566:22:566:27">Error</jtok>
<jtok eid="32" type="method_name" span="566:28:566:43">noClassDefFound</jtok>
<jtok eid="32" type="parameter_type" span="566:45:566:51">String</jtok>
<jtok eid="32" type="parameter_name" span="566:52:566:61">className</jtok>
<jtok eid="32" type="parameter_type" span="566:63:566:68">Error</jtok>
<jtok eid="32" type="parameter_name" span="566:69:566:70">e</jtok>
<jtok eid="32" type="constructor_call" span="567:20:567:40">NoClassDefFoundError</jtok>
<jtok eid="32" type="string_literal" span="568:13:568:42">"A class required by class: "</jtok>
<jtok eid="32" type="primary_name_ref" span="568:43:568:52">className</jtok>
<jtok eid="32" type="string_literal" span="568:54:568:79">" could not be loaded:\n"</jtok>
<jtok eid="32" type="primary_name_ref" span="569:14:569:15">e</jtok>
<jtok eid="32" type="method_call" span="569:16:569:24">toString</jtok>
<jtok eid="33" type="class_or_interface_ref" span="572:22:572:35">UtilEvalError</jtok>
<jtok eid="33" type="method_name" span="572:36:572:49">cmUnavailable</jtok>
<jtok eid="33" type="constructor_call" span="573:20:573:32">Capabilities</jtok>
<jtok eid="33" type="constructor_call" span="573:33:573:44">Unavailable</jtok>
<jtok eid="33" type="string_literal" span="574:13:574:49">"ClassLoading features unavailable."</jtok>
<jtok eid="34" type="interface_name" span="577:29:577:37">Listener</jtok>
<jtok eid="35" type="method_name" span="579:21:579:39">classLoaderChanged</jtok>
<jtok eid="1" type="block_comment" span="582:5:586:7">/**
        SignatureKey serves as a hash of a method signature on a class
        for fast lookup of overloaded and general resolved Java methods.
        &lt;p&gt;
    */</jtok>
<jtok eid="1" type="block_comment" span="587:5:596:7">/*
        Note: is using SignatureKey in this way dangerous?  In the pathological
        case a user could eat up memory caching every possible combination of
        argument types to an untyped method.  Maybe we could be smarter about
        it by ignoring the types of untyped parameter positions?  The method
        resolver could return a set of "hints" for the signature key caching?

        There is also the overhead of creating one of these for every method
        dispatched.  What is the alternative?
    */</jtok>
<jtok eid="36" type="class_name" span="597:18:597:30">SignatureKey</jtok>
<jtok eid="36" type="class_or_interface_ref" span="599:9:599:14">Class</jtok>
<jtok eid="36" type="field_name" span="599:15:599:19">clas</jtok>
<jtok eid="36" type="class_or_interface_ref" span="600:9:600:14">Class</jtok>
<jtok eid="36" type="field_name" span="600:18:600:23">types</jtok>
<jtok eid="36" type="class_or_interface_ref" span="601:9:601:15">String</jtok>
<jtok eid="36" type="field_name" span="601:16:601:26">methodName</jtok>
<jtok eid="36" type="field_name" span="602:13:602:21">hashCode</jtok>
<jtok eid="37" type="method_name" span="604:9:604:21">SignatureKey</jtok>
<jtok eid="37" type="parameter_type" span="604:23:604:28">Class</jtok>
<jtok eid="37" type="parameter_name" span="604:29:604:33">clas</jtok>
<jtok eid="37" type="parameter_type" span="604:35:604:41">String</jtok>
<jtok eid="37" type="parameter_name" span="604:42:604:52">methodName</jtok>
<jtok eid="37" type="parameter_type" span="604:54:604:59">Class</jtok>
<jtok eid="37" type="parameter_name" span="604:63:604:68">types</jtok>
<jtok eid="37" type="qualified_name_ref" span="605:18:605:22">clas</jtok>
<jtok eid="37" type="primary_name_ref" span="605:25:605:29">clas</jtok>
<jtok eid="37" type="qualified_name_ref" span="606:18:606:28">methodName</jtok>
<jtok eid="37" type="primary_name_ref" span="606:31:606:41">methodName</jtok>
<jtok eid="37" type="qualified_name_ref" span="607:18:607:23">types</jtok>
<jtok eid="37" type="primary_name_ref" span="607:26:607:31">types</jtok>
<jtok eid="38" type="method_name" span="610:20:610:28">hashCode</jtok>
<jtok eid="38" type="primary_name_ref" span="612:18:612:26">hashCode</jtok>
<jtok eid="38" type="primary_name_ref" span="614:17:614:25">hashCode</jtok>
<jtok eid="38" type="primary_name_ref" span="614:28:614:32">clas</jtok>
<jtok eid="38" type="method_call" span="614:33:614:41">hashCode</jtok>
<jtok eid="38" type="primary_name_ref" span="614:46:614:56">methodName</jtok>
<jtok eid="38" type="method_call" span="614:57:614:65">hashCode</jtok>
<jtok eid="38" type="primary_name_ref" span="615:22:615:27">types</jtok>
<jtok eid="38" type="line_comment" span="615:38:615:55">// no args method</jtok>
<jtok eid="38" type="primary_name_ref" span="616:28:616:36">hashCode</jtok>
<jtok eid="38" type="local_variable_name" span="617:26:617:27">i</jtok>
<jtok eid="38" type="primary_name_ref" span="617:32:617:33">i</jtok>
<jtok eid="38" type="primary_name_ref" span="617:36:617:41">types</jtok>
<jtok eid="38" type="qualified_name_ref" span="617:42:617:48">length</jtok>
<jtok eid="38" type="primary_name_ref" span="617:50:617:51">i</jtok>
<jtok eid="38" type="local_variable_name" span="618:25:618:27">hc</jtok>
<jtok eid="38" type="primary_name_ref" span="618:30:618:35">types</jtok>
<jtok eid="38" type="primary_name_ref" span="618:36:618:37">i</jtok>
<jtok eid="38" type="primary_name_ref" span="618:54:618:59">types</jtok>
<jtok eid="38" type="primary_name_ref" span="618:60:618:61">i</jtok>
<jtok eid="38" type="method_call" span="618:63:618:71">hashCode</jtok>
<jtok eid="38" type="primary_name_ref" span="619:21:619:29">hashCode</jtok>
<jtok eid="38" type="primary_name_ref" span="619:32:619:40">hashCode</jtok>
<jtok eid="38" type="primary_name_ref" span="619:42:619:43">i</jtok>
<jtok eid="38" type="primary_name_ref" span="619:49:619:51">hc</jtok>
<jtok eid="38" type="primary_name_ref" span="622:20:622:28">hashCode</jtok>
<jtok eid="39" type="method_name" span="625:24:625:30">equals</jtok>
<jtok eid="39" type="parameter_type" span="625:32:625:38">Object</jtok>
<jtok eid="39" type="parameter_name" span="625:39:625:40">o</jtok>
<jtok eid="39" type="class_or_interface_ref" span="626:13:626:25">SignatureKey</jtok>
<jtok eid="39" type="local_variable_name" span="626:26:626:32">target</jtok>
<jtok eid="39" type="class_or_interface_ref" span="626:36:626:48">SignatureKey</jtok>
<jtok eid="39" type="primary_name_ref" span="626:49:626:50">o</jtok>
<jtok eid="39" type="primary_name_ref" span="627:18:627:23">types</jtok>
<jtok eid="39" type="primary_name_ref" span="628:24:628:30">target</jtok>
<jtok eid="39" type="qualified_name_ref" span="628:31:628:36">types</jtok>
<jtok eid="39" type="primary_name_ref" span="629:18:629:22">clas</jtok>
<jtok eid="39" type="primary_name_ref" span="629:26:629:32">target</jtok>
<jtok eid="39" type="qualified_name_ref" span="629:33:629:37">clas</jtok>
<jtok eid="39" type="primary_name_ref" span="631:19:631:29">methodName</jtok>
<jtok eid="39" type="method_call" span="631:30:631:36">equals</jtok>
<jtok eid="39" type="primary_name_ref" span="631:38:631:44">target</jtok>
<jtok eid="39" type="qualified_name_ref" span="631:45:631:55">methodName</jtok>
<jtok eid="39" type="primary_name_ref" span="633:18:633:23">types</jtok>
<jtok eid="39" type="qualified_name_ref" span="633:24:633:30">length</jtok>
<jtok eid="39" type="primary_name_ref" span="633:34:633:40">target</jtok>
<jtok eid="39" type="qualified_name_ref" span="633:41:633:46">types</jtok>
<jtok eid="39" type="qualified_name_ref" span="633:47:633:53">length</jtok>
<jtok eid="39" type="local_variable_name" span="635:22:635:23">i</jtok>
<jtok eid="39" type="primary_name_ref" span="635:28:635:29">i</jtok>
<jtok eid="39" type="primary_name_ref" span="635:31:635:36">types</jtok>
<jtok eid="39" type="qualified_name_ref" span="635:37:635:43">length</jtok>
<jtok eid="39" type="primary_name_ref" span="635:45:635:46">i</jtok>
<jtok eid="39" type="primary_name_ref" span="637:22:637:27">types</jtok>
<jtok eid="39" type="primary_name_ref" span="637:28:637:29">i</jtok>
<jtok eid="39" type="primary_name_ref" span="639:28:639:34">target</jtok>
<jtok eid="39" type="qualified_name_ref" span="639:35:639:40">types</jtok>
<jtok eid="39" type="primary_name_ref" span="639:41:639:42">i</jtok>
<jtok eid="39" type="primary_name_ref" span="642:27:642:32">types</jtok>
<jtok eid="39" type="primary_name_ref" span="642:33:642:34">i</jtok>
<jtok eid="39" type="method_call" span="642:36:642:42">equals</jtok>
<jtok eid="39" type="primary_name_ref" span="642:44:642:50">target</jtok>
<jtok eid="39" type="qualified_name_ref" span="642:51:642:56">types</jtok>
<jtok eid="39" type="primary_name_ref" span="642:57:642:58">i</jtok>
</jdoc>