<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.Name" jls="java5">
<jent id="0" type="file" span="0:0:1066:1">Source/jEdit/org/gjt/sp/jedit/bsh/Name.java</jent>
<jent id="1" pid="0" type="class" span="95:1:1065:1">org.gjt.sp.jedit.bsh.Name</jent>
<jent id="2" pid="1" type="method" span="140:2:144:2">org.gjt.sp.jedit.bsh.Name.reset()</jent>
<jent id="3" pid="1" type="method" span="152:2:156:2">org.gjt.sp.jedit.bsh.Name.Name(NameSpace,String)</jent>
<jent id="4" pid="1" type="method" span="179:2:183:2">org.gjt.sp.jedit.bsh.Name.toObject(CallStack,Interpreter)</jent>
<jent id="5" pid="1" type="method" span="191:2:206:2">org.gjt.sp.jedit.bsh.Name.toObject(CallStack,Interpreter,boolean)</jent>
<jent id="6" pid="1" type="method" span="208:2:217:2">org.gjt.sp.jedit.bsh.Name.completeRound(String,String,Object)</jent>
<jent id="7" pid="1" type="method" span="225:2:455:2">org.gjt.sp.jedit.bsh.Name.consumeNextObjectField(CallStack,Interpreter,boolean,boolean)</jent>
<jent id="8" pid="1" type="method" span="473:2:598:2">org.gjt.sp.jedit.bsh.Name.resolveThisFieldReference(CallStack,NameSpace,Interpreter,String,boolean)</jent>
<jent id="9" pid="1" type="method" span="603:2:618:2">org.gjt.sp.jedit.bsh.Name.getClassNameSpace(NameSpace)</jent>
<jent id="10" pid="1" type="method" span="628:2:666:2">org.gjt.sp.jedit.bsh.Name.toClass()</jent>
<jent id="11" pid="1" type="method" span="670:2:755:2">org.gjt.sp.jedit.bsh.Name.toLHS(CallStack,Interpreter)</jent>
<jent id="12" pid="1" type="method" span="781:5:875:5">org.gjt.sp.jedit.bsh.Name.invokeMethod(Interpreter,Object[],CallStack,SimpleNode)</jent>
<jent id="13" pid="1" type="method" span="888:5:968:5">org.gjt.sp.jedit.bsh.Name.invokeLocalMethod(Interpreter,Object[],CallStack,SimpleNode)</jent>
<jent id="14" pid="1" type="method" span="997:2:1001:2">org.gjt.sp.jedit.bsh.Name.isCompound(String)</jent>
<jent id="15" pid="1" type="method" span="1003:2:1013:2">org.gjt.sp.jedit.bsh.Name.countParts(String)</jent>
<jent id="16" pid="1" type="method" span="1015:2:1021:2">org.gjt.sp.jedit.bsh.Name.prefix(String)</jent>
<jent id="17" pid="1" type="method" span="1023:2:1036:2">org.gjt.sp.jedit.bsh.Name.prefix(String,int)</jent>
<jent id="18" pid="1" type="method" span="1038:2:1044:2">org.gjt.sp.jedit.bsh.Name.suffix(String)</jent>
<jent id="19" pid="1" type="method" span="1046:2:1058:2">org.gjt.sp.jedit.bsh.Name.suffix(String,int)</jent>
<jent id="20" pid="1" type="method" span="1063:2:1063:43">org.gjt.sp.jedit.bsh.Name.toString()</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="40:1:57:3">/**
	What's in a name?  I'll tell you...
	Name() is a somewhat ambiguous thing in the grammar and so is this.
	&lt;p&gt;
	
	This class is a name resolver.  It holds a possibly ambiguous dot 
	separated name and reference to a namespace in which it allegedly lives.  
	It provides methods that attempt to resolve the name to various types of 
	entities: e.g. an Object, a Class, a declared scripted BeanShell method.
	&lt;p&gt;

	Name objects are created by the factory method NameSpace getNameResolver(), 
	which caches them subject to a class namespace change.  This means that 
	we can cache information about various types of resolution here.
	Currently very little if any information is cached.  However with a future
	"optimize" setting that defeats certain dynamic behavior we might be able
	to cache quite a bit.
*/</jtok>
<jtok eid="0" type="block_comment" span="58:1:94:3">/*
	&lt;strong&gt;Implementation notes&lt;/strong&gt;
	&lt;pre&gt;
	Thread safety: all of the work methods in this class must be synchronized
	because they share the internal intermediate evaluation state.

	Note about invokeMethod():  We could simply use resolveMethod and return
	the MethodInvoker (BshMethod or JavaMethod) however there is no easy way
	for the AST (BSHMehodInvocation) to use this as it doesn't have type
	information about the target to resolve overloaded methods.
	(In Java, overloaded methods are resolved at compile time... here they
	are, of necessity, dynamic).  So it would have to do what we do here
	and cache by signature.  We now do that for the client in Reflect.java.

	Note on this.caller resolution:
	Although references like these do work:

		this.caller.caller.caller...   // works

	the equivalent using successive calls:

		// does *not* work
		for( caller=this.caller; caller != null; caller = caller.caller );

	is prohibited by the restriction that you can only call .caller on a 
	literal	this or caller reference.  The effect is that magic caller 
	reference only works through the current 'this' reference.
	The real explanation is that This referernces do not really know anything
	about their depth on the call stack.  It might even be hard to define
	such a thing...

	For those purposes we provide :

		this.callstack

	&lt;/pre&gt;
*/</jtok>
<jtok eid="1" type="class_name" span="95:7:95:11">Name</jtok>
<jtok eid="1" type="class_or_interface_ref" span="95:23:95:27">java</jtok>
<jtok eid="1" type="class_or_interface_ref" span="95:28:95:30">io</jtok>
<jtok eid="1" type="class_or_interface_ref" span="95:31:95:43">Serializable</jtok>
<jtok eid="1" type="line_comment" span="97:2:97:42">// These do not change during evaluation</jtok>
<jtok eid="1" type="class_or_interface_ref" span="98:9:98:18">NameSpace</jtok>
<jtok eid="1" type="field_name" span="98:19:98:28">namespace</jtok>
<jtok eid="1" type="class_or_interface_ref" span="99:2:99:8">String</jtok>
<jtok eid="1" type="field_name" span="99:9:99:14">value</jtok>
<jtok eid="1" type="line_comment" span="101:2:101:62">// ---------------------------------------------------------</jtok>
<jtok eid="1" type="line_comment" span="102:2:102:73">// The following instance variables mutate during evaluation and should</jtok>
<jtok eid="1" type="line_comment" span="103:2:103:51">// be reset by the reset() method where necessary</jtok>
<jtok eid="1" type="line_comment" span="105:2:105:19">// For evaluation</jtok>
<jtok eid="1" type="block_comment" span="106:2:106:35">/** Remaining text to evaluate */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="107:10:107:16">String</jtok>
<jtok eid="1" type="field_name" span="107:17:107:25">evalName</jtok>
<jtok eid="1" type="block_comment" span="108:2:111:4">/** 
		The last part of the name evaluated.  This is really only used for
	 	this, caller, and super resolution.
	*/</jtok>
<jtok eid="1" type="class_or_interface_ref" span="112:10:112:16">String</jtok>
<jtok eid="1" type="field_name" span="112:17:112:29">lastEvalName</jtok>
<jtok eid="1" type="class_or_interface_ref" span="113:17:113:23">String</jtok>
<jtok eid="1" type="field_name" span="113:24:113:32">FINISHED</jtok>
<jtok eid="1" type="line_comment" span="113:41:113:76">// null evalname and we're finished</jtok>
<jtok eid="1" type="class_or_interface_ref" span="114:10:114:16">Object</jtok>
<jtok eid="1" type="field_name" span="114:17:114:31">evalBaseObject</jtok>
<jtok eid="1" type="line_comment" span="114:33:114:64">// base object for current eval</jtok>
<jtok eid="1" type="field_name" span="116:14:116:28">callstackDepth</jtok>
<jtok eid="1" type="line_comment" span="116:31:116:72">// number of times eval hit 'this.caller'</jtok>
<jtok eid="1" type="line_comment" span="118:2:118:4">//</jtok>
<jtok eid="1" type="line_comment" span="119:2:119:37">//  End mutable instance variables.</jtok>
<jtok eid="1" type="line_comment" span="120:2:120:62">// ---------------------------------------------------------</jtok>
<jtok eid="1" type="line_comment" span="122:2:122:35">// Begin Cached result structures</jtok>
<jtok eid="1" type="line_comment" span="123:2:123:28">// These are optimizations</jtok>
<jtok eid="1" type="line_comment" span="125:2:125:72">// Note: it's ok to cache class resolution here because when the class</jtok>
<jtok eid="1" type="line_comment" span="126:2:126:59">// space changes the namespace will discard cached names.</jtok>
<jtok eid="1" type="block_comment" span="128:2:130:4">/** 
		The result is a class 
	*/</jtok>
<jtok eid="1" type="class_or_interface_ref" span="131:2:131:7">Class</jtok>
<jtok eid="1" type="field_name" span="131:8:131:15">asClass</jtok>
<jtok eid="1" type="block_comment" span="133:2:135:4">/** 
		The result is a static method call on the following class 
	*/</jtok>
<jtok eid="1" type="class_or_interface_ref" span="136:2:136:7">Class</jtok>
<jtok eid="1" type="field_name" span="136:8:136:27">classOfStaticMethod</jtok>
<jtok eid="1" type="line_comment" span="138:2:138:33">// End Cached result structures</jtok>
<jtok eid="2" type="method_name" span="140:15:140:20">reset</jtok>
<jtok eid="2" type="primary_name_ref" span="141:3:141:11">evalName</jtok>
<jtok eid="2" type="primary_name_ref" span="141:14:141:19">value</jtok>
<jtok eid="2" type="primary_name_ref" span="142:3:142:17">evalBaseObject</jtok>
<jtok eid="2" type="primary_name_ref" span="143:3:143:17">callstackDepth</jtok>
<jtok eid="1" type="block_comment" span="146:2:150:4">/**
		This constructor should *not* be used in general. 
		Use NameSpace getNameResolver() which supports caching.
		@see NameSpace getNameResolver().
	*/</jtok>
<jtok eid="1" type="line_comment" span="151:2:151:58">// I wish I could make this "friendly" to only NameSpace</jtok>
<jtok eid="3" type="method_name" span="152:2:152:6">Name</jtok>
<jtok eid="3" type="parameter_type" span="152:8:152:17">NameSpace</jtok>
<jtok eid="3" type="parameter_name" span="152:18:152:27">namespace</jtok>
<jtok eid="3" type="parameter_type" span="152:29:152:35">String</jtok>
<jtok eid="3" type="parameter_name" span="152:36:152:37">s</jtok>
<jtok eid="3" type="qualified_name_ref" span="154:8:154:17">namespace</jtok>
<jtok eid="3" type="primary_name_ref" span="154:20:154:29">namespace</jtok>
<jtok eid="3" type="primary_name_ref" span="155:3:155:8">value</jtok>
<jtok eid="3" type="primary_name_ref" span="155:11:155:12">s</jtok>
<jtok eid="1" type="block_comment" span="158:2:178:4">/**
		Resolve possibly complex name to an object value.

		Throws EvalError on various failures.
		A null object value is indicated by a Primitive.NULL.
		A return type of Primitive.VOID comes from attempting to access
		an undefined variable.

		Some cases:
			myVariable
			myVariable.foo
			myVariable.foo.bar
			java.awt.GridBagConstraints.BOTH
			my.package.stuff.MyClass.someField.someField...

		Interpreter reference is necessary to allow resolution of 
		"this.interpreter" magic field.
		CallStack reference is necessary to allow resolution of 
		"this.caller" magic field.
		"this.callstack" magic field.
	*/</jtok>
<jtok eid="4" type="class_or_interface_ref" span="179:9:179:15">Object</jtok>
<jtok eid="4" type="method_name" span="179:16:179:24">toObject</jtok>
<jtok eid="4" type="parameter_type" span="179:26:179:35">CallStack</jtok>
<jtok eid="4" type="parameter_name" span="179:36:179:45">callstack</jtok>
<jtok eid="4" type="parameter_type" span="179:47:179:58">Interpreter</jtok>
<jtok eid="4" type="parameter_name" span="179:59:179:70">interpreter</jtok>
<jtok eid="4" type="throws" span="180:10:180:23">UtilEvalError</jtok>
<jtok eid="4" type="method_call" span="182:10:182:18">toObject</jtok>
<jtok eid="4" type="primary_name_ref" span="182:20:182:29">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="182:31:182:42">interpreter</jtok>
<jtok eid="1" type="block_comment" span="185:2:190:4">/**
		@see toObject()
		@param forceClass if true then resolution will only produce a class.
		This is necessary to disambiguate in cases where the grammar knows
		that we want a class; where in general the var path may be taken.
	*/</jtok>
<jtok eid="5" type="class_or_interface_ref" span="191:22:191:28">Object</jtok>
<jtok eid="5" type="method_name" span="191:29:191:37">toObject</jtok>
<jtok eid="5" type="parameter_type" span="192:3:192:12">CallStack</jtok>
<jtok eid="5" type="parameter_name" span="192:13:192:22">callstack</jtok>
<jtok eid="5" type="parameter_type" span="192:24:192:35">Interpreter</jtok>
<jtok eid="5" type="parameter_name" span="192:36:192:47">interpreter</jtok>
<jtok eid="5" type="parameter_name" span="192:57:192:67">forceClass</jtok>
<jtok eid="5" type="throws" span="193:10:193:23">UtilEvalError</jtok>
<jtok eid="5" type="method_call" span="195:3:195:8">reset</jtok>
<jtok eid="5" type="class_or_interface_ref" span="197:3:197:9">Object</jtok>
<jtok eid="5" type="local_variable_name" span="197:10:197:13">obj</jtok>
<jtok eid="5" type="primary_name_ref" span="198:10:198:18">evalName</jtok>
<jtok eid="5" type="primary_name_ref" span="199:4:199:7">obj</jtok>
<jtok eid="5" type="method_call" span="199:10:199:32">consumeNextObjectField</jtok>
<jtok eid="5" type="primary_name_ref" span="200:5:200:14">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="200:16:200:27">interpreter</jtok>
<jtok eid="5" type="primary_name_ref" span="200:29:200:39">forceClass</jtok>
<jtok eid="5" type="block_comment" span="200:46:200:59">/*autoalloc*/</jtok>
<jtok eid="5" type="primary_name_ref" span="202:8:202:11">obj</jtok>
<jtok eid="5" type="constructor_call" span="203:14:203:30">InterpreterError</jtok>
<jtok eid="5" type="string_literal" span="203:31:203:57">"null value in toObject()"</jtok>
<jtok eid="5" type="primary_name_ref" span="205:10:205:13">obj</jtok>
<jtok eid="6" type="class_or_interface_ref" span="208:10:208:16">Object</jtok>
<jtok eid="6" type="method_name" span="208:17:208:30">completeRound</jtok>
<jtok eid="6" type="parameter_type" span="209:3:209:9">String</jtok>
<jtok eid="6" type="parameter_name" span="209:10:209:22">lastEvalName</jtok>
<jtok eid="6" type="parameter_type" span="209:24:209:30">String</jtok>
<jtok eid="6" type="parameter_name" span="209:31:209:43">nextEvalName</jtok>
<jtok eid="6" type="parameter_type" span="209:45:209:51">Object</jtok>
<jtok eid="6" type="parameter_name" span="209:52:209:64">returnObject</jtok>
<jtok eid="6" type="primary_name_ref" span="211:8:211:20">returnObject</jtok>
<jtok eid="6" type="constructor_call" span="212:14:212:30">InterpreterError</jtok>
<jtok eid="6" type="string_literal" span="212:31:212:48">"lastEvalName = "</jtok>
<jtok eid="6" type="primary_name_ref" span="212:49:212:61">lastEvalName</jtok>
<jtok eid="6" type="qualified_name_ref" span="213:8:213:20">lastEvalName</jtok>
<jtok eid="6" type="primary_name_ref" span="213:23:213:35">lastEvalName</jtok>
<jtok eid="6" type="qualified_name_ref" span="214:8:214:16">evalName</jtok>
<jtok eid="6" type="primary_name_ref" span="214:19:214:31">nextEvalName</jtok>
<jtok eid="6" type="qualified_name_ref" span="215:8:215:22">evalBaseObject</jtok>
<jtok eid="6" type="primary_name_ref" span="215:25:215:37">returnObject</jtok>
<jtok eid="6" type="primary_name_ref" span="216:10:216:22">returnObject</jtok>
<jtok eid="1" type="block_comment" span="219:2:224:4">/**
		Get the next object by consuming one or more components of evalName.  
		Often this consumes just one component, but if the name is a classname 
		it will consume all of the components necessary to make the class 
		identifier.
	*/</jtok>
<jtok eid="7" type="class_or_interface_ref" span="225:10:225:16">Object</jtok>
<jtok eid="7" type="method_name" span="225:17:225:39">consumeNextObjectField</jtok>
<jtok eid="7" type="parameter_type" span="226:3:226:12">CallStack</jtok>
<jtok eid="7" type="parameter_name" span="226:13:226:22">callstack</jtok>
<jtok eid="7" type="parameter_type" span="226:24:226:35">Interpreter</jtok>
<jtok eid="7" type="parameter_name" span="226:36:226:47">interpreter</jtok>
<jtok eid="7" type="parameter_name" span="227:11:227:21">forceClass</jtok>
<jtok eid="7" type="parameter_name" span="227:31:227:47">autoAllocateThis</jtok>
<jtok eid="7" type="throws" span="228:10:228:23">UtilEvalError</jtok>
<jtok eid="7" type="block_comment" span="230:3:235:5">/*
			Is it a simple variable name?
			Doing this first gives the correct Java precedence for vars 
			vs. imported class names (at least in the simple case - see
			tests/precedence1.bsh).  It should also speed things up a bit.
		*/</jtok>
<jtok eid="7" type="primary_name_ref" span="236:9:236:23">evalBaseObject</jtok>
<jtok eid="7" type="method_call" span="236:36:236:46">isCompound</jtok>
<jtok eid="7" type="primary_name_ref" span="236:47:236:55">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="237:8:237:18">forceClass</jtok>
<jtok eid="7" type="class_or_interface_ref" span="239:4:239:10">Object</jtok>
<jtok eid="7" type="local_variable_name" span="239:11:239:14">obj</jtok>
<jtok eid="7" type="method_call" span="239:17:239:42">resolveThisFieldReference</jtok>
<jtok eid="7" type="primary_name_ref" span="240:5:240:14">callstack</jtok>
<jtok eid="7" type="primary_name_ref" span="240:16:240:25">namespace</jtok>
<jtok eid="7" type="primary_name_ref" span="240:27:240:38">interpreter</jtok>
<jtok eid="7" type="primary_name_ref" span="240:40:240:48">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="242:9:242:12">obj</jtok>
<jtok eid="7" type="primary_name_ref" span="242:16:242:25">Primitive</jtok>
<jtok eid="7" type="qualified_name_ref" span="242:26:242:30">VOID</jtok>
<jtok eid="7" type="method_call" span="243:12:243:25">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="243:27:243:35">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="243:37:243:45">FINISHED</jtok>
<jtok eid="7" type="primary_name_ref" span="243:47:243:50">obj</jtok>
<jtok eid="7" type="block_comment" span="246:3:250:5">/*
			Is it a bsh script variable reference?
			If we're just starting the eval of name (no base object)
			or we're evaluating relative to a This type reference check.
		*/</jtok>
<jtok eid="7" type="class_or_interface_ref" span="251:3:251:9">String</jtok>
<jtok eid="7" type="local_variable_name" span="251:10:251:17">varName</jtok>
<jtok eid="7" type="method_call" span="251:20:251:26">prefix</jtok>
<jtok eid="7" type="primary_name_ref" span="251:27:251:35">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="252:10:252:24">evalBaseObject</jtok>
<jtok eid="7" type="primary_name_ref" span="252:36:252:50">evalBaseObject</jtok>
<jtok eid="7" type="class_or_interface_ref" span="252:62:252:66">This</jtok>
<jtok eid="7" type="primary_name_ref" span="253:8:253:18">forceClass</jtok>
<jtok eid="7" type="primary_name_ref" span="255:9:255:20">Interpreter</jtok>
<jtok eid="7" type="qualified_name_ref" span="255:21:255:26">DEBUG</jtok>
<jtok eid="7" type="primary_name_ref" span="256:5:256:16">Interpreter</jtok>
<jtok eid="7" type="method_call" span="256:17:256:22">debug</jtok>
<jtok eid="7" type="string_literal" span="256:23:256:53">"trying to resolve variable: "</jtok>
<jtok eid="7" type="primary_name_ref" span="256:56:256:63">varName</jtok>
<jtok eid="7" type="class_or_interface_ref" span="258:4:258:10">Object</jtok>
<jtok eid="7" type="local_variable_name" span="258:11:258:14">obj</jtok>
<jtok eid="7" type="line_comment" span="259:4:259:50">// switch namespace and special var visibility</jtok>
<jtok eid="7" type="primary_name_ref" span="260:9:260:23">evalBaseObject</jtok>
<jtok eid="7" type="primary_name_ref" span="261:5:261:8">obj</jtok>
<jtok eid="7" type="method_call" span="261:11:261:36">resolveThisFieldReference</jtok>
<jtok eid="7" type="primary_name_ref" span="262:6:262:15">callstack</jtok>
<jtok eid="7" type="primary_name_ref" span="262:17:262:26">namespace</jtok>
<jtok eid="7" type="primary_name_ref" span="262:28:262:39">interpreter</jtok>
<jtok eid="7" type="primary_name_ref" span="262:41:262:48">varName</jtok>
<jtok eid="7" type="primary_name_ref" span="264:5:264:8">obj</jtok>
<jtok eid="7" type="method_call" span="264:11:264:36">resolveThisFieldReference</jtok>
<jtok eid="7" type="primary_name_ref" span="265:6:265:15">callstack</jtok>
<jtok eid="7" type="class_or_interface_ref" span="265:19:265:23">This</jtok>
<jtok eid="7" type="primary_name_ref" span="265:24:265:38">evalBaseObject</jtok>
<jtok eid="7" type="qualified_name_ref" span="265:40:265:49">namespace</jtok>
<jtok eid="7" type="primary_name_ref" span="266:6:266:17">interpreter</jtok>
<jtok eid="7" type="primary_name_ref" span="266:19:266:26">varName</jtok>
<jtok eid="7" type="primary_name_ref" span="269:9:269:12">obj</jtok>
<jtok eid="7" type="primary_name_ref" span="269:16:269:25">Primitive</jtok>
<jtok eid="7" type="qualified_name_ref" span="269:26:269:30">VOID</jtok>
<jtok eid="7" type="line_comment" span="271:5:271:29">// Resolved the variable</jtok>
<jtok eid="7" type="primary_name_ref" span="272:10:272:21">Interpreter</jtok>
<jtok eid="7" type="qualified_name_ref" span="272:22:272:27">DEBUG</jtok>
<jtok eid="7" type="primary_name_ref" span="273:6:273:17">Interpreter</jtok>
<jtok eid="7" type="method_call" span="273:18:273:23">debug</jtok>
<jtok eid="7" type="string_literal" span="273:25:273:46">"resolved variable: "</jtok>
<jtok eid="7" type="primary_name_ref" span="273:49:273:56">varName</jtok>
<jtok eid="7" type="string_literal" span="274:6:274:23">" in namespace: "</jtok>
<jtok eid="7" type="primary_name_ref" span="274:24:274:33">namespace</jtok>
<jtok eid="7" type="method_call" span="276:12:276:25">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="276:27:276:34">varName</jtok>
<jtok eid="7" type="method_call" span="276:36:276:42">suffix</jtok>
<jtok eid="7" type="primary_name_ref" span="276:43:276:51">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="276:54:276:57">obj</jtok>
<jtok eid="7" type="block_comment" span="280:3:283:5">/*
			Is it a class name?
			If we're just starting eval of name try to make it, else fail.
		*/</jtok>
<jtok eid="7" type="primary_name_ref" span="284:8:284:22">evalBaseObject</jtok>
<jtok eid="7" type="primary_name_ref" span="286:9:286:20">Interpreter</jtok>
<jtok eid="7" type="qualified_name_ref" span="286:21:286:26">DEBUG</jtok>
<jtok eid="7" type="primary_name_ref" span="287:5:287:16">Interpreter</jtok>
<jtok eid="7" type="method_call" span="287:17:287:22">debug</jtok>
<jtok eid="7" type="string_literal" span="287:24:287:40">"trying class: "</jtok>
<jtok eid="7" type="primary_name_ref" span="287:43:287:51">evalName</jtok>
<jtok eid="7" type="block_comment" span="289:4:291:6">/*
				Keep adding parts until we have a class 
			*/</jtok>
<jtok eid="7" type="class_or_interface_ref" span="292:4:292:9">Class</jtok>
<jtok eid="7" type="local_variable_name" span="292:10:292:14">clas</jtok>
<jtok eid="7" type="local_variable_name" span="293:8:293:9">i</jtok>
<jtok eid="7" type="class_or_interface_ref" span="294:4:294:10">String</jtok>
<jtok eid="7" type="local_variable_name" span="294:11:294:20">className</jtok>
<jtok eid="7" type="primary_name_ref" span="295:10:295:11">i</jtok>
<jtok eid="7" type="method_call" span="295:15:295:25">countParts</jtok>
<jtok eid="7" type="primary_name_ref" span="295:26:295:34">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="295:37:295:38">i</jtok>
<jtok eid="7" type="primary_name_ref" span="297:5:297:14">className</jtok>
<jtok eid="7" type="method_call" span="297:17:297:23">prefix</jtok>
<jtok eid="7" type="primary_name_ref" span="297:24:297:32">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="297:34:297:35">i</jtok>
<jtok eid="7" type="primary_name_ref" span="298:11:298:15">clas</jtok>
<jtok eid="7" type="primary_name_ref" span="298:18:298:27">namespace</jtok>
<jtok eid="7" type="method_call" span="298:28:298:36">getClass</jtok>
<jtok eid="7" type="primary_name_ref" span="298:37:298:46">className</jtok>
<jtok eid="7" type="primary_name_ref" span="302:9:302:13">clas</jtok>
<jtok eid="7" type="method_call" span="303:12:303:25">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="304:6:304:15">className</jtok>
<jtok eid="7" type="method_call" span="305:6:305:12">suffix</jtok>
<jtok eid="7" type="primary_name_ref" span="305:14:305:22">evalName</jtok>
<jtok eid="7" type="method_call" span="305:24:305:34">countParts</jtok>
<jtok eid="7" type="primary_name_ref" span="305:35:305:43">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="305:45:305:46">i</jtok>
<jtok eid="7" type="constructor_call" span="306:10:306:25">ClassIdentifier</jtok>
<jtok eid="7" type="primary_name_ref" span="306:26:306:30">clas</jtok>
<jtok eid="7" type="line_comment" span="309:4:309:42">// not a class (or variable per above)</jtok>
<jtok eid="7" type="primary_name_ref" span="310:9:310:20">Interpreter</jtok>
<jtok eid="7" type="qualified_name_ref" span="310:21:310:26">DEBUG</jtok>
<jtok eid="7" type="primary_name_ref" span="311:5:311:16">Interpreter</jtok>
<jtok eid="7" type="method_call" span="311:17:311:22">debug</jtok>
<jtok eid="7" type="string_literal" span="311:24:311:57">"not a class, trying var prefix "</jtok>
<jtok eid="7" type="primary_name_ref" span="311:58:311:66">evalName</jtok>
<jtok eid="7" type="line_comment" span="314:3:314:52">// No variable or class found in 'this' type ref.</jtok>
<jtok eid="7" type="line_comment" span="315:3:315:58">// if autoAllocateThis then create one; a child 'this'.</jtok>
<jtok eid="7" type="primary_name_ref" span="316:10:316:24">evalBaseObject</jtok>
<jtok eid="7" type="primary_name_ref" span="316:36:316:50">evalBaseObject</jtok>
<jtok eid="7" type="class_or_interface_ref" span="316:62:316:66">This</jtok>
<jtok eid="7" type="primary_name_ref" span="317:8:317:18">forceClass</jtok>
<jtok eid="7" type="primary_name_ref" span="317:22:317:38">autoAllocateThis</jtok>
<jtok eid="7" type="class_or_interface_ref" span="319:4:319:13">NameSpace</jtok>
<jtok eid="7" type="local_variable_name" span="319:14:319:29">targetNameSpace</jtok>
<jtok eid="7" type="primary_name_ref" span="320:7:320:21">evalBaseObject</jtok>
<jtok eid="7" type="primary_name_ref" span="321:6:321:15">namespace</jtok>
<jtok eid="7" type="class_or_interface_ref" span="321:20:321:24">This</jtok>
<jtok eid="7" type="primary_name_ref" span="321:25:321:39">evalBaseObject</jtok>
<jtok eid="7" type="qualified_name_ref" span="321:41:321:50">namespace</jtok>
<jtok eid="7" type="class_or_interface_ref" span="322:4:322:10">Object</jtok>
<jtok eid="7" type="local_variable_name" span="322:11:322:14">obj</jtok>
<jtok eid="7" type="constructor_call" span="322:21:322:30">NameSpace</jtok>
<jtok eid="7" type="primary_name_ref" span="323:5:323:20">targetNameSpace</jtok>
<jtok eid="7" type="string_literal" span="323:22:323:30">"auto: "</jtok>
<jtok eid="7" type="primary_name_ref" span="323:31:323:38">varName</jtok>
<jtok eid="7" type="method_call" span="323:41:323:48">getThis</jtok>
<jtok eid="7" type="primary_name_ref" span="323:50:323:61">interpreter</jtok>
<jtok eid="7" type="primary_name_ref" span="324:4:324:19">targetNameSpace</jtok>
<jtok eid="7" type="method_call" span="324:20:324:31">setVariable</jtok>
<jtok eid="7" type="primary_name_ref" span="324:33:324:40">varName</jtok>
<jtok eid="7" type="primary_name_ref" span="324:42:324:45">obj</jtok>
<jtok eid="7" type="method_call" span="325:11:325:24">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="325:26:325:33">varName</jtok>
<jtok eid="7" type="method_call" span="325:35:325:41">suffix</jtok>
<jtok eid="7" type="primary_name_ref" span="325:42:325:50">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="325:53:325:56">obj</jtok>
<jtok eid="7" type="block_comment" span="328:3:335:5">/*
			If we didn't find a class or variable name (or prefix) above
			there are two possibilities:

			- If we are a simple name then we can pass as a void variable 
			reference.
			- If we are compound then we must fail at this point.
		*/</jtok>
<jtok eid="7" type="primary_name_ref" span="336:8:336:22">evalBaseObject</jtok>
<jtok eid="7" type="method_call" span="337:10:337:20">isCompound</jtok>
<jtok eid="7" type="primary_name_ref" span="337:21:337:29">evalName</jtok>
<jtok eid="7" type="method_call" span="338:12:338:25">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="338:27:338:35">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="338:37:338:45">FINISHED</jtok>
<jtok eid="7" type="primary_name_ref" span="338:47:338:56">Primitive</jtok>
<jtok eid="7" type="qualified_name_ref" span="338:57:338:61">VOID</jtok>
<jtok eid="7" type="constructor_call" span="340:15:340:28">UtilEvalError</jtok>
<jtok eid="7" type="string_literal" span="341:6:341:37">"Class or variable not found: "</jtok>
<jtok eid="7" type="primary_name_ref" span="341:40:341:48">evalName</jtok>
<jtok eid="7" type="block_comment" span="344:3:349:5">/*
			--------------------------------------------------------
			After this point we're definitely evaluating relative to
			a base object.
			--------------------------------------------------------
		*/</jtok>
<jtok eid="7" type="block_comment" span="351:3:353:5">/*
			Do some basic validity checks.
		*/</jtok>
<jtok eid="7" type="primary_name_ref" span="355:8:355:22">evalBaseObject</jtok>
<jtok eid="7" type="primary_name_ref" span="355:26:355:35">Primitive</jtok>
<jtok eid="7" type="qualified_name_ref" span="355:36:355:40">NULL</jtok>
<jtok eid="7" type="line_comment" span="355:42:355:73">// previous round produced null</jtok>
<jtok eid="7" type="constructor_call" span="356:14:356:29">UtilTargetError</jtok>
<jtok eid="7" type="constructor_call" span="356:35:356:55">NullPointerException</jtok>
<jtok eid="7" type="string_literal" span="357:5:357:38">"Null Pointer while evaluating: "</jtok>
<jtok eid="7" type="primary_name_ref" span="357:40:357:45">value</jtok>
<jtok eid="7" type="primary_name_ref" span="359:8:359:22">evalBaseObject</jtok>
<jtok eid="7" type="primary_name_ref" span="359:26:359:35">Primitive</jtok>
<jtok eid="7" type="qualified_name_ref" span="359:36:359:40">VOID</jtok>
<jtok eid="7" type="line_comment" span="359:42:359:73">// previous round produced void</jtok>
<jtok eid="7" type="constructor_call" span="360:14:360:27">UtilEvalError</jtok>
<jtok eid="7" type="string_literal" span="361:5:361:58">"Undefined variable or class name while evaluating: "</jtok>
<jtok eid="7" type="primary_name_ref" span="361:59:361:64">value</jtok>
<jtok eid="7" type="primary_name_ref" span="363:8:363:22">evalBaseObject</jtok>
<jtok eid="7" type="class_or_interface_ref" span="363:34:363:43">Primitive</jtok>
<jtok eid="7" type="constructor_call" span="364:14:364:27">UtilEvalError</jtok>
<jtok eid="7" type="string_literal" span="364:28:364:68">"Can't treat primitive like an object. "</jtok>
<jtok eid="7" type="string_literal" span="365:4:365:30">"Error while evaluating: "</jtok>
<jtok eid="7" type="primary_name_ref" span="365:31:365:36">value</jtok>
<jtok eid="7" type="block_comment" span="367:3:370:5">/* 
			Resolve relative to a class type
			static field, inner class, ?
		*/</jtok>
<jtok eid="7" type="primary_name_ref" span="371:8:371:22">evalBaseObject</jtok>
<jtok eid="7" type="class_or_interface_ref" span="371:34:371:49">ClassIdentifier</jtok>
<jtok eid="7" type="class_or_interface_ref" span="373:4:373:9">Class</jtok>
<jtok eid="7" type="local_variable_name" span="373:10:373:14">clas</jtok>
<jtok eid="7" type="class_or_interface_ref" span="373:19:373:34">ClassIdentifier</jtok>
<jtok eid="7" type="primary_name_ref" span="373:35:373:49">evalBaseObject</jtok>
<jtok eid="7" type="method_call" span="373:51:373:65">getTargetClass</jtok>
<jtok eid="7" type="class_or_interface_ref" span="374:4:374:10">String</jtok>
<jtok eid="7" type="local_variable_name" span="374:11:374:16">field</jtok>
<jtok eid="7" type="method_call" span="374:19:374:25">prefix</jtok>
<jtok eid="7" type="primary_name_ref" span="374:26:374:34">evalName</jtok>
<jtok eid="7" type="line_comment" span="376:4:376:57">// Class qualified 'this' reference from inner class.</jtok>
<jtok eid="7" type="line_comment" span="377:4:377:31">// e.g. 'MyOuterClass.this'</jtok>
<jtok eid="7" type="primary_name_ref" span="378:9:378:14">field</jtok>
<jtok eid="7" type="method_call" span="378:15:378:21">equals</jtok>
<jtok eid="7" type="string_literal" span="378:22:378:28">"this"</jtok>
<jtok eid="7" type="line_comment" span="380:5:380:65">// find the enclosing class instance space of the class name</jtok>
<jtok eid="7" type="class_or_interface_ref" span="381:5:381:14">NameSpace</jtok>
<jtok eid="7" type="local_variable_name" span="381:15:381:17">ns</jtok>
<jtok eid="7" type="primary_name_ref" span="381:20:381:29">namespace</jtok>
<jtok eid="7" type="primary_name_ref" span="382:13:382:15">ns</jtok>
<jtok eid="7" type="line_comment" span="384:6:384:57">// getClassInstance() throws exception if not there</jtok>
<jtok eid="7" type="primary_name_ref" span="385:11:385:13">ns</jtok>
<jtok eid="7" type="qualified_name_ref" span="385:14:385:27">classInstance</jtok>
<jtok eid="7" type="primary_name_ref" span="386:10:386:12">ns</jtok>
<jtok eid="7" type="qualified_name_ref" span="386:13:386:26">classInstance</jtok>
<jtok eid="7" type="method_call" span="386:27:386:35">getClass</jtok>
<jtok eid="7" type="primary_name_ref" span="386:41:386:45">clas</jtok>
<jtok eid="7" type="method_call" span="388:14:388:27">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="389:8:389:13">field</jtok>
<jtok eid="7" type="method_call" span="389:15:389:21">suffix</jtok>
<jtok eid="7" type="primary_name_ref" span="389:22:389:30">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="389:33:389:35">ns</jtok>
<jtok eid="7" type="qualified_name_ref" span="389:36:389:49">classInstance</jtok>
<jtok eid="7" type="primary_name_ref" span="390:6:390:8">ns</jtok>
<jtok eid="7" type="primary_name_ref" span="390:9:390:11">ns</jtok>
<jtok eid="7" type="method_call" span="390:12:390:21">getParent</jtok>
<jtok eid="7" type="constructor_call" span="392:15:392:28">UtilEvalError</jtok>
<jtok eid="7" type="string_literal" span="393:6:393:55">"Can't find enclosing 'this' instance of class: "</jtok>
<jtok eid="7" type="primary_name_ref" span="393:56:393:60">clas</jtok>
<jtok eid="7" type="class_or_interface_ref" span="396:4:396:10">Object</jtok>
<jtok eid="7" type="local_variable_name" span="396:11:396:14">obj</jtok>
<jtok eid="7" type="line_comment" span="397:4:397:20">// static field?</jtok>
<jtok eid="7" type="primary_name_ref" span="399:10:399:21">Interpreter</jtok>
<jtok eid="7" type="qualified_name_ref" span="399:22:399:27">DEBUG</jtok>
<jtok eid="7" type="primary_name_ref" span="400:6:400:17">Interpreter</jtok>
<jtok eid="7" type="method_call" span="400:18:400:23">debug</jtok>
<jtok eid="7" type="string_literal" span="400:24:400:67">"Name call to getStaticFieldValue, class: "</jtok>
<jtok eid="7" type="primary_name_ref" span="401:8:401:12">clas</jtok>
<jtok eid="7" type="string_literal" span="401:13:401:23">", field:"</jtok>
<jtok eid="7" type="primary_name_ref" span="401:24:401:29">field</jtok>
<jtok eid="7" type="primary_name_ref" span="402:5:402:8">obj</jtok>
<jtok eid="7" type="primary_name_ref" span="402:11:402:18">Reflect</jtok>
<jtok eid="7" type="method_call" span="402:19:402:38">getStaticFieldValue</jtok>
<jtok eid="7" type="primary_name_ref" span="402:39:402:43">clas</jtok>
<jtok eid="7" type="primary_name_ref" span="402:45:402:50">field</jtok>
<jtok eid="7" type="class_or_interface_ref" span="403:13:403:25">ReflectError</jtok>
<jtok eid="7" type="local_variable_name" span="403:26:403:27">e</jtok>
<jtok eid="7" type="primary_name_ref" span="404:10:404:21">Interpreter</jtok>
<jtok eid="7" type="qualified_name_ref" span="404:22:404:27">DEBUG</jtok>
<jtok eid="7" type="primary_name_ref" span="405:6:405:17">Interpreter</jtok>
<jtok eid="7" type="method_call" span="405:18:405:23">debug</jtok>
<jtok eid="7" type="string_literal" span="405:24:405:47">"field reflect error: "</jtok>
<jtok eid="7" type="primary_name_ref" span="405:48:405:49">e</jtok>
<jtok eid="7" type="line_comment" span="408:4:408:19">// inner class?</jtok>
<jtok eid="7" type="primary_name_ref" span="409:9:409:12">obj</jtok>
<jtok eid="7" type="class_or_interface_ref" span="410:5:410:11">String</jtok>
<jtok eid="7" type="local_variable_name" span="410:12:410:18">iclass</jtok>
<jtok eid="7" type="primary_name_ref" span="410:21:410:25">clas</jtok>
<jtok eid="7" type="method_call" span="410:26:410:33">getName</jtok>
<jtok eid="7" type="string_literal" span="410:36:410:39">"$"</jtok>
<jtok eid="7" type="primary_name_ref" span="410:40:410:45">field</jtok>
<jtok eid="7" type="class_or_interface_ref" span="411:5:411:10">Class</jtok>
<jtok eid="7" type="local_variable_name" span="411:11:411:12">c</jtok>
<jtok eid="7" type="primary_name_ref" span="411:15:411:24">namespace</jtok>
<jtok eid="7" type="method_call" span="411:25:411:33">getClass</jtok>
<jtok eid="7" type="primary_name_ref" span="411:35:411:41">iclass</jtok>
<jtok eid="7" type="primary_name_ref" span="412:10:412:11">c</jtok>
<jtok eid="7" type="primary_name_ref" span="413:6:413:9">obj</jtok>
<jtok eid="7" type="constructor_call" span="413:16:413:31">ClassIdentifier</jtok>
<jtok eid="7" type="primary_name_ref" span="413:32:413:33">c</jtok>
<jtok eid="7" type="primary_name_ref" span="416:9:416:12">obj</jtok>
<jtok eid="7" type="constructor_call" span="417:15:417:28">UtilEvalError</jtok>
<jtok eid="7" type="string_literal" span="418:6:418:40">"No static field or inner class: "</jtok>
<jtok eid="7" type="primary_name_ref" span="419:8:419:13">field</jtok>
<jtok eid="7" type="string_literal" span="419:16:419:22">" of "</jtok>
<jtok eid="7" type="primary_name_ref" span="419:25:419:29">clas</jtok>
<jtok eid="7" type="method_call" span="421:11:421:24">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="421:26:421:31">field</jtok>
<jtok eid="7" type="method_call" span="421:33:421:39">suffix</jtok>
<jtok eid="7" type="primary_name_ref" span="421:40:421:48">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="421:51:421:54">obj</jtok>
<jtok eid="7" type="block_comment" span="424:3:427:5">/*
			If we've fallen through here we are no longer resolving to
			a class type.
		*/</jtok>
<jtok eid="7" type="primary_name_ref" span="428:8:428:18">forceClass</jtok>
<jtok eid="7" type="constructor_call" span="429:14:429:27">UtilEvalError</jtok>
<jtok eid="7" type="primary_name_ref" span="430:5:430:10">value</jtok>
<jtok eid="7" type="string_literal" span="430:12:430:48">" does not resolve to a class name."</jtok>
<jtok eid="7" type="block_comment" span="432:3:434:5">/* 
			Some kind of field access?
		*/</jtok>
<jtok eid="7" type="class_or_interface_ref" span="436:3:436:9">String</jtok>
<jtok eid="7" type="local_variable_name" span="436:10:436:15">field</jtok>
<jtok eid="7" type="method_call" span="436:18:436:24">prefix</jtok>
<jtok eid="7" type="primary_name_ref" span="436:25:436:33">evalName</jtok>
<jtok eid="7" type="line_comment" span="438:3:438:29">// length access on array?</jtok>
<jtok eid="7" type="primary_name_ref" span="439:8:439:13">field</jtok>
<jtok eid="7" type="method_call" span="439:14:439:20">equals</jtok>
<jtok eid="7" type="string_literal" span="439:21:439:29">"length"</jtok>
<jtok eid="7" type="primary_name_ref" span="439:34:439:48">evalBaseObject</jtok>
<jtok eid="7" type="method_call" span="439:49:439:57">getClass</jtok>
<jtok eid="7" type="method_call" span="439:60:439:67">isArray</jtok>
<jtok eid="7" type="class_or_interface_ref" span="441:4:441:10">Object</jtok>
<jtok eid="7" type="local_variable_name" span="441:11:441:14">obj</jtok>
<jtok eid="7" type="constructor_call" span="441:21:441:30">Primitive</jtok>
<jtok eid="7" type="primary_name_ref" span="441:31:441:36">Array</jtok>
<jtok eid="7" type="method_call" span="441:37:441:46">getLength</jtok>
<jtok eid="7" type="primary_name_ref" span="441:47:441:61">evalBaseObject</jtok>
<jtok eid="7" type="method_call" span="442:11:442:24">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="442:26:442:31">field</jtok>
<jtok eid="7" type="method_call" span="442:33:442:39">suffix</jtok>
<jtok eid="7" type="primary_name_ref" span="442:40:442:48">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="442:51:442:54">obj</jtok>
<jtok eid="7" type="line_comment" span="445:3:445:31">// Check for field on object</jtok>
<jtok eid="7" type="line_comment" span="446:3:446:58">// Note: could eliminate throwing the exception somehow</jtok>
<jtok eid="7" type="class_or_interface_ref" span="448:4:448:10">Object</jtok>
<jtok eid="7" type="local_variable_name" span="448:11:448:14">obj</jtok>
<jtok eid="7" type="primary_name_ref" span="448:17:448:24">Reflect</jtok>
<jtok eid="7" type="method_call" span="448:25:448:44">getObjectFieldValue</jtok>
<jtok eid="7" type="primary_name_ref" span="448:45:448:59">evalBaseObject</jtok>
<jtok eid="7" type="primary_name_ref" span="448:61:448:66">field</jtok>
<jtok eid="7" type="method_call" span="449:11:449:24">completeRound</jtok>
<jtok eid="7" type="primary_name_ref" span="449:26:449:31">field</jtok>
<jtok eid="7" type="method_call" span="449:33:449:39">suffix</jtok>
<jtok eid="7" type="primary_name_ref" span="449:40:449:48">evalName</jtok>
<jtok eid="7" type="primary_name_ref" span="449:51:449:54">obj</jtok>
<jtok eid="7" type="class_or_interface_ref" span="450:11:450:23">ReflectError</jtok>
<jtok eid="7" type="local_variable_name" span="450:24:450:25">e</jtok>
<jtok eid="7" type="block_comment" span="450:29:450:46">/* not a field */</jtok>
<jtok eid="7" type="line_comment" span="452:3:452:35">// if we get here we have failed</jtok>
<jtok eid="7" type="constructor_call" span="453:13:453:26">UtilEvalError</jtok>
<jtok eid="7" type="string_literal" span="454:4:454:27">"Cannot access field: "</jtok>
<jtok eid="7" type="primary_name_ref" span="454:30:454:35">field</jtok>
<jtok eid="7" type="string_literal" span="454:38:454:53">", on object: "</jtok>
<jtok eid="7" type="primary_name_ref" span="454:56:454:70">evalBaseObject</jtok>
<jtok eid="1" type="block_comment" span="457:2:472:4">/**
		Resolve a variable relative to a This reference.

		This is the general variable resolution method, accomodating special
		fields from the This context.  Together the namespace and interpreter
		comprise the This context.  The callstack, if available allows for the
		this.caller construct.  
		Optionally interpret special "magic" field names: e.g. interpreter.
		&lt;p/&gt;

		@param callstack may be null, but this is only legitimate in special
		cases where we are sure resolution will not involve this.caller.

		@param namespace the namespace of the this reference (should be the
		same as the top of the stack?
	*/</jtok>
<jtok eid="8" type="class_or_interface_ref" span="473:2:473:8">Object</jtok>
<jtok eid="8" type="method_name" span="473:9:473:34">resolveThisFieldReference</jtok>
<jtok eid="8" type="parameter_type" span="474:3:474:12">CallStack</jtok>
<jtok eid="8" type="parameter_name" span="474:13:474:22">callstack</jtok>
<jtok eid="8" type="parameter_type" span="474:24:474:33">NameSpace</jtok>
<jtok eid="8" type="parameter_name" span="474:34:474:47">thisNameSpace</jtok>
<jtok eid="8" type="parameter_type" span="474:49:474:60">Interpreter</jtok>
<jtok eid="8" type="parameter_name" span="474:61:474:72">interpreter</jtok>
<jtok eid="8" type="parameter_type" span="475:3:475:9">String</jtok>
<jtok eid="8" type="parameter_name" span="475:10:475:17">varName</jtok>
<jtok eid="8" type="parameter_name" span="475:27:475:47">specialFieldsVisible</jtok>
<jtok eid="8" type="throws" span="476:10:476:23">UtilEvalError</jtok>
<jtok eid="8" type="primary_name_ref" span="478:8:478:15">varName</jtok>
<jtok eid="8" type="method_call" span="478:16:478:22">equals</jtok>
<jtok eid="8" type="string_literal" span="478:23:478:29">"this"</jtok>
<jtok eid="8" type="block_comment" span="480:4:485:6">/*
				Somewhat of a hack.  If the special fields are visible (we're
				operating relative to a 'this' type already) dissallow further
				.this references to prevent user from skipping to things like
				super.this.caller
			*/</jtok>
<jtok eid="8" type="primary_name_ref" span="486:9:486:29">specialFieldsVisible</jtok>
<jtok eid="8" type="constructor_call" span="487:15:487:28">UtilEvalError</jtok>
<jtok eid="8" type="string_literal" span="487:29:487:67">"Redundant to call .this on This type"</jtok>
<jtok eid="8" type="line_comment" span="489:4:489:67">// Allow getThis() to work through BlockNameSpace to the method</jtok>
<jtok eid="8" type="line_comment" span="490:4:490:16">// namespace</jtok>
<jtok eid="8" type="line_comment" span="491:2:491:39">// XXX re-eval this... do we need it?</jtok>
<jtok eid="8" type="class_or_interface_ref" span="492:4:492:8">This</jtok>
<jtok eid="8" type="local_variable_name" span="492:9:492:12">ths</jtok>
<jtok eid="8" type="primary_name_ref" span="492:15:492:28">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="492:29:492:36">getThis</jtok>
<jtok eid="8" type="primary_name_ref" span="492:38:492:49">interpreter</jtok>
<jtok eid="8" type="primary_name_ref" span="493:4:493:17">thisNameSpace</jtok>
<jtok eid="8" type="primary_name_ref" span="493:19:493:22">ths</jtok>
<jtok eid="8" type="method_call" span="493:23:493:35">getNameSpace</jtok>
<jtok eid="8" type="class_or_interface_ref" span="494:4:494:10">Object</jtok>
<jtok eid="8" type="local_variable_name" span="494:11:494:17">result</jtok>
<jtok eid="8" type="primary_name_ref" span="494:20:494:23">ths</jtok>
<jtok eid="8" type="class_or_interface_ref" span="496:4:496:13">NameSpace</jtok>
<jtok eid="8" type="local_variable_name" span="496:14:496:28">classNameSpace</jtok>
<jtok eid="8" type="method_call" span="496:31:496:48">getClassNameSpace</jtok>
<jtok eid="8" type="primary_name_ref" span="496:50:496:63">thisNameSpace</jtok>
<jtok eid="8" type="primary_name_ref" span="497:9:497:23">classNameSpace</jtok>
<jtok eid="8" type="method_call" span="499:10:499:20">isCompound</jtok>
<jtok eid="8" type="primary_name_ref" span="499:22:499:30">evalName</jtok>
<jtok eid="8" type="primary_name_ref" span="500:6:500:12">result</jtok>
<jtok eid="8" type="primary_name_ref" span="500:15:500:29">classNameSpace</jtok>
<jtok eid="8" type="method_call" span="500:30:500:37">getThis</jtok>
<jtok eid="8" type="primary_name_ref" span="500:39:500:50">interpreter</jtok>
<jtok eid="8" type="primary_name_ref" span="502:6:502:12">result</jtok>
<jtok eid="8" type="primary_name_ref" span="502:15:502:29">classNameSpace</jtok>
<jtok eid="8" type="method_call" span="502:30:502:46">getClassInstance</jtok>
<jtok eid="8" type="primary_name_ref" span="505:11:505:17">result</jtok>
<jtok eid="8" type="block_comment" span="508:3:512:5">/*
			Some duplication for "super".  See notes for "this" above
			If we're in an enclsing class instance and have a superclass
			instance our super is the superclass instance.
		*/</jtok>
<jtok eid="8" type="primary_name_ref" span="513:8:513:15">varName</jtok>
<jtok eid="8" type="method_call" span="513:16:513:22">equals</jtok>
<jtok eid="8" type="string_literal" span="513:23:513:30">"super"</jtok>
<jtok eid="8" type="line_comment" span="515:4:515:33">//if ( specialFieldsVisible )</jtok>
<jtok eid="8" type="line_comment" span="516:4:516:70">//throw new UtilEvalError("Redundant to call .this on This type");</jtok>
<jtok eid="8" type="line_comment" span="518:4:518:71">// Allow getSuper() to through BlockNameSpace to the method's super</jtok>
<jtok eid="8" type="class_or_interface_ref" span="519:4:519:8">This</jtok>
<jtok eid="8" type="local_variable_name" span="519:9:519:12">ths</jtok>
<jtok eid="8" type="primary_name_ref" span="519:15:519:28">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="519:29:519:37">getSuper</jtok>
<jtok eid="8" type="primary_name_ref" span="519:39:519:50">interpreter</jtok>
<jtok eid="8" type="primary_name_ref" span="520:4:520:17">thisNameSpace</jtok>
<jtok eid="8" type="primary_name_ref" span="520:20:520:23">ths</jtok>
<jtok eid="8" type="method_call" span="520:24:520:36">getNameSpace</jtok>
<jtok eid="8" type="line_comment" span="521:4:521:57">// super is now the closure's super or class instance</jtok>
<jtok eid="8" type="line_comment" span="523:2:523:26">// XXXX re-evaluate this</jtok>
<jtok eid="8" type="line_comment" span="524:2:524:37">// can getSuper work by itself now?</jtok>
<jtok eid="8" type="line_comment" span="525:4:525:72">// If we're a class instance and the parent is also a class instance</jtok>
<jtok eid="8" type="line_comment" span="526:4:526:35">// then super means our parent.</jtok>
<jtok eid="8" type="primary_name_ref" span="528:5:528:18">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="528:19:528:28">getParent</jtok>
<jtok eid="8" type="primary_name_ref" span="529:8:529:21">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="529:22:529:31">getParent</jtok>
<jtok eid="8" type="qualified_name_ref" span="529:34:529:41">isClass</jtok>
<jtok eid="8" type="primary_name_ref" span="531:5:531:8">ths</jtok>
<jtok eid="8" type="primary_name_ref" span="531:11:531:24">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="531:25:531:34">getParent</jtok>
<jtok eid="8" type="method_call" span="531:37:531:44">getThis</jtok>
<jtok eid="8" type="primary_name_ref" span="531:46:531:57">interpreter</jtok>
<jtok eid="8" type="primary_name_ref" span="533:11:533:14">ths</jtok>
<jtok eid="8" type="class_or_interface_ref" span="536:3:536:9">Object</jtok>
<jtok eid="8" type="local_variable_name" span="536:10:536:13">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="538:8:538:15">varName</jtok>
<jtok eid="8" type="method_call" span="538:16:538:22">equals</jtok>
<jtok eid="8" type="string_literal" span="538:23:538:31">"global"</jtok>
<jtok eid="8" type="primary_name_ref" span="539:4:539:7">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="539:10:539:23">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="539:24:539:33">getGlobal</jtok>
<jtok eid="8" type="primary_name_ref" span="539:35:539:46">interpreter</jtok>
<jtok eid="8" type="primary_name_ref" span="541:8:541:11">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="541:23:541:43">specialFieldsVisible</jtok>
<jtok eid="8" type="primary_name_ref" span="543:8:543:15">varName</jtok>
<jtok eid="8" type="method_call" span="543:16:543:22">equals</jtok>
<jtok eid="8" type="string_literal" span="543:23:543:34">"namespace"</jtok>
<jtok eid="8" type="primary_name_ref" span="544:5:544:8">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="544:11:544:24">thisNameSpace</jtok>
<jtok eid="8" type="primary_name_ref" span="545:13:545:20">varName</jtok>
<jtok eid="8" type="method_call" span="545:21:545:27">equals</jtok>
<jtok eid="8" type="string_literal" span="545:28:545:39">"variables"</jtok>
<jtok eid="8" type="primary_name_ref" span="546:5:546:8">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="546:11:546:24">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="546:25:546:41">getVariableNames</jtok>
<jtok eid="8" type="primary_name_ref" span="547:13:547:20">varName</jtok>
<jtok eid="8" type="method_call" span="547:21:547:27">equals</jtok>
<jtok eid="8" type="string_literal" span="547:28:547:37">"methods"</jtok>
<jtok eid="8" type="primary_name_ref" span="548:5:548:8">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="548:11:548:24">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="548:25:548:39">getMethodNames</jtok>
<jtok eid="8" type="primary_name_ref" span="549:14:549:21">varName</jtok>
<jtok eid="8" type="method_call" span="549:22:549:28">equals</jtok>
<jtok eid="8" type="string_literal" span="549:29:549:42">"interpreter"</jtok>
<jtok eid="8" type="primary_name_ref" span="550:10:550:22">lastEvalName</jtok>
<jtok eid="8" type="method_call" span="550:23:550:29">equals</jtok>
<jtok eid="8" type="string_literal" span="550:30:550:36">"this"</jtok>
<jtok eid="8" type="primary_name_ref" span="551:6:551:9">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="551:12:551:23">interpreter</jtok>
<jtok eid="8" type="constructor_call" span="553:16:553:29">UtilEvalError</jtok>
<jtok eid="8" type="string_literal" span="554:7:554:53">"Can only call .interpreter on literal 'this'"</jtok>
<jtok eid="8" type="primary_name_ref" span="557:8:557:11">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="557:23:557:43">specialFieldsVisible</jtok>
<jtok eid="8" type="primary_name_ref" span="557:47:557:54">varName</jtok>
<jtok eid="8" type="method_call" span="557:55:557:61">equals</jtok>
<jtok eid="8" type="string_literal" span="557:62:557:70">"caller"</jtok>
<jtok eid="8" type="primary_name_ref" span="559:9:559:21">lastEvalName</jtok>
<jtok eid="8" type="method_call" span="559:22:559:28">equals</jtok>
<jtok eid="8" type="string_literal" span="559:29:559:35">"this"</jtok>
<jtok eid="8" type="primary_name_ref" span="559:40:559:52">lastEvalName</jtok>
<jtok eid="8" type="method_call" span="559:53:559:59">equals</jtok>
<jtok eid="8" type="string_literal" span="559:60:559:68">"caller"</jtok>
<jtok eid="8" type="line_comment" span="561:5:561:59">// get the previous context (see notes for this class)</jtok>
<jtok eid="8" type="primary_name_ref" span="562:10:562:19">callstack</jtok>
<jtok eid="8" type="constructor_call" span="563:16:563:32">InterpreterError</jtok>
<jtok eid="8" type="string_literal" span="563:33:563:47">"no callstack"</jtok>
<jtok eid="8" type="primary_name_ref" span="564:5:564:8">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="564:11:564:20">callstack</jtok>
<jtok eid="8" type="method_call" span="564:21:564:24">get</jtok>
<jtok eid="8" type="primary_name_ref" span="564:28:564:42">callstackDepth</jtok>
<jtok eid="8" type="method_call" span="564:45:564:52">getThis</jtok>
<jtok eid="8" type="primary_name_ref" span="565:6:565:17">interpreter</jtok>
<jtok eid="8" type="constructor_call" span="568:15:568:28">UtilEvalError</jtok>
<jtok eid="8" type="string_literal" span="569:5:569:67">"Can only call .caller on literal 'this' or literal '.caller'"</jtok>
<jtok eid="8" type="line_comment" span="571:4:571:19">// early return</jtok>
<jtok eid="8" type="primary_name_ref" span="572:11:572:14">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="575:8:575:11">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="575:23:575:43">specialFieldsVisible</jtok>
<jtok eid="8" type="primary_name_ref" span="576:7:576:14">varName</jtok>
<jtok eid="8" type="method_call" span="576:15:576:21">equals</jtok>
<jtok eid="8" type="string_literal" span="576:22:576:33">"callstack"</jtok>
<jtok eid="8" type="primary_name_ref" span="578:9:578:21">lastEvalName</jtok>
<jtok eid="8" type="method_call" span="578:22:578:28">equals</jtok>
<jtok eid="8" type="string_literal" span="578:29:578:35">"this"</jtok>
<jtok eid="8" type="line_comment" span="580:5:580:59">// get the previous context (see notes for this class)</jtok>
<jtok eid="8" type="primary_name_ref" span="581:10:581:19">callstack</jtok>
<jtok eid="8" type="constructor_call" span="582:16:582:32">InterpreterError</jtok>
<jtok eid="8" type="string_literal" span="582:33:582:47">"no callstack"</jtok>
<jtok eid="8" type="primary_name_ref" span="583:5:583:8">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="583:11:583:20">callstack</jtok>
<jtok eid="8" type="constructor_call" span="586:15:586:28">UtilEvalError</jtok>
<jtok eid="8" type="string_literal" span="587:5:587:49">"Can only call .callstack on literal 'this'"</jtok>
<jtok eid="8" type="primary_name_ref" span="591:8:591:11">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="592:4:592:7">obj</jtok>
<jtok eid="8" type="primary_name_ref" span="592:10:592:23">thisNameSpace</jtok>
<jtok eid="8" type="method_call" span="592:24:592:35">getVariable</jtok>
<jtok eid="8" type="primary_name_ref" span="592:36:592:43">varName</jtok>
<jtok eid="8" type="primary_name_ref" span="594:8:594:11">obj</jtok>
<jtok eid="8" type="constructor_call" span="595:14:595:30">InterpreterError</jtok>
<jtok eid="8" type="string_literal" span="595:31:595:53">"null this field ref:"</jtok>
<jtok eid="8" type="primary_name_ref" span="595:54:595:61">varName</jtok>
<jtok eid="8" type="primary_name_ref" span="597:10:597:13">obj</jtok>
<jtok eid="1" type="block_comment" span="600:2:602:4">/**
		@return the enclosing class body namespace or null if not in a class.
	*/</jtok>
<jtok eid="9" type="class_or_interface_ref" span="603:9:603:18">NameSpace</jtok>
<jtok eid="9" type="method_name" span="603:19:603:36">getClassNameSpace</jtok>
<jtok eid="9" type="parameter_type" span="603:38:603:47">NameSpace</jtok>
<jtok eid="9" type="parameter_name" span="603:48:603:61">thisNameSpace</jtok>
<jtok eid="9" type="line_comment" span="605:3:605:25">// is a class instance</jtok>
<jtok eid="9" type="line_comment" span="606:3:606:47">//if ( thisNameSpace.classInstance != null )</jtok>
<jtok eid="9" type="primary_name_ref" span="607:8:607:21">thisNameSpace</jtok>
<jtok eid="9" type="qualified_name_ref" span="607:22:607:29">isClass</jtok>
<jtok eid="9" type="primary_name_ref" span="608:11:608:24">thisNameSpace</jtok>
<jtok eid="9" type="primary_name_ref" span="610:8:610:21">thisNameSpace</jtok>
<jtok eid="9" type="qualified_name_ref" span="610:22:610:30">isMethod</jtok>
<jtok eid="9" type="primary_name_ref" span="611:7:611:20">thisNameSpace</jtok>
<jtok eid="9" type="method_call" span="611:21:611:30">getParent</jtok>
<jtok eid="9" type="line_comment" span="612:4:612:56">//&amp;&amp; thisNameSpace.getParent().classInstance != null</jtok>
<jtok eid="9" type="primary_name_ref" span="613:7:613:20">thisNameSpace</jtok>
<jtok eid="9" type="method_call" span="613:21:613:30">getParent</jtok>
<jtok eid="9" type="qualified_name_ref" span="613:33:613:40">isClass</jtok>
<jtok eid="9" type="primary_name_ref" span="615:11:615:24">thisNameSpace</jtok>
<jtok eid="9" type="method_call" span="615:25:615:34">getParent</jtok>
<jtok eid="1" type="block_comment" span="620:2:627:4">/**
		Check the cache, else use toObject() to try to resolve to a class
		identifier.  

		@throws ClassNotFoundException on class not found.
		@throws ClassPathException (type of EvalError) on special case of 
		ambiguous unqualified name after super import. 
	*/</jtok>
<jtok eid="10" type="class_or_interface_ref" span="628:22:628:27">Class</jtok>
<jtok eid="10" type="method_name" span="628:28:628:35">toClass</jtok>
<jtok eid="10" type="throws" span="629:10:629:32">ClassNotFoundException</jtok>
<jtok eid="10" type="throws" span="629:34:629:47">UtilEvalError</jtok>
<jtok eid="10" type="primary_name_ref" span="631:8:631:15">asClass</jtok>
<jtok eid="10" type="primary_name_ref" span="632:11:632:18">asClass</jtok>
<jtok eid="10" type="method_call" span="634:3:634:8">reset</jtok>
<jtok eid="10" type="line_comment" span="636:3:636:44">// "var" means untyped, return null class</jtok>
<jtok eid="10" type="primary_name_ref" span="637:8:637:16">evalName</jtok>
<jtok eid="10" type="method_call" span="637:17:637:23">equals</jtok>
<jtok eid="10" type="string_literal" span="637:24:637:29">"var"</jtok>
<jtok eid="10" type="primary_name_ref" span="638:11:638:18">asClass</jtok>
<jtok eid="10" type="block_comment" span="640:3:640:45">/* Try straightforward class name first */</jtok>
<jtok eid="10" type="class_or_interface_ref" span="641:3:641:8">Class</jtok>
<jtok eid="10" type="local_variable_name" span="641:9:641:13">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="641:16:641:25">namespace</jtok>
<jtok eid="10" type="method_call" span="641:26:641:34">getClass</jtok>
<jtok eid="10" type="primary_name_ref" span="641:36:641:44">evalName</jtok>
<jtok eid="10" type="primary_name_ref" span="643:8:643:12">clas</jtok>
<jtok eid="10" type="block_comment" span="645:4:648:6">/* 
				Try toObject() which knows how to work through inner classes
				and see what we end up with 
			*/</jtok>
<jtok eid="10" type="class_or_interface_ref" span="649:4:649:10">Object</jtok>
<jtok eid="10" type="local_variable_name" span="649:11:649:14">obj</jtok>
<jtok eid="10" type="line_comment" span="651:5:651:50">// Null interpreter and callstack references.</jtok>
<jtok eid="10" type="line_comment" span="652:5:652:54">// class only resolution should not require them.</jtok>
<jtok eid="10" type="primary_name_ref" span="653:5:653:8">obj</jtok>
<jtok eid="10" type="method_call" span="653:11:653:19">toObject</jtok>
<jtok eid="10" type="class_or_interface_ref" span="654:14:654:27">UtilEvalError</jtok>
<jtok eid="10" type="local_variable_name" span="654:29:654:30">e</jtok>
<jtok eid="10" type="line_comment" span="654:38:654:60">// couldn't resolve it</jtok>
<jtok eid="10" type="primary_name_ref" span="656:9:656:12">obj</jtok>
<jtok eid="10" type="class_or_interface_ref" span="656:24:656:39">ClassIdentifier</jtok>
<jtok eid="10" type="primary_name_ref" span="657:5:657:9">clas</jtok>
<jtok eid="10" type="class_or_interface_ref" span="657:14:657:29">ClassIdentifier</jtok>
<jtok eid="10" type="primary_name_ref" span="657:30:657:33">obj</jtok>
<jtok eid="10" type="method_call" span="657:35:657:49">getTargetClass</jtok>
<jtok eid="10" type="primary_name_ref" span="660:8:660:12">clas</jtok>
<jtok eid="10" type="constructor_call" span="661:14:661:36">ClassNotFoundException</jtok>
<jtok eid="10" type="string_literal" span="662:5:662:14">"Class: "</jtok>
<jtok eid="10" type="primary_name_ref" span="662:17:662:22">value</jtok>
<jtok eid="10" type="string_literal" span="662:24:662:49">" not found in namespace"</jtok>
<jtok eid="10" type="primary_name_ref" span="664:3:664:10">asClass</jtok>
<jtok eid="10" type="primary_name_ref" span="664:13:664:17">clas</jtok>
<jtok eid="10" type="primary_name_ref" span="665:10:665:17">asClass</jtok>
<jtok eid="1" type="block_comment" span="668:2:669:4">/*
	*/</jtok>
<jtok eid="11" type="class_or_interface_ref" span="670:22:670:25">LHS</jtok>
<jtok eid="11" type="method_name" span="670:26:670:31">toLHS</jtok>
<jtok eid="11" type="parameter_type" span="671:3:671:12">CallStack</jtok>
<jtok eid="11" type="parameter_name" span="671:13:671:22">callstack</jtok>
<jtok eid="11" type="parameter_type" span="671:24:671:35">Interpreter</jtok>
<jtok eid="11" type="parameter_name" span="671:36:671:47">interpreter</jtok>
<jtok eid="11" type="throws" span="672:10:672:23">UtilEvalError</jtok>
<jtok eid="11" type="line_comment" span="674:3:674:55">// Should clean this up to a single return statement</jtok>
<jtok eid="11" type="method_call" span="675:3:675:8">reset</jtok>
<jtok eid="11" type="class_or_interface_ref" span="676:3:676:6">LHS</jtok>
<jtok eid="11" type="local_variable_name" span="676:7:676:10">lhs</jtok>
<jtok eid="11" type="line_comment" span="678:3:678:57">// Simple (non-compound) variable assignment e.g. x=5;</jtok>
<jtok eid="11" type="method_call" span="679:9:679:19">isCompound</jtok>
<jtok eid="11" type="primary_name_ref" span="679:20:679:28">evalName</jtok>
<jtok eid="11" type="primary_name_ref" span="681:9:681:17">evalName</jtok>
<jtok eid="11" type="method_call" span="681:18:681:24">equals</jtok>
<jtok eid="11" type="string_literal" span="681:25:681:31">"this"</jtok>
<jtok eid="11" type="constructor_call" span="682:15:682:28">UtilEvalError</jtok>
<jtok eid="11" type="string_literal" span="682:29:682:54">"Can't assign to 'this'."</jtok>
<jtok eid="11" type="line_comment" span="684:4:684:46">// Interpreter.debug("Simple var LHS...");</jtok>
<jtok eid="11" type="primary_name_ref" span="685:4:685:7">lhs</jtok>
<jtok eid="11" type="constructor_call" span="685:14:685:17">LHS</jtok>
<jtok eid="11" type="primary_name_ref" span="685:19:685:28">namespace</jtok>
<jtok eid="11" type="primary_name_ref" span="685:30:685:38">evalName</jtok>
<jtok eid="11" type="block_comment" span="685:45:685:69">/*bubble up if allowed*/</jtok>
<jtok eid="11" type="primary_name_ref" span="686:11:686:14">lhs</jtok>
<jtok eid="11" type="line_comment" span="689:3:689:27">// Field e.g. foo.bar=5;</jtok>
<jtok eid="11" type="class_or_interface_ref" span="690:3:690:9">Object</jtok>
<jtok eid="11" type="local_variable_name" span="690:10:690:13">obj</jtok>
<jtok eid="11" type="primary_name_ref" span="692:11:692:19">evalName</jtok>
<jtok eid="11" type="method_call" span="692:31:692:41">isCompound</jtok>
<jtok eid="11" type="primary_name_ref" span="692:43:692:51">evalName</jtok>
<jtok eid="11" type="primary_name_ref" span="694:5:694:8">obj</jtok>
<jtok eid="11" type="method_call" span="694:11:694:33">consumeNextObjectField</jtok>
<jtok eid="11" type="primary_name_ref" span="694:35:694:44">callstack</jtok>
<jtok eid="11" type="primary_name_ref" span="694:46:694:57">interpreter</jtok>
<jtok eid="11" type="block_comment" span="695:11:695:24">/*forcclass*/</jtok>
<jtok eid="11" type="block_comment" span="695:30:695:47">/*autoallocthis*/</jtok>
<jtok eid="11" type="class_or_interface_ref" span="698:10:698:23">UtilEvalError</jtok>
<jtok eid="11" type="local_variable_name" span="698:24:698:25">e</jtok>
<jtok eid="11" type="constructor_call" span="699:14:699:27">UtilEvalError</jtok>
<jtok eid="11" type="string_literal" span="699:29:699:47">"LHS evaluation: "</jtok>
<jtok eid="11" type="primary_name_ref" span="699:50:699:51">e</jtok>
<jtok eid="11" type="method_call" span="699:52:699:62">getMessage</jtok>
<jtok eid="11" type="line_comment" span="702:3:702:36">// Finished eval and its a class.</jtok>
<jtok eid="11" type="primary_name_ref" span="703:8:703:16">evalName</jtok>
<jtok eid="11" type="primary_name_ref" span="703:28:703:31">obj</jtok>
<jtok eid="11" type="class_or_interface_ref" span="703:43:703:58">ClassIdentifier</jtok>
<jtok eid="11" type="constructor_call" span="704:14:704:27">UtilEvalError</jtok>
<jtok eid="11" type="string_literal" span="704:28:704:53">"Can't assign to class: "</jtok>
<jtok eid="11" type="primary_name_ref" span="704:56:704:61">value</jtok>
<jtok eid="11" type="primary_name_ref" span="706:8:706:11">obj</jtok>
<jtok eid="11" type="constructor_call" span="707:14:707:27">UtilEvalError</jtok>
<jtok eid="11" type="string_literal" span="707:28:707:44">"Error in LHS: "</jtok>
<jtok eid="11" type="primary_name_ref" span="707:47:707:52">value</jtok>
<jtok eid="11" type="line_comment" span="709:3:709:42">// e.g. this.x=5;  or someThisType.x=5;</jtok>
<jtok eid="11" type="primary_name_ref" span="710:8:710:11">obj</jtok>
<jtok eid="11" type="class_or_interface_ref" span="710:23:710:27">This</jtok>
<jtok eid="11" type="line_comment" span="712:4:712:43">// dissallow assignment to magic fields</jtok>
<jtok eid="11" type="primary_name_ref" span="714:5:714:13">evalName</jtok>
<jtok eid="11" type="method_call" span="714:14:714:20">equals</jtok>
<jtok eid="11" type="string_literal" span="714:21:714:32">"namespace"</jtok>
<jtok eid="11" type="primary_name_ref" span="715:8:715:16">evalName</jtok>
<jtok eid="11" type="method_call" span="715:17:715:23">equals</jtok>
<jtok eid="11" type="string_literal" span="715:24:715:35">"variables"</jtok>
<jtok eid="11" type="primary_name_ref" span="716:8:716:16">evalName</jtok>
<jtok eid="11" type="method_call" span="716:17:716:23">equals</jtok>
<jtok eid="11" type="string_literal" span="716:24:716:33">"methods"</jtok>
<jtok eid="11" type="primary_name_ref" span="717:8:717:16">evalName</jtok>
<jtok eid="11" type="method_call" span="717:17:717:23">equals</jtok>
<jtok eid="11" type="string_literal" span="717:24:717:32">"caller"</jtok>
<jtok eid="11" type="constructor_call" span="719:15:719:28">UtilEvalError</jtok>
<jtok eid="11" type="string_literal" span="720:6:720:42">"Can't assign to special variable: "</jtok>
<jtok eid="11" type="primary_name_ref" span="720:43:720:51">evalName</jtok>
<jtok eid="11" type="primary_name_ref" span="722:4:722:15">Interpreter</jtok>
<jtok eid="11" type="method_call" span="722:16:722:21">debug</jtok>
<jtok eid="11" type="string_literal" span="722:22:722:59">"found This reference evaluating LHS"</jtok>
<jtok eid="11" type="block_comment" span="723:4:732:6">/*
				If this was a literal "super" reference then we allow recursion
				in setting the variable to get the normal effect of finding the
				nearest definition starting at the super scope.  On any other
				resolution qualified by a 'this' type reference we want to set
				the variable directly in that scope. e.g. this.x=5;  or 
				someThisType.x=5;
				
				In the old scoping rules super didn't do this.
			*/</jtok>
<jtok eid="11" type="local_variable_name" span="733:12:733:20">localVar</jtok>
<jtok eid="11" type="primary_name_ref" span="733:24:733:36">lastEvalName</jtok>
<jtok eid="11" type="method_call" span="733:37:733:43">equals</jtok>
<jtok eid="11" type="string_literal" span="733:44:733:51">"super"</jtok>
<jtok eid="11" type="constructor_call" span="734:15:734:18">LHS</jtok>
<jtok eid="11" type="class_or_interface_ref" span="734:22:734:26">This</jtok>
<jtok eid="11" type="primary_name_ref" span="734:27:734:30">obj</jtok>
<jtok eid="11" type="qualified_name_ref" span="734:32:734:41">namespace</jtok>
<jtok eid="11" type="primary_name_ref" span="734:43:734:51">evalName</jtok>
<jtok eid="11" type="primary_name_ref" span="734:53:734:61">localVar</jtok>
<jtok eid="11" type="primary_name_ref" span="737:8:737:16">evalName</jtok>
<jtok eid="11" type="primary_name_ref" span="740:10:740:13">obj</jtok>
<jtok eid="11" type="class_or_interface_ref" span="740:25:740:40">ClassIdentifier</jtok>
<jtok eid="11" type="class_or_interface_ref" span="742:6:742:11">Class</jtok>
<jtok eid="11" type="local_variable_name" span="742:12:742:16">clas</jtok>
<jtok eid="11" type="class_or_interface_ref" span="742:21:742:36">ClassIdentifier</jtok>
<jtok eid="11" type="primary_name_ref" span="742:37:742:40">obj</jtok>
<jtok eid="11" type="method_call" span="742:42:742:56">getTargetClass</jtok>
<jtok eid="11" type="primary_name_ref" span="743:6:743:9">lhs</jtok>
<jtok eid="11" type="primary_name_ref" span="743:12:743:19">Reflect</jtok>
<jtok eid="11" type="method_call" span="743:20:743:37">getLHSStaticField</jtok>
<jtok eid="11" type="primary_name_ref" span="743:38:743:42">clas</jtok>
<jtok eid="11" type="primary_name_ref" span="743:44:743:52">evalName</jtok>
<jtok eid="11" type="primary_name_ref" span="744:13:744:16">lhs</jtok>
<jtok eid="11" type="primary_name_ref" span="746:6:746:9">lhs</jtok>
<jtok eid="11" type="primary_name_ref" span="746:12:746:19">Reflect</jtok>
<jtok eid="11" type="method_call" span="746:20:746:37">getLHSObjectField</jtok>
<jtok eid="11" type="primary_name_ref" span="746:38:746:41">obj</jtok>
<jtok eid="11" type="primary_name_ref" span="746:43:746:51">evalName</jtok>
<jtok eid="11" type="primary_name_ref" span="747:13:747:16">lhs</jtok>
<jtok eid="11" type="class_or_interface_ref" span="749:12:749:24">ReflectError</jtok>
<jtok eid="11" type="local_variable_name" span="749:25:749:26">e</jtok>
<jtok eid="11" type="constructor_call" span="750:15:750:28">UtilEvalError</jtok>
<jtok eid="11" type="string_literal" span="750:29:750:45">"Field access: "</jtok>
<jtok eid="11" type="primary_name_ref" span="750:46:750:47">e</jtok>
<jtok eid="11" type="constructor_call" span="754:13:754:29">InterpreterError</jtok>
<jtok eid="11" type="string_literal" span="754:30:754:56">"Internal error in lhs..."</jtok>
<jtok eid="1" type="block_comment" span="757:5:780:7">/**
		Invoke the method identified by this name.
		Performs caching of method resolution using SignatureKey.
		&lt;p&gt;

        Name contains a wholely unqualfied messy name; resolve it to 
		( object | static prefix ) + method name and invoke.
		&lt;p&gt;

        The interpreter is necessary to support 'this.interpreter' references
		in the called code. (e.g. debug());
		&lt;p&gt;

		&lt;pre&gt;
        Some cases:

            // dynamic
            local();
            myVariable.foo();
            myVariable.bar.blah.foo();
            // static
            java.lang.Integer.getInteger("foo");
		&lt;/pre&gt;
    */</jtok>
<jtok eid="12" type="class_or_interface_ref" span="781:12:781:18">Object</jtok>
<jtok eid="12" type="method_name" span="781:19:781:31">invokeMethod</jtok>
<jtok eid="12" type="parameter_type" span="782:3:782:14">Interpreter</jtok>
<jtok eid="12" type="parameter_name" span="782:15:782:26">interpreter</jtok>
<jtok eid="12" type="parameter_type" span="782:28:782:34">Object</jtok>
<jtok eid="12" type="parameter_name" span="782:37:782:41">args</jtok>
<jtok eid="12" type="parameter_type" span="782:43:782:52">CallStack</jtok>
<jtok eid="12" type="parameter_name" span="782:53:782:62">callstack</jtok>
<jtok eid="12" type="parameter_type" span="783:3:783:13">SimpleNode</jtok>
<jtok eid="12" type="parameter_name" span="783:14:783:24">callerInfo</jtok>
<jtok eid="12" type="throws" span="785:16:785:29">UtilEvalError</jtok>
<jtok eid="12" type="throws" span="785:31:785:40">EvalError</jtok>
<jtok eid="12" type="throws" span="785:42:785:54">ReflectError</jtok>
<jtok eid="12" type="throws" span="785:56:785:81">InvocationTargetException</jtok>
<jtok eid="12" type="class_or_interface_ref" span="787:9:787:15">String</jtok>
<jtok eid="12" type="local_variable_name" span="787:16:787:26">methodName</jtok>
<jtok eid="12" type="primary_name_ref" span="787:29:787:33">Name</jtok>
<jtok eid="12" type="method_call" span="787:34:787:40">suffix</jtok>
<jtok eid="12" type="primary_name_ref" span="787:41:787:46">value</jtok>
<jtok eid="12" type="class_or_interface_ref" span="788:3:788:18">BshClassManager</jtok>
<jtok eid="12" type="local_variable_name" span="788:19:788:22">bcm</jtok>
<jtok eid="12" type="primary_name_ref" span="788:25:788:36">interpreter</jtok>
<jtok eid="12" type="method_call" span="788:37:788:52">getClassManager</jtok>
<jtok eid="12" type="class_or_interface_ref" span="789:3:789:12">NameSpace</jtok>
<jtok eid="12" type="local_variable_name" span="789:13:789:22">namespace</jtok>
<jtok eid="12" type="primary_name_ref" span="789:25:789:34">callstack</jtok>
<jtok eid="12" type="method_call" span="789:35:789:38">top</jtok>
<jtok eid="12" type="line_comment" span="791:3:791:71">// Optimization - If classOfStaticMethod is set then we have already</jtok>
<jtok eid="12" type="line_comment" span="792:3:792:71">// been here and determined that this is a static method invocation.</jtok>
<jtok eid="12" type="line_comment" span="793:3:793:62">// Note: maybe factor this out with path below... clean up.</jtok>
<jtok eid="12" type="primary_name_ref" span="794:14:794:33">classOfStaticMethod</jtok>
<jtok eid="12" type="primary_name_ref" span="796:11:796:18">Reflect</jtok>
<jtok eid="12" type="method_call" span="796:19:796:37">invokeStaticMethod</jtok>
<jtok eid="12" type="primary_name_ref" span="797:5:797:8">bcm</jtok>
<jtok eid="12" type="primary_name_ref" span="797:10:797:29">classOfStaticMethod</jtok>
<jtok eid="12" type="primary_name_ref" span="797:31:797:41">methodName</jtok>
<jtok eid="12" type="primary_name_ref" span="797:43:797:47">args</jtok>
<jtok eid="12" type="primary_name_ref" span="800:9:800:13">Name</jtok>
<jtok eid="12" type="method_call" span="800:14:800:24">isCompound</jtok>
<jtok eid="12" type="primary_name_ref" span="800:25:800:30">value</jtok>
<jtok eid="12" type="method_call" span="801:11:801:28">invokeLocalMethod</jtok>
<jtok eid="12" type="primary_name_ref" span="802:5:802:16">interpreter</jtok>
<jtok eid="12" type="primary_name_ref" span="802:18:802:22">args</jtok>
<jtok eid="12" type="primary_name_ref" span="802:24:802:33">callstack</jtok>
<jtok eid="12" type="primary_name_ref" span="802:35:802:45">callerInfo</jtok>
<jtok eid="12" type="line_comment" span="804:3:804:74">// Note: if we want methods declared inside blocks to be accessible via</jtok>
<jtok eid="12" type="line_comment" span="805:3:805:69">// this.methodname() inside the block we could handle it here as a</jtok>
<jtok eid="12" type="line_comment" span="806:3:806:74">// special case.  See also resolveThisFieldReference() special handling</jtok>
<jtok eid="12" type="line_comment" span="807:3:807:71">// for BlockNameSpace case.  They currently work via the direct name</jtok>
<jtok eid="12" type="line_comment" span="808:3:808:24">// e.g. methodName().</jtok>
<jtok eid="12" type="class_or_interface_ref" span="810:9:810:15">String</jtok>
<jtok eid="12" type="local_variable_name" span="810:16:810:22">prefix</jtok>
<jtok eid="12" type="primary_name_ref" span="810:25:810:29">Name</jtok>
<jtok eid="12" type="method_call" span="810:30:810:36">prefix</jtok>
<jtok eid="12" type="primary_name_ref" span="810:37:810:42">value</jtok>
<jtok eid="12" type="line_comment" span="812:3:812:54">// Superclass method invocation? (e.g. super.foo())</jtok>
<jtok eid="12" type="primary_name_ref" span="813:8:813:14">prefix</jtok>
<jtok eid="12" type="method_call" span="813:15:813:21">equals</jtok>
<jtok eid="12" type="string_literal" span="813:22:813:29">"super"</jtok>
<jtok eid="12" type="primary_name_ref" span="813:34:813:38">Name</jtok>
<jtok eid="12" type="method_call" span="813:39:813:49">countParts</jtok>
<jtok eid="12" type="primary_name_ref" span="813:50:813:55">value</jtok>
<jtok eid="12" type="line_comment" span="815:4:815:61">// Allow getThis() to work through block namespaces first</jtok>
<jtok eid="12" type="class_or_interface_ref" span="816:4:816:8">This</jtok>
<jtok eid="12" type="local_variable_name" span="816:9:816:12">ths</jtok>
<jtok eid="12" type="primary_name_ref" span="816:15:816:24">namespace</jtok>
<jtok eid="12" type="method_call" span="816:25:816:32">getThis</jtok>
<jtok eid="12" type="primary_name_ref" span="816:34:816:45">interpreter</jtok>
<jtok eid="12" type="class_or_interface_ref" span="817:4:817:13">NameSpace</jtok>
<jtok eid="12" type="local_variable_name" span="817:14:817:27">thisNameSpace</jtok>
<jtok eid="12" type="primary_name_ref" span="817:30:817:33">ths</jtok>
<jtok eid="12" type="method_call" span="817:34:817:46">getNameSpace</jtok>
<jtok eid="12" type="class_or_interface_ref" span="818:4:818:13">NameSpace</jtok>
<jtok eid="12" type="local_variable_name" span="818:14:818:28">classNameSpace</jtok>
<jtok eid="12" type="method_call" span="818:31:818:48">getClassNameSpace</jtok>
<jtok eid="12" type="primary_name_ref" span="818:50:818:63">thisNameSpace</jtok>
<jtok eid="12" type="primary_name_ref" span="819:9:819:23">classNameSpace</jtok>
<jtok eid="12" type="class_or_interface_ref" span="821:5:821:11">Object</jtok>
<jtok eid="12" type="local_variable_name" span="821:12:821:20">instance</jtok>
<jtok eid="12" type="primary_name_ref" span="821:23:821:37">classNameSpace</jtok>
<jtok eid="12" type="method_call" span="821:38:821:54">getClassInstance</jtok>
<jtok eid="12" type="primary_name_ref" span="822:12:822:26">ClassGenerator</jtok>
<jtok eid="12" type="method_call" span="822:27:822:44">getClassGenerator</jtok>
<jtok eid="12" type="method_call" span="823:7:823:29">invokeSuperclassMethod</jtok>
<jtok eid="12" type="primary_name_ref" span="823:31:823:34">bcm</jtok>
<jtok eid="12" type="primary_name_ref" span="823:36:823:44">instance</jtok>
<jtok eid="12" type="primary_name_ref" span="823:46:823:56">methodName</jtok>
<jtok eid="12" type="primary_name_ref" span="823:58:823:62">args</jtok>
<jtok eid="12" type="line_comment" span="827:9:827:50">// Find target object or class identifier</jtok>
<jtok eid="12" type="class_or_interface_ref" span="828:9:828:13">Name</jtok>
<jtok eid="12" type="local_variable_name" span="828:14:828:24">targetName</jtok>
<jtok eid="12" type="primary_name_ref" span="828:27:828:36">namespace</jtok>
<jtok eid="12" type="method_call" span="828:37:828:52">getNameResolver</jtok>
<jtok eid="12" type="primary_name_ref" span="828:54:828:60">prefix</jtok>
<jtok eid="12" type="class_or_interface_ref" span="829:9:829:15">Object</jtok>
<jtok eid="12" type="local_variable_name" span="829:16:829:19">obj</jtok>
<jtok eid="12" type="primary_name_ref" span="829:22:829:32">targetName</jtok>
<jtok eid="12" type="method_call" span="829:33:829:41">toObject</jtok>
<jtok eid="12" type="primary_name_ref" span="829:43:829:52">callstack</jtok>
<jtok eid="12" type="primary_name_ref" span="829:54:829:65">interpreter</jtok>
<jtok eid="12" type="primary_name_ref" span="831:8:831:11">obj</jtok>
<jtok eid="12" type="primary_name_ref" span="831:15:831:24">Primitive</jtok>
<jtok eid="12" type="qualified_name_ref" span="831:25:831:29">VOID</jtok>
<jtok eid="12" type="constructor_call" span="832:14:832:27">UtilEvalError</jtok>
<jtok eid="12" type="string_literal" span="832:29:832:58">"Attempt to resolve method: "</jtok>
<jtok eid="12" type="primary_name_ref" span="832:59:832:69">methodName</jtok>
<jtok eid="12" type="string_literal" span="833:7:833:49">"() on undefined variable or class name: "</jtok>
<jtok eid="12" type="primary_name_ref" span="833:50:833:60">targetName</jtok>
<jtok eid="12" type="line_comment" span="835:9:835:54">// if we've got an object, resolve the method</jtok>
<jtok eid="12" type="primary_name_ref" span="836:16:836:19">obj</jtok>
<jtok eid="12" type="class_or_interface_ref" span="836:31:836:46">ClassIdentifier</jtok>
<jtok eid="12" type="primary_name_ref" span="838:17:838:20">obj</jtok>
<jtok eid="12" type="class_or_interface_ref" span="838:32:838:41">Primitive</jtok>
<jtok eid="12" type="primary_name_ref" span="840:21:840:24">obj</jtok>
<jtok eid="12" type="primary_name_ref" span="840:28:840:37">Primitive</jtok>
<jtok eid="12" type="qualified_name_ref" span="840:38:840:42">NULL</jtok>
<jtok eid="12" type="constructor_call" span="841:31:841:46">UtilTargetError</jtok>
<jtok eid="12" type="constructor_call" span="841:52:841:72">NullPointerException</jtok>
<jtok eid="12" type="string_literal" span="842:7:842:42">"Null Pointer in Method Invocation"</jtok>
<jtok eid="12" type="line_comment" span="844:17:844:40">// some other primitive</jtok>
<jtok eid="12" type="line_comment" span="845:17:845:71">// should avoid calling methods on primitive, as we do</jtok>
<jtok eid="12" type="line_comment" span="846:17:846:74">// in Name (can't treat primitive like an object message)</jtok>
<jtok eid="12" type="line_comment" span="847:17:847:53">// but the hole is useful right now.</jtok>
<jtok eid="12" type="primary_name_ref" span="848:10:848:21">Interpreter</jtok>
<jtok eid="12" type="qualified_name_ref" span="848:22:848:27">DEBUG</jtok>
<jtok eid="12" type="primary_name_ref" span="849:18:849:29">interpreter</jtok>
<jtok eid="12" type="method_call" span="849:30:849:35">debug</jtok>
<jtok eid="12" type="string_literal" span="850:6:850:48">"Attempt to access method on primitive..."</jtok>
<jtok eid="12" type="string_literal" span="851:8:851:63">" allowing bsh.Primitive to peek through for debugging"</jtok>
<jtok eid="12" type="line_comment" span="854:13:854:66">// found an object and it's not an undefined variable</jtok>
<jtok eid="12" type="primary_name_ref" span="855:20:855:27">Reflect</jtok>
<jtok eid="12" type="method_call" span="855:28:855:46">invokeObjectMethod</jtok>
<jtok eid="12" type="primary_name_ref" span="856:5:856:8">obj</jtok>
<jtok eid="12" type="primary_name_ref" span="856:10:856:20">methodName</jtok>
<jtok eid="12" type="primary_name_ref" span="856:22:856:26">args</jtok>
<jtok eid="12" type="primary_name_ref" span="856:28:856:39">interpreter</jtok>
<jtok eid="12" type="primary_name_ref" span="856:41:856:50">callstack</jtok>
<jtok eid="12" type="primary_name_ref" span="856:52:856:62">callerInfo</jtok>
<jtok eid="12" type="line_comment" span="859:3:859:18">// It's a class</jtok>
<jtok eid="12" type="line_comment" span="861:9:861:29">// try static method</jtok>
<jtok eid="12" type="primary_name_ref" span="862:14:862:25">Interpreter</jtok>
<jtok eid="12" type="qualified_name_ref" span="862:26:862:31">DEBUG</jtok>
<jtok eid="12" type="primary_name_ref" span="863:10:863:21">Interpreter</jtok>
<jtok eid="12" type="method_call" span="863:22:863:27">debug</jtok>
<jtok eid="12" type="string_literal" span="863:28:863:60">"invokeMethod: trying static - "</jtok>
<jtok eid="12" type="primary_name_ref" span="863:63:863:73">targetName</jtok>
<jtok eid="12" type="class_or_interface_ref" span="865:9:865:14">Class</jtok>
<jtok eid="12" type="local_variable_name" span="865:15:865:19">clas</jtok>
<jtok eid="12" type="class_or_interface_ref" span="865:24:865:39">ClassIdentifier</jtok>
<jtok eid="12" type="primary_name_ref" span="865:40:865:43">obj</jtok>
<jtok eid="12" type="method_call" span="865:45:865:59">getTargetClass</jtok>
<jtok eid="12" type="line_comment" span="867:3:867:74">// cache the fact that this is a static method invocation on this class</jtok>
<jtok eid="12" type="primary_name_ref" span="868:3:868:22">classOfStaticMethod</jtok>
<jtok eid="12" type="primary_name_ref" span="868:25:868:29">clas</jtok>
<jtok eid="12" type="primary_name_ref" span="870:14:870:18">clas</jtok>
<jtok eid="12" type="primary_name_ref" span="871:11:871:18">Reflect</jtok>
<jtok eid="12" type="method_call" span="871:19:871:37">invokeStaticMethod</jtok>
<jtok eid="12" type="primary_name_ref" span="871:39:871:42">bcm</jtok>
<jtok eid="12" type="primary_name_ref" span="871:44:871:48">clas</jtok>
<jtok eid="12" type="primary_name_ref" span="871:50:871:60">methodName</jtok>
<jtok eid="12" type="primary_name_ref" span="871:62:871:66">args</jtok>
<jtok eid="12" type="line_comment" span="873:9:873:28">// return null; ???</jtok>
<jtok eid="12" type="constructor_call" span="874:13:874:26">UtilEvalError</jtok>
<jtok eid="12" type="string_literal" span="874:27:874:59">"invokeMethod: unknown target: "</jtok>
<jtok eid="12" type="primary_name_ref" span="874:62:874:72">targetName</jtok>
<jtok eid="1" type="block_comment" span="877:2:882:4">/**
		Invoke a locally declared method or a bsh command.
		If the method is not already declared in the namespace then try
		to load it as a resource from the imported command path (e.g.
		/bsh/commands)
	*/</jtok>
<jtok eid="1" type="block_comment" span="883:2:887:4">/*
		Note: the bsh command code should probably not be here...  we need to
		scope it by the namespace that imported the command... so it probably
		needs to be integrated into NameSpace.
	*/</jtok>
<jtok eid="13" type="class_or_interface_ref" span="888:13:888:19">Object</jtok>
<jtok eid="13" type="method_name" span="888:20:888:37">invokeLocalMethod</jtok>
<jtok eid="13" type="parameter_type" span="889:3:889:14">Interpreter</jtok>
<jtok eid="13" type="parameter_name" span="889:15:889:26">interpreter</jtok>
<jtok eid="13" type="parameter_type" span="889:28:889:34">Object</jtok>
<jtok eid="13" type="parameter_name" span="889:37:889:41">args</jtok>
<jtok eid="13" type="parameter_type" span="889:43:889:52">CallStack</jtok>
<jtok eid="13" type="parameter_name" span="889:53:889:62">callstack</jtok>
<jtok eid="13" type="parameter_type" span="890:3:890:13">SimpleNode</jtok>
<jtok eid="13" type="parameter_name" span="890:14:890:24">callerInfo</jtok>
<jtok eid="13" type="throws" span="892:16:892:25">EvalError</jtok>
<jtok eid="13" type="block_comment" span="892:25:892:70">/*, ReflectError, InvocationTargetException*/</jtok>
<jtok eid="13" type="primary_name_ref" span="894:14:894:25">Interpreter</jtok>
<jtok eid="13" type="qualified_name_ref" span="894:26:894:31">DEBUG</jtok>
<jtok eid="13" type="primary_name_ref" span="895:10:895:21">Interpreter</jtok>
<jtok eid="13" type="method_call" span="895:22:895:27">debug</jtok>
<jtok eid="13" type="string_literal" span="895:29:895:50">"invokeLocalMethod: "</jtok>
<jtok eid="13" type="primary_name_ref" span="895:53:895:58">value</jtok>
<jtok eid="13" type="primary_name_ref" span="896:8:896:19">interpreter</jtok>
<jtok eid="13" type="constructor_call" span="897:14:897:30">InterpreterError</jtok>
<jtok eid="13" type="string_literal" span="898:5:898:44">"invokeLocalMethod: interpreter = null"</jtok>
<jtok eid="13" type="class_or_interface_ref" span="900:3:900:9">String</jtok>
<jtok eid="13" type="local_variable_name" span="900:10:900:21">commandName</jtok>
<jtok eid="13" type="primary_name_ref" span="900:24:900:29">value</jtok>
<jtok eid="13" type="class_or_interface_ref" span="901:3:901:8">Class</jtok>
<jtok eid="13" type="local_variable_name" span="901:12:901:20">argTypes</jtok>
<jtok eid="13" type="primary_name_ref" span="901:23:901:28">Types</jtok>
<jtok eid="13" type="method_call" span="901:29:901:37">getTypes</jtok>
<jtok eid="13" type="primary_name_ref" span="901:39:901:43">args</jtok>
<jtok eid="13" type="line_comment" span="903:9:903:37">// Check for existing method</jtok>
<jtok eid="13" type="class_or_interface_ref" span="904:9:904:18">BshMethod</jtok>
<jtok eid="13" type="local_variable_name" span="904:19:904:23">meth</jtok>
<jtok eid="13" type="primary_name_ref" span="906:4:906:8">meth</jtok>
<jtok eid="13" type="primary_name_ref" span="906:11:906:20">namespace</jtok>
<jtok eid="13" type="method_call" span="906:21:906:30">getMethod</jtok>
<jtok eid="13" type="primary_name_ref" span="906:32:906:43">commandName</jtok>
<jtok eid="13" type="primary_name_ref" span="906:45:906:53">argTypes</jtok>
<jtok eid="13" type="class_or_interface_ref" span="907:13:907:26">UtilEvalError</jtok>
<jtok eid="13" type="local_variable_name" span="907:27:907:28">e</jtok>
<jtok eid="13" type="primary_name_ref" span="908:10:908:11">e</jtok>
<jtok eid="13" type="method_call" span="908:12:908:23">toEvalError</jtok>
<jtok eid="13" type="string_literal" span="909:5:909:30">"Local method invocation"</jtok>
<jtok eid="13" type="primary_name_ref" span="909:32:909:42">callerInfo</jtok>
<jtok eid="13" type="primary_name_ref" span="909:44:909:53">callstack</jtok>
<jtok eid="13" type="line_comment" span="912:3:912:27">// If defined, invoke it</jtok>
<jtok eid="13" type="primary_name_ref" span="913:14:913:18">meth</jtok>
<jtok eid="13" type="primary_name_ref" span="914:11:914:15">meth</jtok>
<jtok eid="13" type="method_call" span="914:16:914:22">invoke</jtok>
<jtok eid="13" type="primary_name_ref" span="914:24:914:28">args</jtok>
<jtok eid="13" type="primary_name_ref" span="914:30:914:41">interpreter</jtok>
<jtok eid="13" type="primary_name_ref" span="914:43:914:52">callstack</jtok>
<jtok eid="13" type="primary_name_ref" span="914:54:914:64">callerInfo</jtok>
<jtok eid="13" type="class_or_interface_ref" span="916:3:916:18">BshClassManager</jtok>
<jtok eid="13" type="local_variable_name" span="916:19:916:22">bcm</jtok>
<jtok eid="13" type="primary_name_ref" span="916:25:916:36">interpreter</jtok>
<jtok eid="13" type="method_call" span="916:37:916:52">getClassManager</jtok>
<jtok eid="13" type="line_comment" span="918:3:918:34">// Look for a BeanShell command</jtok>
<jtok eid="13" type="class_or_interface_ref" span="920:3:920:9">Object</jtok>
<jtok eid="13" type="local_variable_name" span="920:10:920:23">commandObject</jtok>
<jtok eid="13" type="primary_name_ref" span="922:4:922:17">commandObject</jtok>
<jtok eid="13" type="primary_name_ref" span="922:20:922:29">namespace</jtok>
<jtok eid="13" type="method_call" span="922:30:922:40">getCommand</jtok>
<jtok eid="13" type="primary_name_ref" span="923:5:923:16">commandName</jtok>
<jtok eid="13" type="primary_name_ref" span="923:18:923:26">argTypes</jtok>
<jtok eid="13" type="primary_name_ref" span="923:28:923:39">interpreter</jtok>
<jtok eid="13" type="class_or_interface_ref" span="924:13:924:26">UtilEvalError</jtok>
<jtok eid="13" type="local_variable_name" span="924:27:924:28">e</jtok>
<jtok eid="13" type="primary_name_ref" span="925:10:925:11">e</jtok>
<jtok eid="13" type="method_call" span="925:12:925:23">toEvalError</jtok>
<jtok eid="13" type="string_literal" span="925:24:925:49">"Error loading command: "</jtok>
<jtok eid="13" type="primary_name_ref" span="926:5:926:15">callerInfo</jtok>
<jtok eid="13" type="primary_name_ref" span="926:17:926:26">callstack</jtok>
<jtok eid="13" type="line_comment" span="929:3:929:53">// should try to print usage here if nothing found</jtok>
<jtok eid="13" type="primary_name_ref" span="930:8:930:21">commandObject</jtok>
<jtok eid="13" type="line_comment" span="932:4:932:66">// Look for a default invoke() handler method in the namespace</jtok>
<jtok eid="13" type="line_comment" span="933:4:933:65">// Note: this code duplicates that in This.java... should it?</jtok>
<jtok eid="13" type="line_comment" span="934:4:934:44">// Call on 'This' can never be a command</jtok>
<jtok eid="13" type="class_or_interface_ref" span="935:4:935:13">BshMethod</jtok>
<jtok eid="13" type="local_variable_name" span="935:14:935:26">invokeMethod</jtok>
<jtok eid="13" type="primary_name_ref" span="937:5:937:17">invokeMethod</jtok>
<jtok eid="13" type="primary_name_ref" span="937:20:937:29">namespace</jtok>
<jtok eid="13" type="method_call" span="937:30:937:39">getMethod</jtok>
<jtok eid="13" type="string_literal" span="938:6:938:14">"invoke"</jtok>
<jtok eid="13" type="constructor_call" span="938:20:938:25">Class</jtok>
<jtok eid="13" type="class_or_interface_ref" span="939:14:939:27">UtilEvalError</jtok>
<jtok eid="13" type="local_variable_name" span="939:28:939:29">e</jtok>
<jtok eid="13" type="primary_name_ref" span="940:11:940:12">e</jtok>
<jtok eid="13" type="method_call" span="940:13:940:24">toEvalError</jtok>
<jtok eid="13" type="string_literal" span="941:6:941:31">"Local method invocation"</jtok>
<jtok eid="13" type="primary_name_ref" span="941:33:941:43">callerInfo</jtok>
<jtok eid="13" type="primary_name_ref" span="941:45:941:54">callstack</jtok>
<jtok eid="13" type="primary_name_ref" span="944:9:944:21">invokeMethod</jtok>
<jtok eid="13" type="primary_name_ref" span="945:12:945:24">invokeMethod</jtok>
<jtok eid="13" type="method_call" span="945:25:945:31">invoke</jtok>
<jtok eid="13" type="constructor_call" span="946:10:946:16">Object</jtok>
<jtok eid="13" type="primary_name_ref" span="946:22:946:33">commandName</jtok>
<jtok eid="13" type="primary_name_ref" span="946:35:946:39">args</jtok>
<jtok eid="13" type="primary_name_ref" span="947:6:947:17">interpreter</jtok>
<jtok eid="13" type="primary_name_ref" span="947:19:947:28">callstack</jtok>
<jtok eid="13" type="primary_name_ref" span="947:30:947:40">callerInfo</jtok>
<jtok eid="13" type="constructor_call" span="949:23:949:32">EvalError</jtok>
<jtok eid="13" type="string_literal" span="949:34:949:55">"Command not found: "</jtok>
<jtok eid="13" type="primary_name_ref" span="950:6:950:16">StringUtil</jtok>
<jtok eid="13" type="method_call" span="950:17:950:29">methodString</jtok>
<jtok eid="13" type="primary_name_ref" span="950:31:950:42">commandName</jtok>
<jtok eid="13" type="primary_name_ref" span="950:44:950:52">argTypes</jtok>
<jtok eid="13" type="primary_name_ref" span="951:5:951:15">callerInfo</jtok>
<jtok eid="13" type="primary_name_ref" span="951:17:951:26">callstack</jtok>
<jtok eid="13" type="primary_name_ref" span="954:8:954:21">commandObject</jtok>
<jtok eid="13" type="class_or_interface_ref" span="954:33:954:42">BshMethod</jtok>
<jtok eid="13" type="class_or_interface_ref" span="955:13:955:22">BshMethod</jtok>
<jtok eid="13" type="primary_name_ref" span="955:23:955:36">commandObject</jtok>
<jtok eid="13" type="method_call" span="955:38:955:44">invoke</jtok>
<jtok eid="13" type="primary_name_ref" span="956:5:956:9">args</jtok>
<jtok eid="13" type="primary_name_ref" span="956:11:956:22">interpreter</jtok>
<jtok eid="13" type="primary_name_ref" span="956:24:956:33">callstack</jtok>
<jtok eid="13" type="primary_name_ref" span="956:35:956:45">callerInfo</jtok>
<jtok eid="13" type="primary_name_ref" span="958:8:958:21">commandObject</jtok>
<jtok eid="13" type="class_or_interface_ref" span="958:33:958:38">Class</jtok>
<jtok eid="13" type="primary_name_ref" span="960:12:960:19">Reflect</jtok>
<jtok eid="13" type="method_call" span="960:20:960:41">invokeCompiledCommand</jtok>
<jtok eid="13" type="class_or_interface_ref" span="961:8:961:13">Class</jtok>
<jtok eid="13" type="primary_name_ref" span="961:14:961:27">commandObject</jtok>
<jtok eid="13" type="primary_name_ref" span="961:30:961:34">args</jtok>
<jtok eid="13" type="primary_name_ref" span="961:36:961:47">interpreter</jtok>
<jtok eid="13" type="primary_name_ref" span="961:49:961:58">callstack</jtok>
<jtok eid="13" type="class_or_interface_ref" span="962:14:962:27">UtilEvalError</jtok>
<jtok eid="13" type="local_variable_name" span="962:28:962:29">e</jtok>
<jtok eid="13" type="primary_name_ref" span="963:11:963:12">e</jtok>
<jtok eid="13" type="method_call" span="963:13:963:24">toEvalError</jtok>
<jtok eid="13" type="string_literal" span="963:25:963:60">"Error invoking compiled command: "</jtok>
<jtok eid="13" type="primary_name_ref" span="964:5:964:15">callerInfo</jtok>
<jtok eid="13" type="primary_name_ref" span="964:17:964:26">callstack</jtok>
<jtok eid="13" type="constructor_call" span="967:13:967:29">InterpreterError</jtok>
<jtok eid="13" type="string_literal" span="967:30:967:52">"invalid command type"</jtok>
<jtok eid="1" type="block_comment" span="970:1:992:3">/*
	private String getHelp( String name )
		throws UtilEvalError
	{
		try {
			// should check for null namespace here
			return get( "bsh.help."+name, null/interpreter/ );
		} catch ( Exception e ) {
			return "usage: "+name;
		}
	}

	private String getHelp( Class commandClass )
		throws UtilEvalError
	{
        try {
            return (String)Reflect.invokeStaticMethod(
				null/bcm/, commandClass, "usage", null );
        } catch( Exception e )
			return "usage: "+name;
		}
	}
*/</jtok>
<jtok eid="1" type="line_comment" span="994:2:994:66">// Static methods that operate on compound ('.' separated) names</jtok>
<jtok eid="1" type="line_comment" span="995:2:995:54">// I guess we could move these to StringUtil someday</jtok>
<jtok eid="14" type="method_name" span="997:24:997:34">isCompound</jtok>
<jtok eid="14" type="parameter_type" span="997:35:997:41">String</jtok>
<jtok eid="14" type="parameter_name" span="997:42:997:47">value</jtok>
<jtok eid="14" type="primary_name_ref" span="999:10:999:15">value</jtok>
<jtok eid="14" type="method_call" span="999:16:999:23">indexOf</jtok>
<jtok eid="14" type="line_comment" span="1000:3:1000:34">//return countParts(value) &gt; 1;</jtok>
<jtok eid="15" type="method_name" span="1003:13:1003:23">countParts</jtok>
<jtok eid="15" type="parameter_type" span="1003:24:1003:30">String</jtok>
<jtok eid="15" type="parameter_name" span="1003:31:1003:36">value</jtok>
<jtok eid="15" type="primary_name_ref" span="1005:6:1005:11">value</jtok>
<jtok eid="15" type="local_variable_name" span="1008:7:1008:12">count</jtok>
<jtok eid="15" type="local_variable_name" span="1009:7:1009:12">index</jtok>
<jtok eid="15" type="primary_name_ref" span="1010:10:1010:15">index</jtok>
<jtok eid="15" type="primary_name_ref" span="1010:18:1010:23">value</jtok>
<jtok eid="15" type="method_call" span="1010:24:1010:31">indexOf</jtok>
<jtok eid="15" type="primary_name_ref" span="1010:37:1010:42">index</jtok>
<jtok eid="15" type="primary_name_ref" span="1011:4:1011:9">count</jtok>
<jtok eid="15" type="primary_name_ref" span="1012:10:1012:15">count</jtok>
<jtok eid="16" type="class_or_interface_ref" span="1015:9:1015:15">String</jtok>
<jtok eid="16" type="method_name" span="1015:16:1015:22">prefix</jtok>
<jtok eid="16" type="parameter_type" span="1015:23:1015:29">String</jtok>
<jtok eid="16" type="parameter_name" span="1015:30:1015:35">value</jtok>
<jtok eid="16" type="method_call" span="1017:7:1017:17">isCompound</jtok>
<jtok eid="16" type="primary_name_ref" span="1017:18:1017:23">value</jtok>
<jtok eid="16" type="method_call" span="1020:10:1020:16">prefix</jtok>
<jtok eid="16" type="primary_name_ref" span="1020:17:1020:22">value</jtok>
<jtok eid="16" type="method_call" span="1020:24:1020:34">countParts</jtok>
<jtok eid="16" type="primary_name_ref" span="1020:35:1020:40">value</jtok>
<jtok eid="17" type="class_or_interface_ref" span="1023:9:1023:15">String</jtok>
<jtok eid="17" type="method_name" span="1023:16:1023:22">prefix</jtok>
<jtok eid="17" type="parameter_type" span="1023:23:1023:29">String</jtok>
<jtok eid="17" type="parameter_name" span="1023:30:1023:35">value</jtok>
<jtok eid="17" type="parameter_name" span="1023:41:1023:46">parts</jtok>
<jtok eid="17" type="primary_name_ref" span="1025:7:1025:12">parts</jtok>
<jtok eid="17" type="local_variable_name" span="1028:7:1028:12">count</jtok>
<jtok eid="17" type="local_variable_name" span="1029:7:1029:12">index</jtok>
<jtok eid="17" type="primary_name_ref" span="1031:12:1031:17">index</jtok>
<jtok eid="17" type="primary_name_ref" span="1031:20:1031:25">value</jtok>
<jtok eid="17" type="method_call" span="1031:26:1031:33">indexOf</jtok>
<jtok eid="17" type="primary_name_ref" span="1031:39:1031:44">index</jtok>
<jtok eid="17" type="primary_name_ref" span="1032:10:1032:15">count</jtok>
<jtok eid="17" type="primary_name_ref" span="1032:18:1032:23">parts</jtok>
<jtok eid="17" type="primary_name_ref" span="1035:11:1035:16">index</jtok>
<jtok eid="17" type="primary_name_ref" span="1035:26:1035:31">value</jtok>
<jtok eid="17" type="primary_name_ref" span="1035:34:1035:39">value</jtok>
<jtok eid="17" type="method_call" span="1035:40:1035:49">substring</jtok>
<jtok eid="17" type="primary_name_ref" span="1035:53:1035:58">index</jtok>
<jtok eid="18" type="class_or_interface_ref" span="1038:9:1038:15">String</jtok>
<jtok eid="18" type="method_name" span="1038:16:1038:22">suffix</jtok>
<jtok eid="18" type="parameter_type" span="1038:23:1038:29">String</jtok>
<jtok eid="18" type="parameter_name" span="1038:30:1038:34">name</jtok>
<jtok eid="18" type="method_call" span="1040:7:1040:17">isCompound</jtok>
<jtok eid="18" type="primary_name_ref" span="1040:18:1040:22">name</jtok>
<jtok eid="18" type="method_call" span="1043:10:1043:16">suffix</jtok>
<jtok eid="18" type="primary_name_ref" span="1043:17:1043:21">name</jtok>
<jtok eid="18" type="method_call" span="1043:23:1043:33">countParts</jtok>
<jtok eid="18" type="primary_name_ref" span="1043:34:1043:38">name</jtok>
<jtok eid="19" type="class_or_interface_ref" span="1046:16:1046:22">String</jtok>
<jtok eid="19" type="method_name" span="1046:23:1046:29">suffix</jtok>
<jtok eid="19" type="parameter_type" span="1046:30:1046:36">String</jtok>
<jtok eid="19" type="parameter_name" span="1046:37:1046:42">value</jtok>
<jtok eid="19" type="parameter_name" span="1046:48:1046:53">parts</jtok>
<jtok eid="19" type="primary_name_ref" span="1048:7:1048:12">parts</jtok>
<jtok eid="19" type="local_variable_name" span="1051:7:1051:12">count</jtok>
<jtok eid="19" type="local_variable_name" span="1052:7:1052:12">index</jtok>
<jtok eid="19" type="primary_name_ref" span="1052:15:1052:20">value</jtok>
<jtok eid="19" type="method_call" span="1052:21:1052:27">length</jtok>
<jtok eid="19" type="primary_name_ref" span="1054:13:1054:18">index</jtok>
<jtok eid="19" type="primary_name_ref" span="1054:21:1054:26">value</jtok>
<jtok eid="19" type="method_call" span="1054:27:1054:38">lastIndexOf</jtok>
<jtok eid="19" type="primary_name_ref" span="1054:44:1054:49">index</jtok>
<jtok eid="19" type="primary_name_ref" span="1055:10:1055:15">count</jtok>
<jtok eid="19" type="primary_name_ref" span="1055:18:1055:23">parts</jtok>
<jtok eid="19" type="primary_name_ref" span="1057:11:1057:16">index</jtok>
<jtok eid="19" type="primary_name_ref" span="1057:26:1057:31">value</jtok>
<jtok eid="19" type="primary_name_ref" span="1057:34:1057:39">value</jtok>
<jtok eid="19" type="method_call" span="1057:40:1057:49">substring</jtok>
<jtok eid="19" type="primary_name_ref" span="1057:50:1057:55">index</jtok>
<jtok eid="1" type="line_comment" span="1060:2:1060:31">// end compound name routines</jtok>
<jtok eid="20" type="class_or_interface_ref" span="1063:9:1063:15">String</jtok>
<jtok eid="20" type="method_name" span="1063:16:1063:24">toString</jtok>
<jtok eid="20" type="primary_name_ref" span="1063:36:1063:41">value</jtok>
</jdoc>