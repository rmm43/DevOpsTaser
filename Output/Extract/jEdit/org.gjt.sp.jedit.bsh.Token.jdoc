<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.Token" jls="java5">
<jent id="0" type="file" span="0:0:90:2">Source/jEdit/org/gjt/sp/jedit/bsh/Token.java</jent>
<jent id="1" pid="0" type="class" span="16:1:90:1">org.gjt.sp.jedit.bsh.Token</jent>
<jent id="2" pid="1" type="method" span="65:3:68:3">org.gjt.sp.jedit.bsh.Token.toString()</jent>
<jent id="3" pid="1" type="method" span="82:3:88:3">org.gjt.sp.jedit.bsh.Token.newToken(int)</jent>
<jtok eid="0" type="block_comment" span="1:1:1:73">/* Generated By:JavaCC: Do not edit this line. Token.java Version 3.0 */</jtok>
<jtok eid="0" type="block_comment" span="3:1:9:3">/*
	This file has been modified for BeanShell to make Token serializable.
	If this file is regenerated please make this change.

	All BeanShell modifications are demarcated by "Begin BeanShell 
	Modification - ... " and "End BeanShell Modification - ..."
*/</jtok>
<jtok eid="0" type="block_comment" span="11:1:13:4">/**
 * Describes the input token stream.
 */</jtok>
<jtok eid="0" type="line_comment" span="15:2:15:48">// Begin BeanShell Modification - serializable</jtok>
<jtok eid="1" type="class_name" span="16:14:16:19">Token</jtok>
<jtok eid="1" type="class_or_interface_ref" span="16:31:16:35">java</jtok>
<jtok eid="1" type="class_or_interface_ref" span="16:36:16:38">io</jtok>
<jtok eid="1" type="class_or_interface_ref" span="16:39:16:51">Serializable</jtok>
<jtok eid="1" type="line_comment" span="17:2:17:46">// End BeanShell Modification - serializable</jtok>
<jtok eid="1" type="block_comment" span="19:3:23:6">/**
   * An integer that describes the kind of this token.  This numbering
   * system is determined by JavaCCParser, and a table of these numbers is
   * stored in the file ...Constants.java.
   */</jtok>
<jtok eid="1" type="field_name" span="24:14:24:18">kind</jtok>
<jtok eid="1" type="block_comment" span="26:3:30:6">/**
   * beginLine and beginColumn describe the position of the first character
   * of this token; endLine and endColumn describe the position of the
   * last character of this token.
   */</jtok>
<jtok eid="1" type="field_name" span="31:14:31:23">beginLine</jtok>
<jtok eid="1" type="field_name" span="31:25:31:36">beginColumn</jtok>
<jtok eid="1" type="field_name" span="31:38:31:45">endLine</jtok>
<jtok eid="1" type="field_name" span="31:47:31:56">endColumn</jtok>
<jtok eid="1" type="block_comment" span="33:3:35:6">/**
   * The string image of the token.
   */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="36:10:36:16">String</jtok>
<jtok eid="1" type="field_name" span="36:17:36:22">image</jtok>
<jtok eid="1" type="block_comment" span="38:3:45:6">/**
   * A reference to the next regular (non-special) token from the input
   * stream.  If this is the last token from the input stream, or if the
   * token manager has not read tokens beyond this one, this field is
   * set to null.  This is true only if this token is also a regular
   * token.  Otherwise, see below for a description of the contents of
   * this field.
   */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="46:10:46:15">Token</jtok>
<jtok eid="1" type="field_name" span="46:16:46:20">next</jtok>
<jtok eid="1" type="block_comment" span="48:3:59:6">/**
   * This field is used to access special tokens that occur prior to this
   * token, but after the immediately preceding regular (non-special) token.
   * If there are no such special tokens, this field is set to null.
   * When there are more than one such special token, this field refers
   * to the last of these special tokens, which in turn refers to the next
   * previous special token through its specialToken field, and so on
   * until the first special token (whose specialToken field is null).
   * The next fields of special tokens refer to other special tokens that
   * immediately follow it (without an intervening regular token).  If there
   * is no such token, this field is null.
   */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="60:10:60:15">Token</jtok>
<jtok eid="1" type="field_name" span="60:16:60:28">specialToken</jtok>
<jtok eid="1" type="block_comment" span="62:3:64:6">/**
   * Returns the image.
   */</jtok>
<jtok eid="2" type="class_or_interface_ref" span="65:10:65:16">String</jtok>
<jtok eid="2" type="method_name" span="65:17:65:25">toString</jtok>
<jtok eid="2" type="primary_name_ref" span="67:13:67:18">image</jtok>
<jtok eid="1" type="block_comment" span="70:3:81:6">/**
   * Returns a new Token object, by default. However, if you want, you
   * can create and return subclass objects based on the value of ofKind.
   * Simply add the cases to the switch for all those special cases.
   * For example, if you have a subclass of Token called IDToken that
   * you want to create if ofKind is ID, simlpy add something like :
   *
   *    case MyParserConstants.ID : return new IDToken();
   *
   * to the following switch statement. Then you can cast matchedToken
   * variable to the appropriate type and use it in your lexical actions.
   */</jtok>
<jtok eid="3" type="class_or_interface_ref" span="82:23:82:28">Token</jtok>
<jtok eid="3" type="method_name" span="82:29:82:37">newToken</jtok>
<jtok eid="3" type="parameter_name" span="82:42:82:48">ofKind</jtok>
<jtok eid="3" type="primary_name_ref" span="84:13:84:19">ofKind</jtok>
<jtok eid="3" type="constructor_call" span="86:29:86:34">Token</jtok>
</jdoc>