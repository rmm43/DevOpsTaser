<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.UtilEvalError" jls="java5">
<jent id="0" type="file" span="0:0:93:1">Source/jEdit/org/gjt/sp/jedit/bsh/UtilEvalError.java</jent>
<jent id="1" pid="0" type="class" span="59:1:92:1">org.gjt.sp.jedit.bsh.UtilEvalError</jent>
<jent id="2" pid="1" type="method" span="61:5:62:5">org.gjt.sp.jedit.bsh.UtilEvalError.UtilEvalError()</jent>
<jent id="3" pid="1" type="method" span="64:5:66:5">org.gjt.sp.jedit.bsh.UtilEvalError.UtilEvalError(String)</jent>
<jent id="4" pid="1" type="method" span="74:5:85:5">org.gjt.sp.jedit.bsh.UtilEvalError.toEvalError(String,SimpleNode,CallStack)</jent>
<jent id="5" pid="1" type="method" span="87:5:90:5">org.gjt.sp.jedit.bsh.UtilEvalError.toEvalError(SimpleNode,CallStack)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    *
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="37:1:58:3">/**
    UtilEvalError is an error corresponding to an EvalError but thrown by a
    utility or other class that does not have the caller context (Node)
    available to it.  A normal EvalError must supply the caller Node in order
    for error messages to be pinned to the correct line and location in the
    script.  UtilEvalError is a checked exception that is *not* a subtype of
    EvalError, but instead must be caught and rethrown as an EvalError by
    the a nearest location with context.  The method toEvalError( Node )
    should be used to throw the EvalError, supplying the node.
    &lt;p&gt;

    To summarize: Utilities throw UtilEvalError.  ASTs throw EvalError.
    ASTs catch UtilEvalError and rethrow it as EvalError using
    toEvalError( Node ).
    &lt;p&gt;

    Philosophically, EvalError and UtilEvalError corrospond to
    RuntimeException.  However they are constrained in this way in order to
    add the context for error reporting.

    @see UtilTargetError
*/</jtok>
<jtok eid="1" type="class_name" span="59:14:59:27">UtilEvalError</jtok>
<jtok eid="1" type="class_or_interface_ref" span="59:36:59:45">Exception</jtok>
<jtok eid="2" type="method_name" span="61:15:61:28">UtilEvalError</jtok>
<jtok eid="3" type="method_name" span="64:12:64:25">UtilEvalError</jtok>
<jtok eid="3" type="parameter_type" span="64:27:64:33">String</jtok>
<jtok eid="3" type="parameter_name" span="64:34:64:35">s</jtok>
<jtok eid="3" type="primary_name_ref" span="65:15:65:16">s</jtok>
<jtok eid="1" type="block_comment" span="68:5:73:7">/**
        Re-throw as an eval error, prefixing msg to the message and specifying
        the node.  If a node already exists the addNode is ignored.
        &lt;p&gt;
        @param msg may be null for no additional message.
    */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="74:12:74:21">EvalError</jtok>
<jtok eid="4" type="method_name" span="74:22:74:33">toEvalError</jtok>
<jtok eid="4" type="parameter_type" span="75:9:75:15">String</jtok>
<jtok eid="4" type="parameter_name" span="75:16:75:19">msg</jtok>
<jtok eid="4" type="parameter_type" span="75:21:75:31">SimpleNode</jtok>
<jtok eid="4" type="parameter_name" span="75:32:75:36">node</jtok>
<jtok eid="4" type="parameter_type" span="75:38:75:47">CallStack</jtok>
<jtok eid="4" type="parameter_name" span="75:48:75:57">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="77:14:77:25">Interpreter</jtok>
<jtok eid="4" type="qualified_name_ref" span="77:26:77:31">DEBUG</jtok>
<jtok eid="4" type="method_call" span="78:13:78:28">printStackTrace</jtok>
<jtok eid="4" type="primary_name_ref" span="80:14:80:17">msg</jtok>
<jtok eid="4" type="primary_name_ref" span="81:13:81:16">msg</jtok>
<jtok eid="4" type="string_literal" span="81:19:81:21">""</jtok>
<jtok eid="4" type="primary_name_ref" span="83:13:83:16">msg</jtok>
<jtok eid="4" type="primary_name_ref" span="83:19:83:22">msg</jtok>
<jtok eid="4" type="string_literal" span="83:25:83:29">": "</jtok>
<jtok eid="4" type="constructor_call" span="84:20:84:29">EvalError</jtok>
<jtok eid="4" type="primary_name_ref" span="84:31:84:34">msg</jtok>
<jtok eid="4" type="method_call" span="84:35:84:45">getMessage</jtok>
<jtok eid="4" type="primary_name_ref" span="84:49:84:53">node</jtok>
<jtok eid="4" type="primary_name_ref" span="84:55:84:64">callstack</jtok>
<jtok eid="5" type="class_or_interface_ref" span="87:12:87:21">EvalError</jtok>
<jtok eid="5" type="method_name" span="87:22:87:33">toEvalError</jtok>
<jtok eid="5" type="parameter_type" span="87:36:87:46">SimpleNode</jtok>
<jtok eid="5" type="parameter_name" span="87:47:87:51">node</jtok>
<jtok eid="5" type="parameter_type" span="87:53:87:62">CallStack</jtok>
<jtok eid="5" type="parameter_name" span="87:63:87:72">callstack</jtok>
<jtok eid="5" type="method_call" span="89:16:89:27">toEvalError</jtok>
<jtok eid="5" type="primary_name_ref" span="89:35:89:39">node</jtok>
<jtok eid="5" type="primary_name_ref" span="89:41:89:50">callstack</jtok>
</jdoc>