<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.io.EncodingServer" jls="java5">
<jent id="0" type="file" span="0:0:164:2">Source/jEdit/org/gjt/sp/jedit/io/EncodingServer.java</jent>
<jent id="1" pid="0" type="class" span="47:1:164:1">org.gjt.sp.jedit.io.EncodingServer</jent>
<jent id="2" pid="1" type="method" span="57:2:82:2">org.gjt.sp.jedit.io.EncodingServer.getEncoding(String)</jent>
<jent id="3" pid="1" type="method" span="88:2:94:2">org.gjt.sp.jedit.io.EncodingServer.getAvailableNames()</jent>
<jent id="4" pid="1" type="method" span="100:2:113:2">org.gjt.sp.jedit.io.EncodingServer.getSelectedNames()</jent>
<jent id="5" pid="1" type="method" span="121:2:125:2">org.gjt.sp.jedit.io.EncodingServer.getTextReader(InputStream,String)</jent>
<jent id="6" pid="1" type="method" span="133:2:137:2">org.gjt.sp.jedit.io.EncodingServer.getTextWriter(OutputStream,String)</jent>
<jent id="7" pid="1" type="method" span="143:2:159:2">org.gjt.sp.jedit.io.EncodingServer.hasEncoding(String)</jent>
<jtok eid="0" type="block_comment" span="1:1:19:4">/*
 * :tabSize=8:indentSize=8:noTabs=false:
 * :folding=explicit:collapseFolds=1:
 *
 * Copyright (C) 2007 Kazutoshi Satoda
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */</jtok>
<jtok eid="0" type="line_comment" span="23:1:23:14">//{{{ Imports</jtok>
<jtok eid="0" type="line_comment" span="39:1:39:6">//}}}</jtok>
<jtok eid="0" type="block_comment" span="41:1:46:4">/**
 * A class for some static methods to deal with encodings.
 *
 * @since 4.3pre10
 * @author Kazutoshi Satoda
 */</jtok>
<jtok eid="1" type="class_name" span="47:14:47:28">EncodingServer</jtok>
<jtok eid="1" type="line_comment" span="49:2:49:28">//{{{ getEncoding() method</jtok>
<jtok eid="1" type="block_comment" span="50:2:56:5">/**
	 * Returns an instance of Encoding for specified name.
	 * The name is used for search the following domains in the
	 * listed order.
	 *   - java.nio.charset.Charset
	 *   - jEdit ServiceManager
	 */</jtok>
<jtok eid="2" type="class_or_interface_ref" span="57:16:57:24">Encoding</jtok>
<jtok eid="2" type="method_name" span="57:25:57:36">getEncoding</jtok>
<jtok eid="2" type="parameter_type" span="57:37:57:43">String</jtok>
<jtok eid="2" type="parameter_name" span="57:44:57:48">name</jtok>
<jtok eid="2" type="constructor_call" span="61:15:61:30">CharsetEncoding</jtok>
<jtok eid="2" type="primary_name_ref" span="61:31:61:35">name</jtok>
<jtok eid="2" type="class_or_interface_ref" span="63:10:63:37">IllegalCharsetNameException</jtok>
<jtok eid="2" type="local_variable_name" span="63:38:63:39">e</jtok>
<jtok eid="2" type="line_comment" span="65:4:65:18">// just failed</jtok>
<jtok eid="2" type="class_or_interface_ref" span="67:10:67:37">UnsupportedCharsetException</jtok>
<jtok eid="2" type="local_variable_name" span="67:38:67:39">e</jtok>
<jtok eid="2" type="line_comment" span="69:4:69:18">// just failed</jtok>
<jtok eid="2" type="class_or_interface_ref" span="72:3:72:9">Object</jtok>
<jtok eid="2" type="local_variable_name" span="72:10:72:22">namedService</jtok>
<jtok eid="2" type="primary_name_ref" span="72:25:72:39">ServiceManager</jtok>
<jtok eid="2" type="method_call" span="72:40:72:50">getService</jtok>
<jtok eid="2" type="primary_name_ref" span="72:51:72:63">serviceClass</jtok>
<jtok eid="2" type="primary_name_ref" span="72:65:72:69">name</jtok>
<jtok eid="2" type="primary_name_ref" span="73:7:73:19">namedService</jtok>
<jtok eid="2" type="primary_name_ref" span="73:31:73:43">namedService</jtok>
<jtok eid="2" type="class_or_interface_ref" span="73:55:73:63">Encoding</jtok>
<jtok eid="2" type="class_or_interface_ref" span="75:12:75:20">Encoding</jtok>
<jtok eid="2" type="primary_name_ref" span="75:21:75:33">namedService</jtok>
<jtok eid="2" type="line_comment" span="78:3:78:58">// UnsupportedCharsetException is for java.nio.charset,</jtok>
<jtok eid="2" type="line_comment" span="79:3:79:59">// but throw this here too so that this can be caught as</jtok>
<jtok eid="2" type="line_comment" span="80:3:80:61">// an encoding error by catch clause for general I/O code.</jtok>
<jtok eid="2" type="constructor_call" span="81:13:81:40">UnsupportedCharsetException</jtok>
<jtok eid="2" type="string_literal" span="81:41:81:63">"No such encoding: \""</jtok>
<jtok eid="2" type="primary_name_ref" span="81:66:81:70">name</jtok>
<jtok eid="2" type="string_literal" span="81:73:81:77">"\""</jtok>
<jtok eid="1" type="line_comment" span="82:4:82:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="84:2:84:34">//{{{ getAvailableNames() method</jtok>
<jtok eid="1" type="block_comment" span="85:2:87:5">/**
	 * Returns the set of all available encoding names.
	 */</jtok>
<jtok eid="3" type="class_or_interface_ref" span="88:16:88:19">Set</jtok>
<jtok eid="3" type="class_or_interface_ref" span="88:20:88:26">String</jtok>
<jtok eid="3" type="method_name" span="88:28:88:45">getAvailableNames</jtok>
<jtok eid="3" type="class_or_interface_ref" span="90:3:90:6">Set</jtok>
<jtok eid="3" type="class_or_interface_ref" span="90:7:90:13">String</jtok>
<jtok eid="3" type="local_variable_name" span="90:15:90:18">set</jtok>
<jtok eid="3" type="constructor_call" span="90:25:90:32">HashSet</jtok>
<jtok eid="3" type="constructor_call" span="90:33:90:39">String</jtok>
<jtok eid="3" type="primary_name_ref" span="91:3:91:6">set</jtok>
<jtok eid="3" type="method_call" span="91:7:91:13">addAll</jtok>
<jtok eid="3" type="primary_name_ref" span="91:14:91:21">Charset</jtok>
<jtok eid="3" type="method_call" span="91:22:91:39">availableCharsets</jtok>
<jtok eid="3" type="method_call" span="91:42:91:48">keySet</jtok>
<jtok eid="3" type="primary_name_ref" span="92:3:92:6">set</jtok>
<jtok eid="3" type="method_call" span="92:7:92:13">addAll</jtok>
<jtok eid="3" type="primary_name_ref" span="92:14:92:20">Arrays</jtok>
<jtok eid="3" type="method_call" span="92:21:92:27">asList</jtok>
<jtok eid="3" type="primary_name_ref" span="92:28:92:42">ServiceManager</jtok>
<jtok eid="3" type="method_call" span="92:43:92:58">getServiceNames</jtok>
<jtok eid="3" type="primary_name_ref" span="92:59:92:71">serviceClass</jtok>
<jtok eid="3" type="primary_name_ref" span="93:10:93:13">set</jtok>
<jtok eid="1" type="line_comment" span="94:4:94:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="96:2:96:33">//{{{ getSelectedNames() method</jtok>
<jtok eid="1" type="block_comment" span="97:2:99:5">/**
	 * Returns the set of user selected encoding names.
	 */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="100:16:100:19">Set</jtok>
<jtok eid="4" type="class_or_interface_ref" span="100:20:100:26">String</jtok>
<jtok eid="4" type="method_name" span="100:28:100:44">getSelectedNames</jtok>
<jtok eid="4" type="class_or_interface_ref" span="102:3:102:6">Set</jtok>
<jtok eid="4" type="class_or_interface_ref" span="102:7:102:13">String</jtok>
<jtok eid="4" type="local_variable_name" span="102:15:102:18">set</jtok>
<jtok eid="4" type="method_call" span="102:21:102:38">getAvailableNames</jtok>
<jtok eid="4" type="class_or_interface_ref" span="103:3:103:11">Iterator</jtok>
<jtok eid="4" type="class_or_interface_ref" span="103:12:103:18">String</jtok>
<jtok eid="4" type="local_variable_name" span="103:20:103:21">i</jtok>
<jtok eid="4" type="primary_name_ref" span="103:24:103:27">set</jtok>
<jtok eid="4" type="method_call" span="103:28:103:36">iterator</jtok>
<jtok eid="4" type="primary_name_ref" span="104:10:104:11">i</jtok>
<jtok eid="4" type="method_call" span="104:12:104:19">hasNext</jtok>
<jtok eid="4" type="class_or_interface_ref" span="106:4:106:10">String</jtok>
<jtok eid="4" type="local_variable_name" span="106:11:106:15">name</jtok>
<jtok eid="4" type="primary_name_ref" span="106:18:106:19">i</jtok>
<jtok eid="4" type="method_call" span="106:20:106:24">next</jtok>
<jtok eid="4" type="primary_name_ref" span="107:8:107:13">jEdit</jtok>
<jtok eid="4" type="method_call" span="107:14:107:32">getBooleanProperty</jtok>
<jtok eid="4" type="string_literal" span="107:33:107:52">"encoding.opt-out."</jtok>
<jtok eid="4" type="primary_name_ref" span="107:55:107:59">name</jtok>
<jtok eid="4" type="primary_name_ref" span="109:5:109:6">i</jtok>
<jtok eid="4" type="method_call" span="109:7:109:13">remove</jtok>
<jtok eid="4" type="primary_name_ref" span="112:10:112:13">set</jtok>
<jtok eid="1" type="line_comment" span="113:4:113:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="115:2:115:30">//{{{ getTextReader() method</jtok>
<jtok eid="1" type="block_comment" span="116:2:120:5">/**
	 * Returns a Reader object that reads the InputStream with
	 * the encoding. This method is same with
	 * "getEncoding(encoding).getTextReader(in)".
	 */</jtok>
<jtok eid="5" type="class_or_interface_ref" span="121:16:121:22">Reader</jtok>
<jtok eid="5" type="method_name" span="121:23:121:36">getTextReader</jtok>
<jtok eid="5" type="parameter_type" span="121:37:121:48">InputStream</jtok>
<jtok eid="5" type="parameter_name" span="121:49:121:51">in</jtok>
<jtok eid="5" type="parameter_type" span="121:53:121:59">String</jtok>
<jtok eid="5" type="parameter_name" span="121:60:121:68">encoding</jtok>
<jtok eid="5" type="throws" span="122:10:122:21">IOException</jtok>
<jtok eid="5" type="method_call" span="124:10:124:21">getEncoding</jtok>
<jtok eid="5" type="primary_name_ref" span="124:22:124:30">encoding</jtok>
<jtok eid="5" type="method_call" span="124:32:124:45">getTextReader</jtok>
<jtok eid="5" type="primary_name_ref" span="124:46:124:48">in</jtok>
<jtok eid="1" type="line_comment" span="125:4:125:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="127:2:127:30">//{{{ getTextWriter() method</jtok>
<jtok eid="1" type="block_comment" span="128:2:132:5">/**
	 * Returns a Writer object that writes to the OutputStream with
	 * the encoding. This method is same with
	 * "getEncoding(encoding).getTextWriter(out)".
	 */</jtok>
<jtok eid="6" type="class_or_interface_ref" span="133:16:133:22">Writer</jtok>
<jtok eid="6" type="method_name" span="133:23:133:36">getTextWriter</jtok>
<jtok eid="6" type="parameter_type" span="133:37:133:49">OutputStream</jtok>
<jtok eid="6" type="parameter_name" span="133:50:133:53">out</jtok>
<jtok eid="6" type="parameter_type" span="133:55:133:61">String</jtok>
<jtok eid="6" type="parameter_name" span="133:62:133:70">encoding</jtok>
<jtok eid="6" type="throws" span="134:10:134:21">IOException</jtok>
<jtok eid="6" type="method_call" span="136:10:136:21">getEncoding</jtok>
<jtok eid="6" type="primary_name_ref" span="136:22:136:30">encoding</jtok>
<jtok eid="6" type="method_call" span="136:32:136:45">getTextWriter</jtok>
<jtok eid="6" type="primary_name_ref" span="136:46:136:49">out</jtok>
<jtok eid="1" type="line_comment" span="137:4:137:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="139:2:139:28">//{{{ hasEncoding() method</jtok>
<jtok eid="1" type="block_comment" span="140:2:142:5">/**
	 * Returns if the specified name is supported as a name for an Encoding.
	 */</jtok>
<jtok eid="7" type="method_name" span="143:24:143:35">hasEncoding</jtok>
<jtok eid="7" type="parameter_type" span="143:36:143:42">String</jtok>
<jtok eid="7" type="parameter_name" span="143:43:143:47">name</jtok>
<jtok eid="7" type="primary_name_ref" span="147:8:147:15">Charset</jtok>
<jtok eid="7" type="method_call" span="147:16:147:27">isSupported</jtok>
<jtok eid="7" type="primary_name_ref" span="147:28:147:32">name</jtok>
<jtok eid="7" type="class_or_interface_ref" span="152:10:152:37">IllegalCharsetNameException</jtok>
<jtok eid="7" type="local_variable_name" span="152:38:152:39">e</jtok>
<jtok eid="7" type="line_comment" span="154:4:154:56">// The name is illegal for java.nio.charset.Charset.</jtok>
<jtok eid="7" type="line_comment" span="155:4:155:44">// But it may be legal for service name.</jtok>
<jtok eid="7" type="primary_name_ref" span="158:10:158:16">Arrays</jtok>
<jtok eid="7" type="method_call" span="158:17:158:23">asList</jtok>
<jtok eid="7" type="primary_name_ref" span="158:24:158:38">ServiceManager</jtok>
<jtok eid="7" type="method_call" span="158:39:158:54">getServiceNames</jtok>
<jtok eid="7" type="primary_name_ref" span="158:55:158:67">serviceClass</jtok>
<jtok eid="7" type="method_call" span="158:70:158:78">contains</jtok>
<jtok eid="7" type="primary_name_ref" span="158:79:158:83">name</jtok>
<jtok eid="1" type="line_comment" span="159:4:159:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="161:2:161:23">//{{{ Private members</jtok>
<jtok eid="1" type="class_or_interface_ref" span="162:23:162:29">String</jtok>
<jtok eid="1" type="field_name" span="162:30:162:42">serviceClass</jtok>
<jtok eid="1" type="string_literal" span="162:45:162:75">"org.gjt.sp.jedit.io.Encoding"</jtok>
<jtok eid="1" type="line_comment" span="163:2:163:7">//}}}</jtok>
</jdoc>