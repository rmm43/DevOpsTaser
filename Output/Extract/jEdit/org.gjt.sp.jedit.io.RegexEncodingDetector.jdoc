<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.io.RegexEncodingDetector" jls="java5">
<jent id="0" type="file" span="0:0:100:2">Source/jEdit/org/gjt/sp/jedit/io/RegexEncodingDetector.java</jent>
<jent id="1" pid="0" type="class" span="41:1:100:1">org.gjt.sp.jedit.io.RegexEncodingDetector</jent>
<jent id="2" pid="1" type="method" span="54:2:58:2">org.gjt.sp.jedit.io.RegexEncodingDetector.RegexEncodingDetector(String,String)</jent>
<jent id="3" pid="1" type="method" span="60:2:81:2">org.gjt.sp.jedit.io.RegexEncodingDetector.detectEncoding(InputStream)</jent>
<jent id="4" pid="1" type="method" span="87:2:99:2">org.gjt.sp.jedit.io.RegexEncodingDetector.extractReplacement(Matcher,String)</jent>
<jtok eid="0" type="block_comment" span="1:1:19:4">/*
 * :tabSize=8:indentSize=8:noTabs=false:
 * :folding=explicit:collapseFolds=1:
 *
 * Copyright (C) 2008 Kazutoshi Satoda
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */</jtok>
<jtok eid="0" type="block_comment" span="30:1:40:4">/**
 * An encoding detector which finds regex pattern.
 *
 * This reads the sample in the system default encoding for first some
 * lines and look for a regex pattern. This can fail if the
 * stream cannot be read in the system default encoding or the
 * pattern is not found at near the top of the stream.
 *
 * @since 4.3pre16
 * @author Kazutoshi Satoda
 */</jtok>
<jtok eid="1" type="class_name" span="41:14:41:35">RegexEncodingDetector</jtok>
<jtok eid="1" type="class_or_interface_ref" span="41:47:41:63">EncodingDetector</jtok>
<jtok eid="1" type="block_comment" span="43:2:47:5">/**
	 * A regex pattern matches to "Charset names" specified for
	 * java.nio.charset.Charset.
	 * @see &lt;a href="http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html#names"&gt;Charset names&lt;/a&gt;
	 */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="48:22:48:28">String</jtok>
<jtok eid="1" type="field_name" span="48:29:48:51">VALID_ENCODING_PATTERN</jtok>
<jtok eid="1" type="string_literal" span="49:5:49:36">"\\p{Alnum}[\\p{Alnum}\\-.:_]*"</jtok>
<jtok eid="1" type="class_or_interface_ref" span="51:16:51:23">Pattern</jtok>
<jtok eid="1" type="field_name" span="51:24:51:31">pattern</jtok>
<jtok eid="1" type="class_or_interface_ref" span="52:16:52:22">String</jtok>
<jtok eid="1" type="field_name" span="52:23:52:34">replacement</jtok>
<jtok eid="2" type="method_name" span="54:9:54:30">RegexEncodingDetector</jtok>
<jtok eid="2" type="parameter_type" span="54:31:54:37">String</jtok>
<jtok eid="2" type="parameter_name" span="54:38:54:45">pattern</jtok>
<jtok eid="2" type="parameter_type" span="54:47:54:53">String</jtok>
<jtok eid="2" type="parameter_name" span="54:54:54:65">replacement</jtok>
<jtok eid="2" type="qualified_name_ref" span="56:8:56:15">pattern</jtok>
<jtok eid="2" type="primary_name_ref" span="56:18:56:25">Pattern</jtok>
<jtok eid="2" type="method_call" span="56:26:56:33">compile</jtok>
<jtok eid="2" type="primary_name_ref" span="56:34:56:41">pattern</jtok>
<jtok eid="2" type="qualified_name_ref" span="57:8:57:19">replacement</jtok>
<jtok eid="2" type="primary_name_ref" span="57:22:57:33">replacement</jtok>
<jtok eid="3" type="class_or_interface_ref" span="60:9:60:15">String</jtok>
<jtok eid="3" type="method_name" span="60:16:60:30">detectEncoding</jtok>
<jtok eid="3" type="parameter_type" span="60:31:60:42">InputStream</jtok>
<jtok eid="3" type="parameter_name" span="60:43:60:49">sample</jtok>
<jtok eid="3" type="throws" span="60:58:60:69">IOException</jtok>
<jtok eid="3" type="class_or_interface_ref" span="62:3:62:20">InputStreamReader</jtok>
<jtok eid="3" type="local_variable_name" span="62:21:62:27">reader</jtok>
<jtok eid="3" type="constructor_call" span="62:34:62:51">InputStreamReader</jtok>
<jtok eid="3" type="primary_name_ref" span="62:52:62:58">sample</jtok>
<jtok eid="3" type="local_variable_name" span="63:13:63:23">bufferSize</jtok>
<jtok eid="3" type="local_variable_name" span="64:10:64:16">buffer</jtok>
<jtok eid="3" type="primary_name_ref" span="64:28:64:38">bufferSize</jtok>
<jtok eid="3" type="local_variable_name" span="65:7:65:15">readSize</jtok>
<jtok eid="3" type="primary_name_ref" span="65:18:65:24">reader</jtok>
<jtok eid="3" type="method_call" span="65:25:65:29">read</jtok>
<jtok eid="3" type="primary_name_ref" span="65:30:65:36">buffer</jtok>
<jtok eid="3" type="primary_name_ref" span="65:41:65:51">bufferSize</jtok>
<jtok eid="3" type="primary_name_ref" span="66:7:66:15">readSize</jtok>
<jtok eid="3" type="class_or_interface_ref" span="68:4:68:11">Matcher</jtok>
<jtok eid="3" type="local_variable_name" span="68:12:68:19">matcher</jtok>
<jtok eid="3" type="primary_name_ref" span="68:22:68:29">pattern</jtok>
<jtok eid="3" type="method_call" span="68:30:68:37">matcher</jtok>
<jtok eid="3" type="primary_name_ref" span="69:5:69:15">CharBuffer</jtok>
<jtok eid="3" type="method_call" span="69:16:69:20">wrap</jtok>
<jtok eid="3" type="primary_name_ref" span="69:21:69:27">buffer</jtok>
<jtok eid="3" type="primary_name_ref" span="69:32:69:40">readSize</jtok>
<jtok eid="3" type="primary_name_ref" span="70:11:70:18">matcher</jtok>
<jtok eid="3" type="method_call" span="70:19:70:23">find</jtok>
<jtok eid="3" type="class_or_interface_ref" span="72:5:72:11">String</jtok>
<jtok eid="3" type="local_variable_name" span="72:12:72:21">extracted</jtok>
<jtok eid="3" type="method_call" span="72:24:72:42">extractReplacement</jtok>
<jtok eid="3" type="primary_name_ref" span="73:6:73:13">matcher</jtok>
<jtok eid="3" type="primary_name_ref" span="73:15:73:26">replacement</jtok>
<jtok eid="3" type="primary_name_ref" span="74:9:74:23">EncodingServer</jtok>
<jtok eid="3" type="method_call" span="74:24:74:35">hasEncoding</jtok>
<jtok eid="3" type="primary_name_ref" span="74:36:74:45">extracted</jtok>
<jtok eid="3" type="primary_name_ref" span="76:13:76:22">extracted</jtok>
<jtok eid="1" type="block_comment" span="83:2:86:5">/**
	 * Returns a replaced string for a Matcher which has been matched
	 * by find() method.
	 */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="87:17:87:23">String</jtok>
<jtok eid="4" type="method_name" span="87:24:87:42">extractReplacement</jtok>
<jtok eid="4" type="parameter_type" span="87:43:87:50">Matcher</jtok>
<jtok eid="4" type="parameter_name" span="87:51:87:56">found</jtok>
<jtok eid="4" type="parameter_type" span="87:58:87:64">String</jtok>
<jtok eid="4" type="parameter_name" span="87:65:87:76">replacement</jtok>
<jtok eid="4" type="block_comment" span="89:3:92:6">/*
		 * It doesn't make sense to read before start, but
		 * appendReplacement() requires to to it.
		 */</jtok>
<jtok eid="4" type="local_variable_name" span="93:7:93:18">found_start</jtok>
<jtok eid="4" type="primary_name_ref" span="93:21:93:26">found</jtok>
<jtok eid="4" type="method_call" span="93:27:93:32">start</jtok>
<jtok eid="4" type="local_variable_name" span="94:7:94:16">found_end</jtok>
<jtok eid="4" type="primary_name_ref" span="94:19:94:24">found</jtok>
<jtok eid="4" type="method_call" span="94:25:94:28">end</jtok>
<jtok eid="4" type="local_variable_name" span="95:7:95:20">source_length</jtok>
<jtok eid="4" type="primary_name_ref" span="95:23:95:32">found_end</jtok>
<jtok eid="4" type="primary_name_ref" span="95:35:95:46">found_start</jtok>
<jtok eid="4" type="class_or_interface_ref" span="96:3:96:15">StringBuffer</jtok>
<jtok eid="4" type="local_variable_name" span="96:16:96:24">replaced</jtok>
<jtok eid="4" type="constructor_call" span="96:31:96:43">StringBuffer</jtok>
<jtok eid="4" type="primary_name_ref" span="96:44:96:55">found_start</jtok>
<jtok eid="4" type="primary_name_ref" span="96:59:96:72">source_length</jtok>
<jtok eid="4" type="primary_name_ref" span="97:3:97:8">found</jtok>
<jtok eid="4" type="method_call" span="97:9:97:26">appendReplacement</jtok>
<jtok eid="4" type="primary_name_ref" span="97:27:97:35">replaced</jtok>
<jtok eid="4" type="primary_name_ref" span="97:37:97:48">replacement</jtok>
<jtok eid="4" type="primary_name_ref" span="98:10:98:18">replaced</jtok>
<jtok eid="4" type="method_call" span="98:19:98:28">substring</jtok>
<jtok eid="4" type="primary_name_ref" span="98:29:98:40">found_start</jtok>
</jdoc>