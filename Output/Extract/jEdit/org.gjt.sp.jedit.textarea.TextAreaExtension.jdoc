<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.textarea.TextAreaExtension" jls="java5">
<jent id="0" type="file" span="0:0:129:2">Source/jEdit/org/gjt/sp/jedit/textarea/TextAreaExtension.java</jent>
<jent id="1" pid="0" type="class" span="41:1:129:1">org.gjt.sp.jedit.textarea.TextAreaExtension</jent>
<jent id="2" pid="1" type="method" span="59:2:76:2">org.gjt.sp.jedit.textarea.TextAreaExtension.paintScreenLineRange(Graphics2D,int,int,int[],int[],int[],int,int)</jent>
<jent id="3" pid="1" type="method" span="97:2:98:49">org.gjt.sp.jedit.textarea.TextAreaExtension.paintValidLine(Graphics2D,int,int,int,int,int)</jent>
<jent id="4" pid="1" type="method" span="113:2:114:11">org.gjt.sp.jedit.textarea.TextAreaExtension.paintInvalidLine(Graphics2D,int,int)</jent>
<jent id="5" pid="1" type="method" span="125:2:128:2">org.gjt.sp.jedit.textarea.TextAreaExtension.getToolTipText(int,int)</jent>
<jtok eid="0" type="block_comment" span="1:1:21:4">/*
 * TextAreaExtension.java - Custom painter and tool tip handler
 * :tabSize=8:indentSize=8:noTabs=false:
 * :folding=explicit:collapseFolds=1:
 *
 * Copyright (C) 2002 Slava Pestov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */</jtok>
<jtok eid="0" type="block_comment" span="27:1:40:4">/**
 * Subclasses of this class can perform custom painting and tool tip
 * handling in the text area and gutter.
 *
 * @see TextAreaPainter#addExtension(TextAreaExtension)
 * @see TextAreaPainter#removeExtension(TextAreaExtension)
 * @see Gutter#addExtension(TextAreaExtension)
 * @see Gutter#removeExtension(TextAreaExtension)
 *
 * @since jEdit 4.0pre4
 *
 * @author Slava Pestov
 * @version $Id: TextAreaExtension.java 15570 2009-06-25 00:43:57Z ezust $
 */</jtok>
<jtok eid="1" type="class_name" span="41:23:41:40">TextAreaExtension</jtok>
<jtok eid="1" type="line_comment" span="43:2:43:37">//{{{ paintScreenLineRange() method</jtok>
<jtok eid="1" type="block_comment" span="44:2:58:5">/**
	 * Paints a range of screen lines. The default implementation calls
	 * {@link #paintValidLine(Graphics2D,int,int,int,int,int)} and
	 * {@link #paintInvalidLine(Graphics2D,int,int)}.
	 * @param gfx A graphics context
	 * @param firstLine The first screen line
	 * @param lastLine The last screen line
	 * @param physicalLines The list of physical line numbers. Entries are
	 * -1 if the screen line is out of range.
	 * @param start An array of screen line start offsets.
	 * @param end An array of screen line end offsets
	 * @param y The y co-ordinate
	 * @param lineHeight The line height
	 * @since jEdit 4.2pre2
	 */</jtok>
<jtok eid="2" type="method_name" span="59:14:59:34">paintScreenLineRange</jtok>
<jtok eid="2" type="parameter_type" span="59:35:59:45">Graphics2D</jtok>
<jtok eid="2" type="parameter_name" span="59:46:59:49">gfx</jtok>
<jtok eid="2" type="parameter_name" span="59:55:59:64">firstLine</jtok>
<jtok eid="2" type="parameter_name" span="60:7:60:15">lastLine</jtok>
<jtok eid="2" type="parameter_name" span="60:23:60:36">physicalLines</jtok>
<jtok eid="2" type="parameter_name" span="60:44:60:49">start</jtok>
<jtok eid="2" type="parameter_name" span="60:57:60:60">end</jtok>
<jtok eid="2" type="parameter_name" span="61:7:61:8">y</jtok>
<jtok eid="2" type="parameter_name" span="61:14:61:24">lineHeight</jtok>
<jtok eid="2" type="local_variable_name" span="63:11:63:12">i</jtok>
<jtok eid="2" type="primary_name_ref" span="63:18:63:19">i</jtok>
<jtok eid="2" type="primary_name_ref" span="63:22:63:35">physicalLines</jtok>
<jtok eid="2" type="qualified_name_ref" span="63:36:63:42">length</jtok>
<jtok eid="2" type="primary_name_ref" span="63:44:63:45">i</jtok>
<jtok eid="2" type="local_variable_name" span="65:8:65:18">screenLine</jtok>
<jtok eid="2" type="primary_name_ref" span="65:21:65:22">i</jtok>
<jtok eid="2" type="primary_name_ref" span="65:25:65:34">firstLine</jtok>
<jtok eid="2" type="primary_name_ref" span="66:7:66:20">physicalLines</jtok>
<jtok eid="2" type="primary_name_ref" span="66:21:66:22">i</jtok>
<jtok eid="2" type="method_call" span="67:5:67:21">paintInvalidLine</jtok>
<jtok eid="2" type="primary_name_ref" span="67:22:67:25">gfx</jtok>
<jtok eid="2" type="primary_name_ref" span="67:26:67:36">screenLine</jtok>
<jtok eid="2" type="primary_name_ref" span="67:37:67:38">y</jtok>
<jtok eid="2" type="method_call" span="70:5:70:19">paintValidLine</jtok>
<jtok eid="2" type="primary_name_ref" span="70:20:70:23">gfx</jtok>
<jtok eid="2" type="primary_name_ref" span="70:24:70:34">screenLine</jtok>
<jtok eid="2" type="primary_name_ref" span="70:35:70:48">physicalLines</jtok>
<jtok eid="2" type="primary_name_ref" span="70:49:70:50">i</jtok>
<jtok eid="2" type="primary_name_ref" span="71:6:71:11">start</jtok>
<jtok eid="2" type="primary_name_ref" span="71:12:71:13">i</jtok>
<jtok eid="2" type="primary_name_ref" span="71:15:71:18">end</jtok>
<jtok eid="2" type="primary_name_ref" span="71:19:71:20">i</jtok>
<jtok eid="2" type="primary_name_ref" span="71:22:71:23">y</jtok>
<jtok eid="2" type="primary_name_ref" span="74:4:74:5">y</jtok>
<jtok eid="2" type="primary_name_ref" span="74:9:74:19">lineHeight</jtok>
<jtok eid="1" type="line_comment" span="76:4:76:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="78:2:78:31">//{{{ paintValidLine() method</jtok>
<jtok eid="1" type="block_comment" span="79:2:96:5">/**
	 * Called by the text area when the extension is to paint a
	 * screen line which has an associated physical line number in
	 * the buffer. Note that since one physical line may consist of
	 * several screen lines due to soft wrap, the start and end
	 * offsets of the screen line are passed in as well.
	 *
	 * @param gfx The graphics context
	 * @param screenLine The screen line number
	 * @param physicalLine The physical line number
	 * @param start The offset where the screen line begins, from
	 * the start of the buffer
	 * @param end The offset where the screen line ends, from the
	 * start of the buffer
	 * @param y The y co-ordinate of the top of the line's
	 * bounding box
	 * @since jEdit 4.0pre4
	 */</jtok>
<jtok eid="3" type="method_name" span="97:14:97:28">paintValidLine</jtok>
<jtok eid="3" type="parameter_type" span="97:29:97:39">Graphics2D</jtok>
<jtok eid="3" type="parameter_name" span="97:40:97:43">gfx</jtok>
<jtok eid="3" type="parameter_name" span="97:49:97:59">screenLine</jtok>
<jtok eid="3" type="parameter_name" span="98:7:98:19">physicalLine</jtok>
<jtok eid="3" type="parameter_name" span="98:25:98:30">start</jtok>
<jtok eid="3" type="parameter_name" span="98:36:98:39">end</jtok>
<jtok eid="3" type="parameter_name" span="98:45:98:46">y</jtok>
<jtok eid="1" type="line_comment" span="98:51:98:56">//}}}</jtok>
<jtok eid="1" type="line_comment" span="100:2:100:33">//{{{ paintInvalidLine() method</jtok>
<jtok eid="1" type="block_comment" span="101:2:112:5">/**
	 * Called by the text area when the extension is to paint a
	 * screen line which is not part of the buffer. This can happen
	 * if the buffer is shorter than the height of the text area,
	 * for example.
	 *
	 * @param gfx The graphics context
	 * @param screenLine The screen line number
	 * @param y The y co-ordinate of the top of the line's
	 * bounding box
	 * @since jEdit 4.0pre4
	 */</jtok>
<jtok eid="4" type="method_name" span="113:14:113:30">paintInvalidLine</jtok>
<jtok eid="4" type="parameter_type" span="113:31:113:41">Graphics2D</jtok>
<jtok eid="4" type="parameter_name" span="113:42:113:45">gfx</jtok>
<jtok eid="4" type="parameter_name" span="113:51:113:61">screenLine</jtok>
<jtok eid="4" type="parameter_name" span="114:7:114:8">y</jtok>
<jtok eid="1" type="line_comment" span="114:13:114:18">//}}}</jtok>
<jtok eid="1" type="line_comment" span="116:2:116:31">//{{{ getToolTipText() method</jtok>
<jtok eid="1" type="block_comment" span="117:2:124:5">/**
	 * Called by the text area when the mouse hovers over the
	 * location specified in the mouse event.
	 *
	 * @param x The x co-ordinate
	 * @param y The y co-ordinate
	 * @since jEdit 4.0pre4
	 */</jtok>
<jtok eid="5" type="class_or_interface_ref" span="125:9:125:15">String</jtok>
<jtok eid="5" type="method_name" span="125:16:125:30">getToolTipText</jtok>
<jtok eid="5" type="parameter_name" span="125:35:125:36">x</jtok>
<jtok eid="5" type="parameter_name" span="125:42:125:43">y</jtok>
<jtok eid="1" type="line_comment" span="128:4:128:9">//}}}</jtok>
</jdoc>