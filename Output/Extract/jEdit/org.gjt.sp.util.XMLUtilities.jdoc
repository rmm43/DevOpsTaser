<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.util.XMLUtilities" jls="java5">
<jent id="0" type="file" span="0:0:202:1">Source/jEdit/org/gjt/sp/util/XMLUtilities.java</jent>
<jent id="1" pid="0" type="class" span="47:1:201:1">org.gjt.sp.util.XMLUtilities</jent>
<jent id="2" pid="1" type="method" span="62:2:107:2">org.gjt.sp.util.XMLUtilities.charsToEntities(String,boolean)</jent>
<jent id="3" pid="1" type="method" span="126:2:166:2">org.gjt.sp.util.XMLUtilities.parseXML(InputStream,DefaultHandler)</jent>
<jent id="4" pid="1" type="method" span="180:2:198:2">org.gjt.sp.util.XMLUtilities.findEntity(String,String,Class)</jent>
<jent id="5" pid="1" type="method" span="200:2:200:27">org.gjt.sp.util.XMLUtilities.XMLUtilities()</jent>
<jtok eid="0" type="block_comment" span="1:1:23:4">/*
 * StandardUtilities.java - Miscelaneous XML utility functions.
 * :tabSize=8:indentSize=8:noTabs=false:
 * :folding=explicit:collapseFolds=1:
 *
 * Copyright (C) 1999, 2006 Marcelo Vanzin, Slava Pestov
 * Portions copyright (C) 2000 Richard S. Hall
 * Portions copyright (C) 2001 Dirk Moebius
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */</jtok>
<jtok eid="0" type="line_comment" span="27:1:27:14">//{{{ Imports</jtok>
<jtok eid="0" type="line_comment" span="38:1:38:6">//}}}</jtok>
<jtok eid="0" type="block_comment" span="40:1:46:4">/**
 * XML utility methods that only depend on the JDK.
 *
 * @author Marcelo Vanzin
 * @version $Id: XMLUtilities.java 13929 2008-10-25 14:23:41Z k_satoda $
 * @since 4.3pre6
 */</jtok>
<jtok eid="1" type="class_name" span="47:14:47:26">XMLUtilities</jtok>
<jtok eid="1" type="line_comment" span="50:2:50:32">//{{{ charsToEntities() method</jtok>
<jtok eid="1" type="block_comment" span="51:2:61:5">/**
	 * Converts &amp;lt;, &amp;gt;, &amp;amp; in the string to their HTML entity
	 * equivalents.
	 *
	 * &lt;p&gt;If &lt;code&gt;xml11&lt;/code&gt; is true, then character entities
	 * are used to convert illegal XML characters (mainly ASCII
	 * control characters).&lt;/p&gt;
	 *
	 * @param str The string
	 * @param xml11 Whether to allow XML 1.1 constructs.
	 */</jtok>
<jtok eid="2" type="class_or_interface_ref" span="62:16:62:22">String</jtok>
<jtok eid="2" type="method_name" span="62:23:62:38">charsToEntities</jtok>
<jtok eid="2" type="parameter_type" span="62:39:62:45">String</jtok>
<jtok eid="2" type="parameter_name" span="62:46:62:49">str</jtok>
<jtok eid="2" type="parameter_name" span="62:59:62:64">xml11</jtok>
<jtok eid="2" type="class_or_interface_ref" span="64:3:64:16">StringBuilder</jtok>
<jtok eid="2" type="local_variable_name" span="64:17:64:20">buf</jtok>
<jtok eid="2" type="constructor_call" span="64:27:64:40">StringBuilder</jtok>
<jtok eid="2" type="primary_name_ref" span="64:41:64:44">str</jtok>
<jtok eid="2" type="method_call" span="64:45:64:51">length</jtok>
<jtok eid="2" type="local_variable_name" span="65:11:65:12">i</jtok>
<jtok eid="2" type="primary_name_ref" span="65:18:65:19">i</jtok>
<jtok eid="2" type="primary_name_ref" span="65:22:65:25">str</jtok>
<jtok eid="2" type="method_call" span="65:26:65:32">length</jtok>
<jtok eid="2" type="primary_name_ref" span="65:36:65:37">i</jtok>
<jtok eid="2" type="local_variable_name" span="67:9:67:11">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="67:14:67:17">str</jtok>
<jtok eid="2" type="method_call" span="67:18:67:24">charAt</jtok>
<jtok eid="2" type="primary_name_ref" span="67:25:67:26">i</jtok>
<jtok eid="2" type="line_comment" span="69:4:69:50">// control characters, excluding \t, \r and \n</jtok>
<jtok eid="2" type="line_comment" span="70:4:70:65">// See: http://www.w3.org/International/questions/qa-controls</jtok>
<jtok eid="2" type="primary_name_ref" span="71:18:71:20">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="71:24:71:26">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="71:48:71:50">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="71:54:71:56">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="72:8:72:10">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="72:22:72:24">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="72:36:72:38">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="74:9:74:14">xml11</jtok>
<jtok eid="2" type="primary_name_ref" span="74:18:74:20">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="76:6:76:9">buf</jtok>
<jtok eid="2" type="method_call" span="76:10:76:16">append</jtok>
<jtok eid="2" type="string_literal" span="76:17:76:21">"&amp;#"</jtok>
<jtok eid="2" type="method_call" span="76:23:76:29">append</jtok>
<jtok eid="2" type="primary_name_ref" span="76:35:76:37">ch</jtok>
<jtok eid="2" type="method_call" span="76:39:76:45">append</jtok>
<jtok eid="2" type="line_comment" span="80:6:80:34">// The character is illegal.</jtok>
<jtok eid="2" type="line_comment" span="81:6:81:41">// But put a PI instead, to make it</jtok>
<jtok eid="2" type="line_comment" span="82:6:82:37">// recoverable in certain apps.</jtok>
<jtok eid="2" type="primary_name_ref" span="83:6:83:9">buf</jtok>
<jtok eid="2" type="method_call" span="83:10:83:16">append</jtok>
<jtok eid="2" type="string_literal" span="83:17:83:43">"&lt;?illegal-xml-character "</jtok>
<jtok eid="2" type="method_call" span="84:8:84:14">append</jtok>
<jtok eid="2" type="primary_name_ref" span="84:20:84:22">ch</jtok>
<jtok eid="2" type="method_call" span="85:8:85:14">append</jtok>
<jtok eid="2" type="string_literal" span="85:15:85:19">"?&gt;"</jtok>
<jtok eid="2" type="primary_name_ref" span="90:11:90:13">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="93:5:93:8">buf</jtok>
<jtok eid="2" type="method_call" span="93:9:93:15">append</jtok>
<jtok eid="2" type="string_literal" span="93:16:93:22">"&amp;lt;"</jtok>
<jtok eid="2" type="primary_name_ref" span="96:5:96:8">buf</jtok>
<jtok eid="2" type="method_call" span="96:9:96:15">append</jtok>
<jtok eid="2" type="string_literal" span="96:16:96:22">"&amp;gt;"</jtok>
<jtok eid="2" type="primary_name_ref" span="99:5:99:8">buf</jtok>
<jtok eid="2" type="method_call" span="99:9:99:15">append</jtok>
<jtok eid="2" type="string_literal" span="99:16:99:23">"&amp;amp;"</jtok>
<jtok eid="2" type="primary_name_ref" span="102:5:102:8">buf</jtok>
<jtok eid="2" type="method_call" span="102:9:102:15">append</jtok>
<jtok eid="2" type="primary_name_ref" span="102:16:102:18">ch</jtok>
<jtok eid="2" type="primary_name_ref" span="106:10:106:13">buf</jtok>
<jtok eid="2" type="method_call" span="106:14:106:22">toString</jtok>
<jtok eid="1" type="line_comment" span="107:4:107:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="109:2:109:25">//{{{ parseXML() method</jtok>
<jtok eid="1" type="block_comment" span="110:2:125:5">/**
	 * Convenience method for parsing an XML file. This method will
	 * wrap the resource in an InputSource and set the source's
	 * systemId to "jedit.jar" (so the source should be able to
	 * handle any external entities by itself).
	 *
	 * &lt;p&gt;SAX Errors are caught and are not propagated to the caller;
	 * instead, an error message is printed to jEdit's activity
	 * log. So, if you need custom error handling, &lt;b&gt;do not use
	 * this method&lt;/b&gt;.
	 *
	 * &lt;p&gt;The given stream is closed before the method returns,
	 * regardless whether there were errors or not.&lt;/p&gt;
	 *
	 * @return true if any error occured during parsing, false if success.
	 */</jtok>
<jtok eid="3" type="method_name" span="126:24:126:32">parseXML</jtok>
<jtok eid="3" type="parameter_type" span="126:33:126:44">InputStream</jtok>
<jtok eid="3" type="parameter_name" span="126:45:126:47">in</jtok>
<jtok eid="3" type="parameter_type" span="126:49:126:63">DefaultHandler</jtok>
<jtok eid="3" type="parameter_name" span="126:64:126:71">handler</jtok>
<jtok eid="3" type="throws" span="127:10:127:21">IOException</jtok>
<jtok eid="3" type="class_or_interface_ref" span="131:4:131:13">XMLReader</jtok>
<jtok eid="3" type="local_variable_name" span="131:14:131:20">parser</jtok>
<jtok eid="3" type="primary_name_ref" span="131:23:131:39">XMLReaderFactory</jtok>
<jtok eid="3" type="method_call" span="131:40:131:55">createXMLReader</jtok>
<jtok eid="3" type="class_or_interface_ref" span="132:4:132:15">InputSource</jtok>
<jtok eid="3" type="local_variable_name" span="132:16:132:20">isrc</jtok>
<jtok eid="3" type="constructor_call" span="132:27:132:38">InputSource</jtok>
<jtok eid="3" type="constructor_call" span="133:9:133:28">BufferedInputStream</jtok>
<jtok eid="3" type="primary_name_ref" span="133:29:133:31">in</jtok>
<jtok eid="3" type="primary_name_ref" span="134:4:134:8">isrc</jtok>
<jtok eid="3" type="method_call" span="134:9:134:20">setSystemId</jtok>
<jtok eid="3" type="string_literal" span="134:21:134:32">"jedit.jar"</jtok>
<jtok eid="3" type="primary_name_ref" span="135:4:135:10">parser</jtok>
<jtok eid="3" type="method_call" span="135:11:135:28">setContentHandler</jtok>
<jtok eid="3" type="primary_name_ref" span="135:29:135:36">handler</jtok>
<jtok eid="3" type="primary_name_ref" span="136:4:136:10">parser</jtok>
<jtok eid="3" type="method_call" span="136:11:136:24">setDTDHandler</jtok>
<jtok eid="3" type="primary_name_ref" span="136:25:136:32">handler</jtok>
<jtok eid="3" type="primary_name_ref" span="137:4:137:10">parser</jtok>
<jtok eid="3" type="method_call" span="137:11:137:28">setEntityResolver</jtok>
<jtok eid="3" type="primary_name_ref" span="137:29:137:36">handler</jtok>
<jtok eid="3" type="primary_name_ref" span="138:4:138:10">parser</jtok>
<jtok eid="3" type="method_call" span="138:11:138:26">setErrorHandler</jtok>
<jtok eid="3" type="primary_name_ref" span="138:27:138:34">handler</jtok>
<jtok eid="3" type="primary_name_ref" span="139:4:139:10">parser</jtok>
<jtok eid="3" type="method_call" span="139:11:139:16">parse</jtok>
<jtok eid="3" type="primary_name_ref" span="139:17:139:21">isrc</jtok>
<jtok eid="3" type="class_or_interface_ref" span="141:9:141:26">SAXParseException</jtok>
<jtok eid="3" type="local_variable_name" span="141:27:141:29">se</jtok>
<jtok eid="3" type="local_variable_name" span="143:8:143:12">line</jtok>
<jtok eid="3" type="primary_name_ref" span="143:15:143:17">se</jtok>
<jtok eid="3" type="method_call" span="143:18:143:31">getLineNumber</jtok>
<jtok eid="3" type="primary_name_ref" span="144:4:144:7">Log</jtok>
<jtok eid="3" type="method_call" span="144:8:144:11">log</jtok>
<jtok eid="3" type="primary_name_ref" span="144:12:144:15">Log</jtok>
<jtok eid="3" type="qualified_name_ref" span="144:16:144:21">ERROR</jtok>
<jtok eid="3" type="primary_name_ref" span="144:22:144:34">XMLUtilities</jtok>
<jtok eid="3" type="string_literal" span="145:5:145:26">"while parsing from "</jtok>
<jtok eid="3" type="primary_name_ref" span="145:29:145:31">in</jtok>
<jtok eid="3" type="string_literal" span="145:34:145:62">": SAXParseException: line "</jtok>
<jtok eid="3" type="primary_name_ref" span="145:65:145:69">line</jtok>
<jtok eid="3" type="string_literal" span="145:72:145:76">": "</jtok>
<jtok eid="3" type="primary_name_ref" span="145:79:145:81">se</jtok>
<jtok eid="3" type="class_or_interface_ref" span="148:9:148:21">SAXException</jtok>
<jtok eid="3" type="local_variable_name" span="148:22:148:23">e</jtok>
<jtok eid="3" type="primary_name_ref" span="150:4:150:7">Log</jtok>
<jtok eid="3" type="method_call" span="150:8:150:11">log</jtok>
<jtok eid="3" type="primary_name_ref" span="150:12:150:15">Log</jtok>
<jtok eid="3" type="qualified_name_ref" span="150:16:150:21">ERROR</jtok>
<jtok eid="3" type="primary_name_ref" span="150:22:150:34">XMLUtilities</jtok>
<jtok eid="3" type="primary_name_ref" span="150:41:150:42">e</jtok>
<jtok eid="3" type="primary_name_ref" span="157:8:157:10">in</jtok>
<jtok eid="3" type="primary_name_ref" span="158:6:158:8">in</jtok>
<jtok eid="3" type="method_call" span="158:9:158:14">close</jtok>
<jtok eid="3" type="class_or_interface_ref" span="160:10:160:21">IOException</jtok>
<jtok eid="3" type="local_variable_name" span="160:22:160:24">io</jtok>
<jtok eid="3" type="primary_name_ref" span="162:5:162:8">Log</jtok>
<jtok eid="3" type="method_call" span="162:9:162:12">log</jtok>
<jtok eid="3" type="primary_name_ref" span="162:13:162:16">Log</jtok>
<jtok eid="3" type="qualified_name_ref" span="162:17:162:22">ERROR</jtok>
<jtok eid="3" type="primary_name_ref" span="162:23:162:35">XMLUtilities</jtok>
<jtok eid="3" type="primary_name_ref" span="162:42:162:44">io</jtok>
<jtok eid="1" type="line_comment" span="166:4:166:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="168:2:168:30">//{{{ resolveEntity() method</jtok>
<jtok eid="1" type="block_comment" span="169:2:179:5">/**
	 * Tries to find the given systemId in the context of the given
	 * class. If the given systemId ends with the given test string,
	 * then try to load a resource using the Class's
	 * &lt;code&gt;getResourceAsStream()&lt;/code&gt; method using the test string
	 * as the resource.
	 *
	 * &lt;p&gt;This is used a lot internally while parsing XML files used
	 * by jEdit, but anyone is free to use the method if it sounds
	 * usable.&lt;/p&gt;
	 */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="180:16:180:27">InputSource</jtok>
<jtok eid="4" type="method_name" span="180:28:180:38">findEntity</jtok>
<jtok eid="4" type="parameter_type" span="180:39:180:45">String</jtok>
<jtok eid="4" type="parameter_name" span="180:46:180:54">systemId</jtok>
<jtok eid="4" type="parameter_type" span="180:56:180:62">String</jtok>
<jtok eid="4" type="parameter_name" span="180:63:180:67">test</jtok>
<jtok eid="4" type="parameter_type" span="180:69:180:74">Class</jtok>
<jtok eid="4" type="parameter_name" span="180:75:180:80">where</jtok>
<jtok eid="4" type="primary_name_ref" span="182:7:182:15">systemId</jtok>
<jtok eid="4" type="primary_name_ref" span="182:27:182:35">systemId</jtok>
<jtok eid="4" type="method_call" span="182:36:182:44">endsWith</jtok>
<jtok eid="4" type="primary_name_ref" span="182:45:182:49">test</jtok>
<jtok eid="4" type="constructor_call" span="186:16:186:27">InputSource</jtok>
<jtok eid="4" type="constructor_call" span="186:32:186:51">BufferedInputStream</jtok>
<jtok eid="4" type="primary_name_ref" span="187:6:187:11">where</jtok>
<jtok eid="4" type="method_call" span="187:12:187:31">getResourceAsStream</jtok>
<jtok eid="4" type="primary_name_ref" span="187:32:187:36">test</jtok>
<jtok eid="4" type="class_or_interface_ref" span="189:11:189:20">Exception</jtok>
<jtok eid="4" type="local_variable_name" span="189:21:189:22">e</jtok>
<jtok eid="4" type="primary_name_ref" span="191:5:191:8">Log</jtok>
<jtok eid="4" type="method_call" span="191:9:191:12">log</jtok>
<jtok eid="4" type="primary_name_ref" span="191:13:191:16">Log</jtok>
<jtok eid="4" type="qualified_name_ref" span="191:17:191:22">ERROR</jtok>
<jtok eid="4" type="primary_name_ref" span="191:23:191:35">XMLUtilities</jtok>
<jtok eid="4" type="string_literal" span="192:6:192:28">"Error while opening "</jtok>
<jtok eid="4" type="primary_name_ref" span="192:31:192:35">test</jtok>
<jtok eid="4" type="primary_name_ref" span="193:5:193:8">Log</jtok>
<jtok eid="4" type="method_call" span="193:9:193:12">log</jtok>
<jtok eid="4" type="primary_name_ref" span="193:13:193:16">Log</jtok>
<jtok eid="4" type="qualified_name_ref" span="193:17:193:22">ERROR</jtok>
<jtok eid="4" type="primary_name_ref" span="193:23:193:35">XMLUtilities</jtok>
<jtok eid="4" type="primary_name_ref" span="193:42:193:43">e</jtok>
<jtok eid="1" type="line_comment" span="198:4:198:9">//}}}</jtok>
<jtok eid="5" type="method_name" span="200:10:200:22">XMLUtilities</jtok>
</jdoc>