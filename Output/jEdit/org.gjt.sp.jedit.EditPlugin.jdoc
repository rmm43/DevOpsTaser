<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.EditPlugin" jls="java5">
<jent id="0" type="file" span="0:0:844:2">Source/jEdit/org/gjt/sp/jedit/EditPlugin.java</jent>
<jent id="1" pid="0" type="class" span="248:1:844:1">org.gjt.sp.jedit.EditPlugin</jent>
<jent id="2" pid="1" type="method" span="288:2:288:23">org.gjt.sp.jedit.EditPlugin.start()</jent>
<jent id="3" pid="1" type="method" span="318:2:318:22">org.gjt.sp.jedit.EditPlugin.stop()</jent>
<jent id="4" pid="1" type="method" span="331:2:334:2">org.gjt.sp.jedit.EditPlugin.getPluginHome()</jent>
<jent id="5" pid="1" type="method" span="358:2:361:2">org.gjt.sp.jedit.EditPlugin.getPluginHome(Class&lt;&gt;)</jent>
<jent id="6" pid="1" type="method" span="383:2:386:2">org.gjt.sp.jedit.EditPlugin.getPluginHome(EditPlugin)</jent>
<jent id="7" pid="1" type="method" span="399:2:414:2">org.gjt.sp.jedit.EditPlugin.getPluginHome(String)</jent>
<jent id="8" pid="1" type="method" span="440:2:443:2">org.gjt.sp.jedit.EditPlugin.getResourceAsStream(Class&lt;&gt;,String)</jent>
<jent id="9" pid="1" type="method" span="468:2:471:2">org.gjt.sp.jedit.EditPlugin.getResourceAsStream(EditPlugin,String)</jent>
<jent id="10" pid="1" type="method" span="487:2:500:2">org.gjt.sp.jedit.EditPlugin.getResourceAsStream(String,String)</jent>
<jent id="11" pid="1" type="method" span="526:2:529:2">org.gjt.sp.jedit.EditPlugin.getResourceAsOutputStream(Class&lt;&gt;,String)</jent>
<jent id="12" pid="1" type="method" span="554:2:557:2">org.gjt.sp.jedit.EditPlugin.getResourceAsOutputStream(EditPlugin,String)</jent>
<jent id="13" pid="1" type="method" span="573:2:595:2">org.gjt.sp.jedit.EditPlugin.getResourceAsOutputStream(String,String)</jent>
<jent id="14" pid="1" type="method" span="620:2:623:2">org.gjt.sp.jedit.EditPlugin.getResourcePath(Class&lt;&gt;,String)</jent>
<jent id="15" pid="1" type="method" span="647:2:650:2">org.gjt.sp.jedit.EditPlugin.getResourcePath(EditPlugin,String)</jent>
<jent id="16" pid="1" type="method" span="665:2:671:2">org.gjt.sp.jedit.EditPlugin.getResourcePath(String,String)</jent>
<jent id="17" pid="1" type="method" span="681:2:684:2">org.gjt.sp.jedit.EditPlugin.getClassName()</jent>
<jent id="18" pid="1" type="method" span="691:2:694:2">org.gjt.sp.jedit.EditPlugin.getPluginJAR()</jent>
<jent id="19" pid="1" type="method" span="704:2:725:2">org.gjt.sp.jedit.EditPlugin.createMenuItems()</jent>
<jent id="20" pid="1" type="method" span="736:2:761:2">org.gjt.sp.jedit.EditPlugin.createBrowserMenuItems()</jent>
<jent id="21" pid="1" type="method" span="770:2:770:49">org.gjt.sp.jedit.EditPlugin.createMenuItems(Vector)</jent>
<jent id="22" pid="1" type="method" span="777:2:777:62">org.gjt.sp.jedit.EditPlugin.createOptionPanes(OptionsDialog)</jent>
<jent id="23" pid="1" type="class" span="792:2:808:2">org.gjt.sp.jedit.EditPlugin.Broken</jent>
<jent id="24" pid="23" type="method" span="794:3:797:3">org.gjt.sp.jedit.EditPlugin.Broken.getClassName()</jent>
<jent id="25" pid="23" type="method" span="800:3:804:3">org.gjt.sp.jedit.EditPlugin.Broken.Broken(PluginJAR,String)</jent>
<jent id="26" pid="1" type="class" span="817:2:843:2">org.gjt.sp.jedit.EditPlugin.Deferred</jent>
<jent id="27" pid="26" type="method" span="819:3:822:3">org.gjt.sp.jedit.EditPlugin.Deferred.getClassName()</jent>
<jent id="28" pid="26" type="method" span="825:3:829:3">org.gjt.sp.jedit.EditPlugin.Deferred.Deferred(PluginJAR,String)</jent>
<jent id="29" pid="26" type="method" span="831:3:834:3">org.gjt.sp.jedit.EditPlugin.Deferred.loadPluginClass()</jent>
<jent id="30" pid="26" type="method" span="836:3:839:3">org.gjt.sp.jedit.EditPlugin.Deferred.toString()</jent>
<jtok eid="0" type="block_comment" span="1:1:21:4">/*
 * EditPlugin.java - Abstract class all plugins must implement
 * :tabSize=8:indentSize=8:noTabs=false:
 * :folding=explicit:collapseFolds=1:
 *
 * Copyright (C) 1999, 2003 Slava Pestov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */</jtok>
<jtok eid="0" type="block_comment" span="34:1:247:4">/**
 * The abstract base class that every plugin must implement.
 * Alternatively, instead of extending this class, a plugin core class can
 * extend {@link EBPlugin} to automatically receive EditBus messages.
 *
 * &lt;h3&gt;Basic plugin information properties&lt;/h3&gt;
 *
 * Note that in all cases above where a &lt;i&gt;className&lt;/i&gt; is needed, the fully
 * qualified class name, including the package name, if any, must be used.&lt;p&gt;
 *
 * The following properties are required for jEdit to load the plugin:
 *
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.activate&lt;/code&gt; - set this to
 * &lt;code&gt;defer&lt;/code&gt; if your plugin only needs to be loaded when it is first
 * invoked; set it to &lt;code&gt;startup&lt;/code&gt; if your plugin must be loaded at
 * startup regardless; set it to a whitespace-separated list of property names
 * if your plugin should be loaded if at least one of these properties is set.
 * Note that if this property is &lt;b&gt;not&lt;/b&gt; set, the plugin will not work with
 * jEdit 4.3final.
 * &lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.name&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.version&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.jars&lt;/code&gt; - only needed if your plugin
 * bundles external JAR files. Contains a whitespace-separated list of JAR
 * file names. Without this property, the plugin manager will leave behind the
 * external JAR files when removing the plugin.&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.files&lt;/code&gt; - only needed if your plugin
 * bundles external files like libraries which MUST reside in the local
 * filesystem. Contains a whitespace-separated list of file names.
 * Without this property, the plugin manager will leave behind the
 * external files when removing the plugin.&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.description&lt;/code&gt; - the short description
 * associated with the plugin.  The short description is used by the Plugin
 * Manager and on the list pages on Plugin Central. &lt;/li&gt;
 * &lt;/ul&gt;
 *
 * The following properties are optional but recommended:
 *
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.author&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.usePluginHome&lt;/code&gt; - whether
 * the plugin uses the EditPlugin.getPluginHome API or not. Even
 * if the plugin doesn't store any data, this property should be set
 * so that the plugin manager can tell that there is no data stored.&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.docs&lt;/code&gt; - the path to plugin
 * documentation in HTML format. &lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.longdescription&lt;/code&gt; - the path to
 * the long description in XHTML (no fancy stuff here, please - just proper
 * XHTML subset with the basic tags: &lt;tt&gt;html, h1, h2, p, li, ul, ol, a href,b ,i, u, br/ &lt;/tt&gt;)
 * &lt;p&gt; The long description is extracted from the plugin at various times,
 * primarily at plugin packaging time to update the data on the
 * plugin detail pages of Plugin Central. &lt;/p&gt;
 * &lt;p&gt;
 * If this property is left out, the default will be to look in a file
 * called &amp;lt;description.html&amp;gt;. &lt;/p&gt;
 *&lt;/li&gt;
 *&lt;/ul&gt;
 *&lt;p&gt;
 * For the previous two properties, if a relative path is supplied,
 * it should be both &lt;/p&gt;
 * &lt;ol&gt;
 * &lt;li&gt; relative to the location of the .props file (when it is in the source tree) &lt;/li&gt;
 * &lt;li&gt; relative to the root of the JAR (when it is packaged in the JAR file) &lt;/li&gt;
 *&lt;/ol&gt;
 *
 *&lt;p&gt; Both conditions are easily satisfied if the .props file as well as
 * description.html are both located in the root directory of the plugin,
 * as well as the generated JAR. &lt;/p&gt;
 *
 * &lt;h3&gt;Plugin dependency properties&lt;/h3&gt;
 *
 * &lt;p&gt;Plugin dependencies are also specified using properties.
 * Each dependency is defined in a property named with
 * &lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.depend.&lt;/code&gt; followed by a number.
 * Dependencies must be numbered in order, starting from zero.
 * This determines the order that dependent plugins get loaded and activated,
 * so order is very important. &lt;/p&gt;
*
 * &lt;p&gt; The value of a dependency property has one of the following forms: &lt;/p&gt;
 *
 * &lt;ul&gt;
 * &lt;li&gt; &lt;code&gt;jdk &lt;i&gt;minimumJavaVersion&lt;/i&gt;&lt;/code&gt; &lt;/li&gt;
 * &lt;li&gt; &lt;code&gt;jedit &lt;i&gt;minimumjEditVersion&lt;/i&gt;&lt;/code&gt; - note that this must be
 * a version number in the form returned by {@link jEdit#getBuild()},
 * not {@link jEdit#getVersion()}. Note that the documentation here describes
 * the jEdit 4.2 plugin API, so this dependency must be set to at least
 * &lt;code&gt;04.02.99.00&lt;/code&gt; (4.2final).&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;&lt;i&gt;pluginClassName pluginVersion&lt;/i&gt;&lt;/code&gt; - the fully quailified
 * plugin class name with package must be specified.&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;optional plugin &lt;i&gt;pluginClassName pluginVersion&lt;/i&gt;&lt;/code&gt; -
 * an optional dependency, indicating that the plugin will work without it,
 * but that the dependency should be loaded before this plugin. &lt;/li&gt;
&lt;/ul&gt;

 &lt;p&gt;In this example, the ProjectViewer plugin is an optional dependency of
 the Console, beacause the Console only listens to events from the ProjectViewer.
 It requires Jedit 4.2 final. &lt;/p&gt;

&lt;pre&gt;
plugin.console.ConsolePlugin.depend.0=jedit 04.02.99.00
plugin.console.ConsolePlugin.depend.1=jdk 1.5
plugin.console.ConsolePlugin.depend.2=plugin errorlist.ErrorListPlugin 1.4
plugin.console.ConsolePlugin.depend.3=optional plugin projectviewer.ProjectPlugin 2.1.0.92
&lt;/pre&gt;

 * &lt;h3&gt;Plugin menu item properties&lt;/h3&gt;
 *
 *&lt;p&gt; To add your plugin to the view's &lt;b&gt;Plugins&lt;/b&gt; menu, define one of these two
 * properties: &lt;/p&gt;
 *
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.menu-item&lt;/code&gt; - if this is defined,
 * the action named by this property is added to the &lt;b&gt;Plugins&lt;/b&gt; menu.&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.menu&lt;/code&gt; - if this is defined,
 * a sub-menu is added to the &lt;b&gt;Plugins&lt;/b&gt; menu whose content is the
 * whitespace-separated list of action names in this property. A separator may
 * be added to the sub-menu by listing &lt;code&gt;-&lt;/code&gt; in the property.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * &lt;p&gt;If you want the plugin's menu items to be determined at runtime, define a
 * property &lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.menu.code&lt;/code&gt; to be BeanShell
 * code that evaluates to an implementation of
 * {@link org.gjt.sp.jedit.menu.DynamicMenuProvider}.&lt;/p&gt;
 *&lt;p&gt;
 * To add your plugin to the file system browser's &lt;b&gt;Plugins&lt;/b&gt; menu, define
 * one of these two properties:
 *&lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.browser-menu-item&lt;/code&gt; - if this is
 * defined, the action named by this property is added to the &lt;b&gt;Plugins&lt;/b&gt;
 * menu.&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.browser-menu&lt;/code&gt; - if this is defined,
 * a sub-menu is added to the &lt;b&gt;Plugins&lt;/b&gt; menu whose content is the
 * whitespace-separated list of action names in this property. A separator may
 * be added to the sub-menu by listing &lt;code&gt;-&lt;/code&gt; in the property.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 *&lt;p&gt; In all cases, each action's
 * menu item label is taken from the &lt;code&gt;&lt;i&gt;actionName&lt;/i&gt;.label&lt;/code&gt;
 * property. View actions are defined in an &lt;code&gt;actions.xml&lt;/code&gt;
 * file, file system browser actions are defined in a
 * &lt;code&gt;browser.actions.xml&lt;/code&gt; file; see {@link ActionSet}.
 *&lt;/p&gt;
 * &lt;h3&gt;Plugin option pane properties&lt;/h3&gt;
 *
 * &lt;p&gt;To add your plugin to the &lt;b&gt;Plugin Options&lt;/b&gt; dialog box, define one of
 * these two properties:
 *&lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.option-pane=&lt;i&gt;paneName&lt;/i&gt;&lt;/code&gt; - if this is defined,
 * a single option pane with this name is added to the &lt;b&gt;Plugin Options&lt;/b&gt;
 * menu.&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;plugin.&lt;i&gt;className&lt;/i&gt;.option-group=&lt;i&gt;paneName1&lt;/i&gt; [&lt;i&gt;paneName2 paneName3&lt;/i&gt; ...]&lt;/code&gt; - if this is defined,
 * a branch node is added to the &lt;b&gt;Plugin Options&lt;/b&gt; dialog box whose content
 * is the whitespace-separated list of &lt;i&gt;paneNames&lt;/i&gt; in this property.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * Then for each option &lt;i&gt;paneName&lt;/i&gt;, define these two properties:
 *
 * &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;options.&lt;i&gt;paneName&lt;/i&gt;.label&lt;/code&gt; - the label to show
 * for the pane in the dialog box.&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;options.&lt;i&gt;paneName&lt;/i&gt;.code&lt;/code&gt; - BeanShell code that
 * evaluates to an instance of the {@link OptionPane} class.&lt;/li&gt;
 *
 * &lt;h3&gt;Example&lt;/h3&gt;
 *
 * Here is an example set of plugin properties:
 *
 * &lt;pre&gt;plugin.QuickNotepadPlugin.activate=defer
 *plugin.QuickNotepadPlugin.name=QuickNotepad
 *plugin.QuickNotepadPlugin.author=John Gellene
 *plugin.QuickNotepadPlugin.version=4.2
 *plugin.QuickNotepadPlugin.docs=QuickNotepad.html
 *plugin.QuickNotepadPlugin.depend.0=jedit 04.02.01.00
 *plugin.QuickNotepadPlugin.menu=quicknotepad \
 *    - \
 *    quicknotepad.choose-file \
 *    quicknotepad.save-file \
 *    quicknotepad.copy-to-buffer
 *plugin.QuickNotepadPlugin.option-pane=quicknotepad
 *
 * plugin.QuickNotepadPlugin.option-pane=quicknotepad
 * plugin.QuickNotepadPlugin.usePluginHome=false
 * options.quicknotepad.code=new QuickNotepadOptionPane();
 * options.quicknotepad.label=QuickNotepad
 * options.quicknotepad.file=File:
 * options.quicknotepad.choose-file=Choose
 * options.quicknotepad.choose-file.title=Choose a notepad file
 * options.quicknotepad.choose-font=Font:
 * options.quicknotepad.show-filepath.title=Display notepad file path
&lt;/pre&gt;
 *
 * Note that action and option pane labels are not shown in the above example.
 *
 * @see org.gjt.sp.jedit.jEdit#getProperty(String)
 * @see org.gjt.sp.jedit.jEdit#getPlugin(String)
 * @see org.gjt.sp.jedit.jEdit#getPlugins()
 * @see org.gjt.sp.jedit.jEdit#getPluginJAR(String)
 * @see org.gjt.sp.jedit.jEdit#getPluginJARs()
 * @see org.gjt.sp.jedit.jEdit#addPluginJAR(String)
 * @see org.gjt.sp.jedit.jEdit#removePluginJAR(PluginJAR,boolean)
 * @see org.gjt.sp.jedit.ActionSet
 * @see org.gjt.sp.jedit.gui.DockableWindowManager
 * @see org.gjt.sp.jedit.OptionPane
 * @see org.gjt.sp.jedit.PluginJAR
 * @see org.gjt.sp.jedit.ServiceManager
 *
 * @author Slava Pestov
 * @author John Gellene (API documentation)
 * @author Alan Ezust (API documentation)
 * @since jEdit 2.1pre1
 */</jtok>
<jtok eid="1" type="class_name" span="248:23:248:33">EditPlugin</jtok>
<jtok eid="1" type="line_comment" span="250:2:250:22">//{{{ start() method</jtok>
<jtok eid="1" type="block_comment" span="251:2:287:5">/**
	 * jEdit calls this method when the plugin is being activated, either
	 * during startup or at any other time. A plugin can get activated for
	 * a number of reasons:
	 *
	 * &lt;ul&gt;
	 * &lt;li&gt;The plugin is written for jEdit 4.1 or older, in which case it
	 * will always be loaded at startup.&lt;/li&gt;
	 * &lt;li&gt;The plugin has its &lt;code&gt;activate&lt;/code&gt; property set to
	 * &lt;code&gt;startup&lt;/code&gt;, in which case it will always be loaded at
	 * startup.&lt;/li&gt;
	 * &lt;li&gt;One of the properties listed in the plugin's
	 * &lt;code&gt;activate&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;,
	 * in which case it will always be loaded at startup.&lt;/li&gt;
	 * &lt;li&gt;One of the plugin's classes is being accessed by another plugin,
	 * a macro, or a BeanShell snippet in a plugin API XML file.&lt;/li&gt;
	 * &lt;/ul&gt;
	 *
	 * Note that this method is always called from the event dispatch
	 * thread, even if the activation resulted from a class being loaded
	 * from another thread. A side effect of this is that some of your
	 * plugin's code might get executed before this method finishes
	 * running.&lt;p&gt;
	 *
	 * When this method is being called for plugins written for jEdit 4.1
	 * and below, no views or buffers are open. However, this is not the
	 * case for plugins using the new API. For example, if your plugin adds
	 * tool bars to views, make sure you correctly handle the case where
	 * views are already open when the plugin is loaded.&lt;p&gt;
	 *
	 * If your plugin must be loaded on startup, take care to have this
	 * method return as quickly as possible.&lt;p&gt;
	 *
	 * The default implementation of this method does nothing.
	 *
	 * @since jEdit 2.1pre1
	 */</jtok>
<jtok eid="2" type="method_name" span="288:14:288:19">start</jtok>
<jtok eid="1" type="line_comment" span="289:2:289:7">//}}}</jtok>
<jtok eid="1" type="line_comment" span="291:2:291:21">//{{{ stop() method</jtok>
<jtok eid="1" type="block_comment" span="292:2:317:5">/**
	 * jEdit calls this method when the plugin is being unloaded. This can
	 * be when the program is exiting, or at any other time.&lt;p&gt;
	 *
	 * If a plugin uses state information or other persistent data
	 * that should be stored in a special format, this would be a good place
	 * to write the data to storage.  If the plugin uses jEdit's properties
	 * API to hold settings, no special processing is needed for them on
	 * exit, since they will be saved automatically.&lt;p&gt;
	 *
	 * With plugins written for jEdit 4.1 and below, this method is only
	 * called when the program is exiting. However, this is not the case
	 * for plugins using the new API. For example, if your plugin adds
	 * tool bars to views, make sure you correctly handle the case where
	 * views are still open when the plugin is unloaded.&lt;p&gt;
	 *
	 * To avoid memory leaks, this method should ensure that no references
	 * to any objects created by this plugin remain in the heap. In the
	 * case of actions, dockable windows and services, jEdit ensures this
	 * automatically. For other objects, your plugin must clean up maually.
	 * &lt;p&gt;
	 *
	 * The default implementation of this method does nothing.
	 *
	 * @since jEdit 2.1pre1
	 */</jtok>
<jtok eid="3" type="method_name" span="318:14:318:18">stop</jtok>
<jtok eid="1" type="line_comment" span="318:24:318:29">//}}}</jtok>
<jtok eid="1" type="line_comment" span="320:2:320:30">//{{{ getPluginHome() method</jtok>
<jtok eid="1" type="block_comment" span="321:2:330:5">/**
	 * Returns the home of your plugin.
	 *
	 * @return the plugin home. It can be null if there is no 
	 *	   settings directory
	 * @since 4.3pre10
	 * @see #getResourceAsStream
	 * @see #getResourceAsOutputStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="331:9:331:13">File</jtok>
<jtok eid="4" type="method_name" span="331:14:331:27">getPluginHome</jtok>
<jtok eid="4" type="method_call" span="333:10:333:23">getPluginHome</jtok>
<jtok eid="4" type="method_call" span="333:24:333:36">getClassName</jtok>
<jtok eid="1" type="line_comment" span="334:4:334:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="336:2:336:30">//{{{ getPluginHome() method</jtok>
<jtok eid="1" type="block_comment" span="337:2:357:5">/**
	 * &lt;p&gt;Returns the home of the specified plugin.&lt;/p&gt;
	 *
	 * &lt;p&gt;Since the first parameter is a reference to the
	 * {@code Class} instance for the plugin,
	 * this method requires the plugin to be activated.&lt;/p&gt;
	 *
	 * &lt;p&gt;See {@link #getPluginHome(EditPlugin)} method, as
	 * an alternate, for when the plugin doesn't need
	 * to be activated, or when you do not have the
	 * {@code Class} instance available.&lt;/p&gt;
	 *
	 * @param clazz the class of the plugin
	 * @return the plugin home. It can be null if there is no
	 * 	   settings directory
	 * @since 4.3pre10
	 * @see #getPluginHome(EditPlugin)
	 * @see #getResourceAsStream
	 * @see #getResourceAsOutputStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="5" type="class_or_interface_ref" span="358:16:358:20">File</jtok>
<jtok eid="5" type="method_name" span="358:21:358:34">getPluginHome</jtok>
<jtok eid="5" type="parameter_type" span="358:35:358:40">Class</jtok>
<jtok eid="5" type="parameter_type" span="358:51:358:61">EditPlugin</jtok>
<jtok eid="5" type="parameter_name" span="358:63:358:68">clazz</jtok>
<jtok eid="5" type="method_call" span="360:10:360:23">getPluginHome</jtok>
<jtok eid="5" type="primary_name_ref" span="360:24:360:29">clazz</jtok>
<jtok eid="5" type="method_call" span="360:30:360:37">getName</jtok>
<jtok eid="1" type="line_comment" span="361:4:361:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="363:2:363:30">//{{{ getPluginHome() method</jtok>
<jtok eid="1" type="block_comment" span="364:2:382:5">/**
	 * &lt;p&gt;Returns the home of the specified plugin.&lt;/p&gt;
	 * 
	 * &lt;p&gt;This method doesn't need the plugin to be activated. You can pass
	 * an {@code EditPlugin.Deferred} instance that you get from
	 * {@code jEdit.getPlugin(String)} or {@code jEdit.getPlugins()} if
	 * the plugin in question is not activated yet and this method doesn't
	 * cause the plugin to get activated. If you have a reference to the
	 * plugins {@code Class} instance available, consider using the
	 * {@code Class} method.&lt;/p&gt;
	 *
	 * @param plugin the plugin
	 * @return the plugin home. It can be null if there is no settings directory
	 * @since 4.3pre10
	 * @see #getPluginHome(Class)
	 * @see #getResourceAsStream
	 * @see #getResourceAsOutputStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="6" type="class_or_interface_ref" span="383:16:383:20">File</jtok>
<jtok eid="6" type="method_name" span="383:21:383:34">getPluginHome</jtok>
<jtok eid="6" type="parameter_type" span="383:35:383:45">EditPlugin</jtok>
<jtok eid="6" type="parameter_name" span="383:46:383:52">plugin</jtok>
<jtok eid="6" type="method_call" span="385:10:385:23">getPluginHome</jtok>
<jtok eid="6" type="primary_name_ref" span="385:24:385:30">plugin</jtok>
<jtok eid="6" type="method_call" span="385:31:385:43">getClassName</jtok>
<jtok eid="1" type="line_comment" span="386:4:386:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="388:2:388:30">//{{{ getPluginHome() method</jtok>
<jtok eid="1" type="block_comment" span="389:2:398:5">/**
	 * Returns the home of the specified plugin.
	 *
	 * @param pluginClassName the plugin class name (fully qualified)
	 * @return the plugin home. It can be null if there is no settings directory
	 * @since 4.3pre10
	 * @see #getResourceAsStream
	 * @see #getResourceAsOutputStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="7" type="class_or_interface_ref" span="399:17:399:21">File</jtok>
<jtok eid="7" type="method_name" span="399:22:399:35">getPluginHome</jtok>
<jtok eid="7" type="parameter_type" span="399:36:399:42">String</jtok>
<jtok eid="7" type="parameter_name" span="399:43:399:58">pluginClassName</jtok>
<jtok eid="7" type="class_or_interface_ref" span="401:3:401:9">String</jtok>
<jtok eid="7" type="local_variable_name" span="401:10:401:27">settingsDirectory</jtok>
<jtok eid="7" type="primary_name_ref" span="401:30:401:35">jEdit</jtok>
<jtok eid="7" type="method_call" span="401:36:401:56">getSettingsDirectory</jtok>
<jtok eid="7" type="primary_name_ref" span="402:7:402:24">settingsDirectory</jtok>
<jtok eid="7" type="class_or_interface_ref" span="405:3:405:7">File</jtok>
<jtok eid="7" type="local_variable_name" span="405:8:405:12">file</jtok>
<jtok eid="7" type="constructor_call" span="405:19:405:23">File</jtok>
<jtok eid="7" type="primary_name_ref" span="405:24:405:41">settingsDirectory</jtok>
<jtok eid="7" type="string_literal" span="405:43:405:52">"plugins"</jtok>
<jtok eid="7" type="primary_name_ref" span="406:8:406:12">file</jtok>
<jtok eid="7" type="method_call" span="406:13:406:24">isDirectory</jtok>
<jtok eid="7" type="primary_name_ref" span="408:9:408:13">file</jtok>
<jtok eid="7" type="method_call" span="408:14:408:19">mkdir</jtok>
<jtok eid="7" type="primary_name_ref" span="410:5:410:8">Log</jtok>
<jtok eid="7" type="method_call" span="410:9:410:12">log</jtok>
<jtok eid="7" type="primary_name_ref" span="410:13:410:16">Log</jtok>
<jtok eid="7" type="qualified_name_ref" span="410:17:410:22">ERROR</jtok>
<jtok eid="7" type="primary_name_ref" span="410:24:410:34">EditPlugin</jtok>
<jtok eid="7" type="string_literal" span="410:42:410:67">"Can't create directory:"</jtok>
<jtok eid="7" type="primary_name_ref" span="410:70:410:74">file</jtok>
<jtok eid="7" type="method_call" span="410:75:410:90">getAbsolutePath</jtok>
<jtok eid="7" type="constructor_call" span="413:14:413:18">File</jtok>
<jtok eid="7" type="primary_name_ref" span="413:19:413:23">file</jtok>
<jtok eid="7" type="primary_name_ref" span="413:25:413:40">pluginClassName</jtok>
<jtok eid="1" type="line_comment" span="414:4:414:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="416:2:416:36">//{{{ getResourceAsStream() method</jtok>
<jtok eid="1" type="block_comment" span="417:2:439:5">/**
	 * &lt;p&gt;Returns an input stream to the specified resource, or {@code null}
	 * if none is found.&lt;/p&gt;
	 *
	 * &lt;p&gt;Since the first parameter is a reference to the
	 * {@code Class} instance for the plugin,
	 * this method requires the plugin to be activated.&lt;/p&gt;
	 *
	 * &lt;p&gt;See {@link #getResourceAsStream(EditPlugin,String)} method, as
	 * an alternate, for when the plugin doesn't need
	 * to be activated, or when you do not have the
	 * {@code Class} instance available.&lt;/p&gt;
	 *
	 * @param clazz the plugin class
	 * @param path The path to the resource to be returned, relative to
	 * the plugin's resource path.
	 * @return An input stream for the resource, or &lt;code&gt;null&lt;/code&gt;.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsStream(EditPlugin,String)
	 * @see #getResourceAsOutputStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="8" type="class_or_interface_ref" span="440:16:440:27">InputStream</jtok>
<jtok eid="8" type="method_name" span="440:28:440:47">getResourceAsStream</jtok>
<jtok eid="8" type="parameter_type" span="440:48:440:53">Class</jtok>
<jtok eid="8" type="parameter_type" span="440:64:440:74">EditPlugin</jtok>
<jtok eid="8" type="parameter_name" span="440:76:440:81">clazz</jtok>
<jtok eid="8" type="parameter_type" span="440:83:440:89">String</jtok>
<jtok eid="8" type="parameter_name" span="440:90:440:94">path</jtok>
<jtok eid="8" type="method_call" span="442:10:442:29">getResourceAsStream</jtok>
<jtok eid="8" type="primary_name_ref" span="442:30:442:35">clazz</jtok>
<jtok eid="8" type="method_call" span="442:36:442:43">getName</jtok>
<jtok eid="8" type="primary_name_ref" span="442:47:442:51">path</jtok>
<jtok eid="1" type="line_comment" span="443:4:443:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="445:2:445:36">//{{{ getResourceAsStream() method</jtok>
<jtok eid="1" type="block_comment" span="446:2:467:5">/**
	 * &lt;p&gt;Returns an input stream to the specified resource, or &lt;code&gt;null&lt;/code&gt;
	 * if none is found.&lt;/p&gt;
	 * 
	 * &lt;p&gt;This method doesn't need the plugin to be activated. You can pass
	 * an {@code EditPlugin.Deferred} instance that you get from
	 * {@code jEdit.getPlugin(String)} or {@code jEdit.getPlugins()} if
	 * the plugin in question is not activated yet and this method doesn't
	 * cause the plugin to get activated. If you have a reference to the
	 * plugins {@code Class} instance available, consider using the
	 * {@code Class} method.&lt;/p&gt;
	 *
	 * @param plugin the plugin
	 * @param path The path to the resource to be returned, relative to
	 * the plugin's resource path.
	 * @return An input stream for the resource, or &lt;code&gt;null&lt;/code&gt;.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsStream(Class,String)
	 * @see #getResourceAsOutputStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="9" type="class_or_interface_ref" span="468:16:468:27">InputStream</jtok>
<jtok eid="9" type="method_name" span="468:28:468:47">getResourceAsStream</jtok>
<jtok eid="9" type="parameter_type" span="468:48:468:58">EditPlugin</jtok>
<jtok eid="9" type="parameter_name" span="468:59:468:65">plugin</jtok>
<jtok eid="9" type="parameter_type" span="468:67:468:73">String</jtok>
<jtok eid="9" type="parameter_name" span="468:74:468:78">path</jtok>
<jtok eid="9" type="method_call" span="470:10:470:29">getResourceAsStream</jtok>
<jtok eid="9" type="primary_name_ref" span="470:30:470:36">plugin</jtok>
<jtok eid="9" type="method_call" span="470:37:470:49">getClassName</jtok>
<jtok eid="9" type="primary_name_ref" span="470:53:470:57">path</jtok>
<jtok eid="1" type="line_comment" span="471:4:471:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="473:2:473:36">//{{{ getResourceAsStream() method</jtok>
<jtok eid="1" type="block_comment" span="474:2:486:5">/**
	 * Returns an input stream to the specified resource, or &lt;code&gt;null&lt;/code&gt;
	 * if none is found.
	 * 
	 * @param pluginClassName the plugin class name (fully qualified)
	 * @param path The path to the resource to be returned, relative to
	 * the plugin's resource path.
	 * @return An input stream for the resource, or &lt;code&gt;null&lt;/code&gt;.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsOutputStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="10" type="class_or_interface_ref" span="487:17:487:28">InputStream</jtok>
<jtok eid="10" type="method_name" span="487:29:487:48">getResourceAsStream</jtok>
<jtok eid="10" type="parameter_type" span="487:49:487:55">String</jtok>
<jtok eid="10" type="parameter_name" span="487:56:487:71">pluginClassName</jtok>
<jtok eid="10" type="parameter_type" span="487:73:487:79">String</jtok>
<jtok eid="10" type="parameter_name" span="487:80:487:84">path</jtok>
<jtok eid="10" type="class_or_interface_ref" span="491:4:491:8">File</jtok>
<jtok eid="10" type="local_variable_name" span="491:9:491:13">file</jtok>
<jtok eid="10" type="method_call" span="491:16:491:31">getResourcePath</jtok>
<jtok eid="10" type="primary_name_ref" span="491:32:491:47">pluginClassName</jtok>
<jtok eid="10" type="primary_name_ref" span="491:49:491:53">path</jtok>
<jtok eid="10" type="primary_name_ref" span="492:8:492:12">file</jtok>
<jtok eid="10" type="primary_name_ref" span="492:25:492:29">file</jtok>
<jtok eid="10" type="method_call" span="492:30:492:36">exists</jtok>
<jtok eid="10" type="constructor_call" span="494:15:494:30">FileInputStream</jtok>
<jtok eid="10" type="primary_name_ref" span="494:31:494:35">file</jtok>
<jtok eid="10" type="class_or_interface_ref" span="496:10:496:21">IOException</jtok>
<jtok eid="10" type="local_variable_name" span="496:22:496:23">e</jtok>
<jtok eid="1" type="line_comment" span="500:4:500:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="502:2:502:42">//{{{ getResourceAsOutputStream() method</jtok>
<jtok eid="1" type="block_comment" span="503:2:525:5">/**
	 * &lt;p&gt;Returns an output stream to the specified resource, or {@code null}
	 * if access to that resource is denied.&lt;/p&gt;
	 *
	 * &lt;p&gt;Since the first parameter is a reference to the
	 * {@code Class} instance for the plugin,
	 * this method requires the plugin to be activated.&lt;/p&gt;
	 *
	 * &lt;p&gt;See {@link #getResourceAsOutputStream(EditPlugin,String)} method, as
	 * an alternate, for when the plugin doesn't need
	 * to be activated, or when you do not have the
	 * {@code Class} instance available.&lt;/p&gt;
	 *
	 * @param clazz the plugin class
	 * @param path The path to the resource to be returned, relative to
	 * the plugin's resource path.
	 * @return An output stream for the resource, or &lt;code&gt;null&lt;/code&gt;.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsOutputStream(EditPlugin,String)
	 * @see #getResourceAsStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="11" type="class_or_interface_ref" span="526:16:526:28">OutputStream</jtok>
<jtok eid="11" type="method_name" span="526:29:526:54">getResourceAsOutputStream</jtok>
<jtok eid="11" type="parameter_type" span="526:55:526:60">Class</jtok>
<jtok eid="11" type="parameter_type" span="526:71:526:81">EditPlugin</jtok>
<jtok eid="11" type="parameter_name" span="526:83:526:88">clazz</jtok>
<jtok eid="11" type="parameter_type" span="526:90:526:96">String</jtok>
<jtok eid="11" type="parameter_name" span="526:97:526:101">path</jtok>
<jtok eid="11" type="method_call" span="528:10:528:35">getResourceAsOutputStream</jtok>
<jtok eid="11" type="primary_name_ref" span="528:36:528:41">clazz</jtok>
<jtok eid="11" type="method_call" span="528:42:528:49">getName</jtok>
<jtok eid="11" type="primary_name_ref" span="528:53:528:57">path</jtok>
<jtok eid="1" type="line_comment" span="529:4:529:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="531:2:531:42">//{{{ getResourceAsOutputStream() method</jtok>
<jtok eid="1" type="block_comment" span="532:2:553:5">/**
	 * &lt;p&gt;Returns an output stream to the specified resource, or &lt;code&gt;null&lt;/node&gt; if access
	 * to that resource is denied.&lt;/p&gt;
	 *
	 * &lt;p&gt;This method doesn't need the plugin to be activated. You can pass
	 * an {@code EditPlugin.Deferred} instance that you get from
	 * {@code jEdit.getPlugin(String)} or {@code jEdit.getPlugins()} if
	 * the plugin in question is not activated yet and this method doesn't
	 * cause the plugin to get activated. If you have a reference to the
	 * plugins {@code Class} instance available, consider using the
	 * {@code Class} method.&lt;/p&gt;
	 *
	 * @param plugin the plugin
	 * @param path The path to the resource to be returned, relative to
	 * the plugin's resource path.
	 * @return An output stream for the resource, or &lt;code&gt;null&lt;/code&gt;.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsOutputStream(Class,String)
	 * @see #getResourceAsStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="12" type="class_or_interface_ref" span="554:16:554:28">OutputStream</jtok>
<jtok eid="12" type="method_name" span="554:29:554:54">getResourceAsOutputStream</jtok>
<jtok eid="12" type="parameter_type" span="554:55:554:65">EditPlugin</jtok>
<jtok eid="12" type="parameter_name" span="554:66:554:72">plugin</jtok>
<jtok eid="12" type="parameter_type" span="554:74:554:80">String</jtok>
<jtok eid="12" type="parameter_name" span="554:81:554:85">path</jtok>
<jtok eid="12" type="method_call" span="556:10:556:35">getResourceAsOutputStream</jtok>
<jtok eid="12" type="primary_name_ref" span="556:36:556:42">plugin</jtok>
<jtok eid="12" type="method_call" span="556:43:556:55">getClassName</jtok>
<jtok eid="12" type="primary_name_ref" span="556:59:556:63">path</jtok>
<jtok eid="1" type="line_comment" span="557:4:557:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="559:2:559:42">//{{{ getResourceAsOutputStream() method</jtok>
<jtok eid="1" type="block_comment" span="560:2:572:5">/**
	 * Returns an output stream to the specified resource, or &lt;code&gt;null&lt;/node&gt; if access
	 * to that resource is denied.
	 * 
	 * @param pluginClassName the plugin class name (fully qualified)
	 * @param path The path to the resource to be returned, relative to
	 * the plugin's resource path.
	 * @return An output stream for the resource, or &lt;code&gt;null&lt;/code&gt;.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsStream
	 * @see #getResourcePath
	 */</jtok>
<jtok eid="13" type="class_or_interface_ref" span="573:17:573:29">OutputStream</jtok>
<jtok eid="13" type="method_name" span="573:30:573:55">getResourceAsOutputStream</jtok>
<jtok eid="13" type="parameter_type" span="573:56:573:62">String</jtok>
<jtok eid="13" type="parameter_name" span="573:63:573:78">pluginClassName</jtok>
<jtok eid="13" type="parameter_type" span="573:80:573:86">String</jtok>
<jtok eid="13" type="parameter_name" span="573:87:573:91">path</jtok>
<jtok eid="13" type="class_or_interface_ref" span="577:4:577:8">File</jtok>
<jtok eid="13" type="local_variable_name" span="577:9:577:13">file</jtok>
<jtok eid="13" type="method_call" span="577:16:577:31">getResourcePath</jtok>
<jtok eid="13" type="primary_name_ref" span="577:32:577:47">pluginClassName</jtok>
<jtok eid="13" type="primary_name_ref" span="577:49:577:53">path</jtok>
<jtok eid="13" type="primary_name_ref" span="578:8:578:12">file</jtok>
<jtok eid="13" type="class_or_interface_ref" span="580:4:580:8">File</jtok>
<jtok eid="13" type="local_variable_name" span="580:9:580:19">parentFile</jtok>
<jtok eid="13" type="primary_name_ref" span="580:22:580:26">file</jtok>
<jtok eid="13" type="method_call" span="580:27:580:40">getParentFile</jtok>
<jtok eid="13" type="primary_name_ref" span="581:9:581:19">parentFile</jtok>
<jtok eid="13" type="method_call" span="581:20:581:26">exists</jtok>
<jtok eid="13" type="primary_name_ref" span="583:10:583:20">parentFile</jtok>
<jtok eid="13" type="method_call" span="583:21:583:27">mkdirs</jtok>
<jtok eid="13" type="primary_name_ref" span="585:6:585:9">Log</jtok>
<jtok eid="13" type="method_call" span="585:10:585:13">log</jtok>
<jtok eid="13" type="primary_name_ref" span="585:14:585:17">Log</jtok>
<jtok eid="13" type="qualified_name_ref" span="585:18:585:23">ERROR</jtok>
<jtok eid="13" type="primary_name_ref" span="585:25:585:35">EditPlugin</jtok>
<jtok eid="13" type="string_literal" span="585:43:585:69">"Unable to create folder "</jtok>
<jtok eid="13" type="primary_name_ref" span="585:72:585:82">parentFile</jtok>
<jtok eid="13" type="method_call" span="585:83:585:90">getPath</jtok>
<jtok eid="13" type="constructor_call" span="589:15:589:31">FileOutputStream</jtok>
<jtok eid="13" type="primary_name_ref" span="589:32:589:36">file</jtok>
<jtok eid="13" type="class_or_interface_ref" span="591:10:591:21">IOException</jtok>
<jtok eid="13" type="local_variable_name" span="591:22:591:23">e</jtok>
<jtok eid="1" type="line_comment" span="595:4:595:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="597:2:597:32">//{{{ getResourcePath() method</jtok>
<jtok eid="1" type="block_comment" span="598:2:619:5">/**
	 * &lt;p&gt;Returns the full path of the specified plugin resource.&lt;/p&gt;
	 *
	 * &lt;p&gt;Since the first parameter is a reference to the
	 * {@code Class} instance for the plugin,
	 * this method requires the plugin to be activated.&lt;/p&gt;
	 *
	 * &lt;p&gt;See {@link #getResourcePath(EditPlugin,String)} method, as
	 * an alternate, for when the plugin doesn't need
	 * to be activated, or when you do not have the
	 * {@code Class} instance available.&lt;/p&gt;
	 *
	 * @param clazz the plugin class
	 * @param path The relative path to the resource from the plugin's
	 * resource path.
	 * @return The absolute path to the resource or null if there is no plugin home.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsOutputStream
	 * @see #getResourceAsStream
	 * @see #getResourcePath(EditPlugin,String)
	 */</jtok>
<jtok eid="14" type="class_or_interface_ref" span="620:16:620:20">File</jtok>
<jtok eid="14" type="method_name" span="620:21:620:36">getResourcePath</jtok>
<jtok eid="14" type="parameter_type" span="620:37:620:42">Class</jtok>
<jtok eid="14" type="parameter_type" span="620:53:620:63">EditPlugin</jtok>
<jtok eid="14" type="parameter_name" span="620:65:620:70">clazz</jtok>
<jtok eid="14" type="parameter_type" span="620:72:620:78">String</jtok>
<jtok eid="14" type="parameter_name" span="620:79:620:83">path</jtok>
<jtok eid="14" type="method_call" span="622:10:622:25">getResourcePath</jtok>
<jtok eid="14" type="primary_name_ref" span="622:26:622:31">clazz</jtok>
<jtok eid="14" type="method_call" span="622:32:622:39">getName</jtok>
<jtok eid="14" type="primary_name_ref" span="622:43:622:47">path</jtok>
<jtok eid="1" type="line_comment" span="623:4:623:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="625:2:625:32">//{{{ getResourcePath() method</jtok>
<jtok eid="1" type="block_comment" span="626:2:646:5">/**
	 * &lt;p&gt;Returns the full path of the specified plugin resource.&lt;/p&gt;
	 *
	 * &lt;p&gt;This method doesn't need the plugin to be activated. You can pass
	 * an {@code EditPlugin.Deferred} instance that you get from
	 * {@code jEdit.getPlugin(String)} or {@code jEdit.getPlugins()} if
	 * the plugin in question is not activated yet and this method doesn't
	 * cause the plugin to get activated. If you have a reference to the
	 * plugins {@code Class} instance available, consider using the
	 * {@code Class} method.&lt;/p&gt;
	 *
	 * @param plugin the plugin
	 * @param path The relative path to the resource from the plugin's
	 * resource path.
	 * @return The absolute path to the resource or null if there is no plugin home.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsOutputStream
	 * @see #getResourceAsStream
	 * @see #getResourcePath(Class,String)
	 */</jtok>
<jtok eid="15" type="class_or_interface_ref" span="647:16:647:20">File</jtok>
<jtok eid="15" type="method_name" span="647:21:647:36">getResourcePath</jtok>
<jtok eid="15" type="parameter_type" span="647:37:647:47">EditPlugin</jtok>
<jtok eid="15" type="parameter_name" span="647:48:647:54">plugin</jtok>
<jtok eid="15" type="parameter_type" span="647:56:647:62">String</jtok>
<jtok eid="15" type="parameter_name" span="647:63:647:67">path</jtok>
<jtok eid="15" type="method_call" span="649:10:649:25">getResourcePath</jtok>
<jtok eid="15" type="primary_name_ref" span="649:26:649:32">plugin</jtok>
<jtok eid="15" type="method_call" span="649:33:649:45">getClassName</jtok>
<jtok eid="15" type="primary_name_ref" span="649:49:649:53">path</jtok>
<jtok eid="1" type="line_comment" span="650:4:650:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="652:2:652:32">//{{{ getResourcePath() method</jtok>
<jtok eid="1" type="block_comment" span="653:2:664:5">/**
	 * Returns the full path of the specified plugin resource.
	 *
	 * @param pluginClassName the plugin class name (fully qualified)
	 * @param path The relative path to the resource from the plugin's
	 * resource path.
	 * @return The absolute path to the resource or null if there is no plugin home.
	 * @since 4.3pre10
	 * @see #getPluginHome
	 * @see #getResourceAsOutputStream
	 * @see #getResourceAsStream
	 */</jtok>
<jtok eid="16" type="class_or_interface_ref" span="665:17:665:21">File</jtok>
<jtok eid="16" type="method_name" span="665:22:665:37">getResourcePath</jtok>
<jtok eid="16" type="parameter_type" span="665:38:665:44">String</jtok>
<jtok eid="16" type="parameter_name" span="665:45:665:60">pluginClassName</jtok>
<jtok eid="16" type="parameter_type" span="665:62:665:68">String</jtok>
<jtok eid="16" type="parameter_name" span="665:69:665:73">path</jtok>
<jtok eid="16" type="class_or_interface_ref" span="667:3:667:7">File</jtok>
<jtok eid="16" type="local_variable_name" span="667:8:667:12">home</jtok>
<jtok eid="16" type="method_call" span="667:15:667:28">getPluginHome</jtok>
<jtok eid="16" type="primary_name_ref" span="667:29:667:44">pluginClassName</jtok>
<jtok eid="16" type="primary_name_ref" span="668:7:668:11">home</jtok>
<jtok eid="16" type="constructor_call" span="670:14:670:18">File</jtok>
<jtok eid="16" type="primary_name_ref" span="670:19:670:23">home</jtok>
<jtok eid="16" type="primary_name_ref" span="670:25:670:29">path</jtok>
<jtok eid="1" type="line_comment" span="671:4:671:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="673:2:673:29">//{{{ getClassName() method</jtok>
<jtok eid="1" type="block_comment" span="674:2:680:5">/**
	 * Returns the plugin's class name. This might not be the same as
	 * the class of the actual &lt;code&gt;EditPlugin&lt;/code&gt; instance, for
	 * example if the plugin is not loaded yet.
	 *
	 * @since jEdit 2.5pre3
	 */</jtok>
<jtok eid="17" type="class_or_interface_ref" span="681:9:681:15">String</jtok>
<jtok eid="17" type="method_name" span="681:16:681:28">getClassName</jtok>
<jtok eid="17" type="method_call" span="683:10:683:18">getClass</jtok>
<jtok eid="17" type="method_call" span="683:21:683:28">getName</jtok>
<jtok eid="1" type="line_comment" span="684:4:684:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="686:2:686:29">//{{{ getPluginJAR() method</jtok>
<jtok eid="1" type="block_comment" span="687:2:690:5">/**
	 * Returns the JAR file containing this plugin.
	 * @since jEdit 4.2pre1
	 */</jtok>
<jtok eid="18" type="class_or_interface_ref" span="691:9:691:18">PluginJAR</jtok>
<jtok eid="18" type="method_name" span="691:19:691:31">getPluginJAR</jtok>
<jtok eid="18" type="primary_name_ref" span="693:10:693:13">jar</jtok>
<jtok eid="1" type="line_comment" span="694:4:694:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="696:2:696:32">//{{{ createMenuItems() method</jtok>
<jtok eid="1" type="block_comment" span="697:2:703:5">/**
	 * Called by the view when constructing its &lt;b&gt;Plugins&lt;/b&gt; menu.
	 * See the description of this class for details about how the
	 * menu items are constructed from plugin properties.
	 *
	 * @since jEdit 4.2pre1
	 */</jtok>
<jtok eid="19" type="class_or_interface_ref" span="704:15:704:24">JMenuItem</jtok>
<jtok eid="19" type="method_name" span="704:25:704:40">createMenuItems</jtok>
<jtok eid="19" type="class_or_interface_ref" span="706:22:706:28">Broken</jtok>
<jtok eid="19" type="class_or_interface_ref" span="709:3:709:9">String</jtok>
<jtok eid="19" type="local_variable_name" span="709:10:709:22">menuItemName</jtok>
<jtok eid="19" type="primary_name_ref" span="709:25:709:30">jEdit</jtok>
<jtok eid="19" type="method_call" span="709:31:709:42">getProperty</jtok>
<jtok eid="19" type="string_literal" span="709:43:709:52">"plugin."</jtok>
<jtok eid="19" type="method_call" span="710:4:710:16">getClassName</jtok>
<jtok eid="19" type="string_literal" span="710:21:710:33">".menu-item"</jtok>
<jtok eid="19" type="primary_name_ref" span="711:6:711:18">menuItemName</jtok>
<jtok eid="19" type="primary_name_ref" span="712:11:712:23">GUIUtilities</jtok>
<jtok eid="19" type="method_call" span="712:24:712:36">loadMenuItem</jtok>
<jtok eid="19" type="primary_name_ref" span="712:37:712:49">menuItemName</jtok>
<jtok eid="19" type="class_or_interface_ref" span="714:3:714:9">String</jtok>
<jtok eid="19" type="local_variable_name" span="714:10:714:22">menuProperty</jtok>
<jtok eid="19" type="string_literal" span="714:25:714:34">"plugin."</jtok>
<jtok eid="19" type="method_call" span="714:37:714:49">getClassName</jtok>
<jtok eid="19" type="string_literal" span="714:54:714:61">".menu"</jtok>
<jtok eid="19" type="class_or_interface_ref" span="715:3:715:9">String</jtok>
<jtok eid="19" type="local_variable_name" span="715:10:715:22">codeProperty</jtok>
<jtok eid="19" type="string_literal" span="715:25:715:34">"plugin."</jtok>
<jtok eid="19" type="method_call" span="715:37:715:49">getClassName</jtok>
<jtok eid="19" type="string_literal" span="715:54:715:66">".menu.code"</jtok>
<jtok eid="19" type="primary_name_ref" span="716:6:716:11">jEdit</jtok>
<jtok eid="19" type="method_call" span="716:12:716:23">getProperty</jtok>
<jtok eid="19" type="primary_name_ref" span="716:24:716:36">menuProperty</jtok>
<jtok eid="19" type="primary_name_ref" span="717:7:717:12">jEdit</jtok>
<jtok eid="19" type="method_call" span="717:13:717:24">getProperty</jtok>
<jtok eid="19" type="primary_name_ref" span="717:25:717:37">codeProperty</jtok>
<jtok eid="19" type="class_or_interface_ref" span="719:4:719:10">String</jtok>
<jtok eid="19" type="local_variable_name" span="719:11:719:21">pluginName</jtok>
<jtok eid="19" type="primary_name_ref" span="719:24:719:29">jEdit</jtok>
<jtok eid="19" type="method_call" span="719:30:719:41">getProperty</jtok>
<jtok eid="19" type="string_literal" span="719:42:719:51">"plugin."</jtok>
<jtok eid="19" type="method_call" span="720:5:720:17">getClassName</jtok>
<jtok eid="19" type="string_literal" span="720:22:720:29">".name"</jtok>
<jtok eid="19" type="constructor_call" span="721:15:721:27">EnhancedMenu</jtok>
<jtok eid="19" type="primary_name_ref" span="721:28:721:40">menuProperty</jtok>
<jtok eid="19" type="primary_name_ref" span="721:41:721:51">pluginName</jtok>
<jtok eid="1" type="line_comment" span="725:4:725:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="727:2:727:39">//{{{ createBrowserMenuItems() method</jtok>
<jtok eid="1" type="block_comment" span="728:2:735:5">/**
	 * Called by the filesystem browser when constructing its
	 * &lt;b&gt;Plugins&lt;/b&gt; menu.
	 * See the description of this class for details about how the
	 * menu items are constructed from plugin properties.
	 *
	 * @since jEdit 4.2pre1
	 */</jtok>
<jtok eid="20" type="class_or_interface_ref" span="736:15:736:24">JMenuItem</jtok>
<jtok eid="20" type="method_name" span="736:25:736:47">createBrowserMenuItems</jtok>
<jtok eid="20" type="class_or_interface_ref" span="738:22:738:28">Broken</jtok>
<jtok eid="20" type="class_or_interface_ref" span="741:3:741:9">String</jtok>
<jtok eid="20" type="local_variable_name" span="741:10:741:22">menuItemName</jtok>
<jtok eid="20" type="primary_name_ref" span="741:25:741:30">jEdit</jtok>
<jtok eid="20" type="method_call" span="741:31:741:42">getProperty</jtok>
<jtok eid="20" type="string_literal" span="741:43:741:52">"plugin."</jtok>
<jtok eid="20" type="method_call" span="742:4:742:16">getClassName</jtok>
<jtok eid="20" type="string_literal" span="742:21:742:41">".browser-menu-item"</jtok>
<jtok eid="20" type="primary_name_ref" span="743:6:743:18">menuItemName</jtok>
<jtok eid="20" type="primary_name_ref" span="745:11:745:23">GUIUtilities</jtok>
<jtok eid="20" type="method_call" span="745:24:745:36">loadMenuItem</jtok>
<jtok eid="20" type="primary_name_ref" span="746:5:746:15">VFSBrowser</jtok>
<jtok eid="20" type="method_call" span="746:16:746:32">getActionContext</jtok>
<jtok eid="20" type="primary_name_ref" span="747:5:747:17">menuItemName</jtok>
<jtok eid="20" type="class_or_interface_ref" span="751:3:751:9">String</jtok>
<jtok eid="20" type="local_variable_name" span="751:10:751:22">menuProperty</jtok>
<jtok eid="20" type="string_literal" span="751:25:751:34">"plugin."</jtok>
<jtok eid="20" type="method_call" span="751:37:751:49">getClassName</jtok>
<jtok eid="20" type="string_literal" span="751:54:751:69">".browser-menu"</jtok>
<jtok eid="20" type="primary_name_ref" span="752:6:752:11">jEdit</jtok>
<jtok eid="20" type="method_call" span="752:12:752:23">getProperty</jtok>
<jtok eid="20" type="primary_name_ref" span="752:24:752:36">menuProperty</jtok>
<jtok eid="20" type="class_or_interface_ref" span="754:4:754:10">String</jtok>
<jtok eid="20" type="local_variable_name" span="754:11:754:21">pluginName</jtok>
<jtok eid="20" type="primary_name_ref" span="754:24:754:29">jEdit</jtok>
<jtok eid="20" type="method_call" span="754:30:754:41">getProperty</jtok>
<jtok eid="20" type="string_literal" span="754:42:754:51">"plugin."</jtok>
<jtok eid="20" type="method_call" span="755:5:755:17">getClassName</jtok>
<jtok eid="20" type="string_literal" span="755:22:755:29">".name"</jtok>
<jtok eid="20" type="constructor_call" span="756:15:756:27">EnhancedMenu</jtok>
<jtok eid="20" type="primary_name_ref" span="756:28:756:40">menuProperty</jtok>
<jtok eid="20" type="primary_name_ref" span="756:41:756:51">pluginName</jtok>
<jtok eid="20" type="primary_name_ref" span="757:5:757:15">VFSBrowser</jtok>
<jtok eid="20" type="method_call" span="757:16:757:32">getActionContext</jtok>
<jtok eid="1" type="line_comment" span="761:4:761:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="763:2:763:26">//{{{ Deprecated methods</jtok>
<jtok eid="1" type="line_comment" span="765:2:765:32">//{{{ createMenuItems() method</jtok>
<jtok eid="1" type="block_comment" span="766:2:769:5">/**
	 * @deprecated Instead of overriding this method, define properties
	 * as specified in the description of this class.
	 */</jtok>
<jtok eid="21" type="method_name" span="770:14:770:29">createMenuItems</jtok>
<jtok eid="21" type="parameter_type" span="770:30:770:36">Vector</jtok>
<jtok eid="21" type="parameter_name" span="770:37:770:46">menuItems</jtok>
<jtok eid="1" type="line_comment" span="770:51:770:56">//}}}</jtok>
<jtok eid="1" type="line_comment" span="772:2:772:34">//{{{ createOptionPanes() method</jtok>
<jtok eid="1" type="block_comment" span="773:2:776:5">/**
	 * @deprecated Instead of overriding this method, define properties
	 * as specified in the description of this class.
	 */</jtok>
<jtok eid="22" type="method_name" span="777:14:777:31">createOptionPanes</jtok>
<jtok eid="22" type="parameter_type" span="777:32:777:45">OptionsDialog</jtok>
<jtok eid="22" type="parameter_name" span="777:46:777:59">optionsDialog</jtok>
<jtok eid="1" type="line_comment" span="777:64:777:69">//}}}</jtok>
<jtok eid="1" type="line_comment" span="779:2:779:7">//}}}</jtok>
<jtok eid="1" type="line_comment" span="781:2:781:31">//{{{ Package-private members</jtok>
<jtok eid="1" type="class_or_interface_ref" span="782:2:782:11">PluginJAR</jtok>
<jtok eid="1" type="field_name" span="782:12:782:15">jar</jtok>
<jtok eid="1" type="line_comment" span="783:2:783:7">//}}}</jtok>
<jtok eid="1" type="line_comment" span="785:2:785:20">//{{{ Broken class</jtok>
<jtok eid="1" type="block_comment" span="786:2:791:5">/**
	 * A placeholder for a plugin that didn't load.
	 * @see jEdit#getPlugin(String)
	 * @see PluginJAR#getPlugin()
	 * @see PluginJAR#activatePlugin()
	 */</jtok>
<jtok eid="23" type="class_name" span="792:22:792:28">Broken</jtok>
<jtok eid="23" type="class_or_interface_ref" span="792:37:792:47">EditPlugin</jtok>
<jtok eid="24" type="class_or_interface_ref" span="794:10:794:16">String</jtok>
<jtok eid="24" type="method_name" span="794:17:794:29">getClassName</jtok>
<jtok eid="24" type="primary_name_ref" span="796:11:796:16">clazz</jtok>
<jtok eid="23" type="line_comment" span="799:3:799:29">// package-private members</jtok>
<jtok eid="25" type="method_name" span="800:3:800:9">Broken</jtok>
<jtok eid="25" type="parameter_type" span="800:10:800:19">PluginJAR</jtok>
<jtok eid="25" type="parameter_name" span="800:20:800:23">jar</jtok>
<jtok eid="25" type="parameter_type" span="800:25:800:31">String</jtok>
<jtok eid="25" type="parameter_name" span="800:32:800:37">clazz</jtok>
<jtok eid="25" type="qualified_name_ref" span="802:9:802:12">jar</jtok>
<jtok eid="25" type="primary_name_ref" span="802:15:802:18">jar</jtok>
<jtok eid="25" type="qualified_name_ref" span="803:9:803:14">clazz</jtok>
<jtok eid="25" type="primary_name_ref" span="803:17:803:22">clazz</jtok>
<jtok eid="23" type="line_comment" span="806:3:806:21">// private members</jtok>
<jtok eid="23" type="class_or_interface_ref" span="807:11:807:17">String</jtok>
<jtok eid="23" type="field_name" span="807:18:807:23">clazz</jtok>
<jtok eid="1" type="line_comment" span="808:4:808:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="810:2:810:22">//{{{ Deferred class</jtok>
<jtok eid="1" type="block_comment" span="811:2:816:5">/**
	 * A placeholder for a plugin that hasn't been loaded yet.
	 * @see jEdit#getPlugin(String)
	 * @see PluginJAR#getPlugin()
	 * @see PluginJAR#activatePlugin()
	 */</jtok>
<jtok eid="26" type="class_name" span="817:22:817:30">Deferred</jtok>
<jtok eid="26" type="class_or_interface_ref" span="817:39:817:49">EditPlugin</jtok>
<jtok eid="27" type="class_or_interface_ref" span="819:10:819:16">String</jtok>
<jtok eid="27" type="method_name" span="819:17:819:29">getClassName</jtok>
<jtok eid="27" type="primary_name_ref" span="821:11:821:16">clazz</jtok>
<jtok eid="26" type="line_comment" span="824:3:824:29">// package-private members</jtok>
<jtok eid="28" type="method_name" span="825:3:825:11">Deferred</jtok>
<jtok eid="28" type="parameter_type" span="825:12:825:21">PluginJAR</jtok>
<jtok eid="28" type="parameter_name" span="825:22:825:25">jar</jtok>
<jtok eid="28" type="parameter_type" span="825:27:825:33">String</jtok>
<jtok eid="28" type="parameter_name" span="825:34:825:39">clazz</jtok>
<jtok eid="28" type="qualified_name_ref" span="827:9:827:12">jar</jtok>
<jtok eid="28" type="primary_name_ref" span="827:15:827:18">jar</jtok>
<jtok eid="28" type="qualified_name_ref" span="828:9:828:14">clazz</jtok>
<jtok eid="28" type="primary_name_ref" span="828:17:828:22">clazz</jtok>
<jtok eid="29" type="class_or_interface_ref" span="831:3:831:13">EditPlugin</jtok>
<jtok eid="29" type="method_name" span="831:14:831:29">loadPluginClass</jtok>
<jtok eid="30" type="class_or_interface_ref" span="836:10:836:16">String</jtok>
<jtok eid="30" type="method_name" span="836:17:836:25">toString</jtok>
<jtok eid="30" type="string_literal" span="838:11:838:22">"Deferred["</jtok>
<jtok eid="30" type="primary_name_ref" span="838:25:838:30">clazz</jtok>
<jtok eid="26" type="line_comment" span="841:3:841:21">// private members</jtok>
<jtok eid="26" type="class_or_interface_ref" span="842:11:842:17">String</jtok>
<jtok eid="26" type="field_name" span="842:18:842:23">clazz</jtok>
<jtok eid="1" type="line_comment" span="843:4:843:9">//}}}</jtok>
</jdoc>