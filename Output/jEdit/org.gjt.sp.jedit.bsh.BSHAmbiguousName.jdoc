<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHAmbiguousName" jls="java5">
<jent id="0" type="file" span="0:0:107:1">Source/jEdit/org/gjt/sp/jedit/bsh/BSHAmbiguousName.java</jent>
<jent id="1" pid="0" type="class" span="37:1:106:1">org.gjt.sp.jedit.bsh.BSHAmbiguousName</jent>
<jent id="2" pid="1" type="method" span="41:5:41:43">org.gjt.sp.jedit.bsh.BSHAmbiguousName.BSHAmbiguousName(int)</jent>
<jent id="3" pid="1" type="method" span="43:5:46:5">org.gjt.sp.jedit.bsh.BSHAmbiguousName.getName(NameSpace)</jent>
<jent id="4" pid="1" type="method" span="48:5:52:5">org.gjt.sp.jedit.bsh.BSHAmbiguousName.toObject(CallStack,Interpreter)</jent>
<jent id="5" pid="1" type="method" span="54:5:66:5">org.gjt.sp.jedit.bsh.BSHAmbiguousName.toObject(CallStack,Interpreter,boolean)</jent>
<jent id="6" pid="1" type="method" span="68:5:79:5">org.gjt.sp.jedit.bsh.BSHAmbiguousName.toClass(CallStack,Interpreter)</jent>
<jent id="7" pid="1" type="method" span="81:5:89:5">org.gjt.sp.jedit.bsh.BSHAmbiguousName.toLHS(CallStack,Interpreter)</jent>
<jent id="8" pid="1" type="method" span="95:5:101:5">org.gjt.sp.jedit.bsh.BSHAmbiguousName.eval(CallStack,Interpreter)</jent>
<jent id="9" pid="1" type="method" span="103:2:105:2">org.gjt.sp.jedit.bsh.BSHAmbiguousName.toString()</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="37:7:37:23">BSHAmbiguousName</jtok>
<jtok eid="1" type="class_or_interface_ref" span="37:32:37:42">SimpleNode</jtok>
<jtok eid="1" type="class_or_interface_ref" span="39:12:39:18">String</jtok>
<jtok eid="1" type="field_name" span="39:19:39:23">text</jtok>
<jtok eid="2" type="method_name" span="41:5:41:21">BSHAmbiguousName</jtok>
<jtok eid="2" type="parameter_name" span="41:26:41:28">id</jtok>
<jtok eid="2" type="primary_name_ref" span="41:38:41:40">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:12:43:16">Name</jtok>
<jtok eid="3" type="method_name" span="43:17:43:24">getName</jtok>
<jtok eid="3" type="parameter_type" span="43:26:43:35">NameSpace</jtok>
<jtok eid="3" type="parameter_name" span="43:36:43:45">namespace</jtok>
<jtok eid="3" type="primary_name_ref" span="45:16:45:25">namespace</jtok>
<jtok eid="3" type="method_call" span="45:26:45:41">getNameResolver</jtok>
<jtok eid="3" type="primary_name_ref" span="45:43:45:47">text</jtok>
<jtok eid="4" type="class_or_interface_ref" span="48:12:48:18">Object</jtok>
<jtok eid="4" type="method_name" span="48:19:48:27">toObject</jtok>
<jtok eid="4" type="parameter_type" span="48:29:48:38">CallStack</jtok>
<jtok eid="4" type="parameter_name" span="48:39:48:48">callstack</jtok>
<jtok eid="4" type="parameter_type" span="48:50:48:61">Interpreter</jtok>
<jtok eid="4" type="parameter_name" span="48:62:48:73">interpreter</jtok>
<jtok eid="4" type="throws" span="49:10:49:19">EvalError</jtok>
<jtok eid="4" type="method_call" span="51:10:51:18">toObject</jtok>
<jtok eid="4" type="primary_name_ref" span="51:20:51:29">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="51:31:51:42">interpreter</jtok>
<jtok eid="5" type="class_or_interface_ref" span="54:5:54:11">Object</jtok>
<jtok eid="5" type="method_name" span="54:12:54:20">toObject</jtok>
<jtok eid="5" type="parameter_type" span="55:3:55:12">CallStack</jtok>
<jtok eid="5" type="parameter_name" span="55:13:55:22">callstack</jtok>
<jtok eid="5" type="parameter_type" span="55:24:55:35">Interpreter</jtok>
<jtok eid="5" type="parameter_name" span="55:36:55:47">interpreter</jtok>
<jtok eid="5" type="parameter_name" span="55:57:55:67">forceClass</jtok>
<jtok eid="5" type="throws" span="56:10:56:19">EvalError</jtok>
<jtok eid="5" type="method_call" span="60:5:60:12">getName</jtok>
<jtok eid="5" type="primary_name_ref" span="60:14:60:23">callstack</jtok>
<jtok eid="5" type="method_call" span="60:24:60:27">top</jtok>
<jtok eid="5" type="method_call" span="60:32:60:40">toObject</jtok>
<jtok eid="5" type="primary_name_ref" span="61:6:61:15">callstack</jtok>
<jtok eid="5" type="primary_name_ref" span="61:17:61:28">interpreter</jtok>
<jtok eid="5" type="primary_name_ref" span="61:30:61:40">forceClass</jtok>
<jtok eid="5" type="class_or_interface_ref" span="62:13:62:26">UtilEvalError</jtok>
<jtok eid="5" type="local_variable_name" span="62:27:62:28">e</jtok>
<jtok eid="5" type="line_comment" span="63:1:63:23">//e.printStackTrace();</jtok>
<jtok eid="5" type="primary_name_ref" span="64:10:64:11">e</jtok>
<jtok eid="5" type="method_call" span="64:12:64:23">toEvalError</jtok>
<jtok eid="5" type="primary_name_ref" span="64:31:64:40">callstack</jtok>
<jtok eid="6" type="class_or_interface_ref" span="68:12:68:17">Class</jtok>
<jtok eid="6" type="method_name" span="68:18:68:25">toClass</jtok>
<jtok eid="6" type="parameter_type" span="68:27:68:36">CallStack</jtok>
<jtok eid="6" type="parameter_name" span="68:37:68:46">callstack</jtok>
<jtok eid="6" type="parameter_type" span="68:48:68:59">Interpreter</jtok>
<jtok eid="6" type="parameter_name" span="68:60:68:71">interpreter</jtok>
<jtok eid="6" type="throws" span="69:10:69:19">EvalError</jtok>
<jtok eid="6" type="method_call" span="72:17:72:24">getName</jtok>
<jtok eid="6" type="primary_name_ref" span="72:26:72:35">callstack</jtok>
<jtok eid="6" type="method_call" span="72:36:72:39">top</jtok>
<jtok eid="6" type="method_call" span="72:44:72:51">toClass</jtok>
<jtok eid="6" type="class_or_interface_ref" span="73:13:73:35">ClassNotFoundException</jtok>
<jtok eid="6" type="local_variable_name" span="73:36:73:37">e</jtok>
<jtok eid="6" type="constructor_call" span="74:14:74:23">EvalError</jtok>
<jtok eid="6" type="primary_name_ref" span="74:25:74:26">e</jtok>
<jtok eid="6" type="method_call" span="74:27:74:37">getMessage</jtok>
<jtok eid="6" type="primary_name_ref" span="74:47:74:56">callstack</jtok>
<jtok eid="6" type="class_or_interface_ref" span="75:13:75:26">UtilEvalError</jtok>
<jtok eid="6" type="local_variable_name" span="75:27:75:29">e2</jtok>
<jtok eid="6" type="line_comment" span="76:4:76:52">// ClassPathException is a type of UtilEvalError</jtok>
<jtok eid="6" type="primary_name_ref" span="77:10:77:12">e2</jtok>
<jtok eid="6" type="method_call" span="77:13:77:24">toEvalError</jtok>
<jtok eid="6" type="primary_name_ref" span="77:32:77:41">callstack</jtok>
<jtok eid="7" type="class_or_interface_ref" span="81:12:81:15">LHS</jtok>
<jtok eid="7" type="method_name" span="81:16:81:21">toLHS</jtok>
<jtok eid="7" type="parameter_type" span="81:23:81:32">CallStack</jtok>
<jtok eid="7" type="parameter_name" span="81:33:81:42">callstack</jtok>
<jtok eid="7" type="parameter_type" span="81:44:81:55">Interpreter</jtok>
<jtok eid="7" type="parameter_name" span="81:56:81:67">interpreter</jtok>
<jtok eid="7" type="throws" span="82:10:82:19">EvalError</jtok>
<jtok eid="7" type="method_call" span="85:11:85:18">getName</jtok>
<jtok eid="7" type="primary_name_ref" span="85:20:85:29">callstack</jtok>
<jtok eid="7" type="method_call" span="85:30:85:33">top</jtok>
<jtok eid="7" type="method_call" span="85:38:85:43">toLHS</jtok>
<jtok eid="7" type="primary_name_ref" span="85:45:85:54">callstack</jtok>
<jtok eid="7" type="primary_name_ref" span="85:56:85:67">interpreter</jtok>
<jtok eid="7" type="class_or_interface_ref" span="86:13:86:26">UtilEvalError</jtok>
<jtok eid="7" type="local_variable_name" span="86:27:86:28">e</jtok>
<jtok eid="7" type="primary_name_ref" span="87:10:87:11">e</jtok>
<jtok eid="7" type="method_call" span="87:12:87:23">toEvalError</jtok>
<jtok eid="7" type="primary_name_ref" span="87:31:87:40">callstack</jtok>
<jtok eid="1" type="block_comment" span="91:2:94:4">/*
		The interpretation of an ambiguous name is context sensitive.
		We disallow a generic eval( ).
	*/</jtok>
<jtok eid="8" type="class_or_interface_ref" span="95:12:95:18">Object</jtok>
<jtok eid="8" type="method_name" span="95:19:95:23">eval</jtok>
<jtok eid="8" type="parameter_type" span="95:25:95:34">CallStack</jtok>
<jtok eid="8" type="parameter_name" span="95:35:95:44">callstack</jtok>
<jtok eid="8" type="parameter_type" span="95:46:95:57">Interpreter</jtok>
<jtok eid="8" type="parameter_name" span="95:58:95:69">interpreter</jtok>
<jtok eid="8" type="throws" span="96:10:96:19">EvalError</jtok>
<jtok eid="8" type="constructor_call" span="98:13:98:29">InterpreterError</jtok>
<jtok eid="8" type="string_literal" span="99:4:99:47">"Don't know how to eval an ambiguous name!"</jtok>
<jtok eid="8" type="string_literal" span="100:5:100:46">"  Use toObject() if you want an object."</jtok>
<jtok eid="9" type="class_or_interface_ref" span="103:9:103:15">String</jtok>
<jtok eid="9" type="method_name" span="103:16:103:24">toString</jtok>
<jtok eid="9" type="string_literal" span="104:10:104:26">"AmbigousName: "</jtok>
<jtok eid="9" type="primary_name_ref" span="104:27:104:31">text</jtok>
</jdoc>