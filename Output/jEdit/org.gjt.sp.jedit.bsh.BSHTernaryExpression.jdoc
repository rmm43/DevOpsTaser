<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHTernaryExpression" jls="java5">
<jent id="0" type="file" span="0:0:60:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHTernaryExpression.java</jent>
<jent id="1" pid="0" type="class" span="42:1:60:1">org.gjt.sp.jedit.bsh.BSHTernaryExpression</jent>
<jent id="2" pid="1" type="method" span="44:5:44:47">org.gjt.sp.jedit.bsh.BSHTernaryExpression.BSHTernaryExpression(int)</jent>
<jent id="3" pid="1" type="method" span="46:5:58:5">org.gjt.sp.jedit.bsh.BSHTernaryExpression.eval(CallStack,Interpreter)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="37:1:41:3">/**
	This class needs logic to prevent the right hand side of boolean logical
	expressions from being naively evaluated...  e.g. for "foo &amp;&amp; bar" bar 
	should not be evaluated in the case where foo is true.
*/</jtok>
<jtok eid="1" type="class_name" span="42:7:42:27">BSHTernaryExpression</jtok>
<jtok eid="1" type="class_or_interface_ref" span="42:36:42:46">SimpleNode</jtok>
<jtok eid="2" type="method_name" span="44:5:44:25">BSHTernaryExpression</jtok>
<jtok eid="2" type="parameter_name" span="44:30:44:32">id</jtok>
<jtok eid="2" type="primary_name_ref" span="44:42:44:44">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="46:12:46:18">Object</jtok>
<jtok eid="3" type="method_name" span="46:19:46:23">eval</jtok>
<jtok eid="3" type="parameter_type" span="46:25:46:34">CallStack</jtok>
<jtok eid="3" type="parameter_name" span="46:35:46:44">callstack</jtok>
<jtok eid="3" type="parameter_type" span="46:46:46:57">Interpreter</jtok>
<jtok eid="3" type="parameter_name" span="46:58:46:69">interpreter</jtok>
<jtok eid="3" type="throws" span="47:10:47:19">EvalError</jtok>
<jtok eid="3" type="class_or_interface_ref" span="49:9:49:19">SimpleNode</jtok>
<jtok eid="3" type="local_variable_name" span="50:4:50:8">cond</jtok>
<jtok eid="3" type="class_or_interface_ref" span="50:12:50:22">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="50:23:50:34">jjtGetChild</jtok>
<jtok eid="3" type="local_variable_name" span="51:4:51:12">evalTrue</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:16:51:26">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="51:27:51:38">jjtGetChild</jtok>
<jtok eid="3" type="local_variable_name" span="52:4:52:13">evalFalse</jtok>
<jtok eid="3" type="class_or_interface_ref" span="52:17:52:27">SimpleNode</jtok>
<jtok eid="3" type="method_call" span="52:28:52:39">jjtGetChild</jtok>
<jtok eid="3" type="primary_name_ref" span="54:8:54:22">BSHIfStatement</jtok>
<jtok eid="3" type="method_call" span="54:23:54:40">evaluateCondition</jtok>
<jtok eid="3" type="primary_name_ref" span="54:42:54:46">cond</jtok>
<jtok eid="3" type="primary_name_ref" span="54:48:54:57">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="54:59:54:70">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="55:11:55:19">evalTrue</jtok>
<jtok eid="3" type="method_call" span="55:20:55:24">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="55:26:55:35">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="55:37:55:48">interpreter</jtok>
<jtok eid="3" type="primary_name_ref" span="57:11:57:20">evalFalse</jtok>
<jtok eid="3" type="method_call" span="57:21:57:25">eval</jtok>
<jtok eid="3" type="primary_name_ref" span="57:27:57:36">callstack</jtok>
<jtok eid="3" type="primary_name_ref" span="57:38:57:49">interpreter</jtok>
</jdoc>