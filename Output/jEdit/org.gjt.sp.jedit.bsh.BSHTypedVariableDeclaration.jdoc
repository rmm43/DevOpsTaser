<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.BSHTypedVariableDeclaration" jls="java5">
<jent id="0" type="file" span="0:0:106:2">Source/jEdit/org/gjt/sp/jedit/bsh/BSHTypedVariableDeclaration.java</jent>
<jent id="1" pid="0" type="class" span="36:1:106:1">org.gjt.sp.jedit.bsh.BSHTypedVariableDeclaration</jent>
<jent id="2" pid="1" type="method" span="40:5:40:54">org.gjt.sp.jedit.bsh.BSHTypedVariableDeclaration.BSHTypedVariableDeclaration(int)</jent>
<jent id="3" pid="1" type="method" span="42:2:44:2">org.gjt.sp.jedit.bsh.BSHTypedVariableDeclaration.getTypeNode()</jent>
<jent id="4" pid="1" type="method" span="46:2:51:2">org.gjt.sp.jedit.bsh.BSHTypedVariableDeclaration.evalType(CallStack,Interpreter)</jent>
<jent id="5" pid="1" type="method" span="53:2:63:2">org.gjt.sp.jedit.bsh.BSHTypedVariableDeclaration.getDeclarators()</jent>
<jent id="6" pid="1" type="method" span="69:5:98:5">org.gjt.sp.jedit.bsh.BSHTypedVariableDeclaration.eval(CallStack,Interpreter)</jent>
<jent id="7" pid="1" type="method" span="100:2:105:2">org.gjt.sp.jedit.bsh.BSHTypedVariableDeclaration.getTypeDescriptor(CallStack,Interpreter,String)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="1" type="class_name" span="36:7:36:34">BSHTypedVariableDeclaration</jtok>
<jtok eid="1" type="class_or_interface_ref" span="36:43:36:53">SimpleNode</jtok>
<jtok eid="1" type="class_or_interface_ref" span="38:9:38:18">Modifiers</jtok>
<jtok eid="1" type="field_name" span="38:19:38:28">modifiers</jtok>
<jtok eid="2" type="method_name" span="40:5:40:32">BSHTypedVariableDeclaration</jtok>
<jtok eid="2" type="parameter_name" span="40:37:40:39">id</jtok>
<jtok eid="2" type="primary_name_ref" span="40:49:40:51">id</jtok>
<jtok eid="3" type="class_or_interface_ref" span="42:10:42:17">BSHType</jtok>
<jtok eid="3" type="method_name" span="42:18:42:29">getTypeNode</jtok>
<jtok eid="3" type="class_or_interface_ref" span="43:12:43:19">BSHType</jtok>
<jtok eid="3" type="method_call" span="43:20:43:31">jjtGetChild</jtok>
<jtok eid="4" type="class_or_interface_ref" span="46:2:46:7">Class</jtok>
<jtok eid="4" type="method_name" span="46:8:46:16">evalType</jtok>
<jtok eid="4" type="parameter_type" span="46:18:46:27">CallStack</jtok>
<jtok eid="4" type="parameter_name" span="46:28:46:37">callstack</jtok>
<jtok eid="4" type="parameter_type" span="46:39:46:50">Interpreter</jtok>
<jtok eid="4" type="parameter_name" span="46:51:46:62">interpreter</jtok>
<jtok eid="4" type="throws" span="47:10:47:19">EvalError</jtok>
<jtok eid="4" type="class_or_interface_ref" span="49:3:49:10">BSHType</jtok>
<jtok eid="4" type="local_variable_name" span="49:11:49:19">typeNode</jtok>
<jtok eid="4" type="method_call" span="49:22:49:33">getTypeNode</jtok>
<jtok eid="4" type="primary_name_ref" span="50:10:50:18">typeNode</jtok>
<jtok eid="4" type="method_call" span="50:19:50:26">getType</jtok>
<jtok eid="4" type="primary_name_ref" span="50:28:50:37">callstack</jtok>
<jtok eid="4" type="primary_name_ref" span="50:39:50:50">interpreter</jtok>
<jtok eid="5" type="class_or_interface_ref" span="53:2:53:23">BSHVariableDeclarator</jtok>
<jtok eid="5" type="method_name" span="53:27:53:41">getDeclarators</jtok>
<jtok eid="5" type="local_variable_name" span="55:7:55:8">n</jtok>
<jtok eid="5" type="method_call" span="55:11:55:28">jjtGetNumChildren</jtok>
<jtok eid="5" type="local_variable_name" span="56:7:56:12">start</jtok>
<jtok eid="5" type="class_or_interface_ref" span="57:3:57:24">BSHVariableDeclarator</jtok>
<jtok eid="5" type="local_variable_name" span="57:28:57:32">bvda</jtok>
<jtok eid="5" type="constructor_call" span="57:39:57:60">BSHVariableDeclarator</jtok>
<jtok eid="5" type="primary_name_ref" span="57:62:57:63">n</jtok>
<jtok eid="5" type="primary_name_ref" span="57:64:57:69">start</jtok>
<jtok eid="5" type="local_variable_name" span="58:12:58:13">i</jtok>
<jtok eid="5" type="primary_name_ref" span="58:16:58:21">start</jtok>
<jtok eid="5" type="primary_name_ref" span="58:23:58:24">i</jtok>
<jtok eid="5" type="primary_name_ref" span="58:27:58:28">n</jtok>
<jtok eid="5" type="primary_name_ref" span="58:30:58:31">i</jtok>
<jtok eid="5" type="primary_name_ref" span="60:4:60:8">bvda</jtok>
<jtok eid="5" type="primary_name_ref" span="60:9:60:10">i</jtok>
<jtok eid="5" type="primary_name_ref" span="60:11:60:16">start</jtok>
<jtok eid="5" type="class_or_interface_ref" span="60:21:60:42">BSHVariableDeclarator</jtok>
<jtok eid="5" type="method_call" span="60:43:60:54">jjtGetChild</jtok>
<jtok eid="5" type="primary_name_ref" span="60:55:60:56">i</jtok>
<jtok eid="5" type="primary_name_ref" span="62:10:62:14">bvda</jtok>
<jtok eid="1" type="block_comment" span="65:2:68:4">/**
		evaluate the type and one or more variable declarators, e.g.:
			int a, b=5, c;
	*/</jtok>
<jtok eid="6" type="class_or_interface_ref" span="69:12:69:18">Object</jtok>
<jtok eid="6" type="method_name" span="69:19:69:23">eval</jtok>
<jtok eid="6" type="parameter_type" span="69:25:69:34">CallStack</jtok>
<jtok eid="6" type="parameter_name" span="69:35:69:44">callstack</jtok>
<jtok eid="6" type="parameter_type" span="69:46:69:57">Interpreter</jtok>
<jtok eid="6" type="parameter_name" span="69:58:69:69">interpreter</jtok>
<jtok eid="6" type="throws" span="70:10:70:19">EvalError</jtok>
<jtok eid="6" type="class_or_interface_ref" span="73:4:73:13">NameSpace</jtok>
<jtok eid="6" type="local_variable_name" span="73:14:73:23">namespace</jtok>
<jtok eid="6" type="primary_name_ref" span="73:26:73:35">callstack</jtok>
<jtok eid="6" type="method_call" span="73:36:73:39">top</jtok>
<jtok eid="6" type="class_or_interface_ref" span="74:4:74:11">BSHType</jtok>
<jtok eid="6" type="local_variable_name" span="74:12:74:20">typeNode</jtok>
<jtok eid="6" type="method_call" span="74:23:74:34">getTypeNode</jtok>
<jtok eid="6" type="class_or_interface_ref" span="75:4:75:9">Class</jtok>
<jtok eid="6" type="local_variable_name" span="75:10:75:14">type</jtok>
<jtok eid="6" type="primary_name_ref" span="75:17:75:25">typeNode</jtok>
<jtok eid="6" type="method_call" span="75:26:75:33">getType</jtok>
<jtok eid="6" type="primary_name_ref" span="75:35:75:44">callstack</jtok>
<jtok eid="6" type="primary_name_ref" span="75:46:75:57">interpreter</jtok>
<jtok eid="6" type="class_or_interface_ref" span="77:4:77:25">BSHVariableDeclarator</jtok>
<jtok eid="6" type="local_variable_name" span="77:29:77:33">bvda</jtok>
<jtok eid="6" type="method_call" span="77:36:77:50">getDeclarators</jtok>
<jtok eid="6" type="local_variable_name" span="78:13:78:14">i</jtok>
<jtok eid="6" type="primary_name_ref" span="78:20:78:21">i</jtok>
<jtok eid="6" type="primary_name_ref" span="78:24:78:28">bvda</jtok>
<jtok eid="6" type="qualified_name_ref" span="78:29:78:35">length</jtok>
<jtok eid="6" type="primary_name_ref" span="78:37:78:38">i</jtok>
<jtok eid="6" type="class_or_interface_ref" span="80:5:80:26">BSHVariableDeclarator</jtok>
<jtok eid="6" type="local_variable_name" span="80:27:80:30">dec</jtok>
<jtok eid="6" type="primary_name_ref" span="80:33:80:37">bvda</jtok>
<jtok eid="6" type="primary_name_ref" span="80:38:80:39">i</jtok>
<jtok eid="6" type="line_comment" span="82:5:82:65">// Type node is passed down the chain for array initializers</jtok>
<jtok eid="6" type="line_comment" span="83:5:83:46">// which need it under some circumstances</jtok>
<jtok eid="6" type="class_or_interface_ref" span="84:5:84:11">Object</jtok>
<jtok eid="6" type="local_variable_name" span="84:12:84:17">value</jtok>
<jtok eid="6" type="primary_name_ref" span="84:20:84:23">dec</jtok>
<jtok eid="6" type="method_call" span="84:24:84:28">eval</jtok>
<jtok eid="6" type="primary_name_ref" span="84:30:84:38">typeNode</jtok>
<jtok eid="6" type="primary_name_ref" span="84:40:84:49">callstack</jtok>
<jtok eid="6" type="primary_name_ref" span="84:51:84:62">interpreter</jtok>
<jtok eid="6" type="primary_name_ref" span="87:6:87:15">namespace</jtok>
<jtok eid="6" type="method_call" span="87:16:87:32">setTypedVariable</jtok>
<jtok eid="6" type="primary_name_ref" span="88:7:88:10">dec</jtok>
<jtok eid="6" type="qualified_name_ref" span="88:11:88:15">name</jtok>
<jtok eid="6" type="primary_name_ref" span="88:17:88:21">type</jtok>
<jtok eid="6" type="primary_name_ref" span="88:23:88:28">value</jtok>
<jtok eid="6" type="primary_name_ref" span="88:30:88:39">modifiers</jtok>
<jtok eid="6" type="class_or_interface_ref" span="89:15:89:28">UtilEvalError</jtok>
<jtok eid="6" type="local_variable_name" span="89:29:89:30">e</jtok>
<jtok eid="6" type="primary_name_ref" span="90:12:90:13">e</jtok>
<jtok eid="6" type="method_call" span="90:14:90:25">toEvalError</jtok>
<jtok eid="6" type="primary_name_ref" span="90:33:90:42">callstack</jtok>
<jtok eid="6" type="class_or_interface_ref" span="93:13:93:22">EvalError</jtok>
<jtok eid="6" type="local_variable_name" span="93:23:93:24">e</jtok>
<jtok eid="6" type="primary_name_ref" span="94:4:94:5">e</jtok>
<jtok eid="6" type="method_call" span="94:6:94:13">reThrow</jtok>
<jtok eid="6" type="string_literal" span="94:15:94:43">"Typed variable declaration"</jtok>
<jtok eid="6" type="primary_name_ref" span="97:16:97:25">Primitive</jtok>
<jtok eid="6" type="qualified_name_ref" span="97:26:97:30">VOID</jtok>
<jtok eid="7" type="class_or_interface_ref" span="100:9:100:15">String</jtok>
<jtok eid="7" type="method_name" span="100:16:100:33">getTypeDescriptor</jtok>
<jtok eid="7" type="parameter_type" span="101:3:101:12">CallStack</jtok>
<jtok eid="7" type="parameter_name" span="101:13:101:22">callstack</jtok>
<jtok eid="7" type="parameter_type" span="101:24:101:35">Interpreter</jtok>
<jtok eid="7" type="parameter_name" span="101:36:101:47">interpreter</jtok>
<jtok eid="7" type="parameter_type" span="101:49:101:55">String</jtok>
<jtok eid="7" type="parameter_name" span="101:56:101:70">defaultPackage</jtok>
<jtok eid="7" type="method_call" span="103:10:103:21">getTypeNode</jtok>
<jtok eid="7" type="method_call" span="103:24:103:41">getTypeDescriptor</jtok>
<jtok eid="7" type="primary_name_ref" span="104:4:104:13">callstack</jtok>
<jtok eid="7" type="primary_name_ref" span="104:15:104:26">interpreter</jtok>
<jtok eid="7" type="primary_name_ref" span="104:28:104:42">defaultPackage</jtok>
</jdoc>