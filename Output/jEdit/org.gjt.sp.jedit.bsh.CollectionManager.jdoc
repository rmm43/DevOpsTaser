<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.CollectionManager" jls="java5">
<jent id="0" type="file" span="0:0:201:2">Source/jEdit/org/gjt/sp/jedit/bsh/CollectionManager.java</jent>
<jent id="1" pid="0" type="class" span="48:1:201:1">org.gjt.sp.jedit.bsh.CollectionManager</jent>
<jent id="2" pid="1" type="method" span="52:5:70:5">org.gjt.sp.jedit.bsh.CollectionManager.getCollectionManager()</jent>
<jent id="3" pid="1" type="method" span="74:5:83:5">org.gjt.sp.jedit.bsh.CollectionManager.isBshIterable(Object)</jent>
<jent id="4" pid="1" type="method" span="85:5:89:5">org.gjt.sp.jedit.bsh.CollectionManager.getBshIterator(Object)</jent>
<jent id="5" pid="1" type="method" span="91:5:93:5">org.gjt.sp.jedit.bsh.CollectionManager.isMap(Object)</jent>
<jent id="6" pid="1" type="method" span="95:5:97:5">org.gjt.sp.jedit.bsh.CollectionManager.getFromMap(Object,Object)</jent>
<jent id="7" pid="1" type="method" span="99:5:102:5">org.gjt.sp.jedit.bsh.CollectionManager.putInMap(Object,Object,Object)</jent>
<jent id="8" pid="1" type="class" span="113:5:200:5">org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator</jent>
<jent id="9" pid="8" type="method" span="127:9:129:9">org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator.BasicBshIterator(Object)</jent>
<jent id="10" pid="8" type="method" span="144:9:180:9">org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator.createEnumeration(Object)</jent>
<jent id="11" pid="10" type="class" span="158:42:164:17">org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator.createEnumeration(Object).$1</jent>
<jent id="12" pid="11" type="method" span="160:21:162:21">org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator.createEnumeration(Object).$1.nextElement()</jent>
<jent id="13" pid="11" type="method" span="163:21:163:77">org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator.createEnumeration(Object).$1.hasMoreElements()</jent>
<jent id="14" pid="8" type="method" span="187:9:189:9">org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator.next()</jent>
<jent id="15" pid="8" type="method" span="197:9:199:9">org.gjt.sp.jedit.bsh.CollectionManager.BasicBshIterator.hasNext()</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    *
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="41:1:47:3">/**
    The default CollectionManager (which remains Java 1.1 compatible)
    supports iteration over objects of type:
    Enumeration, Vector, String, StringBuffer and array.
    The dynamically loaded CollectionManagerImpl supports additional types when
    it is present.
*/</jtok>
<jtok eid="1" type="class_name" span="48:14:48:31">CollectionManager</jtok>
<jtok eid="1" type="class_or_interface_ref" span="50:20:50:37">CollectionManager</jtok>
<jtok eid="1" type="field_name" span="50:38:50:45">manager</jtok>
<jtok eid="2" type="class_or_interface_ref" span="52:32:52:49">CollectionManager</jtok>
<jtok eid="2" type="method_name" span="52:50:52:70">getCollectionManager</jtok>
<jtok eid="2" type="primary_name_ref" span="54:14:54:21">manager</jtok>
<jtok eid="2" type="primary_name_ref" span="55:16:55:28">Capabilities</jtok>
<jtok eid="2" type="method_call" span="55:29:55:40">classExists</jtok>
<jtok eid="2" type="string_literal" span="55:41:55:63">"java.util.Collection"</jtok>
<jtok eid="2" type="class_or_interface_ref" span="57:13:57:18">Class</jtok>
<jtok eid="2" type="local_variable_name" span="57:19:57:23">clas</jtok>
<jtok eid="2" type="primary_name_ref" span="59:17:59:21">clas</jtok>
<jtok eid="2" type="primary_name_ref" span="59:24:59:29">Class</jtok>
<jtok eid="2" type="method_call" span="59:30:59:37">forName</jtok>
<jtok eid="2" type="string_literal" span="59:39:59:94">"org.gjt.sp.jedit.bsh.collection.CollectionManagerImpl"</jtok>
<jtok eid="2" type="primary_name_ref" span="60:17:60:24">manager</jtok>
<jtok eid="2" type="class_or_interface_ref" span="60:28:60:45">CollectionManager</jtok>
<jtok eid="2" type="primary_name_ref" span="60:46:60:50">clas</jtok>
<jtok eid="2" type="method_call" span="60:51:60:62">newInstance</jtok>
<jtok eid="2" type="class_or_interface_ref" span="61:23:61:32">Exception</jtok>
<jtok eid="2" type="local_variable_name" span="61:33:61:34">e</jtok>
<jtok eid="2" type="primary_name_ref" span="62:17:62:28">Interpreter</jtok>
<jtok eid="2" type="method_call" span="62:29:62:34">debug</jtok>
<jtok eid="2" type="string_literal" span="62:35:62:75">"unable to load CollectionManagerImpl: "</jtok>
<jtok eid="2" type="primary_name_ref" span="62:76:62:77">e</jtok>
<jtok eid="2" type="primary_name_ref" span="66:14:66:21">manager</jtok>
<jtok eid="2" type="primary_name_ref" span="67:13:67:20">manager</jtok>
<jtok eid="2" type="constructor_call" span="67:27:67:44">CollectionManager</jtok>
<jtok eid="2" type="line_comment" span="67:48:67:63">// default impl</jtok>
<jtok eid="2" type="primary_name_ref" span="69:16:69:23">manager</jtok>
<jtok eid="1" type="block_comment" span="72:5:73:7">/**
    */</jtok>
<jtok eid="3" type="method_name" span="74:20:74:33">isBshIterable</jtok>
<jtok eid="3" type="parameter_type" span="74:35:74:41">Object</jtok>
<jtok eid="3" type="parameter_name" span="74:42:74:45">obj</jtok>
<jtok eid="3" type="line_comment" span="76:9:76:36">// This could be smarter...</jtok>
<jtok eid="3" type="method_call" span="78:13:78:27">getBshIterator</jtok>
<jtok eid="3" type="primary_name_ref" span="78:29:78:32">obj</jtok>
<jtok eid="3" type="class_or_interface_ref" span="80:18:80:42">IllegalArgumentException</jtok>
<jtok eid="3" type="local_variable_name" span="80:43:80:44">e</jtok>
<jtok eid="4" type="class_or_interface_ref" span="85:12:85:23">BshIterator</jtok>
<jtok eid="4" type="method_name" span="85:24:85:38">getBshIterator</jtok>
<jtok eid="4" type="parameter_type" span="85:40:85:46">Object</jtok>
<jtok eid="4" type="parameter_name" span="85:47:85:50">obj</jtok>
<jtok eid="4" type="throws" span="86:16:86:40">IllegalArgumentException</jtok>
<jtok eid="4" type="constructor_call" span="88:20:88:36">BasicBshIterator</jtok>
<jtok eid="4" type="primary_name_ref" span="88:38:88:41">obj</jtok>
<jtok eid="5" type="method_name" span="91:20:91:25">isMap</jtok>
<jtok eid="5" type="parameter_type" span="91:27:91:33">Object</jtok>
<jtok eid="5" type="parameter_name" span="91:34:91:37">obj</jtok>
<jtok eid="5" type="primary_name_ref" span="92:16:92:19">obj</jtok>
<jtok eid="5" type="class_or_interface_ref" span="92:31:92:40">Hashtable</jtok>
<jtok eid="6" type="class_or_interface_ref" span="95:12:95:18">Object</jtok>
<jtok eid="6" type="method_name" span="95:19:95:29">getFromMap</jtok>
<jtok eid="6" type="parameter_type" span="95:31:95:37">Object</jtok>
<jtok eid="6" type="parameter_name" span="95:38:95:41">map</jtok>
<jtok eid="6" type="parameter_type" span="95:43:95:49">Object</jtok>
<jtok eid="6" type="parameter_name" span="95:50:95:53">key</jtok>
<jtok eid="6" type="class_or_interface_ref" span="96:18:96:27">Hashtable</jtok>
<jtok eid="6" type="primary_name_ref" span="96:28:96:31">map</jtok>
<jtok eid="6" type="method_call" span="96:33:96:36">get</jtok>
<jtok eid="6" type="primary_name_ref" span="96:37:96:40">key</jtok>
<jtok eid="7" type="class_or_interface_ref" span="99:12:99:18">Object</jtok>
<jtok eid="7" type="method_name" span="99:19:99:27">putInMap</jtok>
<jtok eid="7" type="parameter_type" span="99:29:99:35">Object</jtok>
<jtok eid="7" type="parameter_name" span="99:36:99:39">map</jtok>
<jtok eid="7" type="parameter_type" span="99:41:99:47">Object</jtok>
<jtok eid="7" type="parameter_name" span="99:48:99:51">key</jtok>
<jtok eid="7" type="parameter_type" span="99:53:99:59">Object</jtok>
<jtok eid="7" type="parameter_name" span="99:60:99:65">value</jtok>
<jtok eid="7" type="class_or_interface_ref" span="101:18:101:27">Hashtable</jtok>
<jtok eid="7" type="primary_name_ref" span="101:28:101:31">map</jtok>
<jtok eid="7" type="method_call" span="101:33:101:36">put</jtok>
<jtok eid="7" type="primary_name_ref" span="101:37:101:40">key</jtok>
<jtok eid="7" type="primary_name_ref" span="101:42:101:47">value</jtok>
<jtok eid="1" type="block_comment" span="104:5:108:7">/**
        Determine dynamically if the target is an iterator by the presence of a
        pair of next() and hasNext() methods.
    public static boolean isIterator() { }
    */</jtok>
<jtok eid="1" type="block_comment" span="110:5:112:8">/**
     * An implementation that works with JDK 1.1
     */</jtok>
<jtok eid="8" type="class_name" span="113:25:113:41">BasicBshIterator</jtok>
<jtok eid="8" type="class_or_interface_ref" span="113:53:113:64">BshIterator</jtok>
<jtok eid="8" type="class_or_interface_ref" span="115:9:115:20">Enumeration</jtok>
<jtok eid="8" type="field_name" span="115:21:115:32">enumeration</jtok>
<jtok eid="8" type="block_comment" span="117:9:126:12">/**
         * Construct a basic BasicBshIterator
         *
         * @param iterateOverMe The object over which we are iterating
         *
         * @throws java.lang.IllegalArgumentException If the argument is not a
         * supported (i.e. iterable) type.
         *
         * @throws java.lang.NullPointerException If the argument is null
         */</jtok>
<jtok eid="9" type="method_name" span="127:16:127:32">BasicBshIterator</jtok>
<jtok eid="9" type="parameter_type" span="127:33:127:39">Object</jtok>
<jtok eid="9" type="parameter_name" span="127:40:127:53">iterateOverMe</jtok>
<jtok eid="9" type="primary_name_ref" span="128:13:128:24">enumeration</jtok>
<jtok eid="9" type="method_call" span="128:27:128:44">createEnumeration</jtok>
<jtok eid="9" type="primary_name_ref" span="128:45:128:58">iterateOverMe</jtok>
<jtok eid="8" type="block_comment" span="131:9:143:12">/**
         * Create an enumeration over the given object
         *
         * @param iterateOverMe Object of type Enumeration, Vector, String,
         *                      StringBuffer or an array
         *
         * @return an enumeration
         *
         * @throws java.lang.IllegalArgumentException If the argument is not a
         * supported (i.e. iterable) type.
         *
         * @throws java.lang.NullPointerException If the argument is null
         */</jtok>
<jtok eid="10" type="class_or_interface_ref" span="144:19:144:30">Enumeration</jtok>
<jtok eid="10" type="method_name" span="144:31:144:48">createEnumeration</jtok>
<jtok eid="10" type="parameter_type" span="144:50:144:56">Object</jtok>
<jtok eid="10" type="parameter_name" span="144:57:144:70">iterateOverMe</jtok>
<jtok eid="10" type="primary_name_ref" span="146:16:146:29">iterateOverMe</jtok>
<jtok eid="10" type="constructor_call" span="147:27:147:47">NullPointerException</jtok>
<jtok eid="10" type="string_literal" span="147:48:147:77">"Object arguments passed to "</jtok>
<jtok eid="10" type="string_literal" span="148:21:148:71">"the BasicBshIterator constructor cannot be null."</jtok>
<jtok eid="10" type="primary_name_ref" span="150:17:150:30">iterateOverMe</jtok>
<jtok eid="10" type="class_or_interface_ref" span="150:42:150:53">Enumeration</jtok>
<jtok eid="10" type="class_or_interface_ref" span="151:25:151:36">Enumeration</jtok>
<jtok eid="10" type="primary_name_ref" span="151:37:151:50">iterateOverMe</jtok>
<jtok eid="10" type="primary_name_ref" span="153:17:153:30">iterateOverMe</jtok>
<jtok eid="10" type="class_or_interface_ref" span="153:42:153:48">Vector</jtok>
<jtok eid="10" type="class_or_interface_ref" span="154:26:154:32">Vector</jtok>
<jtok eid="10" type="primary_name_ref" span="154:33:154:46">iterateOverMe</jtok>
<jtok eid="10" type="method_call" span="154:48:154:56">elements</jtok>
<jtok eid="10" type="primary_name_ref" span="156:17:156:30">iterateOverMe</jtok>
<jtok eid="10" type="method_call" span="156:31:156:39">getClass</jtok>
<jtok eid="10" type="method_call" span="156:42:156:49">isArray</jtok>
<jtok eid="10" type="class_or_interface_ref" span="157:23:157:29">Object</jtok>
<jtok eid="10" type="local_variable_name" span="157:30:157:35">array</jtok>
<jtok eid="10" type="primary_name_ref" span="157:38:157:51">iterateOverMe</jtok>
<jtok eid="10" type="constructor_call" span="158:28:158:39">Enumeration</jtok>
<jtok eid="11" type="field_name" span="159:25:159:30">index</jtok>
<jtok eid="11" type="field_name" span="159:36:159:42">length</jtok>
<jtok eid="11" type="primary_name_ref" span="159:45:159:50">Array</jtok>
<jtok eid="11" type="method_call" span="159:51:159:60">getLength</jtok>
<jtok eid="11" type="primary_name_ref" span="159:61:159:66">array</jtok>
<jtok eid="12" type="class_or_interface_ref" span="160:28:160:34">Object</jtok>
<jtok eid="12" type="method_name" span="160:35:160:46">nextElement</jtok>
<jtok eid="12" type="primary_name_ref" span="161:32:161:37">Array</jtok>
<jtok eid="12" type="method_call" span="161:38:161:41">get</jtok>
<jtok eid="12" type="primary_name_ref" span="161:42:161:47">array</jtok>
<jtok eid="12" type="primary_name_ref" span="161:49:161:54">index</jtok>
<jtok eid="13" type="method_name" span="163:36:163:51">hasMoreElements</jtok>
<jtok eid="13" type="primary_name_ref" span="163:63:163:68">index</jtok>
<jtok eid="13" type="primary_name_ref" span="163:69:163:75">length</jtok>
<jtok eid="10" type="primary_name_ref" span="167:17:167:30">iterateOverMe</jtok>
<jtok eid="10" type="class_or_interface_ref" span="167:42:167:48">String</jtok>
<jtok eid="10" type="method_call" span="168:24:168:41">createEnumeration</jtok>
<jtok eid="10" type="class_or_interface_ref" span="168:44:168:50">String</jtok>
<jtok eid="10" type="primary_name_ref" span="168:51:168:64">iterateOverMe</jtok>
<jtok eid="10" type="method_call" span="168:66:168:77">toCharArray</jtok>
<jtok eid="10" type="primary_name_ref" span="170:17:170:30">iterateOverMe</jtok>
<jtok eid="10" type="class_or_interface_ref" span="170:42:170:54">StringBuffer</jtok>
<jtok eid="10" type="method_call" span="171:24:171:41">createEnumeration</jtok>
<jtok eid="10" type="primary_name_ref" span="172:21:172:34">iterateOverMe</jtok>
<jtok eid="10" type="method_call" span="172:35:172:43">toString</jtok>
<jtok eid="10" type="method_call" span="172:46:172:57">toCharArray</jtok>
<jtok eid="10" type="primary_name_ref" span="174:17:174:30">iterateOverMe</jtok>
<jtok eid="10" type="class_or_interface_ref" span="174:42:174:55">StringBuilder</jtok>
<jtok eid="10" type="method_call" span="175:24:175:41">createEnumeration</jtok>
<jtok eid="10" type="primary_name_ref" span="176:21:176:34">iterateOverMe</jtok>
<jtok eid="10" type="method_call" span="176:35:176:43">toString</jtok>
<jtok eid="10" type="method_call" span="176:46:176:57">toCharArray</jtok>
<jtok eid="10" type="constructor_call" span="178:23:178:47">IllegalArgumentException</jtok>
<jtok eid="10" type="string_literal" span="179:17:179:51">"Cannot enumerate object of type "</jtok>
<jtok eid="10" type="primary_name_ref" span="179:52:179:65">iterateOverMe</jtok>
<jtok eid="10" type="method_call" span="179:66:179:74">getClass</jtok>
<jtok eid="8" type="block_comment" span="182:9:186:12">/**
         * Fetch the next object in the iteration
         *
         * @return The next object
         */</jtok>
<jtok eid="14" type="class_or_interface_ref" span="187:16:187:22">Object</jtok>
<jtok eid="14" type="method_name" span="187:23:187:27">next</jtok>
<jtok eid="14" type="primary_name_ref" span="188:21:188:32">enumeration</jtok>
<jtok eid="14" type="method_call" span="188:33:188:44">nextElement</jtok>
<jtok eid="8" type="block_comment" span="191:9:196:12">/**
         * Returns true if and only if there are more objects available
         * via the &lt;code&gt;next()&lt;/code&gt; method
         *
         * @return The next object
         */</jtok>
<jtok eid="15" type="method_name" span="197:24:197:31">hasNext</jtok>
<jtok eid="15" type="primary_name_ref" span="198:20:198:31">enumeration</jtok>
<jtok eid="15" type="method_call" span="198:32:198:47">hasMoreElements</jtok>
</jdoc>