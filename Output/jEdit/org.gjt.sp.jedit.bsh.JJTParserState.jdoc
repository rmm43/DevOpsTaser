<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.JJTParserState" jls="java5">
<jent id="0" type="file" span="0:0:123:2">Source/jEdit/org/gjt/sp/jedit/bsh/JJTParserState.java</jent>
<jent id="1" pid="0" type="class" span="5:1:123:1">org.gjt.sp.jedit.bsh.JJTParserState</jent>
<jent id="2" pid="1" type="method" span="13:3:18:3">org.gjt.sp.jedit.bsh.JJTParserState.JJTParserState()</jent>
<jent id="3" pid="1" type="method" span="23:3:25:3">org.gjt.sp.jedit.bsh.JJTParserState.nodeCreated()</jent>
<jent id="4" pid="1" type="method" span="29:3:34:3">org.gjt.sp.jedit.bsh.JJTParserState.reset()</jent>
<jent id="5" pid="1" type="method" span="38:3:40:3">org.gjt.sp.jedit.bsh.JJTParserState.rootNode()</jent>
<jent id="6" pid="1" type="method" span="43:3:46:3">org.gjt.sp.jedit.bsh.JJTParserState.pushNode(Node)</jent>
<jent id="7" pid="1" type="method" span="50:3:55:3">org.gjt.sp.jedit.bsh.JJTParserState.popNode()</jent>
<jent id="8" pid="1" type="method" span="58:3:60:3">org.gjt.sp.jedit.bsh.JJTParserState.peekNode()</jent>
<jent id="9" pid="1" type="method" span="64:3:66:3">org.gjt.sp.jedit.bsh.JJTParserState.nodeArity()</jent>
<jent id="10" pid="1" type="method" span="69:3:74:3">org.gjt.sp.jedit.bsh.JJTParserState.clearNodeScope(Node)</jent>
<jent id="11" pid="1" type="method" span="77:3:81:3">org.gjt.sp.jedit.bsh.JJTParserState.openNodeScope(Node)</jent>
<jent id="12" pid="1" type="method" span="88:3:98:3">org.gjt.sp.jedit.bsh.JJTParserState.closeNodeScope(Node,int)</jent>
<jent id="13" pid="1" type="method" span="106:3:122:3">org.gjt.sp.jedit.bsh.JJTParserState.closeNodeScope(Node,boolean)</jent>
<jtok eid="0" type="block_comment" span="1:1:1:78">/* Generated By:JJTree: Do not edit this line. src/bsh/JJTParserState.java */</jtok>
<jtok eid="1" type="class_name" span="5:7:5:21">JJTParserState</jtok>
<jtok eid="1" type="class_or_interface_ref" span="6:11:6:15">java</jtok>
<jtok eid="1" type="class_or_interface_ref" span="6:16:6:20">util</jtok>
<jtok eid="1" type="class_or_interface_ref" span="6:21:6:26">Stack</jtok>
<jtok eid="1" type="field_name" span="6:27:6:32">nodes</jtok>
<jtok eid="1" type="class_or_interface_ref" span="7:11:7:15">java</jtok>
<jtok eid="1" type="class_or_interface_ref" span="7:16:7:20">util</jtok>
<jtok eid="1" type="class_or_interface_ref" span="7:21:7:26">Stack</jtok>
<jtok eid="1" type="field_name" span="7:27:7:32">marks</jtok>
<jtok eid="1" type="field_name" span="9:15:9:17">sp</jtok>
<jtok eid="1" type="line_comment" span="9:20:9:47">// number of nodes on stack</jtok>
<jtok eid="1" type="field_name" span="10:15:10:17">mk</jtok>
<jtok eid="1" type="line_comment" span="10:20:10:35">// current mark</jtok>
<jtok eid="1" type="field_name" span="11:19:11:31">node_created</jtok>
<jtok eid="2" type="method_name" span="13:3:13:17">JJTParserState</jtok>
<jtok eid="2" type="primary_name_ref" span="14:5:14:10">nodes</jtok>
<jtok eid="2" type="constructor_call" span="14:17:14:21">java</jtok>
<jtok eid="2" type="constructor_call" span="14:22:14:26">util</jtok>
<jtok eid="2" type="constructor_call" span="14:27:14:32">Stack</jtok>
<jtok eid="2" type="primary_name_ref" span="15:5:15:10">marks</jtok>
<jtok eid="2" type="constructor_call" span="15:17:15:21">java</jtok>
<jtok eid="2" type="constructor_call" span="15:22:15:26">util</jtok>
<jtok eid="2" type="constructor_call" span="15:27:15:32">Stack</jtok>
<jtok eid="2" type="primary_name_ref" span="16:5:16:7">sp</jtok>
<jtok eid="2" type="primary_name_ref" span="17:5:17:7">mk</jtok>
<jtok eid="1" type="block_comment" span="20:3:22:21">/* Determines whether the current node was actually closed and
     pushed.  This should only be called in the final user action of a
     node scope.  */</jtok>
<jtok eid="3" type="method_name" span="23:11:23:22">nodeCreated</jtok>
<jtok eid="3" type="primary_name_ref" span="24:12:24:24">node_created</jtok>
<jtok eid="1" type="block_comment" span="27:3:28:55">/* Call this to reinitialize the node stack.  It is called
     automatically by the parser's ReInit() method. */</jtok>
<jtok eid="4" type="method_name" span="29:8:29:13">reset</jtok>
<jtok eid="4" type="primary_name_ref" span="30:5:30:10">nodes</jtok>
<jtok eid="4" type="method_call" span="30:11:30:28">removeAllElements</jtok>
<jtok eid="4" type="primary_name_ref" span="31:5:31:10">marks</jtok>
<jtok eid="4" type="method_call" span="31:11:31:28">removeAllElements</jtok>
<jtok eid="4" type="primary_name_ref" span="32:5:32:7">sp</jtok>
<jtok eid="4" type="primary_name_ref" span="33:5:33:7">mk</jtok>
<jtok eid="1" type="block_comment" span="36:3:37:39">/* Returns the root node of the AST.  It only makes sense to call
     this after a successful parse. */</jtok>
<jtok eid="5" type="class_or_interface_ref" span="38:3:38:7">Node</jtok>
<jtok eid="5" type="method_name" span="38:8:38:16">rootNode</jtok>
<jtok eid="5" type="class_or_interface_ref" span="39:13:39:17">Node</jtok>
<jtok eid="5" type="primary_name_ref" span="39:18:39:23">nodes</jtok>
<jtok eid="5" type="method_call" span="39:24:39:33">elementAt</jtok>
<jtok eid="1" type="block_comment" span="42:3:42:39">/* Pushes a node on to the stack. */</jtok>
<jtok eid="6" type="method_name" span="43:8:43:16">pushNode</jtok>
<jtok eid="6" type="parameter_type" span="43:17:43:21">Node</jtok>
<jtok eid="6" type="parameter_name" span="43:22:43:23">n</jtok>
<jtok eid="6" type="primary_name_ref" span="44:5:44:10">nodes</jtok>
<jtok eid="6" type="method_call" span="44:11:44:15">push</jtok>
<jtok eid="6" type="primary_name_ref" span="44:16:44:17">n</jtok>
<jtok eid="6" type="primary_name_ref" span="45:7:45:9">sp</jtok>
<jtok eid="1" type="block_comment" span="48:3:49:16">/* Returns the node on the top of the stack, and remove it from the
     stack.  */</jtok>
<jtok eid="7" type="class_or_interface_ref" span="50:3:50:7">Node</jtok>
<jtok eid="7" type="method_name" span="50:8:50:15">popNode</jtok>
<jtok eid="7" type="primary_name_ref" span="51:11:51:13">sp</jtok>
<jtok eid="7" type="primary_name_ref" span="51:16:51:18">mk</jtok>
<jtok eid="7" type="primary_name_ref" span="52:7:52:9">mk</jtok>
<jtok eid="7" type="class_or_interface_ref" span="52:14:52:21">Integer</jtok>
<jtok eid="7" type="primary_name_ref" span="52:22:52:27">marks</jtok>
<jtok eid="7" type="method_call" span="52:28:52:31">pop</jtok>
<jtok eid="7" type="method_call" span="52:35:52:43">intValue</jtok>
<jtok eid="7" type="class_or_interface_ref" span="54:13:54:17">Node</jtok>
<jtok eid="7" type="primary_name_ref" span="54:18:54:23">nodes</jtok>
<jtok eid="7" type="method_call" span="54:24:54:27">pop</jtok>
<jtok eid="1" type="block_comment" span="57:3:57:60">/* Returns the node currently on the top of the stack. */</jtok>
<jtok eid="8" type="class_or_interface_ref" span="58:3:58:7">Node</jtok>
<jtok eid="8" type="method_name" span="58:8:58:16">peekNode</jtok>
<jtok eid="8" type="class_or_interface_ref" span="59:13:59:17">Node</jtok>
<jtok eid="8" type="primary_name_ref" span="59:18:59:23">nodes</jtok>
<jtok eid="8" type="method_call" span="59:24:59:28">peek</jtok>
<jtok eid="1" type="block_comment" span="62:3:63:15">/* Returns the number of children on the stack in the current node
     scope. */</jtok>
<jtok eid="9" type="method_name" span="64:7:64:16">nodeArity</jtok>
<jtok eid="9" type="primary_name_ref" span="65:12:65:14">sp</jtok>
<jtok eid="9" type="primary_name_ref" span="65:17:65:19">mk</jtok>
<jtok eid="10" type="method_name" span="69:8:69:22">clearNodeScope</jtok>
<jtok eid="10" type="parameter_type" span="69:23:69:27">Node</jtok>
<jtok eid="10" type="parameter_name" span="69:28:69:29">n</jtok>
<jtok eid="10" type="primary_name_ref" span="70:12:70:14">sp</jtok>
<jtok eid="10" type="primary_name_ref" span="70:17:70:19">mk</jtok>
<jtok eid="10" type="method_call" span="71:7:71:14">popNode</jtok>
<jtok eid="10" type="primary_name_ref" span="73:5:73:7">mk</jtok>
<jtok eid="10" type="class_or_interface_ref" span="73:12:73:19">Integer</jtok>
<jtok eid="10" type="primary_name_ref" span="73:20:73:25">marks</jtok>
<jtok eid="10" type="method_call" span="73:26:73:29">pop</jtok>
<jtok eid="10" type="method_call" span="73:33:73:41">intValue</jtok>
<jtok eid="11" type="method_name" span="77:8:77:21">openNodeScope</jtok>
<jtok eid="11" type="parameter_type" span="77:22:77:26">Node</jtok>
<jtok eid="11" type="parameter_name" span="77:27:77:28">n</jtok>
<jtok eid="11" type="primary_name_ref" span="78:5:78:10">marks</jtok>
<jtok eid="11" type="method_call" span="78:11:78:15">push</jtok>
<jtok eid="11" type="constructor_call" span="78:20:78:27">Integer</jtok>
<jtok eid="11" type="primary_name_ref" span="78:28:78:30">mk</jtok>
<jtok eid="11" type="primary_name_ref" span="79:5:79:7">mk</jtok>
<jtok eid="11" type="primary_name_ref" span="79:10:79:12">sp</jtok>
<jtok eid="11" type="primary_name_ref" span="80:5:80:6">n</jtok>
<jtok eid="11" type="method_call" span="80:7:80:14">jjtOpen</jtok>
<jtok eid="1" type="block_comment" span="84:3:87:35">/* A definite node is constructed from a specified number of
     children.  That number of nodes are popped from the stack and
     made the children of the definite node.  Then the definite node
     is pushed on to the stack. */</jtok>
<jtok eid="12" type="method_name" span="88:8:88:22">closeNodeScope</jtok>
<jtok eid="12" type="parameter_type" span="88:23:88:27">Node</jtok>
<jtok eid="12" type="parameter_name" span="88:28:88:29">n</jtok>
<jtok eid="12" type="parameter_name" span="88:35:88:38">num</jtok>
<jtok eid="12" type="primary_name_ref" span="89:5:89:7">mk</jtok>
<jtok eid="12" type="class_or_interface_ref" span="89:12:89:19">Integer</jtok>
<jtok eid="12" type="primary_name_ref" span="89:20:89:25">marks</jtok>
<jtok eid="12" type="method_call" span="89:26:89:29">pop</jtok>
<jtok eid="12" type="method_call" span="89:33:89:41">intValue</jtok>
<jtok eid="12" type="primary_name_ref" span="90:12:90:15">num</jtok>
<jtok eid="12" type="class_or_interface_ref" span="91:7:91:11">Node</jtok>
<jtok eid="12" type="local_variable_name" span="91:12:91:13">c</jtok>
<jtok eid="12" type="method_call" span="91:16:91:23">popNode</jtok>
<jtok eid="12" type="primary_name_ref" span="92:7:92:8">c</jtok>
<jtok eid="12" type="method_call" span="92:9:92:21">jjtSetParent</jtok>
<jtok eid="12" type="primary_name_ref" span="92:22:92:23">n</jtok>
<jtok eid="12" type="primary_name_ref" span="93:7:93:8">n</jtok>
<jtok eid="12" type="method_call" span="93:9:93:20">jjtAddChild</jtok>
<jtok eid="12" type="primary_name_ref" span="93:21:93:22">c</jtok>
<jtok eid="12" type="primary_name_ref" span="93:24:93:27">num</jtok>
<jtok eid="12" type="primary_name_ref" span="95:5:95:6">n</jtok>
<jtok eid="12" type="method_call" span="95:7:95:15">jjtClose</jtok>
<jtok eid="12" type="method_call" span="96:5:96:13">pushNode</jtok>
<jtok eid="12" type="primary_name_ref" span="96:14:96:15">n</jtok>
<jtok eid="12" type="primary_name_ref" span="97:5:97:17">node_created</jtok>
<jtok eid="1" type="block_comment" span="101:3:105:52">/* A conditional node is constructed if its condition is true.  All
     the nodes that have been pushed since the node was opened are
     made children of the the conditional node, which is then pushed
     on to the stack.  If the condition is false the node is not
     constructed and they are left on the stack. */</jtok>
<jtok eid="13" type="method_name" span="106:8:106:22">closeNodeScope</jtok>
<jtok eid="13" type="parameter_type" span="106:23:106:27">Node</jtok>
<jtok eid="13" type="parameter_name" span="106:28:106:29">n</jtok>
<jtok eid="13" type="parameter_name" span="106:39:106:48">condition</jtok>
<jtok eid="13" type="primary_name_ref" span="107:9:107:18">condition</jtok>
<jtok eid="13" type="local_variable_name" span="108:11:108:12">a</jtok>
<jtok eid="13" type="method_call" span="108:15:108:24">nodeArity</jtok>
<jtok eid="13" type="primary_name_ref" span="109:7:109:9">mk</jtok>
<jtok eid="13" type="class_or_interface_ref" span="109:14:109:21">Integer</jtok>
<jtok eid="13" type="primary_name_ref" span="109:22:109:27">marks</jtok>
<jtok eid="13" type="method_call" span="109:28:109:31">pop</jtok>
<jtok eid="13" type="method_call" span="109:35:109:43">intValue</jtok>
<jtok eid="13" type="primary_name_ref" span="110:14:110:15">a</jtok>
<jtok eid="13" type="class_or_interface_ref" span="111:2:111:6">Node</jtok>
<jtok eid="13" type="local_variable_name" span="111:7:111:8">c</jtok>
<jtok eid="13" type="method_call" span="111:11:111:18">popNode</jtok>
<jtok eid="13" type="primary_name_ref" span="112:2:112:3">c</jtok>
<jtok eid="13" type="method_call" span="112:4:112:16">jjtSetParent</jtok>
<jtok eid="13" type="primary_name_ref" span="112:17:112:18">n</jtok>
<jtok eid="13" type="primary_name_ref" span="113:2:113:3">n</jtok>
<jtok eid="13" type="method_call" span="113:4:113:15">jjtAddChild</jtok>
<jtok eid="13" type="primary_name_ref" span="113:16:113:17">c</jtok>
<jtok eid="13" type="primary_name_ref" span="113:19:113:20">a</jtok>
<jtok eid="13" type="primary_name_ref" span="115:7:115:8">n</jtok>
<jtok eid="13" type="method_call" span="115:9:115:17">jjtClose</jtok>
<jtok eid="13" type="method_call" span="116:7:116:15">pushNode</jtok>
<jtok eid="13" type="primary_name_ref" span="116:16:116:17">n</jtok>
<jtok eid="13" type="primary_name_ref" span="117:7:117:19">node_created</jtok>
<jtok eid="13" type="primary_name_ref" span="119:7:119:9">mk</jtok>
<jtok eid="13" type="class_or_interface_ref" span="119:14:119:21">Integer</jtok>
<jtok eid="13" type="primary_name_ref" span="119:22:119:27">marks</jtok>
<jtok eid="13" type="method_call" span="119:28:119:31">pop</jtok>
<jtok eid="13" type="method_call" span="119:35:119:43">intValue</jtok>
<jtok eid="13" type="primary_name_ref" span="120:7:120:19">node_created</jtok>
</jdoc>