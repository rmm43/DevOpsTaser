<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.NameSpace" jls="java5">
<jent id="0" type="file" span="0:0:1704:1">Source/jEdit/org/gjt/sp/jedit/bsh/NameSpace.java</jent>
<jent id="1" pid="0" type="class" span="65:1:1703:1">org.gjt.sp.jedit.bsh.NameSpace</jent>
<jent id="2" pid="1" type="method" span="124:5:127:5">org.gjt.sp.jedit.bsh.NameSpace.setClassStatic(Class)</jent>
<jent id="3" pid="1" type="method" span="128:5:131:5">org.gjt.sp.jedit.bsh.NameSpace.setClassInstance(Object)</jent>
<jent id="4" pid="1" type="method" span="132:5:146:5">org.gjt.sp.jedit.bsh.NameSpace.getClassInstance()</jent>
<jent id="5" pid="1" type="method" span="167:5:171:5">org.gjt.sp.jedit.bsh.NameSpace.NameSpace(NameSpace,String)</jent>
<jent id="6" pid="1" type="method" span="173:5:176:5">org.gjt.sp.jedit.bsh.NameSpace.NameSpace(BshClassManager,String)</jent>
<jent id="7" pid="1" type="method" span="178:5:193:5">org.gjt.sp.jedit.bsh.NameSpace.NameSpace(NameSpace,BshClassManager,String)</jent>
<jent id="8" pid="1" type="method" span="197:5:199:5">org.gjt.sp.jedit.bsh.NameSpace.setName(String)</jent>
<jent id="9" pid="1" type="method" span="206:5:208:5">org.gjt.sp.jedit.bsh.NameSpace.getName()</jent>
<jent id="10" pid="1" type="method" span="215:5:217:5">org.gjt.sp.jedit.bsh.NameSpace.setNode(SimpleNode)</jent>
<jent id="11" pid="1" type="method" span="221:5:229:5">org.gjt.sp.jedit.bsh.NameSpace.getNode()</jent>
<jent id="12" pid="1" type="method" span="234:5:239:5">org.gjt.sp.jedit.bsh.NameSpace.get(String,Interpreter)</jent>
<jent id="13" pid="1" type="method" span="256:5:262:5">org.gjt.sp.jedit.bsh.NameSpace.setVariable(String,Object,boolean)</jent>
<jent id="14" pid="1" type="method" span="267:5:272:5">org.gjt.sp.jedit.bsh.NameSpace.setLocalVariable(String,Object,boolean)</jent>
<jent id="15" pid="1" type="method" span="297:5:347:5">org.gjt.sp.jedit.bsh.NameSpace.setVariable(String,Object,boolean,boolean)</jent>
<jent id="16" pid="1" type="method" span="352:5:359:5">org.gjt.sp.jedit.bsh.NameSpace.unsetVariable(String)</jent>
<jent id="17" pid="1" type="method" span="365:5:370:5">org.gjt.sp.jedit.bsh.NameSpace.getVariableNames()</jent>
<jent id="18" pid="1" type="method" span="376:5:382:5">org.gjt.sp.jedit.bsh.NameSpace.getMethodNames()</jent>
<jent id="19" pid="1" type="method" span="389:5:395:5">org.gjt.sp.jedit.bsh.NameSpace.getMethods()</jent>
<jent id="20" pid="1" type="method" span="397:5:404:5">org.gjt.sp.jedit.bsh.NameSpace.enumerationToStringArray(Enumeration)</jent>
<jent id="21" pid="1" type="method" span="410:5:425:5">org.gjt.sp.jedit.bsh.NameSpace.flattenMethodCollection(Enumeration)</jent>
<jent id="22" pid="1" type="method" span="432:5:434:5">org.gjt.sp.jedit.bsh.NameSpace.getParent()</jent>
<jent id="23" pid="1" type="method" span="440:5:446:5">org.gjt.sp.jedit.bsh.NameSpace.getSuper(Interpreter)</jent>
<jent id="24" pid="1" type="method" span="453:5:459:5">org.gjt.sp.jedit.bsh.NameSpace.getGlobal(Interpreter)</jent>
<jent id="25" pid="1" type="method" span="491:5:497:5">org.gjt.sp.jedit.bsh.NameSpace.getThis(Interpreter)</jent>
<jent id="26" pid="1" type="method" span="499:5:511:5">org.gjt.sp.jedit.bsh.NameSpace.getClassManager()</jent>
<jent id="27" pid="1" type="method" span="513:5:515:5">org.gjt.sp.jedit.bsh.NameSpace.setClassManager(BshClassManager)</jent>
<jent id="28" pid="1" type="method" span="520:5:534:5">org.gjt.sp.jedit.bsh.NameSpace.prune()</jent>
<jent id="29" pid="1" type="method" span="536:5:543:5">org.gjt.sp.jedit.bsh.NameSpace.setParent(NameSpace)</jent>
<jent id="30" pid="1" type="method" span="555:5:559:5">org.gjt.sp.jedit.bsh.NameSpace.getVariable(String)</jent>
<jent id="31" pid="1" type="method" span="573:5:578:5">org.gjt.sp.jedit.bsh.NameSpace.getVariable(String,boolean)</jent>
<jent id="32" pid="1" type="method" span="588:5:610:5">org.gjt.sp.jedit.bsh.NameSpace.getVariableImpl(String,boolean)</jent>
<jent id="33" pid="1" type="method" span="615:5:624:5">org.gjt.sp.jedit.bsh.NameSpace.getDeclaredVariables()</jent>
<jent id="34" pid="1" type="method" span="631:5:635:5">org.gjt.sp.jedit.bsh.NameSpace.unwrapVariable(Variable)</jent>
<jent id="35" pid="1" type="method" span="640:5:648:5">org.gjt.sp.jedit.bsh.NameSpace.setTypedVariable(String,Class,Object,boolean)</jent>
<jent id="36" pid="1" type="method" span="669:5:717:5">org.gjt.sp.jedit.bsh.NameSpace.setTypedVariable(String,Class,Object,Modifiers)</jent>
<jent id="37" pid="1" type="method" span="736:5:796:5">org.gjt.sp.jedit.bsh.NameSpace.setMethod(String,BshMethod)</jent>
<jent id="38" pid="1" type="method" span="802:5:806:5">org.gjt.sp.jedit.bsh.NameSpace.getMethod(String,Class[])</jent>
<jent id="39" pid="1" type="method" span="821:5:870:5">org.gjt.sp.jedit.bsh.NameSpace.getMethod(String,Class[],boolean)</jent>
<jent id="40" pid="1" type="method" span="876:5:883:5">org.gjt.sp.jedit.bsh.NameSpace.importClass(String)</jent>
<jent id="41" pid="1" type="method" span="888:5:899:5">org.gjt.sp.jedit.bsh.NameSpace.importPackage(String)</jent>
<jent id="42" pid="1" type="method" span="908:5:928:5">org.gjt.sp.jedit.bsh.NameSpace.importCommands(String)</jent>
<jent id="43" pid="1" type="method" span="958:5:986:5">org.gjt.sp.jedit.bsh.NameSpace.getCommand(String,Class[],Interpreter)</jent>
<jent id="44" pid="1" type="method" span="1038:5:1065:5">org.gjt.sp.jedit.bsh.NameSpace.getImportedMethod(String,Class[])</jent>
<jent id="45" pid="1" type="method" span="1067:5:1095:5">org.gjt.sp.jedit.bsh.NameSpace.getImportedVar(String)</jent>
<jent id="46" pid="1" type="method" span="1107:5:1135:5">org.gjt.sp.jedit.bsh.NameSpace.loadScriptedCommand(InputStream,String,Class[],String,Interpreter)</jent>
<jent id="47" pid="1" type="method" span="1140:5:1147:5">org.gjt.sp.jedit.bsh.NameSpace.cacheClass(String,Class)</jent>
<jent id="48" pid="1" type="method" span="1156:5:1168:5">org.gjt.sp.jedit.bsh.NameSpace.getClass(String)</jent>
<jent id="49" pid="1" type="method" span="1187:5:1230:5">org.gjt.sp.jedit.bsh.NameSpace.getClassImpl(String)</jent>
<jent id="50" pid="1" type="method" span="1237:5:1314:5">org.gjt.sp.jedit.bsh.NameSpace.getImportedClassImpl(String)</jent>
<jent id="51" pid="1" type="method" span="1316:5:1319:5">org.gjt.sp.jedit.bsh.NameSpace.classForName(String)</jent>
<jent id="52" pid="1" type="method" span="1326:5:1333:5">org.gjt.sp.jedit.bsh.NameSpace.getAllNames()</jent>
<jent id="53" pid="1" type="method" span="1338:5:1350:5">org.gjt.sp.jedit.bsh.NameSpace.getAllNamesAux(Vector)</jent>
<jent id="54" pid="1" type="method" span="1357:5:1361:5">org.gjt.sp.jedit.bsh.NameSpace.addNameSourceListener(NameSource.Listener)</jent>
<jent id="55" pid="1" type="method" span="1367:5:1371:5">org.gjt.sp.jedit.bsh.NameSpace.doSuperImport()</jent>
<jent id="56" pid="1" type="method" span="1374:5:1383:5">org.gjt.sp.jedit.bsh.NameSpace.toString()</jent>
<jent id="57" pid="1" type="method" span="1389:5:1396:5">org.gjt.sp.jedit.bsh.NameSpace.writeObject(java.io.ObjectOutputStream)</jent>
<jent id="58" pid="1" type="method" span="1406:5:1412:5">org.gjt.sp.jedit.bsh.NameSpace.invokeMethod(String,Object[],Interpreter)</jent>
<jent id="59" pid="1" type="method" span="1419:5:1427:5">org.gjt.sp.jedit.bsh.NameSpace.invokeMethod(String,Object[],Interpreter,CallStack,SimpleNode)</jent>
<jent id="60" pid="1" type="method" span="1432:5:1434:5">org.gjt.sp.jedit.bsh.NameSpace.classLoaderChanged()</jent>
<jent id="61" pid="1" type="method" span="1439:5:1442:5">org.gjt.sp.jedit.bsh.NameSpace.nameSpaceChanged()</jent>
<jent id="62" pid="1" type="method" span="1460:5:1478:5">org.gjt.sp.jedit.bsh.NameSpace.loadDefaultImports()</jent>
<jent id="63" pid="1" type="method" span="1501:5:1514:5">org.gjt.sp.jedit.bsh.NameSpace.getNameResolver(String)</jent>
<jent id="64" pid="1" type="method" span="1516:5:1522:5">org.gjt.sp.jedit.bsh.NameSpace.getInvocationLine()</jent>
<jent id="65" pid="1" type="method" span="1523:5:1529:5">org.gjt.sp.jedit.bsh.NameSpace.getInvocationText()</jent>
<jent id="66" pid="1" type="method" span="1540:5:1543:5">org.gjt.sp.jedit.bsh.NameSpace.identifierToClass(ClassIdentifier)</jent>
<jent id="67" pid="1" type="method" span="1552:5:1564:5">org.gjt.sp.jedit.bsh.NameSpace.clear()</jent>
<jent id="68" pid="1" type="method" span="1578:5:1590:5">org.gjt.sp.jedit.bsh.NameSpace.importObject(Object)</jent>
<jent id="69" pid="1" type="method" span="1594:5:1605:5">org.gjt.sp.jedit.bsh.NameSpace.importStatic(Class)</jent>
<jent id="70" pid="1" type="method" span="1611:5:1614:5">org.gjt.sp.jedit.bsh.NameSpace.setPackage(String)</jent>
<jent id="71" pid="1" type="method" span="1616:5:1625:5">org.gjt.sp.jedit.bsh.NameSpace.getPackage()</jent>
<jent id="72" pid="1" type="method" span="1628:5:1631:9">org.gjt.sp.jedit.bsh.NameSpace.setVariable(String,Object)</jent>
<jent id="73" pid="1" type="method" span="1636:5:1644:5">org.gjt.sp.jedit.bsh.NameSpace.addCommandPath(String,Class)</jent>
<jent id="74" pid="1" type="method" span="1649:5:1664:5">org.gjt.sp.jedit.bsh.NameSpace.removeCommandPath(String,Class)</jent>
<jent id="75" pid="1" type="method" span="1669:5:1688:5">org.gjt.sp.jedit.bsh.NameSpace.getCommand(String)</jent>
<jent id="76" pid="1" type="class" span="1690:5:1700:5">org.gjt.sp.jedit.bsh.NameSpace.CommandPathEntry</jent>
<jent id="77" pid="76" type="method" span="1695:9:1699:9">org.gjt.sp.jedit.bsh.NameSpace.CommandPathEntry.CommandPathEntry(String,Class)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    *
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="46:1:60:3">/**
    A namespace	in which methods, variables, and imports (class names) live.
    This is package public because it is used in the implementation of some
    bsh commands.  However for normal use you should be using methods on
    bsh.Interpreter to interact with your scripts.
    &lt;p&gt;

    A bsh.This object is a thin layer over a NameSpace that associates it with
    an Interpreter instance.  Together they comprise a Bsh scripted object
    context.
    &lt;p&gt;

    Note: I'd really like to use collections here, but we have to keep this
    compatible with JDK1.1
*/</jtok>
<jtok eid="0" type="block_comment" span="61:1:64:3">/*
    Thanks to Slava Pestov (of jEdit fame) for import caching enhancements.
    Note: This class has gotten too big.  It should be broken down a bit.
*/</jtok>
<jtok eid="1" type="class_name" span="65:14:65:23">NameSpace</jtok>
<jtok eid="1" type="class_or_interface_ref" span="66:16:66:20">java</jtok>
<jtok eid="1" type="class_or_interface_ref" span="66:21:66:23">io</jtok>
<jtok eid="1" type="class_or_interface_ref" span="66:24:66:36">Serializable</jtok>
<jtok eid="1" type="class_or_interface_ref" span="66:38:66:53">BshClassManager</jtok>
<jtok eid="1" type="class_or_interface_ref" span="66:54:66:62">Listener</jtok>
<jtok eid="1" type="class_or_interface_ref" span="67:5:67:15">NameSource</jtok>
<jtok eid="1" type="class_or_interface_ref" span="69:25:69:34">NameSpace</jtok>
<jtok eid="1" type="field_name" span="69:35:69:43">JAVACODE</jtok>
<jtok eid="1" type="constructor_call" span="70:13:70:22">NameSpace</jtok>
<jtok eid="1" type="class_or_interface_ref" span="70:24:70:39">BshClassManager</jtok>
<jtok eid="1" type="string_literal" span="70:46:70:79">"Called from compiled Java code."</jtok>
<jtok eid="1" type="primary_name_ref" span="72:9:72:17">JAVACODE</jtok>
<jtok eid="1" type="qualified_name_ref" span="72:18:72:26">isMethod</jtok>
<jtok eid="1" type="line_comment" span="75:5:75:27">// Begin instance data</jtok>
<jtok eid="1" type="line_comment" span="76:5:76:80">// Note: if we add something here we should reset it in the clear() method.</jtok>
<jtok eid="1" type="block_comment" span="78:5:82:7">/**
        The name of this namespace.  If the namespace is a method body
        namespace then this is the name of the method.  If it's a class or
        class instance then it's the name of the class.
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="83:13:83:19">String</jtok>
<jtok eid="1" type="field_name" span="83:20:83:26">nsName</jtok>
<jtok eid="1" type="class_or_interface_ref" span="84:13:84:22">NameSpace</jtok>
<jtok eid="1" type="field_name" span="84:23:84:29">parent</jtok>
<jtok eid="1" type="class_or_interface_ref" span="85:13:85:22">Hashtable</jtok>
<jtok eid="1" type="field_name" span="85:23:85:32">variables</jtok>
<jtok eid="1" type="class_or_interface_ref" span="86:13:86:22">Hashtable</jtok>
<jtok eid="1" type="field_name" span="86:23:86:30">methods</jtok>
<jtok eid="1" type="class_or_interface_ref" span="88:15:88:24">Hashtable</jtok>
<jtok eid="1" type="field_name" span="88:25:88:40">importedClasses</jtok>
<jtok eid="1" type="class_or_interface_ref" span="89:13:89:19">Vector</jtok>
<jtok eid="1" type="field_name" span="89:20:89:36">importedPackages</jtok>
<jtok eid="1" type="class_or_interface_ref" span="90:13:90:19">Vector</jtok>
<jtok eid="1" type="field_name" span="90:20:90:36">importedCommands</jtok>
<jtok eid="1" type="class_or_interface_ref" span="91:13:91:19">Vector</jtok>
<jtok eid="1" type="field_name" span="91:20:91:35">importedObjects</jtok>
<jtok eid="1" type="class_or_interface_ref" span="92:13:92:19">Vector</jtok>
<jtok eid="1" type="field_name" span="92:20:92:34">importedStatic</jtok>
<jtok eid="1" type="class_or_interface_ref" span="93:13:93:19">String</jtok>
<jtok eid="1" type="field_name" span="93:20:93:31">packageName</jtok>
<jtok eid="1" type="class_or_interface_ref" span="95:23:95:38">BshClassManager</jtok>
<jtok eid="1" type="field_name" span="95:39:95:51">classManager</jtok>
<jtok eid="1" type="line_comment" span="97:5:97:30">// See notes in getThis()</jtok>
<jtok eid="1" type="class_or_interface_ref" span="98:13:98:17">This</jtok>
<jtok eid="1" type="field_name" span="98:18:98:31">thisReference</jtok>
<jtok eid="1" type="block_comment" span="100:5:100:33">/** Name resolver objects */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="101:13:101:22">Hashtable</jtok>
<jtok eid="1" type="field_name" span="101:23:101:28">names</jtok>
<jtok eid="1" type="block_comment" span="103:5:104:77">/** The node associated with the creation of this namespace.
        This is used support getInvocationLine() and getInvocationText(). */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="105:5:105:15">SimpleNode</jtok>
<jtok eid="1" type="field_name" span="105:16:105:30">callerInfoNode</jtok>
<jtok eid="1" type="block_comment" span="107:5:110:7">/**
        Note that the namespace is a method body namespace.  This is used for
        printing stack traces in exceptions.
    */</jtok>
<jtok eid="1" type="field_name" span="111:13:111:21">isMethod</jtok>
<jtok eid="1" type="block_comment" span="112:5:115:7">/**
        Note that the namespace is a class body or class instance namespace.
        This is used for controlling static/object import precedence, etc.
    */</jtok>
<jtok eid="1" type="block_comment" span="116:5:119:7">/*
        Note: We will ll move this behavior out to a subclass of
        NameSpace, but we'll start here.
    */</jtok>
<jtok eid="1" type="field_name" span="120:13:120:20">isClass</jtok>
<jtok eid="1" type="class_or_interface_ref" span="121:5:121:10">Class</jtok>
<jtok eid="1" type="field_name" span="121:11:121:22">classStatic</jtok>
<jtok eid="1" type="class_or_interface_ref" span="122:5:122:11">Object</jtok>
<jtok eid="1" type="field_name" span="122:12:122:25">classInstance</jtok>
<jtok eid="2" type="method_name" span="124:10:124:24">setClassStatic</jtok>
<jtok eid="2" type="parameter_type" span="124:26:124:31">Class</jtok>
<jtok eid="2" type="parameter_name" span="124:32:124:36">clas</jtok>
<jtok eid="2" type="qualified_name_ref" span="125:14:125:25">classStatic</jtok>
<jtok eid="2" type="primary_name_ref" span="125:28:125:32">clas</jtok>
<jtok eid="2" type="method_call" span="126:9:126:21">importStatic</jtok>
<jtok eid="2" type="primary_name_ref" span="126:23:126:27">clas</jtok>
<jtok eid="3" type="method_name" span="128:10:128:26">setClassInstance</jtok>
<jtok eid="3" type="parameter_type" span="128:28:128:34">Object</jtok>
<jtok eid="3" type="parameter_name" span="128:35:128:43">instance</jtok>
<jtok eid="3" type="qualified_name_ref" span="129:14:129:27">classInstance</jtok>
<jtok eid="3" type="primary_name_ref" span="129:30:129:38">instance</jtok>
<jtok eid="3" type="method_call" span="130:9:130:21">importObject</jtok>
<jtok eid="3" type="primary_name_ref" span="130:23:130:31">instance</jtok>
<jtok eid="4" type="class_or_interface_ref" span="132:5:132:11">Object</jtok>
<jtok eid="4" type="method_name" span="132:12:132:28">getClassInstance</jtok>
<jtok eid="4" type="throws" span="133:16:133:29">UtilEvalError</jtok>
<jtok eid="4" type="primary_name_ref" span="135:14:135:27">classInstance</jtok>
<jtok eid="4" type="primary_name_ref" span="136:20:136:33">classInstance</jtok>
<jtok eid="4" type="primary_name_ref" span="138:14:138:25">classStatic</jtok>
<jtok eid="4" type="line_comment" span="139:13:139:74">//|| ( getParent()!=null &amp;&amp; getParent().classStatic != null )</jtok>
<jtok eid="4" type="constructor_call" span="141:23:141:36">UtilEvalError</jtok>
<jtok eid="4" type="string_literal" span="142:17:142:69">"Can't refer to class instance from static context."</jtok>
<jtok eid="4" type="constructor_call" span="144:23:144:39">InterpreterError</jtok>
<jtok eid="4" type="string_literal" span="145:17:145:59">"Can't resolve class instance 'this' in: "</jtok>
<jtok eid="1" type="block_comment" span="149:5:154:7">/**
        Local class cache for classes resolved through this namespace using
        getClass() (taking into account imports).  Only unqualified class names
        are cached here (those which might be imported).  Qualified names are
        always absolute and are cached by BshClassManager.
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="155:23:155:32">Hashtable</jtok>
<jtok eid="1" type="field_name" span="155:33:155:43">classCache</jtok>
<jtok eid="1" type="line_comment" span="157:5:157:25">// End instance data</jtok>
<jtok eid="1" type="line_comment" span="159:5:159:26">// Begin constructors</jtok>
<jtok eid="1" type="block_comment" span="161:5:166:7">/**
        @param parent the parent namespace of this namespace.  Child namespaces
        inherit all variables and methods of their parent and can (of course)
        override / shadow them.
        @param name a name
    */</jtok>
<jtok eid="5" type="method_name" span="167:12:167:21">NameSpace</jtok>
<jtok eid="5" type="parameter_type" span="167:23:167:32">NameSpace</jtok>
<jtok eid="5" type="parameter_name" span="167:33:167:39">parent</jtok>
<jtok eid="5" type="parameter_type" span="167:41:167:47">String</jtok>
<jtok eid="5" type="parameter_name" span="167:48:167:52">name</jtok>
<jtok eid="5" type="line_comment" span="169:9:169:64">// Note: in this case parent must have a class manager.</jtok>
<jtok eid="5" type="primary_name_ref" span="170:15:170:21">parent</jtok>
<jtok eid="5" type="primary_name_ref" span="170:29:170:33">name</jtok>
<jtok eid="6" type="method_name" span="173:12:173:21">NameSpace</jtok>
<jtok eid="6" type="parameter_type" span="173:23:173:38">BshClassManager</jtok>
<jtok eid="6" type="parameter_name" span="173:39:173:51">classManager</jtok>
<jtok eid="6" type="parameter_type" span="173:53:173:59">String</jtok>
<jtok eid="6" type="parameter_name" span="173:60:173:64">name</jtok>
<jtok eid="6" type="primary_name_ref" span="175:21:175:33">classManager</jtok>
<jtok eid="6" type="primary_name_ref" span="175:35:175:39">name</jtok>
<jtok eid="7" type="method_name" span="178:12:178:21">NameSpace</jtok>
<jtok eid="7" type="parameter_type" span="179:9:179:18">NameSpace</jtok>
<jtok eid="7" type="parameter_name" span="179:19:179:25">parent</jtok>
<jtok eid="7" type="parameter_type" span="179:27:179:42">BshClassManager</jtok>
<jtok eid="7" type="parameter_name" span="179:43:179:55">classManager</jtok>
<jtok eid="7" type="parameter_type" span="179:57:179:63">String</jtok>
<jtok eid="7" type="parameter_name" span="179:64:179:68">name</jtok>
<jtok eid="7" type="line_comment" span="181:9:181:79">// We might want to do this here rather than explicitly in Interpreter</jtok>
<jtok eid="7" type="line_comment" span="182:9:182:41">// for global (see also prune())</jtok>
<jtok eid="7" type="line_comment" span="183:9:183:59">//if ( classManager == null &amp;&amp; (parent == null ) )</jtok>
<jtok eid="7" type="line_comment" span="184:13:184:45">// create our own class manager?</jtok>
<jtok eid="7" type="method_call" span="186:9:186:16">setName</jtok>
<jtok eid="7" type="primary_name_ref" span="186:17:186:21">name</jtok>
<jtok eid="7" type="method_call" span="187:9:187:18">setParent</jtok>
<jtok eid="7" type="primary_name_ref" span="187:19:187:25">parent</jtok>
<jtok eid="7" type="method_call" span="188:9:188:24">setClassManager</jtok>
<jtok eid="7" type="primary_name_ref" span="188:26:188:38">classManager</jtok>
<jtok eid="7" type="line_comment" span="190:9:190:59">// Register for notification of classloader change</jtok>
<jtok eid="7" type="primary_name_ref" span="191:14:191:26">classManager</jtok>
<jtok eid="7" type="primary_name_ref" span="192:13:192:25">classManager</jtok>
<jtok eid="7" type="method_call" span="192:26:192:37">addListener</jtok>
<jtok eid="1" type="line_comment" span="195:5:195:24">// End constructors</jtok>
<jtok eid="8" type="method_name" span="197:17:197:24">setName</jtok>
<jtok eid="8" type="parameter_type" span="197:26:197:32">String</jtok>
<jtok eid="8" type="parameter_name" span="197:33:197:37">name</jtok>
<jtok eid="8" type="qualified_name_ref" span="198:14:198:20">nsName</jtok>
<jtok eid="8" type="primary_name_ref" span="198:23:198:27">name</jtok>
<jtok eid="1" type="block_comment" span="201:5:205:7">/**
        The name of this namespace.  If the namespace is a method body
        namespace then this is the name of the method.  If it's a class or
        class instance then it's the name of the class.
    */</jtok>
<jtok eid="9" type="class_or_interface_ref" span="206:12:206:18">String</jtok>
<jtok eid="9" type="method_name" span="206:19:206:26">getName</jtok>
<jtok eid="9" type="qualified_name_ref" span="207:21:207:27">nsName</jtok>
<jtok eid="1" type="block_comment" span="210:5:214:7">/**
        Set the node associated with the creation of this namespace.
        This is used in debugging and to support the getInvocationLine()
        and getInvocationText() methods.
    */</jtok>
<jtok eid="10" type="method_name" span="215:10:215:17">setNode</jtok>
<jtok eid="10" type="parameter_type" span="215:19:215:29">SimpleNode</jtok>
<jtok eid="10" type="parameter_name" span="215:30:215:34">node</jtok>
<jtok eid="10" type="primary_name_ref" span="216:9:216:23">callerInfoNode</jtok>
<jtok eid="10" type="primary_name_ref" span="216:26:216:30">node</jtok>
<jtok eid="1" type="block_comment" span="219:5:220:7">/**
    */</jtok>
<jtok eid="11" type="class_or_interface_ref" span="221:5:221:15">SimpleNode</jtok>
<jtok eid="11" type="method_name" span="221:16:221:23">getNode</jtok>
<jtok eid="11" type="primary_name_ref" span="223:14:223:28">callerInfoNode</jtok>
<jtok eid="11" type="primary_name_ref" span="224:20:224:34">callerInfoNode</jtok>
<jtok eid="11" type="primary_name_ref" span="225:14:225:20">parent</jtok>
<jtok eid="11" type="primary_name_ref" span="226:20:226:26">parent</jtok>
<jtok eid="11" type="method_call" span="226:27:226:34">getNode</jtok>
<jtok eid="1" type="block_comment" span="231:5:233:7">/**
        Resolve name to an object through this namespace.
    */</jtok>
<jtok eid="12" type="class_or_interface_ref" span="234:12:234:18">Object</jtok>
<jtok eid="12" type="method_name" span="234:19:234:22">get</jtok>
<jtok eid="12" type="parameter_type" span="234:24:234:30">String</jtok>
<jtok eid="12" type="parameter_name" span="234:31:234:35">name</jtok>
<jtok eid="12" type="parameter_type" span="234:37:234:48">Interpreter</jtok>
<jtok eid="12" type="parameter_name" span="234:49:234:60">interpreter</jtok>
<jtok eid="12" type="throws" span="235:16:235:29">UtilEvalError</jtok>
<jtok eid="12" type="class_or_interface_ref" span="237:9:237:18">CallStack</jtok>
<jtok eid="12" type="local_variable_name" span="237:19:237:28">callstack</jtok>
<jtok eid="12" type="constructor_call" span="237:35:237:44">CallStack</jtok>
<jtok eid="12" type="method_call" span="238:16:238:31">getNameResolver</jtok>
<jtok eid="12" type="primary_name_ref" span="238:33:238:37">name</jtok>
<jtok eid="12" type="method_call" span="238:40:238:48">toObject</jtok>
<jtok eid="12" type="primary_name_ref" span="238:50:238:59">callstack</jtok>
<jtok eid="12" type="primary_name_ref" span="238:61:238:72">interpreter</jtok>
<jtok eid="1" type="block_comment" span="241:5:255:7">/**
        Set the variable through this namespace.
        This method obeys the LOCALSCOPING property to determine how variables
        are set.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package and wish to set variables with
        primitive values you will have to wrap them using bsh.Primitive.
        @see org.gjt.sp.jedit.bsh.Primitive
        &lt;p&gt;
        Setting a new variable (which didn't exist before) or removing
        a variable causes a namespace change.

        @param strictJava specifies whether strict java rules are applied.
    */</jtok>
<jtok eid="13" type="method_name" span="256:17:256:28">setVariable</jtok>
<jtok eid="13" type="parameter_type" span="256:30:256:36">String</jtok>
<jtok eid="13" type="parameter_name" span="256:37:256:41">name</jtok>
<jtok eid="13" type="parameter_type" span="256:43:256:49">Object</jtok>
<jtok eid="13" type="parameter_name" span="256:50:256:55">value</jtok>
<jtok eid="13" type="parameter_name" span="256:65:256:75">strictJava</jtok>
<jtok eid="13" type="throws" span="257:16:257:29">UtilEvalError</jtok>
<jtok eid="13" type="line_comment" span="259:9:259:66">// if localscoping switch follow strictJava, else recurse</jtok>
<jtok eid="13" type="local_variable_name" span="260:17:260:24">recurse</jtok>
<jtok eid="13" type="primary_name_ref" span="260:27:260:38">Interpreter</jtok>
<jtok eid="13" type="qualified_name_ref" span="260:39:260:51">LOCALSCOPING</jtok>
<jtok eid="13" type="primary_name_ref" span="260:54:260:64">strictJava</jtok>
<jtok eid="13" type="method_call" span="261:9:261:20">setVariable</jtok>
<jtok eid="13" type="primary_name_ref" span="261:22:261:26">name</jtok>
<jtok eid="13" type="primary_name_ref" span="261:28:261:33">value</jtok>
<jtok eid="13" type="primary_name_ref" span="261:35:261:45">strictJava</jtok>
<jtok eid="13" type="primary_name_ref" span="261:47:261:54">recurse</jtok>
<jtok eid="1" type="block_comment" span="264:5:266:7">/**
        Set a variable explicitly in the local scope.
    */</jtok>
<jtok eid="14" type="method_name" span="267:10:267:26">setLocalVariable</jtok>
<jtok eid="14" type="parameter_type" span="268:9:268:15">String</jtok>
<jtok eid="14" type="parameter_name" span="268:16:268:20">name</jtok>
<jtok eid="14" type="parameter_type" span="268:22:268:28">Object</jtok>
<jtok eid="14" type="parameter_name" span="268:29:268:34">value</jtok>
<jtok eid="14" type="parameter_name" span="268:44:268:54">strictJava</jtok>
<jtok eid="14" type="throws" span="269:16:269:29">UtilEvalError</jtok>
<jtok eid="14" type="method_call" span="271:9:271:20">setVariable</jtok>
<jtok eid="14" type="primary_name_ref" span="271:22:271:26">name</jtok>
<jtok eid="14" type="primary_name_ref" span="271:28:271:33">value</jtok>
<jtok eid="14" type="primary_name_ref" span="271:35:271:45">strictJava</jtok>
<jtok eid="14" type="block_comment" span="271:52:271:63">/*recurse*/</jtok>
<jtok eid="1" type="block_comment" span="274:5:296:7">/**
        Set the value of a the variable 'name' through this namespace.
        The variable may be an existing or non-existing variable.
        It may live in this namespace or in a parent namespace if recurse is
        true.
        &lt;p&gt;
        Note: This method is not public and does *not* know about LOCALSCOPING.
        Its caller methods must set recurse intelligently in all situations
        (perhaps based on LOCALSCOPING).

        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package and wish to set variables with
        primitive values you will have to wrap them using bsh.Primitive.
        @see org.gjt.sp.jedit.bsh.Primitive
        &lt;p&gt;
        Setting a new variable (which didn't exist before) or removing
        a variable causes a namespace change.

        @param strictJava specifies whether strict java rules are applied.
        @param recurse determines whether we will search for the variable in
          our parent's scope before assigning locally.
    */</jtok>
<jtok eid="15" type="method_name" span="297:10:297:21">setVariable</jtok>
<jtok eid="15" type="parameter_type" span="298:9:298:15">String</jtok>
<jtok eid="15" type="parameter_name" span="298:16:298:20">name</jtok>
<jtok eid="15" type="parameter_type" span="298:22:298:28">Object</jtok>
<jtok eid="15" type="parameter_name" span="298:29:298:34">value</jtok>
<jtok eid="15" type="parameter_name" span="298:44:298:54">strictJava</jtok>
<jtok eid="15" type="parameter_name" span="298:64:298:71">recurse</jtok>
<jtok eid="15" type="throws" span="299:16:299:29">UtilEvalError</jtok>
<jtok eid="15" type="primary_name_ref" span="301:14:301:23">variables</jtok>
<jtok eid="15" type="primary_name_ref" span="302:13:302:22">variables</jtok>
<jtok eid="15" type="constructor_call" span="302:29:302:38">Hashtable</jtok>
<jtok eid="15" type="line_comment" span="304:9:304:47">// primitives should have been wrapped</jtok>
<jtok eid="15" type="line_comment" span="305:9:305:28">// {{{ jEdit change</jtok>
<jtok eid="15" type="line_comment" span="306:9:306:31">//if ( value == null )</jtok>
<jtok eid="15" type="line_comment" span="307:9:307:62">//	throw new InterpreterError("null variable value");</jtok>
<jtok eid="15" type="primary_name_ref" span="309:14:309:19">value</jtok>
<jtok eid="15" type="line_comment" span="310:13:310:51">// don't break jEdit core and plugins!</jtok>
<jtok eid="15" type="method_call" span="311:13:311:26">unsetVariable</jtok>
<jtok eid="15" type="primary_name_ref" span="311:27:311:31">name</jtok>
<jtok eid="15" type="line_comment" span="315:9:315:15">// }}}</jtok>
<jtok eid="15" type="line_comment" span="316:9:316:56">// Locate the variable definition if it exists.</jtok>
<jtok eid="15" type="class_or_interface_ref" span="317:9:317:17">Variable</jtok>
<jtok eid="15" type="local_variable_name" span="317:18:317:26">existing</jtok>
<jtok eid="15" type="method_call" span="317:29:317:44">getVariableImpl</jtok>
<jtok eid="15" type="primary_name_ref" span="317:46:317:50">name</jtok>
<jtok eid="15" type="primary_name_ref" span="317:52:317:59">recurse</jtok>
<jtok eid="15" type="line_comment" span="319:9:319:73">// Found an existing variable here (or above if recurse allowed)</jtok>
<jtok eid="15" type="primary_name_ref" span="320:14:320:22">existing</jtok>
<jtok eid="15" type="primary_name_ref" span="323:17:323:25">existing</jtok>
<jtok eid="15" type="method_call" span="323:26:323:34">setValue</jtok>
<jtok eid="15" type="primary_name_ref" span="323:36:323:41">value</jtok>
<jtok eid="15" type="primary_name_ref" span="323:43:323:51">Variable</jtok>
<jtok eid="15" type="qualified_name_ref" span="323:52:323:62">ASSIGNMENT</jtok>
<jtok eid="15" type="class_or_interface_ref" span="324:23:324:36">UtilEvalError</jtok>
<jtok eid="15" type="local_variable_name" span="324:37:324:38">e</jtok>
<jtok eid="15" type="constructor_call" span="325:27:325:40">UtilEvalError</jtok>
<jtok eid="15" type="string_literal" span="326:21:326:44">"Variable assignment: "</jtok>
<jtok eid="15" type="primary_name_ref" span="326:47:326:51">name</jtok>
<jtok eid="15" type="string_literal" span="326:54:326:58">": "</jtok>
<jtok eid="15" type="primary_name_ref" span="326:61:326:62">e</jtok>
<jtok eid="15" type="method_call" span="326:63:326:73">getMessage</jtok>
<jtok eid="15" type="line_comment" span="329:9:329:76">// No previous variable definition found here (or above if recurse)</jtok>
<jtok eid="15" type="primary_name_ref" span="331:18:331:28">strictJava</jtok>
<jtok eid="15" type="constructor_call" span="332:27:332:40">UtilEvalError</jtok>
<jtok eid="15" type="string_literal" span="333:21:333:77">"(Strict Java mode) Assignment to undeclared variable: "</jtok>
<jtok eid="15" type="primary_name_ref" span="334:22:334:26">name</jtok>
<jtok eid="15" type="line_comment" span="336:13:336:69">// If recurse, set global untyped var, else set it here.</jtok>
<jtok eid="15" type="line_comment" span="337:13:337:65">//NameSpace varScope = recurse ? getGlobal() : this;</jtok>
<jtok eid="15" type="line_comment" span="338:13:338:64">// This modification makes default allocation local</jtok>
<jtok eid="15" type="class_or_interface_ref" span="339:13:339:22">NameSpace</jtok>
<jtok eid="15" type="local_variable_name" span="339:23:339:31">varScope</jtok>
<jtok eid="15" type="primary_name_ref" span="341:13:341:21">varScope</jtok>
<jtok eid="15" type="qualified_name_ref" span="341:22:341:31">variables</jtok>
<jtok eid="15" type="method_call" span="341:32:341:35">put</jtok>
<jtok eid="15" type="primary_name_ref" span="342:17:342:21">name</jtok>
<jtok eid="15" type="constructor_call" span="342:27:342:35">Variable</jtok>
<jtok eid="15" type="primary_name_ref" span="342:37:342:41">name</jtok>
<jtok eid="15" type="primary_name_ref" span="342:43:342:48">value</jtok>
<jtok eid="15" type="block_comment" span="342:54:342:67">/*modifiers*/</jtok>
<jtok eid="15" type="line_comment" span="344:13:344:59">// nameSpaceChanged() on new variable addition</jtok>
<jtok eid="15" type="method_call" span="345:13:345:29">nameSpaceChanged</jtok>
<jtok eid="1" type="block_comment" span="349:5:351:7">/**
        Remove the variable from the namespace.
    */</jtok>
<jtok eid="16" type="method_name" span="352:17:352:30">unsetVariable</jtok>
<jtok eid="16" type="parameter_type" span="352:32:352:38">String</jtok>
<jtok eid="16" type="parameter_name" span="352:39:352:43">name</jtok>
<jtok eid="16" type="primary_name_ref" span="354:14:354:23">variables</jtok>
<jtok eid="16" type="primary_name_ref" span="356:13:356:22">variables</jtok>
<jtok eid="16" type="method_call" span="356:23:356:29">remove</jtok>
<jtok eid="16" type="primary_name_ref" span="356:31:356:35">name</jtok>
<jtok eid="16" type="method_call" span="357:13:357:29">nameSpaceChanged</jtok>
<jtok eid="1" type="block_comment" span="361:5:364:7">/**
        Get the names of variables defined in this namespace.
        (This does not show variables in parent namespaces).
    */</jtok>
<jtok eid="17" type="class_or_interface_ref" span="365:12:365:18">String</jtok>
<jtok eid="17" type="method_name" span="365:22:365:38">getVariableNames</jtok>
<jtok eid="17" type="primary_name_ref" span="366:14:366:23">variables</jtok>
<jtok eid="17" type="constructor_call" span="367:24:367:30">String</jtok>
<jtok eid="17" type="method_call" span="369:20:369:44">enumerationToStringArray</jtok>
<jtok eid="17" type="primary_name_ref" span="369:46:369:55">variables</jtok>
<jtok eid="17" type="method_call" span="369:56:369:60">keys</jtok>
<jtok eid="1" type="block_comment" span="372:5:375:7">/**
        Get the names of methods declared in this namespace.
        (This does not include methods in parent namespaces).
    */</jtok>
<jtok eid="18" type="class_or_interface_ref" span="376:12:376:18">String</jtok>
<jtok eid="18" type="method_name" span="376:22:376:36">getMethodNames</jtok>
<jtok eid="18" type="primary_name_ref" span="378:14:378:21">methods</jtok>
<jtok eid="18" type="constructor_call" span="379:24:379:30">String</jtok>
<jtok eid="18" type="method_call" span="381:20:381:44">enumerationToStringArray</jtok>
<jtok eid="18" type="primary_name_ref" span="381:46:381:53">methods</jtok>
<jtok eid="18" type="method_call" span="381:54:381:58">keys</jtok>
<jtok eid="1" type="block_comment" span="384:5:388:7">/**
        Get the methods defined in this namespace.
        (This does not show methods in parent namespaces).
        Note: This will probably be renamed getDeclaredMethods()
    */</jtok>
<jtok eid="19" type="class_or_interface_ref" span="389:12:389:21">BshMethod</jtok>
<jtok eid="19" type="method_name" span="389:25:389:35">getMethods</jtok>
<jtok eid="19" type="primary_name_ref" span="391:14:391:21">methods</jtok>
<jtok eid="19" type="constructor_call" span="392:24:392:33">BshMethod</jtok>
<jtok eid="19" type="method_call" span="394:20:394:43">flattenMethodCollection</jtok>
<jtok eid="19" type="primary_name_ref" span="394:45:394:52">methods</jtok>
<jtok eid="19" type="method_call" span="394:53:394:61">elements</jtok>
<jtok eid="20" type="class_or_interface_ref" span="397:13:397:19">String</jtok>
<jtok eid="20" type="method_name" span="397:23:397:47">enumerationToStringArray</jtok>
<jtok eid="20" type="parameter_type" span="397:49:397:60">Enumeration</jtok>
<jtok eid="20" type="parameter_name" span="397:61:397:62">e</jtok>
<jtok eid="20" type="class_or_interface_ref" span="398:9:398:15">Vector</jtok>
<jtok eid="20" type="local_variable_name" span="398:16:398:17">v</jtok>
<jtok eid="20" type="constructor_call" span="398:24:398:30">Vector</jtok>
<jtok eid="20" type="primary_name_ref" span="399:17:399:18">e</jtok>
<jtok eid="20" type="method_call" span="399:19:399:34">hasMoreElements</jtok>
<jtok eid="20" type="primary_name_ref" span="400:13:400:14">v</jtok>
<jtok eid="20" type="method_call" span="400:15:400:25">addElement</jtok>
<jtok eid="20" type="primary_name_ref" span="400:27:400:28">e</jtok>
<jtok eid="20" type="method_call" span="400:29:400:40">nextElement</jtok>
<jtok eid="20" type="class_or_interface_ref" span="401:9:401:15">String</jtok>
<jtok eid="20" type="local_variable_name" span="401:19:401:21">sa</jtok>
<jtok eid="20" type="constructor_call" span="401:28:401:34">String</jtok>
<jtok eid="20" type="primary_name_ref" span="401:37:401:38">v</jtok>
<jtok eid="20" type="method_call" span="401:39:401:43">size</jtok>
<jtok eid="20" type="primary_name_ref" span="402:9:402:10">v</jtok>
<jtok eid="20" type="method_call" span="402:11:402:19">copyInto</jtok>
<jtok eid="20" type="primary_name_ref" span="402:21:402:23">sa</jtok>
<jtok eid="20" type="primary_name_ref" span="403:16:403:18">sa</jtok>
<jtok eid="1" type="block_comment" span="406:5:409:7">/**
        Flatten the vectors of overloaded methods to a single array.
        @see #getMethods()
    */</jtok>
<jtok eid="21" type="class_or_interface_ref" span="410:13:410:22">BshMethod</jtok>
<jtok eid="21" type="method_name" span="410:26:410:49">flattenMethodCollection</jtok>
<jtok eid="21" type="parameter_type" span="410:51:410:62">Enumeration</jtok>
<jtok eid="21" type="parameter_name" span="410:63:410:64">e</jtok>
<jtok eid="21" type="class_or_interface_ref" span="411:9:411:15">Vector</jtok>
<jtok eid="21" type="local_variable_name" span="411:16:411:17">v</jtok>
<jtok eid="21" type="constructor_call" span="411:24:411:30">Vector</jtok>
<jtok eid="21" type="primary_name_ref" span="412:17:412:18">e</jtok>
<jtok eid="21" type="method_call" span="412:19:412:34">hasMoreElements</jtok>
<jtok eid="21" type="class_or_interface_ref" span="413:13:413:19">Object</jtok>
<jtok eid="21" type="local_variable_name" span="413:20:413:21">o</jtok>
<jtok eid="21" type="primary_name_ref" span="413:24:413:25">e</jtok>
<jtok eid="21" type="method_call" span="413:26:413:37">nextElement</jtok>
<jtok eid="21" type="primary_name_ref" span="414:18:414:19">o</jtok>
<jtok eid="21" type="class_or_interface_ref" span="414:31:414:40">BshMethod</jtok>
<jtok eid="21" type="primary_name_ref" span="415:17:415:18">v</jtok>
<jtok eid="21" type="method_call" span="415:19:415:29">addElement</jtok>
<jtok eid="21" type="primary_name_ref" span="415:31:415:32">o</jtok>
<jtok eid="21" type="class_or_interface_ref" span="417:17:417:23">Vector</jtok>
<jtok eid="21" type="local_variable_name" span="417:24:417:26">ov</jtok>
<jtok eid="21" type="class_or_interface_ref" span="417:30:417:36">Vector</jtok>
<jtok eid="21" type="primary_name_ref" span="417:37:417:38">o</jtok>
<jtok eid="21" type="local_variable_name" span="418:25:418:26">i</jtok>
<jtok eid="21" type="primary_name_ref" span="418:30:418:31">i</jtok>
<jtok eid="21" type="primary_name_ref" span="418:32:418:34">ov</jtok>
<jtok eid="21" type="method_call" span="418:35:418:39">size</jtok>
<jtok eid="21" type="primary_name_ref" span="418:43:418:44">i</jtok>
<jtok eid="21" type="primary_name_ref" span="419:21:419:22">v</jtok>
<jtok eid="21" type="method_call" span="419:23:419:33">addElement</jtok>
<jtok eid="21" type="primary_name_ref" span="419:35:419:37">ov</jtok>
<jtok eid="21" type="method_call" span="419:38:419:47">elementAt</jtok>
<jtok eid="21" type="primary_name_ref" span="419:49:419:50">i</jtok>
<jtok eid="21" type="class_or_interface_ref" span="422:9:422:18">BshMethod</jtok>
<jtok eid="21" type="local_variable_name" span="422:22:422:25">bma</jtok>
<jtok eid="21" type="constructor_call" span="422:32:422:41">BshMethod</jtok>
<jtok eid="21" type="primary_name_ref" span="422:44:422:45">v</jtok>
<jtok eid="21" type="method_call" span="422:46:422:50">size</jtok>
<jtok eid="21" type="primary_name_ref" span="423:9:423:10">v</jtok>
<jtok eid="21" type="method_call" span="423:11:423:19">copyInto</jtok>
<jtok eid="21" type="primary_name_ref" span="423:21:423:24">bma</jtok>
<jtok eid="21" type="primary_name_ref" span="424:16:424:19">bma</jtok>
<jtok eid="1" type="block_comment" span="427:5:431:7">/**
        Get the parent namespace.
        Note: this isn't quite the same as getSuper().
        getSuper() returns 'this' if we are at the root namespace.
    */</jtok>
<jtok eid="22" type="class_or_interface_ref" span="432:12:432:21">NameSpace</jtok>
<jtok eid="22" type="method_name" span="432:22:432:31">getParent</jtok>
<jtok eid="22" type="primary_name_ref" span="433:16:433:22">parent</jtok>
<jtok eid="1" type="block_comment" span="436:5:439:7">/**
        Get the parent namespace' This reference or this namespace' This
        reference if we are the top.
    */</jtok>
<jtok eid="23" type="class_or_interface_ref" span="440:12:440:16">This</jtok>
<jtok eid="23" type="method_name" span="440:17:440:25">getSuper</jtok>
<jtok eid="23" type="parameter_type" span="440:27:440:38">Interpreter</jtok>
<jtok eid="23" type="parameter_name" span="440:39:440:59">declaringInterpreter</jtok>
<jtok eid="23" type="primary_name_ref" span="442:14:442:20">parent</jtok>
<jtok eid="23" type="primary_name_ref" span="443:20:443:26">parent</jtok>
<jtok eid="23" type="method_call" span="443:27:443:34">getThis</jtok>
<jtok eid="23" type="primary_name_ref" span="443:36:443:56">declaringInterpreter</jtok>
<jtok eid="23" type="method_call" span="445:20:445:27">getThis</jtok>
<jtok eid="23" type="primary_name_ref" span="445:29:445:49">declaringInterpreter</jtok>
<jtok eid="1" type="block_comment" span="448:5:452:7">/**
        Get the top level namespace or this namespace if we are the top.
        Note: this method should probably return type bsh.This to be consistent
        with getThis();
    */</jtok>
<jtok eid="24" type="class_or_interface_ref" span="453:12:453:16">This</jtok>
<jtok eid="24" type="method_name" span="453:17:453:26">getGlobal</jtok>
<jtok eid="24" type="parameter_type" span="453:28:453:39">Interpreter</jtok>
<jtok eid="24" type="parameter_name" span="453:40:453:60">declaringInterpreter</jtok>
<jtok eid="24" type="primary_name_ref" span="455:14:455:20">parent</jtok>
<jtok eid="24" type="primary_name_ref" span="456:20:456:26">parent</jtok>
<jtok eid="24" type="method_call" span="456:27:456:36">getGlobal</jtok>
<jtok eid="24" type="primary_name_ref" span="456:38:456:58">declaringInterpreter</jtok>
<jtok eid="24" type="method_call" span="458:20:458:27">getThis</jtok>
<jtok eid="24" type="primary_name_ref" span="458:29:458:49">declaringInterpreter</jtok>
<jtok eid="1" type="block_comment" span="462:5:472:7">/**
        A This object is a thin layer over a namespace, comprising a bsh object
        context.  It handles things like the interface types the bsh object
        supports and aspects of method invocation on it.
        &lt;p&gt;

        The declaringInterpreter is here to support callbacks from Java through
        generated proxies.  The scripted object "remembers" who created it for
        things like printing messages and other per-interpreter phenomenon
        when called externally from Java.
    */</jtok>
<jtok eid="1" type="block_comment" span="473:5:490:7">/*
        Note: we need a singleton here so that things like 'this == this' work
        (and probably a good idea for speed).

        Caching a single instance here seems technically incorrect,
        considering the declaringInterpreter could be different under some
        circumstances.  (Case: a child interpreter running a source() / eval()
        command ).  However the effect is just that the main interpreter that
        executes your script should be the one involved in call-backs from Java.

        I do not know if there are corner cases where a child interpreter would
        be the first to use a This reference in a namespace or if that would
        even cause any problems if it did...  We could do some experiments
        to find out... and if necessary we could cache on a per interpreter
        basis if we had weak references...  We might also look at skipping
        over child interpreters and going to the parent for the declaring
        interpreter, so we'd be sure to get the top interpreter.
    */</jtok>
<jtok eid="25" type="class_or_interface_ref" span="491:5:491:9">This</jtok>
<jtok eid="25" type="method_name" span="491:10:491:17">getThis</jtok>
<jtok eid="25" type="parameter_type" span="491:19:491:30">Interpreter</jtok>
<jtok eid="25" type="parameter_name" span="491:31:491:51">declaringInterpreter</jtok>
<jtok eid="25" type="primary_name_ref" span="493:14:493:27">thisReference</jtok>
<jtok eid="25" type="primary_name_ref" span="494:13:494:26">thisReference</jtok>
<jtok eid="25" type="primary_name_ref" span="494:29:494:33">This</jtok>
<jtok eid="25" type="method_call" span="494:34:494:41">getThis</jtok>
<jtok eid="25" type="primary_name_ref" span="494:49:494:69">declaringInterpreter</jtok>
<jtok eid="25" type="primary_name_ref" span="496:16:496:29">thisReference</jtok>
<jtok eid="26" type="class_or_interface_ref" span="499:12:499:27">BshClassManager</jtok>
<jtok eid="26" type="method_name" span="499:28:499:43">getClassManager</jtok>
<jtok eid="26" type="primary_name_ref" span="501:14:501:26">classManager</jtok>
<jtok eid="26" type="primary_name_ref" span="502:20:502:32">classManager</jtok>
<jtok eid="26" type="primary_name_ref" span="503:14:503:20">parent</jtok>
<jtok eid="26" type="primary_name_ref" span="503:32:503:38">parent</jtok>
<jtok eid="26" type="primary_name_ref" span="503:42:503:50">JAVACODE</jtok>
<jtok eid="26" type="primary_name_ref" span="504:20:504:26">parent</jtok>
<jtok eid="26" type="method_call" span="504:27:504:42">getClassManager</jtok>
<jtok eid="26" type="primary_name_ref" span="506:1:506:7">System</jtok>
<jtok eid="26" type="qualified_name_ref" span="506:8:506:11">out</jtok>
<jtok eid="26" type="method_call" span="506:12:506:19">println</jtok>
<jtok eid="26" type="string_literal" span="506:20:506:56">"experiment: creating class manager"</jtok>
<jtok eid="26" type="primary_name_ref" span="507:9:507:21">classManager</jtok>
<jtok eid="26" type="primary_name_ref" span="507:24:507:39">BshClassManager</jtok>
<jtok eid="26" type="method_call" span="507:40:507:58">createClassManager</jtok>
<jtok eid="26" type="block_comment" span="507:64:507:74">/*interp*/</jtok>
<jtok eid="26" type="line_comment" span="509:9:509:66">//Interpreter.debug("No class manager namespace:" +this);</jtok>
<jtok eid="26" type="primary_name_ref" span="510:16:510:28">classManager</jtok>
<jtok eid="27" type="method_name" span="513:10:513:25">setClassManager</jtok>
<jtok eid="27" type="parameter_type" span="513:27:513:42">BshClassManager</jtok>
<jtok eid="27" type="parameter_name" span="513:43:513:55">classManager</jtok>
<jtok eid="27" type="qualified_name_ref" span="514:14:514:26">classManager</jtok>
<jtok eid="27" type="primary_name_ref" span="514:29:514:41">classManager</jtok>
<jtok eid="1" type="block_comment" span="517:5:519:7">/**
        Used for serialization
    */</jtok>
<jtok eid="28" type="method_name" span="520:17:520:22">prune</jtok>
<jtok eid="28" type="line_comment" span="522:9:522:68">// Cut off from parent, we must have our own class manager.</jtok>
<jtok eid="28" type="line_comment" span="523:9:523:71">// Can't do this in the run() command (needs to resolve stuff)</jtok>
<jtok eid="28" type="line_comment" span="524:9:524:73">// Should we do it by default when we create a namespace will no</jtok>
<jtok eid="28" type="line_comment" span="525:9:525:36">// parent of class manager?</jtok>
<jtok eid="28" type="qualified_name_ref" span="527:19:527:31">classManager</jtok>
<jtok eid="28" type="line_comment" span="528:1:528:76">// XXX if we keep the createClassManager in getClassManager then we can axe</jtok>
<jtok eid="28" type="line_comment" span="529:1:529:9">// this?</jtok>
<jtok eid="28" type="method_call" span="530:13:530:28">setClassManager</jtok>
<jtok eid="28" type="primary_name_ref" span="531:17:531:32">BshClassManager</jtok>
<jtok eid="28" type="method_call" span="531:33:531:51">createClassManager</jtok>
<jtok eid="28" type="block_comment" span="531:57:531:67">/*interp*/</jtok>
<jtok eid="28" type="method_call" span="533:9:533:18">setParent</jtok>
<jtok eid="29" type="method_name" span="536:17:536:26">setParent</jtok>
<jtok eid="29" type="parameter_type" span="536:28:536:37">NameSpace</jtok>
<jtok eid="29" type="parameter_name" span="536:38:536:44">parent</jtok>
<jtok eid="29" type="qualified_name_ref" span="538:14:538:20">parent</jtok>
<jtok eid="29" type="primary_name_ref" span="538:23:538:29">parent</jtok>
<jtok eid="29" type="line_comment" span="540:9:540:78">// If we are disconnected from root we need to handle the def imports</jtok>
<jtok eid="29" type="primary_name_ref" span="541:14:541:20">parent</jtok>
<jtok eid="29" type="method_call" span="542:13:542:31">loadDefaultImports</jtok>
<jtok eid="1" type="block_comment" span="545:5:554:7">/**
        Get the specified variable in this namespace or a parent namespace.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package you will have to use
        Primitive.unwrap() to get primitive values.
        @see Primitive#unwrap( Object )

        @return The variable value or Primitive.VOID if it is not defined.
    */</jtok>
<jtok eid="30" type="class_or_interface_ref" span="555:12:555:18">Object</jtok>
<jtok eid="30" type="method_name" span="555:19:555:30">getVariable</jtok>
<jtok eid="30" type="parameter_type" span="555:32:555:38">String</jtok>
<jtok eid="30" type="parameter_name" span="555:39:555:43">name</jtok>
<jtok eid="30" type="throws" span="556:16:556:29">UtilEvalError</jtok>
<jtok eid="30" type="method_call" span="558:16:558:27">getVariable</jtok>
<jtok eid="30" type="primary_name_ref" span="558:29:558:33">name</jtok>
<jtok eid="1" type="block_comment" span="561:5:572:7">/**
        Get the specified variable in this namespace.
        @param recurse If recurse is true then we recursively search through
        parent namespaces for the variable.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package you will have to use
        Primitive.unwrap() to get primitive values.
        @see Primitive#unwrap( Object )

        @return The variable value or Primitive.VOID if it is not defined.
    */</jtok>
<jtok eid="31" type="class_or_interface_ref" span="573:12:573:18">Object</jtok>
<jtok eid="31" type="method_name" span="573:19:573:30">getVariable</jtok>
<jtok eid="31" type="parameter_type" span="573:32:573:38">String</jtok>
<jtok eid="31" type="parameter_name" span="573:39:573:43">name</jtok>
<jtok eid="31" type="parameter_name" span="573:53:573:60">recurse</jtok>
<jtok eid="31" type="throws" span="574:16:574:29">UtilEvalError</jtok>
<jtok eid="31" type="class_or_interface_ref" span="576:9:576:17">Variable</jtok>
<jtok eid="31" type="local_variable_name" span="576:18:576:21">var</jtok>
<jtok eid="31" type="method_call" span="576:24:576:39">getVariableImpl</jtok>
<jtok eid="31" type="primary_name_ref" span="576:41:576:45">name</jtok>
<jtok eid="31" type="primary_name_ref" span="576:47:576:54">recurse</jtok>
<jtok eid="31" type="method_call" span="577:16:577:30">unwrapVariable</jtok>
<jtok eid="31" type="primary_name_ref" span="577:32:577:35">var</jtok>
<jtok eid="1" type="block_comment" span="580:5:587:7">/**
        Locate a variable and return the Variable object with optional
        recursion through parent name spaces.
        &lt;p/&gt;
        If this namespace is static, return only static variables.

        @return the Variable value or null if it is not defined
    */</jtok>
<jtok eid="32" type="class_or_interface_ref" span="588:15:588:23">Variable</jtok>
<jtok eid="32" type="method_name" span="588:24:588:39">getVariableImpl</jtok>
<jtok eid="32" type="parameter_type" span="588:41:588:47">String</jtok>
<jtok eid="32" type="parameter_name" span="588:48:588:52">name</jtok>
<jtok eid="32" type="parameter_name" span="588:62:588:69">recurse</jtok>
<jtok eid="32" type="throws" span="589:16:589:29">UtilEvalError</jtok>
<jtok eid="32" type="class_or_interface_ref" span="591:9:591:17">Variable</jtok>
<jtok eid="32" type="local_variable_name" span="591:18:591:21">var</jtok>
<jtok eid="32" type="line_comment" span="593:9:593:68">// Change import precedence if we are a class body/instance</jtok>
<jtok eid="32" type="line_comment" span="594:9:594:31">// Get imported first.</jtok>
<jtok eid="32" type="primary_name_ref" span="595:14:595:17">var</jtok>
<jtok eid="32" type="primary_name_ref" span="595:29:595:36">isClass</jtok>
<jtok eid="32" type="primary_name_ref" span="596:13:596:16">var</jtok>
<jtok eid="32" type="method_call" span="596:19:596:33">getImportedVar</jtok>
<jtok eid="32" type="primary_name_ref" span="596:35:596:39">name</jtok>
<jtok eid="32" type="primary_name_ref" span="598:14:598:17">var</jtok>
<jtok eid="32" type="primary_name_ref" span="598:29:598:38">variables</jtok>
<jtok eid="32" type="primary_name_ref" span="599:13:599:16">var</jtok>
<jtok eid="32" type="class_or_interface_ref" span="599:20:599:28">Variable</jtok>
<jtok eid="32" type="primary_name_ref" span="599:29:599:38">variables</jtok>
<jtok eid="32" type="method_call" span="599:39:599:42">get</jtok>
<jtok eid="32" type="primary_name_ref" span="599:43:599:47">name</jtok>
<jtok eid="32" type="line_comment" span="601:9:601:68">// Change import precedence if we are a class body/instance</jtok>
<jtok eid="32" type="primary_name_ref" span="602:14:602:17">var</jtok>
<jtok eid="32" type="primary_name_ref" span="602:30:602:37">isClass</jtok>
<jtok eid="32" type="primary_name_ref" span="603:13:603:16">var</jtok>
<jtok eid="32" type="method_call" span="603:19:603:33">getImportedVar</jtok>
<jtok eid="32" type="primary_name_ref" span="603:35:603:39">name</jtok>
<jtok eid="32" type="line_comment" span="605:9:605:22">// try parent</jtok>
<jtok eid="32" type="primary_name_ref" span="606:14:606:21">recurse</jtok>
<jtok eid="32" type="primary_name_ref" span="606:26:606:29">var</jtok>
<jtok eid="32" type="primary_name_ref" span="606:43:606:49">parent</jtok>
<jtok eid="32" type="primary_name_ref" span="607:13:607:16">var</jtok>
<jtok eid="32" type="primary_name_ref" span="607:19:607:25">parent</jtok>
<jtok eid="32" type="method_call" span="607:26:607:41">getVariableImpl</jtok>
<jtok eid="32" type="primary_name_ref" span="607:43:607:47">name</jtok>
<jtok eid="32" type="primary_name_ref" span="607:49:607:56">recurse</jtok>
<jtok eid="32" type="primary_name_ref" span="609:16:609:19">var</jtok>
<jtok eid="1" type="block_comment" span="612:5:614:7">/*
        Get variables declared in this namespace.
    */</jtok>
<jtok eid="33" type="class_or_interface_ref" span="615:12:615:20">Variable</jtok>
<jtok eid="33" type="method_name" span="615:24:615:44">getDeclaredVariables</jtok>
<jtok eid="33" type="primary_name_ref" span="617:14:617:23">variables</jtok>
<jtok eid="33" type="constructor_call" span="618:24:618:32">Variable</jtok>
<jtok eid="33" type="class_or_interface_ref" span="619:9:619:17">Variable</jtok>
<jtok eid="33" type="local_variable_name" span="619:21:619:25">vars</jtok>
<jtok eid="33" type="constructor_call" span="619:32:619:40">Variable</jtok>
<jtok eid="33" type="primary_name_ref" span="619:43:619:52">variables</jtok>
<jtok eid="33" type="method_call" span="619:53:619:57">size</jtok>
<jtok eid="33" type="local_variable_name" span="620:13:620:14">i</jtok>
<jtok eid="33" type="class_or_interface_ref" span="621:14:621:25">Enumeration</jtok>
<jtok eid="33" type="local_variable_name" span="621:26:621:27">e</jtok>
<jtok eid="33" type="primary_name_ref" span="621:30:621:39">variables</jtok>
<jtok eid="33" type="method_call" span="621:40:621:48">elements</jtok>
<jtok eid="33" type="primary_name_ref" span="621:52:621:53">e</jtok>
<jtok eid="33" type="method_call" span="621:54:621:69">hasMoreElements</jtok>
<jtok eid="33" type="primary_name_ref" span="622:13:622:17">vars</jtok>
<jtok eid="33" type="primary_name_ref" span="622:18:622:19">i</jtok>
<jtok eid="33" type="class_or_interface_ref" span="622:26:622:34">Variable</jtok>
<jtok eid="33" type="primary_name_ref" span="622:35:622:36">e</jtok>
<jtok eid="33" type="method_call" span="622:37:622:48">nextElement</jtok>
<jtok eid="33" type="primary_name_ref" span="623:16:623:20">vars</jtok>
<jtok eid="1" type="block_comment" span="626:5:630:7">/**
        Unwrap a variable to its value.
        @return return the variable value.  A null var is mapped to
            Primitive.VOID
    */</jtok>
<jtok eid="34" type="class_or_interface_ref" span="631:15:631:21">Object</jtok>
<jtok eid="34" type="method_name" span="631:22:631:36">unwrapVariable</jtok>
<jtok eid="34" type="parameter_type" span="631:38:631:46">Variable</jtok>
<jtok eid="34" type="parameter_name" span="631:47:631:50">var</jtok>
<jtok eid="34" type="throws" span="632:16:632:29">UtilEvalError</jtok>
<jtok eid="34" type="primary_name_ref" span="634:17:634:20">var</jtok>
<jtok eid="34" type="primary_name_ref" span="634:32:634:41">Primitive</jtok>
<jtok eid="34" type="qualified_name_ref" span="634:42:634:46">VOID</jtok>
<jtok eid="34" type="primary_name_ref" span="634:49:634:52">var</jtok>
<jtok eid="34" type="method_call" span="634:53:634:61">getValue</jtok>
<jtok eid="1" type="block_comment" span="637:5:639:7">/**
        @deprecated See #setTypedVariable( String, Class, Object, Modifiers )
    */</jtok>
<jtok eid="35" type="method_name" span="640:17:640:33">setTypedVariable</jtok>
<jtok eid="35" type="parameter_type" span="641:9:641:15">String</jtok>
<jtok eid="35" type="parameter_name" span="641:16:641:20">name</jtok>
<jtok eid="35" type="parameter_type" span="641:22:641:27">Class</jtok>
<jtok eid="35" type="parameter_name" span="641:28:641:32">type</jtok>
<jtok eid="35" type="parameter_type" span="641:34:641:40">Object</jtok>
<jtok eid="35" type="parameter_name" span="641:41:641:46">value</jtok>
<jtok eid="35" type="parameter_name" span="641:56:641:63">isFinal</jtok>
<jtok eid="35" type="throws" span="642:16:642:29">UtilEvalError</jtok>
<jtok eid="35" type="class_or_interface_ref" span="644:9:644:18">Modifiers</jtok>
<jtok eid="35" type="local_variable_name" span="644:19:644:28">modifiers</jtok>
<jtok eid="35" type="constructor_call" span="644:35:644:44">Modifiers</jtok>
<jtok eid="35" type="primary_name_ref" span="645:14:645:21">isFinal</jtok>
<jtok eid="35" type="primary_name_ref" span="646:13:646:22">modifiers</jtok>
<jtok eid="35" type="method_call" span="646:23:646:34">addModifier</jtok>
<jtok eid="35" type="primary_name_ref" span="646:36:646:45">Modifiers</jtok>
<jtok eid="35" type="qualified_name_ref" span="646:46:646:51">FIELD</jtok>
<jtok eid="35" type="string_literal" span="646:53:646:60">"final"</jtok>
<jtok eid="35" type="method_call" span="647:9:647:25">setTypedVariable</jtok>
<jtok eid="35" type="primary_name_ref" span="647:27:647:31">name</jtok>
<jtok eid="35" type="primary_name_ref" span="647:33:647:37">type</jtok>
<jtok eid="35" type="primary_name_ref" span="647:39:647:44">value</jtok>
<jtok eid="35" type="primary_name_ref" span="647:46:647:55">modifiers</jtok>
<jtok eid="1" type="block_comment" span="650:5:668:7">/**
        Declare a variable in the local scope and set its initial value.
        Value may be null to indicate that we would like the default value
        for the variable type. (e.g.  0 for integer types, null for object
        types).  An existing typed variable may only be set to the same type.
        If an untyped variable of the same name exists it will be overridden
        with the new typed var.
        The set will perform a Types.getAssignableForm() on the value if
        necessary.

        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package and wish to set variables with
        primitive values you will have to wrap them using bsh.Primitive.
        @see org.gjt.sp.jedit.bsh.Primitive

        @param value If value is null, you'll get the default value for the type
        @param modifiers may be null
    */</jtok>
<jtok eid="36" type="method_name" span="669:17:669:33">setTypedVariable</jtok>
<jtok eid="36" type="parameter_type" span="670:9:670:15">String</jtok>
<jtok eid="36" type="parameter_name" span="670:16:670:20">name</jtok>
<jtok eid="36" type="parameter_type" span="670:22:670:27">Class</jtok>
<jtok eid="36" type="parameter_name" span="670:28:670:32">type</jtok>
<jtok eid="36" type="parameter_type" span="670:34:670:40">Object</jtok>
<jtok eid="36" type="parameter_name" span="670:41:670:46">value</jtok>
<jtok eid="36" type="parameter_type" span="670:48:670:57">Modifiers</jtok>
<jtok eid="36" type="parameter_name" span="670:58:670:67">modifiers</jtok>
<jtok eid="36" type="throws" span="671:16:671:29">UtilEvalError</jtok>
<jtok eid="36" type="line_comment" span="673:9:673:53">//checkVariableModifiers( name, modifiers );</jtok>
<jtok eid="36" type="primary_name_ref" span="675:14:675:23">variables</jtok>
<jtok eid="36" type="primary_name_ref" span="676:13:676:22">variables</jtok>
<jtok eid="36" type="constructor_call" span="676:29:676:38">Hashtable</jtok>
<jtok eid="36" type="line_comment" span="678:9:678:65">// Setting a typed variable is always a local operation.</jtok>
<jtok eid="36" type="class_or_interface_ref" span="679:9:679:17">Variable</jtok>
<jtok eid="36" type="local_variable_name" span="679:18:679:26">existing</jtok>
<jtok eid="36" type="method_call" span="679:29:679:44">getVariableImpl</jtok>
<jtok eid="36" type="primary_name_ref" span="679:46:679:50">name</jtok>
<jtok eid="36" type="block_comment" span="679:57:679:68">/*recurse*/</jtok>
<jtok eid="36" type="line_comment" span="682:9:682:44">// Null value is just a declaration</jtok>
<jtok eid="36" type="line_comment" span="683:9:683:80">// Note: we might want to keep any existing value here instead of reset</jtok>
<jtok eid="36" type="block_comment" span="684:5:688:7">/*
    // Moved to Variable
        if ( value == null )
            value = Primitive.getDefaultValue( type );
    */</jtok>
<jtok eid="36" type="line_comment" span="690:9:690:44">// does the variable already exist?</jtok>
<jtok eid="36" type="primary_name_ref" span="691:14:691:22">existing</jtok>
<jtok eid="36" type="line_comment" span="693:13:693:28">// Is it typed?</jtok>
<jtok eid="36" type="primary_name_ref" span="694:18:694:26">existing</jtok>
<jtok eid="36" type="method_call" span="694:27:694:34">getType</jtok>
<jtok eid="36" type="line_comment" span="696:17:696:59">// If it had a different type throw error.</jtok>
<jtok eid="36" type="line_comment" span="697:17:697:74">// This allows declaring the same var again, but not with</jtok>
<jtok eid="36" type="line_comment" span="698:17:698:58">// a different (even if assignable) type.</jtok>
<jtok eid="36" type="primary_name_ref" span="699:22:699:30">existing</jtok>
<jtok eid="36" type="method_call" span="699:31:699:38">getType</jtok>
<jtok eid="36" type="primary_name_ref" span="699:44:699:48">type</jtok>
<jtok eid="36" type="constructor_call" span="701:31:701:44">UtilEvalError</jtok>
<jtok eid="36" type="string_literal" span="701:46:701:64">"Typed variable: "</jtok>
<jtok eid="36" type="primary_name_ref" span="701:65:701:69">name</jtok>
<jtok eid="36" type="string_literal" span="702:26:702:64">" was previously declared with type: "</jtok>
<jtok eid="36" type="primary_name_ref" span="703:27:703:35">existing</jtok>
<jtok eid="36" type="method_call" span="703:36:703:43">getType</jtok>
<jtok eid="36" type="line_comment" span="706:21:706:46">// else set it and return</jtok>
<jtok eid="36" type="primary_name_ref" span="707:21:707:29">existing</jtok>
<jtok eid="36" type="method_call" span="707:30:707:38">setValue</jtok>
<jtok eid="36" type="primary_name_ref" span="707:40:707:45">value</jtok>
<jtok eid="36" type="primary_name_ref" span="707:47:707:55">Variable</jtok>
<jtok eid="36" type="qualified_name_ref" span="707:56:707:67">DECLARATION</jtok>
<jtok eid="36" type="line_comment" span="711:13:711:29">// Careful here:</jtok>
<jtok eid="36" type="line_comment" span="712:13:712:79">// else fall through to override and install the new typed version</jtok>
<jtok eid="36" type="line_comment" span="715:9:715:33">// Add the new typed var</jtok>
<jtok eid="36" type="primary_name_ref" span="716:9:716:18">variables</jtok>
<jtok eid="36" type="method_call" span="716:19:716:22">put</jtok>
<jtok eid="36" type="primary_name_ref" span="716:24:716:28">name</jtok>
<jtok eid="36" type="constructor_call" span="716:34:716:42">Variable</jtok>
<jtok eid="36" type="primary_name_ref" span="716:44:716:48">name</jtok>
<jtok eid="36" type="primary_name_ref" span="716:50:716:54">type</jtok>
<jtok eid="36" type="primary_name_ref" span="716:56:716:61">value</jtok>
<jtok eid="36" type="primary_name_ref" span="716:63:716:72">modifiers</jtok>
<jtok eid="1" type="block_comment" span="719:5:729:7">/**
        Dissallow static vars outside of a class
        @param name is here just to allow the error message to use it
    protected void checkVariableModifiers( String name, Modifiers modifiers )
        throws UtilEvalError
    {
        if ( modifiers!=null &amp;&amp; modifiers.hasModifier("static") )
            throw new UtilEvalError(
                "Can't declare static variable outside of class: "+name );
    }
    */</jtok>
<jtok eid="1" type="block_comment" span="731:5:735:7">/**
        Note: this is primarily for internal use.
        @see Interpreter#source( String )
        @see Interpreter#eval( String )
    */</jtok>
<jtok eid="37" type="method_name" span="736:17:736:26">setMethod</jtok>
<jtok eid="37" type="parameter_type" span="736:28:736:34">String</jtok>
<jtok eid="37" type="parameter_name" span="736:35:736:39">name</jtok>
<jtok eid="37" type="parameter_type" span="736:41:736:50">BshMethod</jtok>
<jtok eid="37" type="parameter_name" span="736:51:736:57">method</jtok>
<jtok eid="37" type="throws" span="737:16:737:29">UtilEvalError</jtok>
<jtok eid="37" type="line_comment" span="739:9:739:42">//checkMethodModifiers( method );</jtok>
<jtok eid="37" type="primary_name_ref" span="741:14:741:21">methods</jtok>
<jtok eid="37" type="primary_name_ref" span="742:13:742:20">methods</jtok>
<jtok eid="37" type="constructor_call" span="742:27:742:36">Hashtable</jtok>
<jtok eid="37" type="class_or_interface_ref" span="744:9:744:15">Object</jtok>
<jtok eid="37" type="local_variable_name" span="744:16:744:17">m</jtok>
<jtok eid="37" type="primary_name_ref" span="744:20:744:27">methods</jtok>
<jtok eid="37" type="method_call" span="744:28:744:31">get</jtok>
<jtok eid="37" type="primary_name_ref" span="744:32:744:36">name</jtok>
<jtok eid="37" type="line_comment" span="746:9:746:74">//{{{ jEdit version: properly handle methods with same signature.</jtok>
<jtok eid="37" type="primary_name_ref" span="747:13:747:14">m</jtok>
<jtok eid="37" type="primary_name_ref" span="748:13:748:20">methods</jtok>
<jtok eid="37" type="method_call" span="748:21:748:24">put</jtok>
<jtok eid="37" type="primary_name_ref" span="748:25:748:29">name</jtok>
<jtok eid="37" type="primary_name_ref" span="748:31:748:37">method</jtok>
<jtok eid="37" type="primary_name_ref" span="749:18:749:19">m</jtok>
<jtok eid="37" type="class_or_interface_ref" span="749:31:749:40">BshMethod</jtok>
<jtok eid="37" type="line_comment" span="751:13:751:60">// is the new method overriding the old method?</jtok>
<jtok eid="37" type="primary_name_ref" span="752:17:752:23">Arrays</jtok>
<jtok eid="37" type="method_call" span="752:24:752:30">equals</jtok>
<jtok eid="37" type="class_or_interface_ref" span="752:33:752:42">BshMethod</jtok>
<jtok eid="37" type="primary_name_ref" span="752:43:752:44">m</jtok>
<jtok eid="37" type="method_call" span="752:46:752:63">getParameterTypes</jtok>
<jtok eid="37" type="primary_name_ref" span="753:31:753:37">method</jtok>
<jtok eid="37" type="method_call" span="753:38:753:55">getParameterTypes</jtok>
<jtok eid="37" type="primary_name_ref" span="755:17:755:24">methods</jtok>
<jtok eid="37" type="method_call" span="755:25:755:28">put</jtok>
<jtok eid="37" type="primary_name_ref" span="755:29:755:33">name</jtok>
<jtok eid="37" type="primary_name_ref" span="755:35:755:41">method</jtok>
<jtok eid="37" type="class_or_interface_ref" span="759:17:759:23">Vector</jtok>
<jtok eid="37" type="local_variable_name" span="759:24:759:25">v</jtok>
<jtok eid="37" type="constructor_call" span="759:32:759:38">Vector</jtok>
<jtok eid="37" type="primary_name_ref" span="760:17:760:18">v</jtok>
<jtok eid="37" type="method_call" span="760:19:760:29">addElement</jtok>
<jtok eid="37" type="primary_name_ref" span="760:31:760:32">m</jtok>
<jtok eid="37" type="primary_name_ref" span="761:17:761:18">v</jtok>
<jtok eid="37" type="method_call" span="761:19:761:29">addElement</jtok>
<jtok eid="37" type="primary_name_ref" span="761:31:761:37">method</jtok>
<jtok eid="37" type="primary_name_ref" span="762:17:762:24">methods</jtok>
<jtok eid="37" type="method_call" span="762:25:762:28">put</jtok>
<jtok eid="37" type="primary_name_ref" span="762:30:762:34">name</jtok>
<jtok eid="37" type="primary_name_ref" span="762:36:762:37">v</jtok>
<jtok eid="37" type="class_or_interface_ref" span="767:13:767:19">Vector</jtok>
<jtok eid="37" type="local_variable_name" span="767:20:767:28">_methods</jtok>
<jtok eid="37" type="class_or_interface_ref" span="767:32:767:38">Vector</jtok>
<jtok eid="37" type="primary_name_ref" span="767:40:767:41">m</jtok>
<jtok eid="37" type="local_variable_name" span="768:22:768:23">i</jtok>
<jtok eid="37" type="primary_name_ref" span="768:29:768:30">i</jtok>
<jtok eid="37" type="primary_name_ref" span="768:33:768:41">_methods</jtok>
<jtok eid="37" type="method_call" span="768:42:768:46">size</jtok>
<jtok eid="37" type="primary_name_ref" span="768:50:768:51">i</jtok>
<jtok eid="37" type="line_comment" span="770:17:770:67">// Check whether the new method overrides some old</jtok>
<jtok eid="37" type="line_comment" span="771:17:771:39">// method in the list.</jtok>
<jtok eid="37" type="class_or_interface_ref" span="772:17:772:26">BshMethod</jtok>
<jtok eid="37" type="local_variable_name" span="772:27:772:33">_old_m</jtok>
<jtok eid="37" type="class_or_interface_ref" span="772:37:772:46">BshMethod</jtok>
<jtok eid="37" type="primary_name_ref" span="772:48:772:56">_methods</jtok>
<jtok eid="37" type="method_call" span="772:57:772:60">get</jtok>
<jtok eid="37" type="primary_name_ref" span="772:61:772:62">i</jtok>
<jtok eid="37" type="primary_name_ref" span="773:21:773:27">Arrays</jtok>
<jtok eid="37" type="method_call" span="773:28:773:34">equals</jtok>
<jtok eid="37" type="primary_name_ref" span="773:35:773:41">_old_m</jtok>
<jtok eid="37" type="method_call" span="773:42:773:59">getParameterTypes</jtok>
<jtok eid="37" type="primary_name_ref" span="774:35:774:41">method</jtok>
<jtok eid="37" type="method_call" span="774:42:774:59">getParameterTypes</jtok>
<jtok eid="37" type="primary_name_ref" span="776:21:776:29">_methods</jtok>
<jtok eid="37" type="method_call" span="776:30:776:36">remove</jtok>
<jtok eid="37" type="primary_name_ref" span="776:37:776:38">i</jtok>
<jtok eid="37" type="primary_name_ref" span="780:13:780:21">_methods</jtok>
<jtok eid="37" type="method_call" span="780:22:780:32">addElement</jtok>
<jtok eid="37" type="primary_name_ref" span="780:34:780:40">method</jtok>
<jtok eid="37" type="line_comment" span="782:9:782:14">//}}}</jtok>
<jtok eid="37" type="line_comment" span="784:9:784:38">//{{{ Original BeanShell code</jtok>
<jtok eid="37" type="line_comment" span="785:9:785:28">// if ( m == null )</jtok>
<jtok eid="37" type="line_comment" span="786:9:786:39">// 	methods.put(name, method);</jtok>
<jtok eid="37" type="line_comment" span="787:9:787:16">// else</jtok>
<jtok eid="37" type="line_comment" span="788:9:788:43">// if ( m instanceof BshMethod ) {</jtok>
<jtok eid="37" type="line_comment" span="789:9:789:37">// 	Vector v = new Vector();</jtok>
<jtok eid="37" type="line_comment" span="790:9:790:31">// 	v.addElement( m );</jtok>
<jtok eid="37" type="line_comment" span="791:9:791:36">// 	v.addElement( method );</jtok>
<jtok eid="37" type="line_comment" span="792:9:792:36">// 	methods.put( name, v );</jtok>
<jtok eid="37" type="line_comment" span="793:9:793:28">// } else // Vector</jtok>
<jtok eid="37" type="line_comment" span="794:9:794:46">// 	((Vector)m).addElement( method );</jtok>
<jtok eid="37" type="line_comment" span="795:9:795:14">//}}}</jtok>
<jtok eid="1" type="block_comment" span="798:5:801:7">/**
        @see #getMethod( String, Class [], boolean )
        @see #getMethod( String, Class [] )
    */</jtok>
<jtok eid="38" type="class_or_interface_ref" span="802:12:802:21">BshMethod</jtok>
<jtok eid="38" type="method_name" span="802:22:802:31">getMethod</jtok>
<jtok eid="38" type="parameter_type" span="802:33:802:39">String</jtok>
<jtok eid="38" type="parameter_name" span="802:40:802:44">name</jtok>
<jtok eid="38" type="parameter_type" span="802:46:802:51">Class</jtok>
<jtok eid="38" type="parameter_name" span="802:55:802:58">sig</jtok>
<jtok eid="38" type="throws" span="803:16:803:29">UtilEvalError</jtok>
<jtok eid="38" type="method_call" span="805:16:805:25">getMethod</jtok>
<jtok eid="38" type="primary_name_ref" span="805:27:805:31">name</jtok>
<jtok eid="38" type="primary_name_ref" span="805:33:805:36">sig</jtok>
<jtok eid="38" type="block_comment" span="805:43:805:59">/*declaredOnly*/</jtok>
<jtok eid="1" type="block_comment" span="808:5:820:7">/**
        Get the bsh method matching the specified signature declared in
        this name space or a parent.
        &lt;p&gt;
        Note: this method is primarily intended for use internally.  If you use
        this method outside of the bsh package you will have to be familiar
        with BeanShell's use of the Primitive wrapper class.
        @see org.gjt.sp.jedit.bsh.Primitive
        @return the BshMethod or null if not found
        @param declaredOnly if true then only methods declared directly in this
            namespace will be found and no inherited or imported methods will
            be visible.
    */</jtok>
<jtok eid="39" type="class_or_interface_ref" span="821:12:821:21">BshMethod</jtok>
<jtok eid="39" type="method_name" span="821:22:821:31">getMethod</jtok>
<jtok eid="39" type="parameter_type" span="822:9:822:15">String</jtok>
<jtok eid="39" type="parameter_name" span="822:16:822:20">name</jtok>
<jtok eid="39" type="parameter_type" span="822:22:822:27">Class</jtok>
<jtok eid="39" type="parameter_name" span="822:31:822:34">sig</jtok>
<jtok eid="39" type="parameter_name" span="822:44:822:56">declaredOnly</jtok>
<jtok eid="39" type="throws" span="823:16:823:29">UtilEvalError</jtok>
<jtok eid="39" type="class_or_interface_ref" span="825:9:825:18">BshMethod</jtok>
<jtok eid="39" type="local_variable_name" span="825:19:825:25">method</jtok>
<jtok eid="39" type="line_comment" span="827:9:827:68">// Change import precedence if we are a class body/instance</jtok>
<jtok eid="39" type="line_comment" span="828:9:828:29">// Get import first.</jtok>
<jtok eid="39" type="primary_name_ref" span="829:14:829:20">method</jtok>
<jtok eid="39" type="primary_name_ref" span="829:32:829:39">isClass</jtok>
<jtok eid="39" type="primary_name_ref" span="829:44:829:56">declaredOnly</jtok>
<jtok eid="39" type="primary_name_ref" span="830:13:830:19">method</jtok>
<jtok eid="39" type="method_call" span="830:22:830:39">getImportedMethod</jtok>
<jtok eid="39" type="primary_name_ref" span="830:41:830:45">name</jtok>
<jtok eid="39" type="primary_name_ref" span="830:47:830:50">sig</jtok>
<jtok eid="39" type="class_or_interface_ref" span="832:9:832:15">Object</jtok>
<jtok eid="39" type="local_variable_name" span="832:16:832:17">m</jtok>
<jtok eid="39" type="primary_name_ref" span="833:14:833:20">method</jtok>
<jtok eid="39" type="primary_name_ref" span="833:32:833:39">methods</jtok>
<jtok eid="39" type="primary_name_ref" span="835:13:835:14">m</jtok>
<jtok eid="39" type="primary_name_ref" span="835:17:835:24">methods</jtok>
<jtok eid="39" type="method_call" span="835:25:835:28">get</jtok>
<jtok eid="39" type="primary_name_ref" span="835:29:835:33">name</jtok>
<jtok eid="39" type="line_comment" span="837:13:837:66">// m contains either BshMethod or Vector of BshMethod</jtok>
<jtok eid="39" type="primary_name_ref" span="838:18:838:19">m</jtok>
<jtok eid="39" type="line_comment" span="840:17:840:26">// unwrap</jtok>
<jtok eid="39" type="class_or_interface_ref" span="841:17:841:26">BshMethod</jtok>
<jtok eid="39" type="local_variable_name" span="841:30:841:32">ma</jtok>
<jtok eid="39" type="primary_name_ref" span="842:22:842:23">m</jtok>
<jtok eid="39" type="class_or_interface_ref" span="842:35:842:41">Vector</jtok>
<jtok eid="39" type="class_or_interface_ref" span="844:21:844:27">Vector</jtok>
<jtok eid="39" type="local_variable_name" span="844:28:844:30">vm</jtok>
<jtok eid="39" type="class_or_interface_ref" span="844:34:844:40">Vector</jtok>
<jtok eid="39" type="primary_name_ref" span="844:41:844:42">m</jtok>
<jtok eid="39" type="primary_name_ref" span="845:21:845:23">ma</jtok>
<jtok eid="39" type="constructor_call" span="845:30:845:39">BshMethod</jtok>
<jtok eid="39" type="primary_name_ref" span="845:41:845:43">vm</jtok>
<jtok eid="39" type="method_call" span="845:44:845:48">size</jtok>
<jtok eid="39" type="primary_name_ref" span="846:21:846:23">vm</jtok>
<jtok eid="39" type="method_call" span="846:24:846:32">copyInto</jtok>
<jtok eid="39" type="primary_name_ref" span="846:34:846:36">ma</jtok>
<jtok eid="39" type="primary_name_ref" span="848:21:848:23">ma</jtok>
<jtok eid="39" type="constructor_call" span="848:30:848:39">BshMethod</jtok>
<jtok eid="39" type="class_or_interface_ref" span="848:45:848:54">BshMethod</jtok>
<jtok eid="39" type="primary_name_ref" span="848:55:848:56">m</jtok>
<jtok eid="39" type="line_comment" span="850:17:850:58">// Apply most specific signature matching</jtok>
<jtok eid="39" type="class_or_interface_ref" span="851:17:851:22">Class</jtok>
<jtok eid="39" type="local_variable_name" span="851:28:851:38">candidates</jtok>
<jtok eid="39" type="constructor_call" span="851:45:851:50">Class</jtok>
<jtok eid="39" type="primary_name_ref" span="851:52:851:54">ma</jtok>
<jtok eid="39" type="qualified_name_ref" span="851:55:851:61">length</jtok>
<jtok eid="39" type="local_variable_name" span="852:26:852:27">i</jtok>
<jtok eid="39" type="primary_name_ref" span="852:31:852:32">i</jtok>
<jtok eid="39" type="primary_name_ref" span="852:34:852:36">ma</jtok>
<jtok eid="39" type="qualified_name_ref" span="852:37:852:43">length</jtok>
<jtok eid="39" type="primary_name_ref" span="852:45:852:46">i</jtok>
<jtok eid="39" type="primary_name_ref" span="853:21:853:31">candidates</jtok>
<jtok eid="39" type="primary_name_ref" span="853:32:853:33">i</jtok>
<jtok eid="39" type="primary_name_ref" span="853:37:853:39">ma</jtok>
<jtok eid="39" type="primary_name_ref" span="853:40:853:41">i</jtok>
<jtok eid="39" type="method_call" span="853:43:853:60">getParameterTypes</jtok>
<jtok eid="39" type="local_variable_name" span="855:21:855:26">match</jtok>
<jtok eid="39" type="primary_name_ref" span="856:21:856:28">Reflect</jtok>
<jtok eid="39" type="method_call" span="856:29:856:54">findMostSpecificSignature</jtok>
<jtok eid="39" type="primary_name_ref" span="856:56:856:59">sig</jtok>
<jtok eid="39" type="primary_name_ref" span="856:61:856:71">candidates</jtok>
<jtok eid="39" type="primary_name_ref" span="857:22:857:27">match</jtok>
<jtok eid="39" type="primary_name_ref" span="858:21:858:27">method</jtok>
<jtok eid="39" type="primary_name_ref" span="858:30:858:32">ma</jtok>
<jtok eid="39" type="primary_name_ref" span="858:33:858:38">match</jtok>
<jtok eid="39" type="primary_name_ref" span="862:14:862:20">method</jtok>
<jtok eid="39" type="primary_name_ref" span="862:33:862:40">isClass</jtok>
<jtok eid="39" type="primary_name_ref" span="862:45:862:57">declaredOnly</jtok>
<jtok eid="39" type="primary_name_ref" span="863:13:863:19">method</jtok>
<jtok eid="39" type="method_call" span="863:22:863:39">getImportedMethod</jtok>
<jtok eid="39" type="primary_name_ref" span="863:41:863:45">name</jtok>
<jtok eid="39" type="primary_name_ref" span="863:47:863:50">sig</jtok>
<jtok eid="39" type="line_comment" span="865:9:865:22">// try parent</jtok>
<jtok eid="39" type="primary_name_ref" span="866:15:866:27">declaredOnly</jtok>
<jtok eid="39" type="primary_name_ref" span="866:32:866:38">method</jtok>
<jtok eid="39" type="primary_name_ref" span="866:52:866:58">parent</jtok>
<jtok eid="39" type="primary_name_ref" span="867:20:867:26">parent</jtok>
<jtok eid="39" type="method_call" span="867:27:867:36">getMethod</jtok>
<jtok eid="39" type="primary_name_ref" span="867:38:867:42">name</jtok>
<jtok eid="39" type="primary_name_ref" span="867:44:867:47">sig</jtok>
<jtok eid="39" type="primary_name_ref" span="869:16:869:22">method</jtok>
<jtok eid="1" type="block_comment" span="872:5:875:7">/**
        Import a class name.
        Subsequent imports override earlier ones
    */</jtok>
<jtok eid="40" type="method_name" span="876:17:876:28">importClass</jtok>
<jtok eid="40" type="parameter_type" span="876:29:876:35">String</jtok>
<jtok eid="40" type="parameter_name" span="876:36:876:40">name</jtok>
<jtok eid="40" type="primary_name_ref" span="878:14:878:29">importedClasses</jtok>
<jtok eid="40" type="primary_name_ref" span="879:13:879:28">importedClasses</jtok>
<jtok eid="40" type="constructor_call" span="879:35:879:44">Hashtable</jtok>
<jtok eid="40" type="primary_name_ref" span="881:9:881:24">importedClasses</jtok>
<jtok eid="40" type="method_call" span="881:25:881:28">put</jtok>
<jtok eid="40" type="primary_name_ref" span="881:30:881:34">Name</jtok>
<jtok eid="40" type="method_call" span="881:35:881:41">suffix</jtok>
<jtok eid="40" type="primary_name_ref" span="881:42:881:46">name</jtok>
<jtok eid="40" type="primary_name_ref" span="881:52:881:56">name</jtok>
<jtok eid="40" type="method_call" span="882:9:882:25">nameSpaceChanged</jtok>
<jtok eid="1" type="block_comment" span="885:5:887:7">/**
        subsequent imports override earlier ones
    */</jtok>
<jtok eid="41" type="method_name" span="888:17:888:30">importPackage</jtok>
<jtok eid="41" type="parameter_type" span="888:31:888:37">String</jtok>
<jtok eid="41" type="parameter_name" span="888:38:888:42">name</jtok>
<jtok eid="41" type="primary_name_ref" span="890:12:890:28">importedPackages</jtok>
<jtok eid="41" type="primary_name_ref" span="891:13:891:29">importedPackages</jtok>
<jtok eid="41" type="constructor_call" span="891:36:891:42">Vector</jtok>
<jtok eid="41" type="line_comment" span="893:9:893:77">// If it exists, remove it and add it at the end (avoid memory leak)</jtok>
<jtok eid="41" type="primary_name_ref" span="894:14:894:30">importedPackages</jtok>
<jtok eid="41" type="method_call" span="894:31:894:39">contains</jtok>
<jtok eid="41" type="primary_name_ref" span="894:41:894:45">name</jtok>
<jtok eid="41" type="primary_name_ref" span="895:13:895:29">importedPackages</jtok>
<jtok eid="41" type="method_call" span="895:30:895:36">remove</jtok>
<jtok eid="41" type="primary_name_ref" span="895:38:895:42">name</jtok>
<jtok eid="41" type="primary_name_ref" span="897:9:897:25">importedPackages</jtok>
<jtok eid="41" type="method_call" span="897:26:897:36">addElement</jtok>
<jtok eid="41" type="primary_name_ref" span="897:37:897:41">name</jtok>
<jtok eid="41" type="method_call" span="898:9:898:25">nameSpaceChanged</jtok>
<jtok eid="1" type="block_comment" span="901:5:907:7">/**
        Import scripted or compiled BeanShell commands in the following package
        in the classpath.  You may use either "/" path or "." package notation.
        e.g. importCommands("/bsh/commands") or importCommands("bsh.commands")
        are equivalent.  If a relative path style specifier is used then it is
        made into an absolute path by prepending "/".
    */</jtok>
<jtok eid="42" type="method_name" span="908:17:908:31">importCommands</jtok>
<jtok eid="42" type="parameter_type" span="908:33:908:39">String</jtok>
<jtok eid="42" type="parameter_name" span="908:40:908:44">name</jtok>
<jtok eid="42" type="primary_name_ref" span="910:14:910:30">importedCommands</jtok>
<jtok eid="42" type="primary_name_ref" span="911:13:911:29">importedCommands</jtok>
<jtok eid="42" type="constructor_call" span="911:36:911:42">Vector</jtok>
<jtok eid="42" type="line_comment" span="913:9:913:27">// dots to slashes</jtok>
<jtok eid="42" type="primary_name_ref" span="914:9:914:13">name</jtok>
<jtok eid="42" type="primary_name_ref" span="914:16:914:20">name</jtok>
<jtok eid="42" type="method_call" span="914:21:914:28">replace</jtok>
<jtok eid="42" type="line_comment" span="915:9:915:20">// absolute</jtok>
<jtok eid="42" type="primary_name_ref" span="916:15:916:19">name</jtok>
<jtok eid="42" type="method_call" span="916:20:916:30">startsWith</jtok>
<jtok eid="42" type="string_literal" span="916:31:916:34">"/"</jtok>
<jtok eid="42" type="primary_name_ref" span="917:13:917:17">name</jtok>
<jtok eid="42" type="string_literal" span="917:20:917:23">"/"</jtok>
<jtok eid="42" type="primary_name_ref" span="917:24:917:28">name</jtok>
<jtok eid="42" type="line_comment" span="918:9:918:61">// remove trailing (but preserve case of simple "/")</jtok>
<jtok eid="42" type="primary_name_ref" span="919:14:919:18">name</jtok>
<jtok eid="42" type="method_call" span="919:19:919:25">length</jtok>
<jtok eid="42" type="primary_name_ref" span="919:35:919:39">name</jtok>
<jtok eid="42" type="method_call" span="919:40:919:48">endsWith</jtok>
<jtok eid="42" type="string_literal" span="919:49:919:52">"/"</jtok>
<jtok eid="42" type="primary_name_ref" span="920:13:920:17">name</jtok>
<jtok eid="42" type="primary_name_ref" span="920:20:920:24">name</jtok>
<jtok eid="42" type="method_call" span="920:25:920:34">substring</jtok>
<jtok eid="42" type="primary_name_ref" span="920:39:920:43">name</jtok>
<jtok eid="42" type="method_call" span="920:44:920:50">length</jtok>
<jtok eid="42" type="line_comment" span="922:9:922:77">// If it exists, remove it and add it at the end (avoid memory leak)</jtok>
<jtok eid="42" type="primary_name_ref" span="923:14:923:30">importedCommands</jtok>
<jtok eid="42" type="method_call" span="923:31:923:39">contains</jtok>
<jtok eid="42" type="primary_name_ref" span="923:41:923:45">name</jtok>
<jtok eid="42" type="primary_name_ref" span="924:13:924:29">importedCommands</jtok>
<jtok eid="42" type="method_call" span="924:30:924:36">remove</jtok>
<jtok eid="42" type="primary_name_ref" span="924:38:924:42">name</jtok>
<jtok eid="42" type="primary_name_ref" span="926:9:926:25">importedCommands</jtok>
<jtok eid="42" type="method_call" span="926:26:926:36">addElement</jtok>
<jtok eid="42" type="primary_name_ref" span="926:37:926:41">name</jtok>
<jtok eid="42" type="method_call" span="927:9:927:25">nameSpaceChanged</jtok>
<jtok eid="1" type="block_comment" span="930:5:956:7">/**
        A command is a scripted method or compiled command class implementing a
        specified method signature.  Commands are loaded from the classpath
        and may be imported using the importCommands() method.
        &lt;p/&gt;

        This method searches the imported commands packages for a script or
        command object corresponding to the name of the method.  If it is a
        script the script is sourced into this namespace and the BshMethod for
        the requested signature is returned.  If it is a compiled class the
        class is returned.  (Compiled command classes implement static invoke()
        methods).
        &lt;p/&gt;

        The imported packages are searched in reverse order, so that later
        imports take priority.
        Currently only the first object (script or class) with the appropriate
        name is checked.  If another, overloaded form, is located in another
        package it will not currently be found.  This could be fixed.
        &lt;p/&gt;

        @return a BshMethod, Class, or null if no such command is found.
        @param name is the name of the desired command method
        @param argTypes is the signature of the desired command method.
        @throws UtilEvalError if loadScriptedCommand throws UtilEvalError
            i.e. on errors loading a script that was found
    */</jtok>
<jtok eid="1" type="line_comment" span="957:5:957:30">// {{{ jEdit's getCommand</jtok>
<jtok eid="43" type="class_or_interface_ref" span="958:12:958:18">Object</jtok>
<jtok eid="43" type="method_name" span="958:19:958:29">getCommand</jtok>
<jtok eid="43" type="parameter_type" span="959:9:959:15">String</jtok>
<jtok eid="43" type="parameter_name" span="959:16:959:20">name</jtok>
<jtok eid="43" type="parameter_type" span="959:22:959:27">Class</jtok>
<jtok eid="43" type="parameter_name" span="959:31:959:39">argTypes</jtok>
<jtok eid="43" type="parameter_type" span="959:41:959:52">Interpreter</jtok>
<jtok eid="43" type="parameter_name" span="959:53:959:64">interpreter</jtok>
<jtok eid="43" type="throws" span="960:16:960:29">UtilEvalError</jtok>
<jtok eid="43" type="primary_name_ref" span="962:13:962:24">Interpreter</jtok>
<jtok eid="43" type="qualified_name_ref" span="962:25:962:30">DEBUG</jtok>
<jtok eid="43" type="primary_name_ref" span="962:32:962:43">Interpreter</jtok>
<jtok eid="43" type="method_call" span="962:44:962:49">debug</jtok>
<jtok eid="43" type="string_literal" span="962:50:962:64">"getCommand: "</jtok>
<jtok eid="43" type="primary_name_ref" span="962:65:962:69">name</jtok>
<jtok eid="43" type="class_or_interface_ref" span="963:9:963:24">BshClassManager</jtok>
<jtok eid="43" type="local_variable_name" span="963:25:963:28">bcm</jtok>
<jtok eid="43" type="primary_name_ref" span="963:31:963:42">interpreter</jtok>
<jtok eid="43" type="method_call" span="963:43:963:58">getClassManager</jtok>
<jtok eid="43" type="class_or_interface_ref" span="965:9:965:20">InputStream</jtok>
<jtok eid="43" type="local_variable_name" span="965:21:965:23">in</jtok>
<jtok eid="43" type="method_call" span="965:26:965:36">getCommand</jtok>
<jtok eid="43" type="primary_name_ref" span="965:38:965:42">name</jtok>
<jtok eid="43" type="primary_name_ref" span="967:14:967:16">in</jtok>
<jtok eid="43" type="method_call" span="968:20:968:39">loadScriptedCommand</jtok>
<jtok eid="43" type="primary_name_ref" span="969:17:969:19">in</jtok>
<jtok eid="43" type="primary_name_ref" span="969:21:969:25">name</jtok>
<jtok eid="43" type="primary_name_ref" span="969:27:969:35">argTypes</jtok>
<jtok eid="43" type="primary_name_ref" span="969:37:969:41">name</jtok>
<jtok eid="43" type="primary_name_ref" span="969:43:969:54">interpreter</jtok>
<jtok eid="43" type="block_comment" span="971:9:980:28">/* // Chop leading "/" and change "/" to "."
        String className;
        if ( path.equals("/") )
            className = name;
        else
            className = path.substring(1).replace('/','.') +"."+name;

        Class clas = bcm.classForName( className );
        if ( clas != null )
            return clas; */</jtok>
<jtok eid="43" type="primary_name_ref" span="982:14:982:20">parent</jtok>
<jtok eid="43" type="primary_name_ref" span="983:20:983:26">parent</jtok>
<jtok eid="43" type="method_call" span="983:27:983:37">getCommand</jtok>
<jtok eid="43" type="primary_name_ref" span="983:39:983:43">name</jtok>
<jtok eid="43" type="primary_name_ref" span="983:45:983:53">argTypes</jtok>
<jtok eid="43" type="primary_name_ref" span="983:55:983:66">interpreter</jtok>
<jtok eid="1" type="block_comment" span="989:5:1036:11">/*
    public Object getCommand(
        String name, Class [] argTypes, Interpreter interpreter )
        throws UtilEvalError
    {
        if (Interpreter.DEBUG) Interpreter.debug("getCommand: "+name);
        BshClassManager bcm = interpreter.getClassManager();

        if ( importedCommands != null )
        {
            // loop backwards for precedence
            for(int i=importedCommands.size()-1; i&gt;=0; i--)
            {
                String path = (String)importedCommands.elementAt(i);

                String scriptPath;
                if ( path.equals("/") )
                    scriptPath = path + name +".bsh";
                else
                    scriptPath = path +"/"+ name +".bsh";

                Interpreter.debug("searching for script: "+scriptPath );

                InputStream in = bcm.getResourceAsStream( scriptPath );

                if ( in != null )
                    return loadScriptedCommand(
                        in, name, argTypes, scriptPath, interpreter );

                // Chop leading "/" and change "/" to "."
                String className;
                if ( path.equals("/") )
                    className = name;
                else
                    className = path.substring(1).replace('/','.') +"."+name;

                Interpreter.debug("searching for class: "+className);
                Class clas = bcm.classForName( className );
                if ( clas != null )
                    return clas;
            }
        }

        if ( parent != null )
            return parent.getCommand( name, argTypes, interpreter );
        else
            return null;
    }   */</jtok>
<jtok eid="1" type="line_comment" span="1037:5:1037:11">// }}}</jtok>
<jtok eid="44" type="class_or_interface_ref" span="1038:15:1038:24">BshMethod</jtok>
<jtok eid="44" type="method_name" span="1038:25:1038:42">getImportedMethod</jtok>
<jtok eid="44" type="parameter_type" span="1038:44:1038:50">String</jtok>
<jtok eid="44" type="parameter_name" span="1038:51:1038:55">name</jtok>
<jtok eid="44" type="parameter_type" span="1038:57:1038:62">Class</jtok>
<jtok eid="44" type="parameter_name" span="1038:66:1038:69">sig</jtok>
<jtok eid="44" type="throws" span="1039:16:1039:29">UtilEvalError</jtok>
<jtok eid="44" type="line_comment" span="1041:9:1041:30">// Try object imports</jtok>
<jtok eid="44" type="primary_name_ref" span="1042:14:1042:29">importedObjects</jtok>
<jtok eid="44" type="local_variable_name" span="1043:17:1043:18">i</jtok>
<jtok eid="44" type="primary_name_ref" span="1043:22:1043:23">i</jtok>
<jtok eid="44" type="primary_name_ref" span="1043:24:1043:39">importedObjects</jtok>
<jtok eid="44" type="method_call" span="1043:40:1043:44">size</jtok>
<jtok eid="44" type="primary_name_ref" span="1043:48:1043:49">i</jtok>
<jtok eid="44" type="class_or_interface_ref" span="1045:13:1045:19">Object</jtok>
<jtok eid="44" type="local_variable_name" span="1045:20:1045:26">object</jtok>
<jtok eid="44" type="primary_name_ref" span="1045:29:1045:44">importedObjects</jtok>
<jtok eid="44" type="method_call" span="1045:45:1045:54">elementAt</jtok>
<jtok eid="44" type="primary_name_ref" span="1045:55:1045:56">i</jtok>
<jtok eid="44" type="class_or_interface_ref" span="1046:13:1046:18">Class</jtok>
<jtok eid="44" type="local_variable_name" span="1046:19:1046:23">clas</jtok>
<jtok eid="44" type="primary_name_ref" span="1046:26:1046:32">object</jtok>
<jtok eid="44" type="method_call" span="1046:33:1046:41">getClass</jtok>
<jtok eid="44" type="class_or_interface_ref" span="1047:13:1047:19">Method</jtok>
<jtok eid="44" type="local_variable_name" span="1047:20:1047:26">method</jtok>
<jtok eid="44" type="primary_name_ref" span="1047:29:1047:36">Reflect</jtok>
<jtok eid="44" type="method_call" span="1047:37:1047:54">resolveJavaMethod</jtok>
<jtok eid="44" type="method_call" span="1048:17:1048:32">getClassManager</jtok>
<jtok eid="44" type="primary_name_ref" span="1048:36:1048:40">clas</jtok>
<jtok eid="44" type="primary_name_ref" span="1048:42:1048:46">name</jtok>
<jtok eid="44" type="primary_name_ref" span="1048:48:1048:51">sig</jtok>
<jtok eid="44" type="block_comment" span="1048:58:1048:72">/*onlyStatic*/</jtok>
<jtok eid="44" type="primary_name_ref" span="1049:18:1049:24">method</jtok>
<jtok eid="44" type="constructor_call" span="1050:28:1050:37">BshMethod</jtok>
<jtok eid="44" type="primary_name_ref" span="1050:39:1050:45">method</jtok>
<jtok eid="44" type="primary_name_ref" span="1050:47:1050:53">object</jtok>
<jtok eid="44" type="line_comment" span="1053:9:1053:30">// Try static imports</jtok>
<jtok eid="44" type="primary_name_ref" span="1054:14:1054:28">importedStatic</jtok>
<jtok eid="44" type="local_variable_name" span="1055:17:1055:18">i</jtok>
<jtok eid="44" type="primary_name_ref" span="1055:22:1055:23">i</jtok>
<jtok eid="44" type="primary_name_ref" span="1055:24:1055:38">importedStatic</jtok>
<jtok eid="44" type="method_call" span="1055:39:1055:43">size</jtok>
<jtok eid="44" type="primary_name_ref" span="1055:47:1055:48">i</jtok>
<jtok eid="44" type="class_or_interface_ref" span="1057:13:1057:18">Class</jtok>
<jtok eid="44" type="local_variable_name" span="1057:19:1057:23">clas</jtok>
<jtok eid="44" type="class_or_interface_ref" span="1057:27:1057:32">Class</jtok>
<jtok eid="44" type="primary_name_ref" span="1057:33:1057:47">importedStatic</jtok>
<jtok eid="44" type="method_call" span="1057:48:1057:57">elementAt</jtok>
<jtok eid="44" type="primary_name_ref" span="1057:58:1057:59">i</jtok>
<jtok eid="44" type="class_or_interface_ref" span="1058:13:1058:19">Method</jtok>
<jtok eid="44" type="local_variable_name" span="1058:20:1058:26">method</jtok>
<jtok eid="44" type="primary_name_ref" span="1058:29:1058:36">Reflect</jtok>
<jtok eid="44" type="method_call" span="1058:37:1058:54">resolveJavaMethod</jtok>
<jtok eid="44" type="method_call" span="1059:17:1059:32">getClassManager</jtok>
<jtok eid="44" type="primary_name_ref" span="1059:36:1059:40">clas</jtok>
<jtok eid="44" type="primary_name_ref" span="1059:42:1059:46">name</jtok>
<jtok eid="44" type="primary_name_ref" span="1059:48:1059:51">sig</jtok>
<jtok eid="44" type="block_comment" span="1059:57:1059:71">/*onlyStatic*/</jtok>
<jtok eid="44" type="primary_name_ref" span="1060:18:1060:24">method</jtok>
<jtok eid="44" type="constructor_call" span="1061:28:1061:37">BshMethod</jtok>
<jtok eid="44" type="primary_name_ref" span="1061:39:1061:45">method</jtok>
<jtok eid="44" type="block_comment" span="1061:51:1061:61">/*object*/</jtok>
<jtok eid="45" type="class_or_interface_ref" span="1067:15:1067:23">Variable</jtok>
<jtok eid="45" type="method_name" span="1067:24:1067:38">getImportedVar</jtok>
<jtok eid="45" type="parameter_type" span="1067:40:1067:46">String</jtok>
<jtok eid="45" type="parameter_name" span="1067:47:1067:51">name</jtok>
<jtok eid="45" type="throws" span="1068:16:1068:29">UtilEvalError</jtok>
<jtok eid="45" type="line_comment" span="1070:9:1070:30">// Try object imports</jtok>
<jtok eid="45" type="primary_name_ref" span="1071:14:1071:29">importedObjects</jtok>
<jtok eid="45" type="local_variable_name" span="1072:17:1072:18">i</jtok>
<jtok eid="45" type="primary_name_ref" span="1072:22:1072:23">i</jtok>
<jtok eid="45" type="primary_name_ref" span="1072:24:1072:39">importedObjects</jtok>
<jtok eid="45" type="method_call" span="1072:40:1072:44">size</jtok>
<jtok eid="45" type="primary_name_ref" span="1072:48:1072:49">i</jtok>
<jtok eid="45" type="class_or_interface_ref" span="1074:13:1074:19">Object</jtok>
<jtok eid="45" type="local_variable_name" span="1074:20:1074:26">object</jtok>
<jtok eid="45" type="primary_name_ref" span="1074:29:1074:44">importedObjects</jtok>
<jtok eid="45" type="method_call" span="1074:45:1074:54">elementAt</jtok>
<jtok eid="45" type="primary_name_ref" span="1074:55:1074:56">i</jtok>
<jtok eid="45" type="class_or_interface_ref" span="1075:13:1075:18">Class</jtok>
<jtok eid="45" type="local_variable_name" span="1075:19:1075:23">clas</jtok>
<jtok eid="45" type="primary_name_ref" span="1075:26:1075:32">object</jtok>
<jtok eid="45" type="method_call" span="1075:33:1075:41">getClass</jtok>
<jtok eid="45" type="class_or_interface_ref" span="1076:13:1076:18">Field</jtok>
<jtok eid="45" type="local_variable_name" span="1076:19:1076:24">field</jtok>
<jtok eid="45" type="primary_name_ref" span="1076:27:1076:34">Reflect</jtok>
<jtok eid="45" type="method_call" span="1076:35:1076:51">resolveJavaField</jtok>
<jtok eid="45" type="primary_name_ref" span="1077:17:1077:21">clas</jtok>
<jtok eid="45" type="primary_name_ref" span="1077:23:1077:27">name</jtok>
<jtok eid="45" type="block_comment" span="1077:34:1077:48">/*onlyStatic*/</jtok>
<jtok eid="45" type="primary_name_ref" span="1078:18:1078:23">field</jtok>
<jtok eid="45" type="constructor_call" span="1079:28:1079:36">Variable</jtok>
<jtok eid="45" type="primary_name_ref" span="1080:21:1080:25">name</jtok>
<jtok eid="45" type="primary_name_ref" span="1080:27:1080:32">field</jtok>
<jtok eid="45" type="method_call" span="1080:33:1080:40">getType</jtok>
<jtok eid="45" type="constructor_call" span="1080:48:1080:51">LHS</jtok>
<jtok eid="45" type="primary_name_ref" span="1080:53:1080:59">object</jtok>
<jtok eid="45" type="primary_name_ref" span="1080:61:1080:66">field</jtok>
<jtok eid="45" type="line_comment" span="1083:9:1083:30">// Try static imports</jtok>
<jtok eid="45" type="primary_name_ref" span="1084:14:1084:28">importedStatic</jtok>
<jtok eid="45" type="local_variable_name" span="1085:17:1085:18">i</jtok>
<jtok eid="45" type="primary_name_ref" span="1085:22:1085:23">i</jtok>
<jtok eid="45" type="primary_name_ref" span="1085:24:1085:38">importedStatic</jtok>
<jtok eid="45" type="method_call" span="1085:39:1085:43">size</jtok>
<jtok eid="45" type="primary_name_ref" span="1085:47:1085:48">i</jtok>
<jtok eid="45" type="class_or_interface_ref" span="1087:13:1087:18">Class</jtok>
<jtok eid="45" type="local_variable_name" span="1087:19:1087:23">clas</jtok>
<jtok eid="45" type="class_or_interface_ref" span="1087:27:1087:32">Class</jtok>
<jtok eid="45" type="primary_name_ref" span="1087:33:1087:47">importedStatic</jtok>
<jtok eid="45" type="method_call" span="1087:48:1087:57">elementAt</jtok>
<jtok eid="45" type="primary_name_ref" span="1087:58:1087:59">i</jtok>
<jtok eid="45" type="class_or_interface_ref" span="1088:13:1088:18">Field</jtok>
<jtok eid="45" type="local_variable_name" span="1088:19:1088:24">field</jtok>
<jtok eid="45" type="primary_name_ref" span="1088:27:1088:34">Reflect</jtok>
<jtok eid="45" type="method_call" span="1088:35:1088:51">resolveJavaField</jtok>
<jtok eid="45" type="primary_name_ref" span="1089:17:1089:21">clas</jtok>
<jtok eid="45" type="primary_name_ref" span="1089:23:1089:27">name</jtok>
<jtok eid="45" type="block_comment" span="1089:33:1089:47">/*onlyStatic*/</jtok>
<jtok eid="45" type="primary_name_ref" span="1090:18:1090:23">field</jtok>
<jtok eid="45" type="constructor_call" span="1091:28:1091:36">Variable</jtok>
<jtok eid="45" type="primary_name_ref" span="1091:38:1091:42">name</jtok>
<jtok eid="45" type="primary_name_ref" span="1091:44:1091:49">field</jtok>
<jtok eid="45" type="method_call" span="1091:50:1091:57">getType</jtok>
<jtok eid="45" type="constructor_call" span="1091:65:1091:68">LHS</jtok>
<jtok eid="45" type="primary_name_ref" span="1091:70:1091:75">field</jtok>
<jtok eid="1" type="block_comment" span="1097:5:1102:7">/**
        Load a command script from the input stream and find the BshMethod in
        the target namespace.
        @throws UtilEvalError on error in parsing the script or if the the
            method is not found after parsing the script.
    */</jtok>
<jtok eid="1" type="block_comment" span="1103:5:1106:7">/*
        If we want to support multiple commands in the command path we need to
        change this to not throw the exception.
    */</jtok>
<jtok eid="46" type="class_or_interface_ref" span="1107:13:1107:22">BshMethod</jtok>
<jtok eid="46" type="method_name" span="1107:23:1107:42">loadScriptedCommand</jtok>
<jtok eid="46" type="parameter_type" span="1108:9:1108:20">InputStream</jtok>
<jtok eid="46" type="parameter_name" span="1108:21:1108:23">in</jtok>
<jtok eid="46" type="parameter_type" span="1108:25:1108:31">String</jtok>
<jtok eid="46" type="parameter_name" span="1108:32:1108:36">name</jtok>
<jtok eid="46" type="parameter_type" span="1108:38:1108:43">Class</jtok>
<jtok eid="46" type="parameter_name" span="1108:47:1108:55">argTypes</jtok>
<jtok eid="46" type="parameter_type" span="1108:57:1108:63">String</jtok>
<jtok eid="46" type="parameter_name" span="1108:64:1108:76">resourcePath</jtok>
<jtok eid="46" type="parameter_type" span="1109:9:1109:20">Interpreter</jtok>
<jtok eid="46" type="parameter_name" span="1109:21:1109:32">interpreter</jtok>
<jtok eid="46" type="throws" span="1110:16:1110:29">UtilEvalError</jtok>
<jtok eid="46" type="primary_name_ref" span="1113:13:1113:24">interpreter</jtok>
<jtok eid="46" type="method_call" span="1113:25:1113:29">eval</jtok>
<jtok eid="46" type="constructor_call" span="1114:21:1114:38">InputStreamReader</jtok>
<jtok eid="46" type="primary_name_ref" span="1114:39:1114:41">in</jtok>
<jtok eid="46" type="primary_name_ref" span="1114:50:1114:62">resourcePath</jtok>
<jtok eid="46" type="class_or_interface_ref" span="1115:19:1115:28">EvalError</jtok>
<jtok eid="46" type="local_variable_name" span="1115:29:1115:30">e</jtok>
<jtok eid="46" type="block_comment" span="1116:9:1120:11">/*
            Here we catch any EvalError from the interpreter because we are
            using it as a tool to load the command, not as part of the
            execution path.
        */</jtok>
<jtok eid="46" type="primary_name_ref" span="1121:13:1121:24">Interpreter</jtok>
<jtok eid="46" type="method_call" span="1121:25:1121:30">debug</jtok>
<jtok eid="46" type="primary_name_ref" span="1121:32:1121:33">e</jtok>
<jtok eid="46" type="method_call" span="1121:34:1121:42">toString</jtok>
<jtok eid="46" type="constructor_call" span="1122:23:1122:36">UtilEvalError</jtok>
<jtok eid="46" type="string_literal" span="1123:17:1123:41">"Error loading script: "</jtok>
<jtok eid="46" type="primary_name_ref" span="1123:43:1123:44">e</jtok>
<jtok eid="46" type="method_call" span="1123:45:1123:55">getMessage</jtok>
<jtok eid="46" type="line_comment" span="1126:9:1126:39">// Look for the loaded command</jtok>
<jtok eid="46" type="class_or_interface_ref" span="1127:9:1127:18">BshMethod</jtok>
<jtok eid="46" type="local_variable_name" span="1127:19:1127:23">meth</jtok>
<jtok eid="46" type="method_call" span="1127:26:1127:35">getMethod</jtok>
<jtok eid="46" type="primary_name_ref" span="1127:37:1127:41">name</jtok>
<jtok eid="46" type="primary_name_ref" span="1127:43:1127:51">argTypes</jtok>
<jtok eid="46" type="block_comment" span="1128:9:1132:11">/*
        if ( meth == null )
            throw new UtilEvalError("Loaded resource: " + resourcePath +
                "had an error or did not contain the correct method" );
        */</jtok>
<jtok eid="46" type="primary_name_ref" span="1134:16:1134:20">meth</jtok>
<jtok eid="1" type="block_comment" span="1137:5:1139:7">/**
        Helper that caches class.
    */</jtok>
<jtok eid="47" type="method_name" span="1140:10:1140:20">cacheClass</jtok>
<jtok eid="47" type="parameter_type" span="1140:22:1140:28">String</jtok>
<jtok eid="47" type="parameter_name" span="1140:29:1140:33">name</jtok>
<jtok eid="47" type="parameter_type" span="1140:35:1140:40">Class</jtok>
<jtok eid="47" type="parameter_name" span="1140:41:1140:42">c</jtok>
<jtok eid="47" type="primary_name_ref" span="1141:14:1141:24">classCache</jtok>
<jtok eid="47" type="primary_name_ref" span="1142:13:1142:23">classCache</jtok>
<jtok eid="47" type="constructor_call" span="1142:30:1142:39">Hashtable</jtok>
<jtok eid="47" type="line_comment" span="1143:13:1143:37">//cacheCount++; // debug</jtok>
<jtok eid="47" type="primary_name_ref" span="1146:9:1146:19">classCache</jtok>
<jtok eid="47" type="method_call" span="1146:20:1146:23">put</jtok>
<jtok eid="47" type="primary_name_ref" span="1146:24:1146:28">name</jtok>
<jtok eid="47" type="primary_name_ref" span="1146:30:1146:31">c</jtok>
<jtok eid="1" type="block_comment" span="1149:5:1155:7">/**
        Load a class through this namespace taking into account imports.
        The class search will proceed through the parent namespaces if
        necessary.

        @return null if not found.
    */</jtok>
<jtok eid="48" type="class_or_interface_ref" span="1156:12:1156:17">Class</jtok>
<jtok eid="48" type="method_name" span="1156:18:1156:26">getClass</jtok>
<jtok eid="48" type="parameter_type" span="1156:28:1156:34">String</jtok>
<jtok eid="48" type="parameter_name" span="1156:35:1156:39">name</jtok>
<jtok eid="48" type="throws" span="1157:16:1157:29">UtilEvalError</jtok>
<jtok eid="48" type="class_or_interface_ref" span="1159:9:1159:14">Class</jtok>
<jtok eid="48" type="local_variable_name" span="1159:15:1159:16">c</jtok>
<jtok eid="48" type="method_call" span="1159:19:1159:31">getClassImpl</jtok>
<jtok eid="48" type="primary_name_ref" span="1159:32:1159:36">name</jtok>
<jtok eid="48" type="primary_name_ref" span="1160:14:1160:15">c</jtok>
<jtok eid="48" type="primary_name_ref" span="1161:20:1161:21">c</jtok>
<jtok eid="48" type="line_comment" span="1163:13:1163:58">// implement the recursion for getClassImpl()</jtok>
<jtok eid="48" type="primary_name_ref" span="1164:18:1164:24">parent</jtok>
<jtok eid="48" type="primary_name_ref" span="1165:24:1165:30">parent</jtok>
<jtok eid="48" type="method_call" span="1165:31:1165:39">getClass</jtok>
<jtok eid="48" type="primary_name_ref" span="1165:41:1165:45">name</jtok>
<jtok eid="1" type="block_comment" span="1170:5:1186:7">/**
        Implementation of getClass()

        Load a class through this namespace taking into account imports.
        &lt;p&gt;

        Check the cache first.  If an unqualified name look for imported
        class or package.  Else try to load absolute name.
        &lt;p&gt;

        This method implements caching of unqualified names (normally imports).
        Qualified names are cached by the BshClassManager.
        Unqualified absolute class names (e.g. unpackaged Foo) are cached too
        so that we don't go searching through the imports for them each time.

        @return null if not found.
    */</jtok>
<jtok eid="49" type="class_or_interface_ref" span="1187:13:1187:18">Class</jtok>
<jtok eid="49" type="method_name" span="1187:19:1187:31">getClassImpl</jtok>
<jtok eid="49" type="parameter_type" span="1187:33:1187:39">String</jtok>
<jtok eid="49" type="parameter_name" span="1187:40:1187:44">name</jtok>
<jtok eid="49" type="throws" span="1188:16:1188:29">UtilEvalError</jtok>
<jtok eid="49" type="class_or_interface_ref" span="1190:9:1190:14">Class</jtok>
<jtok eid="49" type="local_variable_name" span="1190:15:1190:16">c</jtok>
<jtok eid="49" type="line_comment" span="1192:9:1192:27">// Check the cache</jtok>
<jtok eid="49" type="primary_name_ref" span="1193:13:1193:23">classCache</jtok>
<jtok eid="49" type="primary_name_ref" span="1194:13:1194:14">c</jtok>
<jtok eid="49" type="class_or_interface_ref" span="1194:18:1194:23">Class</jtok>
<jtok eid="49" type="primary_name_ref" span="1194:24:1194:34">classCache</jtok>
<jtok eid="49" type="method_call" span="1194:35:1194:38">get</jtok>
<jtok eid="49" type="primary_name_ref" span="1194:39:1194:43">name</jtok>
<jtok eid="49" type="primary_name_ref" span="1196:18:1196:19">c</jtok>
<jtok eid="49" type="primary_name_ref" span="1197:24:1197:25">c</jtok>
<jtok eid="49" type="line_comment" span="1200:9:1200:51">// Unqualified (simple, non-compound) name</jtok>
<jtok eid="49" type="local_variable_name" span="1201:17:1201:32">unqualifiedName</jtok>
<jtok eid="49" type="primary_name_ref" span="1201:36:1201:40">Name</jtok>
<jtok eid="49" type="method_call" span="1201:41:1201:51">isCompound</jtok>
<jtok eid="49" type="primary_name_ref" span="1201:52:1201:56">name</jtok>
<jtok eid="49" type="line_comment" span="1203:9:1203:43">// Unqualified name check imported</jtok>
<jtok eid="49" type="primary_name_ref" span="1204:14:1204:29">unqualifiedName</jtok>
<jtok eid="49" type="line_comment" span="1206:13:1206:34">// Try imported class</jtok>
<jtok eid="49" type="primary_name_ref" span="1207:18:1207:19">c</jtok>
<jtok eid="49" type="primary_name_ref" span="1208:17:1208:18">c</jtok>
<jtok eid="49" type="method_call" span="1208:21:1208:41">getImportedClassImpl</jtok>
<jtok eid="49" type="primary_name_ref" span="1208:43:1208:47">name</jtok>
<jtok eid="49" type="line_comment" span="1210:13:1210:50">// if found as imported also cache it</jtok>
<jtok eid="49" type="primary_name_ref" span="1211:18:1211:19">c</jtok>
<jtok eid="49" type="method_call" span="1212:17:1212:27">cacheClass</jtok>
<jtok eid="49" type="primary_name_ref" span="1212:29:1212:33">name</jtok>
<jtok eid="49" type="primary_name_ref" span="1212:35:1212:36">c</jtok>
<jtok eid="49" type="primary_name_ref" span="1213:24:1213:25">c</jtok>
<jtok eid="49" type="line_comment" span="1217:9:1217:24">// Try absolute</jtok>
<jtok eid="49" type="primary_name_ref" span="1218:9:1218:10">c</jtok>
<jtok eid="49" type="method_call" span="1218:13:1218:25">classForName</jtok>
<jtok eid="49" type="primary_name_ref" span="1218:27:1218:31">name</jtok>
<jtok eid="49" type="primary_name_ref" span="1219:14:1219:15">c</jtok>
<jtok eid="49" type="line_comment" span="1220:13:1220:69">// Cache unqualified names to prevent import check again</jtok>
<jtok eid="49" type="primary_name_ref" span="1221:18:1221:33">unqualifiedName</jtok>
<jtok eid="49" type="method_call" span="1222:17:1222:27">cacheClass</jtok>
<jtok eid="49" type="primary_name_ref" span="1222:29:1222:33">name</jtok>
<jtok eid="49" type="primary_name_ref" span="1222:35:1222:36">c</jtok>
<jtok eid="49" type="primary_name_ref" span="1223:20:1223:21">c</jtok>
<jtok eid="49" type="line_comment" span="1226:9:1226:21">// Not found</jtok>
<jtok eid="49" type="primary_name_ref" span="1227:14:1227:25">Interpreter</jtok>
<jtok eid="49" type="qualified_name_ref" span="1227:26:1227:31">DEBUG</jtok>
<jtok eid="49" type="primary_name_ref" span="1228:13:1228:24">Interpreter</jtok>
<jtok eid="49" type="method_call" span="1228:25:1228:30">debug</jtok>
<jtok eid="49" type="string_literal" span="1228:31:1228:45">"getClass(): "</jtok>
<jtok eid="49" type="primary_name_ref" span="1228:48:1228:52">name</jtok>
<jtok eid="49" type="string_literal" span="1228:55:1228:71">" not	found in "</jtok>
<jtok eid="1" type="block_comment" span="1232:5:1236:7">/**
        Try to make the name into an imported class.
        This method takes into account only imports (class or package)
        found directly in this NameSpace (no parent chain).
    */</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1237:13:1237:18">Class</jtok>
<jtok eid="50" type="method_name" span="1237:19:1237:39">getImportedClassImpl</jtok>
<jtok eid="50" type="parameter_type" span="1237:41:1237:47">String</jtok>
<jtok eid="50" type="parameter_name" span="1237:48:1237:52">name</jtok>
<jtok eid="50" type="throws" span="1238:16:1238:29">UtilEvalError</jtok>
<jtok eid="50" type="line_comment" span="1240:9:1240:63">// Try explicitly imported class, e.g. import foo.Bar;</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1241:9:1241:15">String</jtok>
<jtok eid="50" type="local_variable_name" span="1241:16:1241:24">fullname</jtok>
<jtok eid="50" type="primary_name_ref" span="1242:14:1242:29">importedClasses</jtok>
<jtok eid="50" type="primary_name_ref" span="1243:13:1243:21">fullname</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1243:25:1243:31">String</jtok>
<jtok eid="50" type="primary_name_ref" span="1243:32:1243:47">importedClasses</jtok>
<jtok eid="50" type="method_call" span="1243:48:1243:51">get</jtok>
<jtok eid="50" type="primary_name_ref" span="1243:52:1243:56">name</jtok>
<jtok eid="50" type="line_comment" span="1245:9:1245:77">// not sure if we should really recurse here for explicitly imported</jtok>
<jtok eid="50" type="line_comment" span="1246:9:1246:30">// class in parent...</jtok>
<jtok eid="50" type="primary_name_ref" span="1248:14:1248:22">fullname</jtok>
<jtok eid="50" type="block_comment" span="1250:13:1252:15">/*
                Found the full name in imported classes.
            */</jtok>
<jtok eid="50" type="line_comment" span="1253:13:1253:50">// Try to make the full imported name</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1254:13:1254:18">Class</jtok>
<jtok eid="50" type="local_variable_name" span="1254:19:1254:23">clas</jtok>
<jtok eid="50" type="method_call" span="1254:24:1254:36">classForName</jtok>
<jtok eid="50" type="primary_name_ref" span="1254:37:1254:45">fullname</jtok>
<jtok eid="50" type="line_comment" span="1256:13:1256:48">// Handle imported inner class case</jtok>
<jtok eid="50" type="primary_name_ref" span="1257:18:1257:22">clas</jtok>
<jtok eid="50" type="line_comment" span="1259:17:1259:72">// Imported full name wasn't found as an absolute class</jtok>
<jtok eid="50" type="line_comment" span="1260:17:1260:72">// If it is compound, try to resolve to an inner class.</jtok>
<jtok eid="50" type="line_comment" span="1261:17:1261:70">// (maybe this should happen in the BshClassManager?)</jtok>
<jtok eid="50" type="primary_name_ref" span="1263:22:1263:26">Name</jtok>
<jtok eid="50" type="method_call" span="1263:27:1263:37">isCompound</jtok>
<jtok eid="50" type="primary_name_ref" span="1263:39:1263:47">fullname</jtok>
<jtok eid="50" type="primary_name_ref" span="1265:25:1265:29">clas</jtok>
<jtok eid="50" type="method_call" span="1265:32:1265:47">getNameResolver</jtok>
<jtok eid="50" type="primary_name_ref" span="1265:49:1265:57">fullname</jtok>
<jtok eid="50" type="method_call" span="1265:60:1265:67">toClass</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1266:31:1266:53">ClassNotFoundException</jtok>
<jtok eid="50" type="local_variable_name" span="1266:54:1266:55">e</jtok>
<jtok eid="50" type="block_comment" span="1266:60:1266:77">/* not a class */</jtok>
<jtok eid="50" type="primary_name_ref" span="1268:26:1268:37">Interpreter</jtok>
<jtok eid="50" type="qualified_name_ref" span="1268:38:1268:43">DEBUG</jtok>
<jtok eid="50" type="primary_name_ref" span="1268:46:1268:57">Interpreter</jtok>
<jtok eid="50" type="method_call" span="1268:58:1268:63">debug</jtok>
<jtok eid="50" type="string_literal" span="1269:25:1269:62">"imported unpackaged name not found:"</jtok>
<jtok eid="50" type="primary_name_ref" span="1269:64:1269:72">fullname</jtok>
<jtok eid="50" type="line_comment" span="1271:17:1271:71">// If found cache the full name in the BshClassManager</jtok>
<jtok eid="50" type="primary_name_ref" span="1272:22:1272:26">clas</jtok>
<jtok eid="50" type="line_comment" span="1273:21:1273:71">// (should we cache info in not a class case too?)</jtok>
<jtok eid="50" type="method_call" span="1274:21:1274:36">getClassManager</jtok>
<jtok eid="50" type="method_call" span="1274:39:1274:53">cacheClassInfo</jtok>
<jtok eid="50" type="primary_name_ref" span="1274:55:1274:63">fullname</jtok>
<jtok eid="50" type="primary_name_ref" span="1274:65:1274:69">clas</jtok>
<jtok eid="50" type="primary_name_ref" span="1275:28:1275:32">clas</jtok>
<jtok eid="50" type="primary_name_ref" span="1278:24:1278:28">clas</jtok>
<jtok eid="50" type="line_comment" span="1280:13:1280:73">// It was explicitly imported, but we don't know what it is.</jtok>
<jtok eid="50" type="line_comment" span="1281:13:1281:47">// should we throw an error here??</jtok>
<jtok eid="50" type="block_comment" span="1285:9:1289:11">/*
            Try imported packages, e.g. "import foo.bar.*;"
            in reverse order of import...
            (give later imports precedence...)
        */</jtok>
<jtok eid="50" type="primary_name_ref" span="1290:14:1290:30">importedPackages</jtok>
<jtok eid="50" type="local_variable_name" span="1291:21:1291:22">i</jtok>
<jtok eid="50" type="primary_name_ref" span="1291:23:1291:39">importedPackages</jtok>
<jtok eid="50" type="method_call" span="1291:40:1291:44">size</jtok>
<jtok eid="50" type="primary_name_ref" span="1291:50:1291:51">i</jtok>
<jtok eid="50" type="primary_name_ref" span="1291:56:1291:57">i</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1293:17:1293:23">String</jtok>
<jtok eid="50" type="local_variable_name" span="1293:24:1293:25">s</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1293:30:1293:36">String</jtok>
<jtok eid="50" type="primary_name_ref" span="1293:37:1293:53">importedPackages</jtok>
<jtok eid="50" type="method_call" span="1293:54:1293:63">elementAt</jtok>
<jtok eid="50" type="primary_name_ref" span="1293:64:1293:65">i</jtok>
<jtok eid="50" type="string_literal" span="1293:70:1293:73">"."</jtok>
<jtok eid="50" type="primary_name_ref" span="1293:76:1293:80">name</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1294:17:1294:22">Class</jtok>
<jtok eid="50" type="local_variable_name" span="1294:23:1294:24">c</jtok>
<jtok eid="50" type="method_call" span="1294:25:1294:37">classForName</jtok>
<jtok eid="50" type="primary_name_ref" span="1294:38:1294:39">s</jtok>
<jtok eid="50" type="primary_name_ref" span="1295:22:1295:23">c</jtok>
<jtok eid="50" type="primary_name_ref" span="1296:28:1296:29">c</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1299:9:1299:24">BshClassManager</jtok>
<jtok eid="50" type="local_variable_name" span="1299:25:1299:28">bcm</jtok>
<jtok eid="50" type="method_call" span="1299:31:1299:46">getClassManager</jtok>
<jtok eid="50" type="block_comment" span="1300:9:1305:11">/*
            Try super import if available
            Note: we do this last to allow explicitly imported classes
            and packages to take priority.  This method will also throw an
            error indicating ambiguity if it exists...
        */</jtok>
<jtok eid="50" type="primary_name_ref" span="1306:14:1306:17">bcm</jtok>
<jtok eid="50" type="method_call" span="1306:18:1306:32">hasSuperImport</jtok>
<jtok eid="50" type="class_or_interface_ref" span="1308:13:1308:19">String</jtok>
<jtok eid="50" type="local_variable_name" span="1308:20:1308:21">s</jtok>
<jtok eid="50" type="primary_name_ref" span="1308:24:1308:27">bcm</jtok>
<jtok eid="50" type="method_call" span="1308:28:1308:49">getClassNameByUnqName</jtok>
<jtok eid="50" type="primary_name_ref" span="1308:51:1308:55">name</jtok>
<jtok eid="50" type="primary_name_ref" span="1309:18:1309:19">s</jtok>
<jtok eid="50" type="method_call" span="1310:24:1310:36">classForName</jtok>
<jtok eid="50" type="primary_name_ref" span="1310:38:1310:39">s</jtok>
<jtok eid="51" type="class_or_interface_ref" span="1316:13:1316:18">Class</jtok>
<jtok eid="51" type="method_name" span="1316:19:1316:31">classForName</jtok>
<jtok eid="51" type="parameter_type" span="1316:33:1316:39">String</jtok>
<jtok eid="51" type="parameter_name" span="1316:40:1316:44">name</jtok>
<jtok eid="51" type="method_call" span="1318:16:1318:31">getClassManager</jtok>
<jtok eid="51" type="method_call" span="1318:34:1318:46">classForName</jtok>
<jtok eid="51" type="primary_name_ref" span="1318:48:1318:52">name</jtok>
<jtok eid="1" type="block_comment" span="1321:5:1325:7">/**
        Implements NameSource
        @return all variable and method names in this and all parent
        namespaces
    */</jtok>
<jtok eid="52" type="class_or_interface_ref" span="1326:12:1326:18">String</jtok>
<jtok eid="52" type="method_name" span="1326:22:1326:33">getAllNames</jtok>
<jtok eid="52" type="class_or_interface_ref" span="1328:9:1328:15">Vector</jtok>
<jtok eid="52" type="local_variable_name" span="1328:16:1328:19">vec</jtok>
<jtok eid="52" type="constructor_call" span="1328:26:1328:32">Vector</jtok>
<jtok eid="52" type="method_call" span="1329:9:1329:23">getAllNamesAux</jtok>
<jtok eid="52" type="primary_name_ref" span="1329:25:1329:28">vec</jtok>
<jtok eid="52" type="class_or_interface_ref" span="1330:9:1330:15">String</jtok>
<jtok eid="52" type="local_variable_name" span="1330:19:1330:24">names</jtok>
<jtok eid="52" type="constructor_call" span="1330:31:1330:37">String</jtok>
<jtok eid="52" type="primary_name_ref" span="1330:40:1330:43">vec</jtok>
<jtok eid="52" type="method_call" span="1330:44:1330:48">size</jtok>
<jtok eid="52" type="primary_name_ref" span="1331:9:1331:12">vec</jtok>
<jtok eid="52" type="method_call" span="1331:13:1331:21">copyInto</jtok>
<jtok eid="52" type="primary_name_ref" span="1331:23:1331:28">names</jtok>
<jtok eid="52" type="primary_name_ref" span="1332:16:1332:21">names</jtok>
<jtok eid="1" type="block_comment" span="1335:5:1337:7">/**
        Helper for implementing NameSource
    */</jtok>
<jtok eid="53" type="method_name" span="1338:20:1338:34">getAllNamesAux</jtok>
<jtok eid="53" type="parameter_type" span="1338:36:1338:42">Vector</jtok>
<jtok eid="53" type="parameter_name" span="1338:43:1338:46">vec</jtok>
<jtok eid="53" type="class_or_interface_ref" span="1340:9:1340:20">Enumeration</jtok>
<jtok eid="53" type="local_variable_name" span="1340:21:1340:29">varNames</jtok>
<jtok eid="53" type="primary_name_ref" span="1340:32:1340:41">variables</jtok>
<jtok eid="53" type="method_call" span="1340:42:1340:46">keys</jtok>
<jtok eid="53" type="primary_name_ref" span="1341:16:1341:24">varNames</jtok>
<jtok eid="53" type="method_call" span="1341:25:1341:40">hasMoreElements</jtok>
<jtok eid="53" type="primary_name_ref" span="1342:13:1342:16">vec</jtok>
<jtok eid="53" type="method_call" span="1342:17:1342:27">addElement</jtok>
<jtok eid="53" type="primary_name_ref" span="1342:29:1342:37">varNames</jtok>
<jtok eid="53" type="method_call" span="1342:38:1342:49">nextElement</jtok>
<jtok eid="53" type="class_or_interface_ref" span="1344:9:1344:20">Enumeration</jtok>
<jtok eid="53" type="local_variable_name" span="1344:21:1344:32">methodNames</jtok>
<jtok eid="53" type="primary_name_ref" span="1344:35:1344:42">methods</jtok>
<jtok eid="53" type="method_call" span="1344:43:1344:47">keys</jtok>
<jtok eid="53" type="primary_name_ref" span="1345:16:1345:27">methodNames</jtok>
<jtok eid="53" type="method_call" span="1345:28:1345:43">hasMoreElements</jtok>
<jtok eid="53" type="primary_name_ref" span="1346:13:1346:16">vec</jtok>
<jtok eid="53" type="method_call" span="1346:17:1346:27">addElement</jtok>
<jtok eid="53" type="primary_name_ref" span="1346:29:1346:40">methodNames</jtok>
<jtok eid="53" type="method_call" span="1346:41:1346:52">nextElement</jtok>
<jtok eid="53" type="primary_name_ref" span="1348:14:1348:20">parent</jtok>
<jtok eid="53" type="primary_name_ref" span="1349:13:1349:19">parent</jtok>
<jtok eid="53" type="method_call" span="1349:20:1349:34">getAllNamesAux</jtok>
<jtok eid="53" type="primary_name_ref" span="1349:36:1349:39">vec</jtok>
<jtok eid="1" type="class_or_interface_ref" span="1352:5:1352:11">Vector</jtok>
<jtok eid="1" type="field_name" span="1352:12:1352:31">nameSourceListeners</jtok>
<jtok eid="1" type="block_comment" span="1353:5:1356:7">/**
        Implements NameSource
        Add a listener who is notified upon changes to names in this space.
    */</jtok>
<jtok eid="54" type="method_name" span="1357:17:1357:38">addNameSourceListener</jtok>
<jtok eid="54" type="parameter_type" span="1357:40:1357:50">NameSource</jtok>
<jtok eid="54" type="parameter_type" span="1357:51:1357:59">Listener</jtok>
<jtok eid="54" type="parameter_name" span="1357:60:1357:68">listener</jtok>
<jtok eid="54" type="primary_name_ref" span="1358:14:1358:33">nameSourceListeners</jtok>
<jtok eid="54" type="primary_name_ref" span="1359:13:1359:32">nameSourceListeners</jtok>
<jtok eid="54" type="constructor_call" span="1359:39:1359:45">Vector</jtok>
<jtok eid="54" type="primary_name_ref" span="1360:9:1360:28">nameSourceListeners</jtok>
<jtok eid="54" type="method_call" span="1360:29:1360:39">addElement</jtok>
<jtok eid="54" type="primary_name_ref" span="1360:41:1360:49">listener</jtok>
<jtok eid="1" type="block_comment" span="1363:5:1366:7">/**
        Perform "import *;" causing the entire classpath to be mapped.
        This can take a while.
    */</jtok>
<jtok eid="55" type="method_name" span="1367:17:1367:30">doSuperImport</jtok>
<jtok eid="55" type="throws" span="1368:16:1368:29">UtilEvalError</jtok>
<jtok eid="55" type="method_call" span="1370:9:1370:24">getClassManager</jtok>
<jtok eid="55" type="method_call" span="1370:27:1370:40">doSuperImport</jtok>
<jtok eid="56" type="class_or_interface_ref" span="1374:12:1374:18">String</jtok>
<jtok eid="56" type="method_name" span="1374:19:1374:27">toString</jtok>
<jtok eid="56" type="string_literal" span="1375:16:1375:29">"NameSpace: "</jtok>
<jtok eid="56" type="primary_name_ref" span="1376:17:1376:23">nsName</jtok>
<jtok eid="56" type="method_call" span="1377:25:1377:33">toString</jtok>
<jtok eid="56" type="primary_name_ref" span="1378:19:1378:25">nsName</jtok>
<jtok eid="56" type="string_literal" span="1378:28:1378:32">" ("</jtok>
<jtok eid="56" type="method_call" span="1378:41:1378:49">toString</jtok>
<jtok eid="56" type="string_literal" span="1378:53:1378:56">")"</jtok>
<jtok eid="56" type="primary_name_ref" span="1379:17:1379:24">isClass</jtok>
<jtok eid="56" type="string_literal" span="1379:27:1379:40">" (isClass) "</jtok>
<jtok eid="56" type="string_literal" span="1379:43:1379:45">""</jtok>
<jtok eid="56" type="primary_name_ref" span="1380:17:1380:25">isMethod</jtok>
<jtok eid="56" type="string_literal" span="1380:28:1380:40">" (method) "</jtok>
<jtok eid="56" type="string_literal" span="1380:43:1380:45">""</jtok>
<jtok eid="56" type="primary_name_ref" span="1381:17:1381:28">classStatic</jtok>
<jtok eid="56" type="string_literal" span="1381:39:1381:57">" (class static) "</jtok>
<jtok eid="56" type="string_literal" span="1381:60:1381:62">""</jtok>
<jtok eid="56" type="primary_name_ref" span="1382:17:1382:30">classInstance</jtok>
<jtok eid="56" type="string_literal" span="1382:41:1382:61">" (class instance) "</jtok>
<jtok eid="56" type="string_literal" span="1382:64:1382:66">""</jtok>
<jtok eid="1" type="block_comment" span="1385:5:1388:7">/*
        For serialization.
        Don't serialize non-serializable objects.
    */</jtok>
<jtok eid="57" type="method_name" span="1389:31:1389:42">writeObject</jtok>
<jtok eid="57" type="parameter_type" span="1389:43:1389:47">java</jtok>
<jtok eid="57" type="parameter_type" span="1389:48:1389:50">io</jtok>
<jtok eid="57" type="parameter_type" span="1389:51:1389:69">ObjectOutputStream</jtok>
<jtok eid="57" type="parameter_name" span="1389:70:1389:71">s</jtok>
<jtok eid="57" type="throws" span="1390:16:1390:27">IOException</jtok>
<jtok eid="57" type="line_comment" span="1392:9:1392:68">// clear name resolvers... don't know if this is necessary.</jtok>
<jtok eid="57" type="primary_name_ref" span="1393:9:1393:14">names</jtok>
<jtok eid="57" type="primary_name_ref" span="1395:9:1395:10">s</jtok>
<jtok eid="57" type="method_call" span="1395:11:1395:29">defaultWriteObject</jtok>
<jtok eid="1" type="block_comment" span="1398:5:1405:7">/**
        Invoke a method in this namespace with the specified args and
        interpreter reference.  No caller information or call stack is
        required.  The method will appear as if called externally from Java.
        &lt;p&gt;

        @see org.gjt.sp.jedit.bsh.This#invokeMethod(String methodName, Object [] args, Interpreter interpreter,	CallStack callstack, SimpleNode callerInfo, boolean ) invokeMethod
    */</jtok>
<jtok eid="58" type="class_or_interface_ref" span="1406:12:1406:18">Object</jtok>
<jtok eid="58" type="method_name" span="1406:19:1406:31">invokeMethod</jtok>
<jtok eid="58" type="parameter_type" span="1407:9:1407:15">String</jtok>
<jtok eid="58" type="parameter_name" span="1407:16:1407:26">methodName</jtok>
<jtok eid="58" type="parameter_type" span="1407:28:1407:34">Object</jtok>
<jtok eid="58" type="parameter_name" span="1407:38:1407:42">args</jtok>
<jtok eid="58" type="parameter_type" span="1407:44:1407:55">Interpreter</jtok>
<jtok eid="58" type="parameter_name" span="1407:56:1407:67">interpreter</jtok>
<jtok eid="58" type="throws" span="1408:16:1408:25">EvalError</jtok>
<jtok eid="58" type="method_call" span="1410:16:1410:28">invokeMethod</jtok>
<jtok eid="58" type="primary_name_ref" span="1411:13:1411:23">methodName</jtok>
<jtok eid="58" type="primary_name_ref" span="1411:25:1411:29">args</jtok>
<jtok eid="58" type="primary_name_ref" span="1411:31:1411:42">interpreter</jtok>
<jtok eid="1" type="block_comment" span="1414:5:1418:7">/**
        This method simply delegates to This.invokeMethod();
        &lt;p&gt;
        @see org.gjt.sp.jedit.bsh.This#invokeMethod(String methodName, Object [] args, Interpreter interpreter, CallStack callstack, SimpleNode callerInfo, boolean declaredOnly ) invokeMethod
    */</jtok>
<jtok eid="59" type="class_or_interface_ref" span="1419:12:1419:18">Object</jtok>
<jtok eid="59" type="method_name" span="1419:19:1419:31">invokeMethod</jtok>
<jtok eid="59" type="parameter_type" span="1420:9:1420:15">String</jtok>
<jtok eid="59" type="parameter_name" span="1420:16:1420:26">methodName</jtok>
<jtok eid="59" type="parameter_type" span="1420:28:1420:34">Object</jtok>
<jtok eid="59" type="parameter_name" span="1420:38:1420:42">args</jtok>
<jtok eid="59" type="parameter_type" span="1420:44:1420:55">Interpreter</jtok>
<jtok eid="59" type="parameter_name" span="1420:56:1420:67">interpreter</jtok>
<jtok eid="59" type="parameter_type" span="1421:9:1421:18">CallStack</jtok>
<jtok eid="59" type="parameter_name" span="1421:19:1421:28">callstack</jtok>
<jtok eid="59" type="parameter_type" span="1421:30:1421:40">SimpleNode</jtok>
<jtok eid="59" type="parameter_name" span="1421:41:1421:51">callerInfo</jtok>
<jtok eid="59" type="throws" span="1422:16:1422:25">EvalError</jtok>
<jtok eid="59" type="method_call" span="1424:16:1424:23">getThis</jtok>
<jtok eid="59" type="primary_name_ref" span="1424:25:1424:36">interpreter</jtok>
<jtok eid="59" type="method_call" span="1424:39:1424:51">invokeMethod</jtok>
<jtok eid="59" type="primary_name_ref" span="1425:13:1425:23">methodName</jtok>
<jtok eid="59" type="primary_name_ref" span="1425:25:1425:29">args</jtok>
<jtok eid="59" type="primary_name_ref" span="1425:31:1425:42">interpreter</jtok>
<jtok eid="59" type="primary_name_ref" span="1425:44:1425:53">callstack</jtok>
<jtok eid="59" type="primary_name_ref" span="1425:55:1425:65">callerInfo</jtok>
<jtok eid="59" type="block_comment" span="1426:18:1426:34">/*declaredOnly*/</jtok>
<jtok eid="1" type="block_comment" span="1429:5:1431:7">/**
        Clear all cached classes and names
    */</jtok>
<jtok eid="60" type="method_name" span="1432:17:1432:35">classLoaderChanged</jtok>
<jtok eid="60" type="method_call" span="1433:9:1433:25">nameSpaceChanged</jtok>
<jtok eid="1" type="block_comment" span="1436:5:1438:7">/**
        Clear all cached classes and names
    */</jtok>
<jtok eid="61" type="method_name" span="1439:17:1439:33">nameSpaceChanged</jtok>
<jtok eid="61" type="primary_name_ref" span="1440:9:1440:19">classCache</jtok>
<jtok eid="61" type="primary_name_ref" span="1441:9:1441:14">names</jtok>
<jtok eid="1" type="block_comment" span="1444:5:1459:7">/**
        Import standard packages.  Currently:
        &lt;pre&gt;
            importClass("org.gjt.sp.jedit.bsh.EvalError");
            importClass("org.gjt.sp.jedit.bsh.Interpreter");
            importPackage("javax.swing.event");
            importPackage("javax.swing");
            importPackage("java.awt.event");
            importPackage("java.awt");
            importPackage("java.net");
            importPackage("java.util");
            importPackage("java.io");
            importPackage("java.lang");
            addCommandPath("/org/gjt/sp/jedit/bsh/commands",getClass());
        &lt;/pre&gt;
    */</jtok>
<jtok eid="62" type="method_name" span="1460:17:1460:35">loadDefaultImports</jtok>
<jtok eid="62" type="block_comment" span="1462:9:1466:11">/**
            Note: the resolver looks through these in reverse order, per
            precedence rules...  so for max efficiency put the most common
            ones later.
        */</jtok>
<jtok eid="62" type="method_call" span="1467:9:1467:20">importClass</jtok>
<jtok eid="62" type="string_literal" span="1467:21:1467:53">"org.gjt.sp.jedit.bsh.EvalError"</jtok>
<jtok eid="62" type="method_call" span="1468:9:1468:20">importClass</jtok>
<jtok eid="62" type="string_literal" span="1468:21:1468:55">"org.gjt.sp.jedit.bsh.Interpreter"</jtok>
<jtok eid="62" type="method_call" span="1469:9:1469:22">importPackage</jtok>
<jtok eid="62" type="string_literal" span="1469:23:1469:42">"javax.swing.event"</jtok>
<jtok eid="62" type="method_call" span="1470:9:1470:22">importPackage</jtok>
<jtok eid="62" type="string_literal" span="1470:23:1470:36">"javax.swing"</jtok>
<jtok eid="62" type="method_call" span="1471:9:1471:22">importPackage</jtok>
<jtok eid="62" type="string_literal" span="1471:23:1471:39">"java.awt.event"</jtok>
<jtok eid="62" type="method_call" span="1472:9:1472:22">importPackage</jtok>
<jtok eid="62" type="string_literal" span="1472:23:1472:33">"java.awt"</jtok>
<jtok eid="62" type="method_call" span="1473:9:1473:22">importPackage</jtok>
<jtok eid="62" type="string_literal" span="1473:23:1473:33">"java.net"</jtok>
<jtok eid="62" type="method_call" span="1474:9:1474:22">importPackage</jtok>
<jtok eid="62" type="string_literal" span="1474:23:1474:34">"java.util"</jtok>
<jtok eid="62" type="method_call" span="1475:9:1475:22">importPackage</jtok>
<jtok eid="62" type="string_literal" span="1475:23:1475:32">"java.io"</jtok>
<jtok eid="62" type="method_call" span="1476:9:1476:22">importPackage</jtok>
<jtok eid="62" type="string_literal" span="1476:23:1476:34">"java.lang"</jtok>
<jtok eid="62" type="method_call" span="1477:9:1477:23">addCommandPath</jtok>
<jtok eid="62" type="string_literal" span="1477:24:1477:56">"/org/gjt/sp/jedit/bsh/commands"</jtok>
<jtok eid="62" type="method_call" span="1477:57:1477:65">getClass</jtok>
<jtok eid="1" type="block_comment" span="1480:5:1500:7">/**
        This is the factory for Name objects which resolve names within
        this namespace (e.g. toObject(), toClass(), toLHS()).
        &lt;p&gt;

        This was intended to support name resolver caching, allowing
        Name objects to cache info about the resolution of names for
        performance reasons.  However this not proven useful yet.
        &lt;p&gt;

        We'll leave the caching as it will at least minimize Name object
        creation.
        &lt;p&gt;

        (This method would be called getName() if it weren't already used for
        the simple name of the NameSpace)
        &lt;p&gt;

        This method was public for a time, which was a mistake.
        Use get() instead.
    */</jtok>
<jtok eid="63" type="class_or_interface_ref" span="1501:5:1501:9">Name</jtok>
<jtok eid="63" type="method_name" span="1501:10:1501:25">getNameResolver</jtok>
<jtok eid="63" type="parameter_type" span="1501:27:1501:33">String</jtok>
<jtok eid="63" type="parameter_name" span="1501:34:1501:43">ambigname</jtok>
<jtok eid="63" type="primary_name_ref" span="1503:14:1503:19">names</jtok>
<jtok eid="63" type="primary_name_ref" span="1504:13:1504:18">names</jtok>
<jtok eid="63" type="constructor_call" span="1504:25:1504:34">Hashtable</jtok>
<jtok eid="63" type="class_or_interface_ref" span="1506:9:1506:13">Name</jtok>
<jtok eid="63" type="local_variable_name" span="1506:14:1506:18">name</jtok>
<jtok eid="63" type="class_or_interface_ref" span="1506:22:1506:26">Name</jtok>
<jtok eid="63" type="primary_name_ref" span="1506:27:1506:32">names</jtok>
<jtok eid="63" type="method_call" span="1506:33:1506:36">get</jtok>
<jtok eid="63" type="primary_name_ref" span="1506:38:1506:47">ambigname</jtok>
<jtok eid="63" type="primary_name_ref" span="1508:14:1508:18">name</jtok>
<jtok eid="63" type="primary_name_ref" span="1509:13:1509:17">name</jtok>
<jtok eid="63" type="constructor_call" span="1509:24:1509:28">Name</jtok>
<jtok eid="63" type="primary_name_ref" span="1509:36:1509:45">ambigname</jtok>
<jtok eid="63" type="primary_name_ref" span="1510:13:1510:18">names</jtok>
<jtok eid="63" type="method_call" span="1510:19:1510:22">put</jtok>
<jtok eid="63" type="primary_name_ref" span="1510:24:1510:33">ambigname</jtok>
<jtok eid="63" type="primary_name_ref" span="1510:35:1510:39">name</jtok>
<jtok eid="63" type="primary_name_ref" span="1513:16:1513:20">name</jtok>
<jtok eid="64" type="method_name" span="1516:16:1516:33">getInvocationLine</jtok>
<jtok eid="64" type="class_or_interface_ref" span="1517:9:1517:19">SimpleNode</jtok>
<jtok eid="64" type="local_variable_name" span="1517:20:1517:24">node</jtok>
<jtok eid="64" type="method_call" span="1517:27:1517:34">getNode</jtok>
<jtok eid="64" type="primary_name_ref" span="1518:14:1518:18">node</jtok>
<jtok eid="64" type="primary_name_ref" span="1519:20:1519:24">node</jtok>
<jtok eid="64" type="method_call" span="1519:25:1519:38">getLineNumber</jtok>
<jtok eid="65" type="class_or_interface_ref" span="1523:12:1523:18">String</jtok>
<jtok eid="65" type="method_name" span="1523:19:1523:36">getInvocationText</jtok>
<jtok eid="65" type="class_or_interface_ref" span="1524:9:1524:19">SimpleNode</jtok>
<jtok eid="65" type="local_variable_name" span="1524:20:1524:24">node</jtok>
<jtok eid="65" type="method_call" span="1524:27:1524:34">getNode</jtok>
<jtok eid="65" type="primary_name_ref" span="1525:14:1525:18">node</jtok>
<jtok eid="65" type="primary_name_ref" span="1526:20:1526:24">node</jtok>
<jtok eid="65" type="method_call" span="1526:25:1526:32">getText</jtok>
<jtok eid="65" type="string_literal" span="1528:20:1528:46">"&lt;invoked from Java code&gt;"</jtok>
<jtok eid="1" type="block_comment" span="1531:5:1539:7">/**
        This is a helper method for working inside of bsh scripts and commands.
        In that context it is impossible to see a ClassIdentifier object
        for what it is.  Attempting to access a method on a ClassIdentifier
        will look like a static method invocation.

        This method is in NameSpace for convenience (you don't have to import
        bsh.ClassIdentifier to use it );
    */</jtok>
<jtok eid="66" type="class_or_interface_ref" span="1540:19:1540:24">Class</jtok>
<jtok eid="66" type="method_name" span="1540:25:1540:42">identifierToClass</jtok>
<jtok eid="66" type="parameter_type" span="1540:44:1540:59">ClassIdentifier</jtok>
<jtok eid="66" type="parameter_name" span="1540:60:1540:62">ci</jtok>
<jtok eid="66" type="primary_name_ref" span="1542:16:1542:18">ci</jtok>
<jtok eid="66" type="method_call" span="1542:19:1542:33">getTargetClass</jtok>
<jtok eid="1" type="block_comment" span="1546:5:1551:7">/**
        Clear all variables, methods, and imports from this namespace.
        If this namespace is the root, it will be reset to the default
        imports.
        @see #loadDefaultImports()
    */</jtok>
<jtok eid="67" type="method_name" span="1552:17:1552:22">clear</jtok>
<jtok eid="67" type="primary_name_ref" span="1554:9:1554:18">variables</jtok>
<jtok eid="67" type="primary_name_ref" span="1555:9:1555:16">methods</jtok>
<jtok eid="67" type="primary_name_ref" span="1556:9:1556:24">importedClasses</jtok>
<jtok eid="67" type="primary_name_ref" span="1557:9:1557:25">importedPackages</jtok>
<jtok eid="67" type="primary_name_ref" span="1558:9:1558:25">importedCommands</jtok>
<jtok eid="67" type="primary_name_ref" span="1559:9:1559:24">importedObjects</jtok>
<jtok eid="67" type="primary_name_ref" span="1560:14:1560:20">parent</jtok>
<jtok eid="67" type="method_call" span="1561:13:1561:31">loadDefaultImports</jtok>
<jtok eid="67" type="primary_name_ref" span="1562:9:1562:19">classCache</jtok>
<jtok eid="67" type="primary_name_ref" span="1563:9:1563:14">names</jtok>
<jtok eid="1" type="block_comment" span="1566:5:1573:7">/**
        Import a compiled Java object's methods and variables into this
        namespace.  When no scripted method / command or variable is found
        locally in this namespace method / fields of the object will be
        checked.  Objects are checked in the order of import with later imports
        taking precedence.
        &lt;p/&gt;
    */</jtok>
<jtok eid="1" type="block_comment" span="1574:5:1577:7">/*
        Note: this impor pattern is becoming common... could factor it out into
        an importedObject Vector class.
    */</jtok>
<jtok eid="68" type="method_name" span="1578:17:1578:29">importObject</jtok>
<jtok eid="68" type="parameter_type" span="1578:31:1578:37">Object</jtok>
<jtok eid="68" type="parameter_name" span="1578:38:1578:41">obj</jtok>
<jtok eid="68" type="primary_name_ref" span="1580:14:1580:29">importedObjects</jtok>
<jtok eid="68" type="primary_name_ref" span="1581:13:1581:28">importedObjects</jtok>
<jtok eid="68" type="constructor_call" span="1581:35:1581:41">Vector</jtok>
<jtok eid="68" type="line_comment" span="1583:9:1583:77">// If it exists, remove it and add it at the end (avoid memory leak)</jtok>
<jtok eid="68" type="primary_name_ref" span="1584:14:1584:29">importedObjects</jtok>
<jtok eid="68" type="method_call" span="1584:30:1584:38">contains</jtok>
<jtok eid="68" type="primary_name_ref" span="1584:40:1584:43">obj</jtok>
<jtok eid="68" type="primary_name_ref" span="1585:13:1585:28">importedObjects</jtok>
<jtok eid="68" type="method_call" span="1585:29:1585:35">remove</jtok>
<jtok eid="68" type="primary_name_ref" span="1585:37:1585:40">obj</jtok>
<jtok eid="68" type="primary_name_ref" span="1587:9:1587:24">importedObjects</jtok>
<jtok eid="68" type="method_call" span="1587:25:1587:35">addElement</jtok>
<jtok eid="68" type="primary_name_ref" span="1587:37:1587:40">obj</jtok>
<jtok eid="68" type="method_call" span="1588:9:1588:25">nameSpaceChanged</jtok>
<jtok eid="1" type="block_comment" span="1592:5:1593:7">/**
    */</jtok>
<jtok eid="69" type="method_name" span="1594:17:1594:29">importStatic</jtok>
<jtok eid="69" type="parameter_type" span="1594:31:1594:36">Class</jtok>
<jtok eid="69" type="parameter_name" span="1594:37:1594:41">clas</jtok>
<jtok eid="69" type="primary_name_ref" span="1596:14:1596:28">importedStatic</jtok>
<jtok eid="69" type="primary_name_ref" span="1597:13:1597:27">importedStatic</jtok>
<jtok eid="69" type="constructor_call" span="1597:34:1597:40">Vector</jtok>
<jtok eid="69" type="line_comment" span="1599:9:1599:77">// If it exists, remove it and add it at the end (avoid memory leak)</jtok>
<jtok eid="69" type="primary_name_ref" span="1600:14:1600:28">importedStatic</jtok>
<jtok eid="69" type="method_call" span="1600:29:1600:37">contains</jtok>
<jtok eid="69" type="primary_name_ref" span="1600:39:1600:43">clas</jtok>
<jtok eid="69" type="primary_name_ref" span="1601:13:1601:27">importedStatic</jtok>
<jtok eid="69" type="method_call" span="1601:28:1601:34">remove</jtok>
<jtok eid="69" type="primary_name_ref" span="1601:36:1601:40">clas</jtok>
<jtok eid="69" type="primary_name_ref" span="1603:9:1603:23">importedStatic</jtok>
<jtok eid="69" type="method_call" span="1603:24:1603:34">addElement</jtok>
<jtok eid="69" type="primary_name_ref" span="1603:36:1603:40">clas</jtok>
<jtok eid="69" type="method_call" span="1604:9:1604:25">nameSpaceChanged</jtok>
<jtok eid="1" type="block_comment" span="1607:5:1610:7">/**
        Set the package name for classes defined in this namespace.
        Subsequent sets override the package.
    */</jtok>
<jtok eid="70" type="method_name" span="1611:10:1611:20">setPackage</jtok>
<jtok eid="70" type="parameter_type" span="1611:22:1611:28">String</jtok>
<jtok eid="70" type="parameter_name" span="1611:29:1611:40">packageName</jtok>
<jtok eid="70" type="qualified_name_ref" span="1613:14:1613:25">packageName</jtok>
<jtok eid="70" type="primary_name_ref" span="1613:28:1613:39">packageName</jtok>
<jtok eid="71" type="class_or_interface_ref" span="1616:5:1616:11">String</jtok>
<jtok eid="71" type="method_name" span="1616:12:1616:22">getPackage</jtok>
<jtok eid="71" type="primary_name_ref" span="1618:14:1618:25">packageName</jtok>
<jtok eid="71" type="primary_name_ref" span="1619:20:1619:31">packageName</jtok>
<jtok eid="71" type="primary_name_ref" span="1621:14:1621:20">parent</jtok>
<jtok eid="71" type="primary_name_ref" span="1622:20:1622:26">parent</jtok>
<jtok eid="71" type="method_call" span="1622:27:1622:37">getPackage</jtok>
<jtok eid="1" type="line_comment" span="1627:5:1627:26">// {{{ jEdit addition</jtok>
<jtok eid="72" type="method_name" span="1628:17:1628:28">setVariable</jtok>
<jtok eid="72" type="parameter_type" span="1628:29:1628:35">String</jtok>
<jtok eid="72" type="parameter_name" span="1628:36:1628:40">name</jtok>
<jtok eid="72" type="parameter_type" span="1628:42:1628:48">Object</jtok>
<jtok eid="72" type="parameter_name" span="1628:49:1628:54">value</jtok>
<jtok eid="72" type="throws" span="1628:63:1628:76">UtilEvalError</jtok>
<jtok eid="72" type="method_call" span="1630:17:1630:28">setVariable</jtok>
<jtok eid="72" type="primary_name_ref" span="1630:29:1630:33">name</jtok>
<jtok eid="72" type="primary_name_ref" span="1630:34:1630:39">value</jtok>
<jtok eid="1" type="block_comment" span="1633:5:1635:7">/**
        Adds a URL to the command path.
    */</jtok>
<jtok eid="73" type="method_name" span="1636:17:1636:31">addCommandPath</jtok>
<jtok eid="73" type="parameter_type" span="1636:32:1636:38">String</jtok>
<jtok eid="73" type="parameter_name" span="1636:39:1636:43">path</jtok>
<jtok eid="73" type="parameter_type" span="1636:45:1636:50">Class</jtok>
<jtok eid="73" type="parameter_name" span="1636:51:1636:55">clas</jtok>
<jtok eid="73" type="primary_name_ref" span="1638:12:1638:28">importedCommands</jtok>
<jtok eid="73" type="primary_name_ref" span="1639:13:1639:29">importedCommands</jtok>
<jtok eid="73" type="constructor_call" span="1639:36:1639:42">Vector</jtok>
<jtok eid="73" type="primary_name_ref" span="1641:13:1641:17">path</jtok>
<jtok eid="73" type="method_call" span="1641:18:1641:26">endsWith</jtok>
<jtok eid="73" type="string_literal" span="1641:27:1641:30">"/"</jtok>
<jtok eid="73" type="primary_name_ref" span="1642:13:1642:17">path</jtok>
<jtok eid="73" type="primary_name_ref" span="1643:9:1643:25">importedCommands</jtok>
<jtok eid="73" type="method_call" span="1643:26:1643:36">addElement</jtok>
<jtok eid="73" type="constructor_call" span="1643:41:1643:57">CommandPathEntry</jtok>
<jtok eid="73" type="primary_name_ref" span="1643:58:1643:62">path</jtok>
<jtok eid="73" type="primary_name_ref" span="1643:63:1643:67">clas</jtok>
<jtok eid="1" type="block_comment" span="1646:5:1648:7">/**
        Remove a URLfrom the command path.
    */</jtok>
<jtok eid="74" type="method_name" span="1649:17:1649:34">removeCommandPath</jtok>
<jtok eid="74" type="parameter_type" span="1649:35:1649:41">String</jtok>
<jtok eid="74" type="parameter_name" span="1649:42:1649:46">path</jtok>
<jtok eid="74" type="parameter_type" span="1649:48:1649:53">Class</jtok>
<jtok eid="74" type="parameter_name" span="1649:54:1649:58">clas</jtok>
<jtok eid="74" type="primary_name_ref" span="1651:12:1651:28">importedCommands</jtok>
<jtok eid="74" type="local_variable_name" span="1654:17:1654:18">i</jtok>
<jtok eid="74" type="primary_name_ref" span="1654:24:1654:25">i</jtok>
<jtok eid="74" type="primary_name_ref" span="1654:28:1654:44">importedCommands</jtok>
<jtok eid="74" type="method_call" span="1654:45:1654:49">size</jtok>
<jtok eid="74" type="primary_name_ref" span="1654:53:1654:54">i</jtok>
<jtok eid="74" type="class_or_interface_ref" span="1656:13:1656:29">CommandPathEntry</jtok>
<jtok eid="74" type="local_variable_name" span="1656:30:1656:35">entry</jtok>
<jtok eid="74" type="class_or_interface_ref" span="1656:39:1656:55">CommandPathEntry</jtok>
<jtok eid="74" type="primary_name_ref" span="1656:56:1656:72">importedCommands</jtok>
<jtok eid="74" type="method_call" span="1657:18:1657:27">elementAt</jtok>
<jtok eid="74" type="primary_name_ref" span="1657:28:1657:29">i</jtok>
<jtok eid="74" type="primary_name_ref" span="1658:16:1658:21">entry</jtok>
<jtok eid="74" type="qualified_name_ref" span="1658:22:1658:26">path</jtok>
<jtok eid="74" type="method_call" span="1658:27:1658:33">equals</jtok>
<jtok eid="74" type="primary_name_ref" span="1658:34:1658:38">path</jtok>
<jtok eid="74" type="primary_name_ref" span="1658:43:1658:48">entry</jtok>
<jtok eid="74" type="qualified_name_ref" span="1658:49:1658:53">clas</jtok>
<jtok eid="74" type="primary_name_ref" span="1658:57:1658:61">clas</jtok>
<jtok eid="74" type="primary_name_ref" span="1660:17:1660:33">importedCommands</jtok>
<jtok eid="74" type="method_call" span="1660:34:1660:49">removeElementAt</jtok>
<jtok eid="74" type="primary_name_ref" span="1660:50:1660:51">i</jtok>
<jtok eid="1" type="block_comment" span="1666:5:1668:7">/**
        Looks up a command.
    */</jtok>
<jtok eid="75" type="class_or_interface_ref" span="1669:12:1669:23">InputStream</jtok>
<jtok eid="75" type="method_name" span="1669:24:1669:34">getCommand</jtok>
<jtok eid="75" type="parameter_type" span="1669:35:1669:41">String</jtok>
<jtok eid="75" type="parameter_name" span="1669:42:1669:46">name</jtok>
<jtok eid="75" type="primary_name_ref" span="1671:12:1671:28">importedCommands</jtok>
<jtok eid="75" type="class_or_interface_ref" span="1673:13:1673:19">String</jtok>
<jtok eid="75" type="local_variable_name" span="1673:20:1673:27">extName</jtok>
<jtok eid="75" type="primary_name_ref" span="1673:30:1673:34">name</jtok>
<jtok eid="75" type="string_literal" span="1673:37:1673:43">".bsh"</jtok>
<jtok eid="75" type="local_variable_name" span="1674:21:1674:22">i</jtok>
<jtok eid="75" type="primary_name_ref" span="1674:25:1674:41">importedCommands</jtok>
<jtok eid="75" type="method_call" span="1674:42:1674:46">size</jtok>
<jtok eid="75" type="primary_name_ref" span="1674:54:1674:55">i</jtok>
<jtok eid="75" type="primary_name_ref" span="1674:62:1674:63">i</jtok>
<jtok eid="75" type="class_or_interface_ref" span="1676:17:1676:33">CommandPathEntry</jtok>
<jtok eid="75" type="local_variable_name" span="1676:34:1676:39">entry</jtok>
<jtok eid="75" type="class_or_interface_ref" span="1676:43:1676:59">CommandPathEntry</jtok>
<jtok eid="75" type="primary_name_ref" span="1676:60:1676:76">importedCommands</jtok>
<jtok eid="75" type="method_call" span="1677:22:1677:31">elementAt</jtok>
<jtok eid="75" type="primary_name_ref" span="1677:32:1677:33">i</jtok>
<jtok eid="75" type="class_or_interface_ref" span="1678:17:1678:28">InputStream</jtok>
<jtok eid="75" type="local_variable_name" span="1678:29:1678:31">in</jtok>
<jtok eid="75" type="primary_name_ref" span="1678:34:1678:39">entry</jtok>
<jtok eid="75" type="qualified_name_ref" span="1678:40:1678:44">clas</jtok>
<jtok eid="75" type="method_call" span="1678:45:1678:64">getResourceAsStream</jtok>
<jtok eid="75" type="primary_name_ref" span="1678:65:1678:70">entry</jtok>
<jtok eid="75" type="qualified_name_ref" span="1678:71:1678:75">path</jtok>
<jtok eid="75" type="primary_name_ref" span="1678:78:1678:85">extName</jtok>
<jtok eid="75" type="primary_name_ref" span="1679:20:1679:22">in</jtok>
<jtok eid="75" type="primary_name_ref" span="1680:28:1680:30">in</jtok>
<jtok eid="75" type="primary_name_ref" span="1684:12:1684:18">parent</jtok>
<jtok eid="75" type="primary_name_ref" span="1687:20:1687:26">parent</jtok>
<jtok eid="75" type="method_call" span="1687:27:1687:37">getCommand</jtok>
<jtok eid="75" type="primary_name_ref" span="1687:38:1687:42">name</jtok>
<jtok eid="76" type="class_name" span="1690:18:1690:34">CommandPathEntry</jtok>
<jtok eid="76" type="class_or_interface_ref" span="1692:15:1692:21">String</jtok>
<jtok eid="76" type="field_name" span="1692:22:1692:26">path</jtok>
<jtok eid="76" type="class_or_interface_ref" span="1693:15:1693:20">Class</jtok>
<jtok eid="76" type="field_name" span="1693:21:1693:25">clas</jtok>
<jtok eid="77" type="method_name" span="1695:9:1695:25">CommandPathEntry</jtok>
<jtok eid="77" type="parameter_type" span="1695:26:1695:32">String</jtok>
<jtok eid="77" type="parameter_name" span="1695:33:1695:37">path</jtok>
<jtok eid="77" type="parameter_type" span="1695:39:1695:44">Class</jtok>
<jtok eid="77" type="parameter_name" span="1695:45:1695:49">clas</jtok>
<jtok eid="77" type="qualified_name_ref" span="1697:18:1697:22">path</jtok>
<jtok eid="77" type="primary_name_ref" span="1697:25:1697:29">path</jtok>
<jtok eid="77" type="qualified_name_ref" span="1698:18:1698:22">clas</jtok>
<jtok eid="77" type="primary_name_ref" span="1698:25:1698:29">clas</jtok>
<jtok eid="1" type="line_comment" span="1702:5:1702:11">// }}}</jtok>
</jdoc>