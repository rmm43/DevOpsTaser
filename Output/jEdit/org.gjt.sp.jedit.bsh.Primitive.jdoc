<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.Primitive" jls="java5">
<jent id="0" type="file" span="0:0:1098:2">Source/jEdit/org/gjt/sp/jedit/bsh/Primitive.java</jent>
<jent id="1" pid="0" type="class" span="49:1:1098:1">org.gjt.sp.jedit.bsh.Primitive</jent>
<jent id="2" pid="1" type="class" span="96:5:102:5">org.gjt.sp.jedit.bsh.Primitive.Special</jent>
<jent id="3" pid="2" type="method" span="98:9:98:29">org.gjt.sp.jedit.bsh.Primitive.Special.Special()</jent>
<jent id="4" pid="1" type="method" span="118:5:131:5">org.gjt.sp.jedit.bsh.Primitive.Primitive(Object)</jent>
<jent id="5" pid="1" type="method" span="133:5:133:65">org.gjt.sp.jedit.bsh.Primitive.Primitive(boolean)</jent>
<jent id="6" pid="1" type="method" span="134:5:134:59">org.gjt.sp.jedit.bsh.Primitive.Primitive(byte)</jent>
<jent id="7" pid="1" type="method" span="135:5:135:61">org.gjt.sp.jedit.bsh.Primitive.Primitive(short)</jent>
<jent id="8" pid="1" type="method" span="136:5:136:64">org.gjt.sp.jedit.bsh.Primitive.Primitive(char)</jent>
<jent id="9" pid="1" type="method" span="137:5:137:61">org.gjt.sp.jedit.bsh.Primitive.Primitive(int)</jent>
<jent id="10" pid="1" type="method" span="138:5:138:59">org.gjt.sp.jedit.bsh.Primitive.Primitive(long)</jent>
<jent id="11" pid="1" type="method" span="139:5:139:61">org.gjt.sp.jedit.bsh.Primitive.Primitive(float)</jent>
<jent id="12" pid="1" type="method" span="140:5:140:63">org.gjt.sp.jedit.bsh.Primitive.Primitive(double)</jent>
<jent id="13" pid="1" type="method" span="145:5:154:5">org.gjt.sp.jedit.bsh.Primitive.getValue()</jent>
<jent id="14" pid="1" type="method" span="156:5:164:5">org.gjt.sp.jedit.bsh.Primitive.toString()</jent>
<jent id="15" pid="1" type="method" span="171:5:182:5">org.gjt.sp.jedit.bsh.Primitive.getType()</jent>
<jent id="16" pid="1" type="method" span="191:5:237:5">org.gjt.sp.jedit.bsh.Primitive.binaryOperation(Object,Object,int)</jent>
<jent id="17" pid="1" type="method" span="239:5:254:2">org.gjt.sp.jedit.bsh.Primitive.binaryOperationImpl(Object,Object,int)</jent>
<jent id="18" pid="1" type="method" span="256:5:280:5">org.gjt.sp.jedit.bsh.Primitive.booleanBinaryOperation(Boolean,Boolean,int)</jent>
<jent id="19" pid="1" type="method" span="283:5:357:5">org.gjt.sp.jedit.bsh.Primitive.longBinaryOperation(Long,Long,int)</jent>
<jent id="20" pid="1" type="method" span="360:5:434:5">org.gjt.sp.jedit.bsh.Primitive.intBinaryOperation(Integer,Integer,int)</jent>
<jent id="21" pid="1" type="method" span="437:5:497:5">org.gjt.sp.jedit.bsh.Primitive.doubleBinaryOperation(Double,Double,int)</jent>
<jent id="22" pid="1" type="method" span="499:5:559:5">org.gjt.sp.jedit.bsh.Primitive.floatBinaryOperation(Float,Float,int)</jent>
<jent id="23" pid="1" type="method" span="564:5:572:5">org.gjt.sp.jedit.bsh.Primitive.promoteToInteger(Object)</jent>
<jent id="24" pid="1" type="method" span="578:5:614:5">org.gjt.sp.jedit.bsh.Primitive.promotePrimitives(Object,Object)</jent>
<jent id="25" pid="1" type="method" span="616:5:657:5">org.gjt.sp.jedit.bsh.Primitive.unaryOperation(Primitive,int)</jent>
<jent id="26" pid="1" type="method" span="659:5:670:5">org.gjt.sp.jedit.bsh.Primitive.booleanUnaryOperation(Boolean,int)</jent>
<jent id="27" pid="1" type="method" span="672:5:691:5">org.gjt.sp.jedit.bsh.Primitive.intUnaryOperation(Integer,int)</jent>
<jent id="28" pid="1" type="method" span="693:5:712:5">org.gjt.sp.jedit.bsh.Primitive.longUnaryOperation(Long,int)</jent>
<jent id="29" pid="1" type="method" span="714:5:727:5">org.gjt.sp.jedit.bsh.Primitive.floatUnaryOperation(Float,int)</jent>
<jent id="30" pid="1" type="method" span="729:5:742:5">org.gjt.sp.jedit.bsh.Primitive.doubleUnaryOperation(Double,int)</jent>
<jent id="31" pid="1" type="method" span="744:5:750:5">org.gjt.sp.jedit.bsh.Primitive.intValue()</jent>
<jent id="32" pid="1" type="method" span="752:5:758:5">org.gjt.sp.jedit.bsh.Primitive.booleanValue()</jent>
<jent id="33" pid="1" type="method" span="764:2:767:2">org.gjt.sp.jedit.bsh.Primitive.isNumber()</jent>
<jent id="34" pid="1" type="method" span="769:5:781:5">org.gjt.sp.jedit.bsh.Primitive.numberValue()</jent>
<jent id="35" pid="1" type="method" span="787:2:793:2">org.gjt.sp.jedit.bsh.Primitive.equals(Object)</jent>
<jent id="36" pid="1" type="method" span="799:2:802:2">org.gjt.sp.jedit.bsh.Primitive.hashCode()</jent>
<jent id="37" pid="1" type="method" span="812:2:823:2">org.gjt.sp.jedit.bsh.Primitive.unwrap(Object)</jent>
<jent id="38" pid="1" type="method" span="830:5:836:5">org.gjt.sp.jedit.bsh.Primitive.unwrap(Object[])</jent>
<jent id="39" pid="1" type="method" span="840:5:849:5">org.gjt.sp.jedit.bsh.Primitive.wrap(Object[],Class[])</jent>
<jent id="40" pid="1" type="method" span="859:5:872:5">org.gjt.sp.jedit.bsh.Primitive.wrap(Object,Class)</jent>
<jent id="41" pid="1" type="method" span="878:2:891:2">org.gjt.sp.jedit.bsh.Primitive.getDefaultValue(Class)</jent>
<jent id="42" pid="1" type="method" span="898:2:905:2">org.gjt.sp.jedit.bsh.Primitive.boxType(Class)</jent>
<jent id="43" pid="1" type="method" span="912:2:919:2">org.gjt.sp.jedit.bsh.Primitive.unboxType(Class)</jent>
<jent id="44" pid="1" type="method" span="929:2:935:2">org.gjt.sp.jedit.bsh.Primitive.castToType(Class,int)</jent>
<jent id="45" pid="1" type="method" span="954:2:1041:2">org.gjt.sp.jedit.bsh.Primitive.castPrimitive(Class,Class,Primitive,boolean,int)</jent>
<jent id="46" pid="1" type="method" span="1043:2:1046:2">org.gjt.sp.jedit.bsh.Primitive.isWrapperType(Class)</jent>
<jent id="47" pid="1" type="method" span="1056:2:1096:2">org.gjt.sp.jedit.bsh.Primitive.castWrapper(Class,Object)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="39:1:44:3">/**
    Wrapper for primitive types in Bsh.  This is package public because it 
	is used in the implementation of some bsh commands.

    See the note in LHS.java about wrapping objects.
*/</jtok>
<jtok eid="0" type="block_comment" span="45:1:48:3">/*
	Note: this class is final because we may test == Primitive.class in places.
	If we need to change that search for those tests.
*/</jtok>
<jtok eid="1" type="class_name" span="49:20:49:29">Primitive</jtok>
<jtok eid="1" type="class_or_interface_ref" span="49:41:49:56">ParserConstants</jtok>
<jtok eid="1" type="class_or_interface_ref" span="49:58:49:62">java</jtok>
<jtok eid="1" type="class_or_interface_ref" span="49:63:49:65">io</jtok>
<jtok eid="1" type="class_or_interface_ref" span="49:66:49:78">Serializable</jtok>
<jtok eid="1" type="block_comment" span="51:2:72:4">/*
	static Hashtable primitiveToWrapper = new Hashtable();
	static Hashtable wrapperToPrimitive = new Hashtable();
	static {
		primitiveToWrapper.put( Boolean.TYPE, Boolean.class );
		primitiveToWrapper.put( Byte.TYPE, Byte.class );
		primitiveToWrapper.put( Short.TYPE, Short.class );
		primitiveToWrapper.put( Character.TYPE, Character.class );
		primitiveToWrapper.put( Integer.TYPE, Integer.class );
		primitiveToWrapper.put( Long.TYPE, Long.class );
		primitiveToWrapper.put( Float.TYPE, Float.class );
		primitiveToWrapper.put( Double.TYPE, Double.class );
		wrapperToPrimitive.put( Boolean.class, Boolean.TYPE );
		wrapperToPrimitive.put( Byte.class, Byte.TYPE );
		wrapperToPrimitive.put( Short.class, Short.TYPE );
		wrapperToPrimitive.put( Character.class, Character.TYPE );
		wrapperToPrimitive.put( Integer.class, Integer.TYPE );
		wrapperToPrimitive.put( Long.class, Long.TYPE );
		wrapperToPrimitive.put( Float.class, Float.TYPE );
		wrapperToPrimitive.put( Double.class, Double.TYPE );
	}
	*/</jtok>
<jtok eid="1" type="class_or_interface_ref" span="73:9:73:18">Hashtable</jtok>
<jtok eid="1" type="field_name" span="73:19:73:29">wrapperMap</jtok>
<jtok eid="1" type="constructor_call" span="73:36:73:45">Hashtable</jtok>
<jtok eid="1" type="primary_name_ref" span="75:3:75:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="75:14:75:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="75:19:75:26">Boolean</jtok>
<jtok eid="1" type="qualified_name_ref" span="75:27:75:31">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="75:33:75:40">Boolean</jtok>
<jtok eid="1" type="primary_name_ref" span="76:3:76:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="76:14:76:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="76:19:76:23">Byte</jtok>
<jtok eid="1" type="qualified_name_ref" span="76:24:76:28">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="76:30:76:34">Byte</jtok>
<jtok eid="1" type="primary_name_ref" span="77:3:77:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="77:14:77:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="77:19:77:24">Short</jtok>
<jtok eid="1" type="qualified_name_ref" span="77:25:77:29">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="77:31:77:36">Short</jtok>
<jtok eid="1" type="primary_name_ref" span="78:3:78:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="78:14:78:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="78:19:78:28">Character</jtok>
<jtok eid="1" type="qualified_name_ref" span="78:29:78:33">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="78:35:78:44">Character</jtok>
<jtok eid="1" type="primary_name_ref" span="79:3:79:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="79:14:79:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="79:19:79:26">Integer</jtok>
<jtok eid="1" type="qualified_name_ref" span="79:27:79:31">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="79:33:79:40">Integer</jtok>
<jtok eid="1" type="primary_name_ref" span="80:3:80:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="80:14:80:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="80:19:80:23">Long</jtok>
<jtok eid="1" type="qualified_name_ref" span="80:24:80:28">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="80:30:80:34">Long</jtok>
<jtok eid="1" type="primary_name_ref" span="81:3:81:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="81:14:81:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="81:19:81:24">Float</jtok>
<jtok eid="1" type="qualified_name_ref" span="81:25:81:29">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="81:31:81:36">Float</jtok>
<jtok eid="1" type="primary_name_ref" span="82:3:82:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="82:14:82:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="82:19:82:25">Double</jtok>
<jtok eid="1" type="qualified_name_ref" span="82:26:82:30">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="82:32:82:38">Double</jtok>
<jtok eid="1" type="primary_name_ref" span="83:3:83:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="83:14:83:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="83:19:83:26">Boolean</jtok>
<jtok eid="1" type="primary_name_ref" span="83:34:83:41">Boolean</jtok>
<jtok eid="1" type="qualified_name_ref" span="83:42:83:46">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="84:3:84:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="84:14:84:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="84:19:84:23">Byte</jtok>
<jtok eid="1" type="primary_name_ref" span="84:31:84:35">Byte</jtok>
<jtok eid="1" type="qualified_name_ref" span="84:36:84:40">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="85:3:85:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="85:14:85:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="85:19:85:24">Short</jtok>
<jtok eid="1" type="primary_name_ref" span="85:32:85:37">Short</jtok>
<jtok eid="1" type="qualified_name_ref" span="85:38:85:42">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="86:3:86:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="86:14:86:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="86:19:86:28">Character</jtok>
<jtok eid="1" type="primary_name_ref" span="86:36:86:45">Character</jtok>
<jtok eid="1" type="qualified_name_ref" span="86:46:86:50">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="87:3:87:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="87:14:87:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="87:19:87:26">Integer</jtok>
<jtok eid="1" type="primary_name_ref" span="87:34:87:41">Integer</jtok>
<jtok eid="1" type="qualified_name_ref" span="87:42:87:46">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="88:3:88:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="88:14:88:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="88:19:88:23">Long</jtok>
<jtok eid="1" type="primary_name_ref" span="88:31:88:35">Long</jtok>
<jtok eid="1" type="qualified_name_ref" span="88:36:88:40">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="89:3:89:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="89:14:89:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="89:19:89:24">Float</jtok>
<jtok eid="1" type="primary_name_ref" span="89:32:89:37">Float</jtok>
<jtok eid="1" type="qualified_name_ref" span="89:38:89:42">TYPE</jtok>
<jtok eid="1" type="primary_name_ref" span="90:3:90:13">wrapperMap</jtok>
<jtok eid="1" type="method_call" span="90:14:90:17">put</jtok>
<jtok eid="1" type="primary_name_ref" span="90:19:90:25">Double</jtok>
<jtok eid="1" type="primary_name_ref" span="90:33:90:39">Double</jtok>
<jtok eid="1" type="qualified_name_ref" span="90:40:90:44">TYPE</jtok>
<jtok eid="1" type="block_comment" span="93:5:93:69">/** The primitive value stored in its java.lang wrapper class */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="94:13:94:19">Object</jtok>
<jtok eid="1" type="field_name" span="94:20:94:25">value</jtok>
<jtok eid="2" type="class_name" span="96:26:96:33">Special</jtok>
<jtok eid="2" type="class_or_interface_ref" span="96:45:96:49">java</jtok>
<jtok eid="2" type="class_or_interface_ref" span="96:50:96:52">io</jtok>
<jtok eid="2" type="class_or_interface_ref" span="96:53:96:65">Serializable</jtok>
<jtok eid="3" type="method_name" span="98:17:98:24">Special</jtok>
<jtok eid="2" type="class_or_interface_ref" span="100:29:100:36">Special</jtok>
<jtok eid="2" type="field_name" span="100:37:100:47">NULL_VALUE</jtok>
<jtok eid="2" type="constructor_call" span="100:54:100:61">Special</jtok>
<jtok eid="2" type="class_or_interface_ref" span="101:29:101:36">Special</jtok>
<jtok eid="2" type="field_name" span="101:37:101:46">VOID_TYPE</jtok>
<jtok eid="2" type="constructor_call" span="101:53:101:60">Special</jtok>
<jtok eid="1" type="block_comment" span="104:5:107:7">/*
        NULL means "no value".
        This ia a placeholder for primitive null value.
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="108:25:108:34">Primitive</jtok>
<jtok eid="1" type="field_name" span="108:35:108:39">NULL</jtok>
<jtok eid="1" type="constructor_call" span="108:46:108:55">Primitive</jtok>
<jtok eid="1" type="primary_name_ref" span="108:56:108:63">Special</jtok>
<jtok eid="1" type="qualified_name_ref" span="108:64:108:74">NULL_VALUE</jtok>
<jtok eid="1" type="block_comment" span="110:5:114:7">/**
        VOID means "no type".
        Strictly speaking, this makes no sense here.  But for practical
        reasons we'll consider the lack of a type to be a special value.
    */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="115:25:115:34">Primitive</jtok>
<jtok eid="1" type="field_name" span="115:35:115:39">VOID</jtok>
<jtok eid="1" type="constructor_call" span="115:46:115:55">Primitive</jtok>
<jtok eid="1" type="primary_name_ref" span="115:56:115:63">Special</jtok>
<jtok eid="1" type="qualified_name_ref" span="115:64:115:73">VOID_TYPE</jtok>
<jtok eid="1" type="line_comment" span="117:5:117:79">// private to prevent invocation with param that isn't a primitive-wrapper</jtok>
<jtok eid="4" type="method_name" span="118:12:118:21">Primitive</jtok>
<jtok eid="4" type="parameter_type" span="118:23:118:29">Object</jtok>
<jtok eid="4" type="parameter_name" span="118:30:118:35">value</jtok>
<jtok eid="4" type="primary_name_ref" span="120:14:120:19">value</jtok>
<jtok eid="4" type="constructor_call" span="121:23:121:39">InterpreterError</jtok>
<jtok eid="4" type="string_literal" span="122:5:122:51">"Use Primitve.NULL instead of Primitive(null)"</jtok>
<jtok eid="4" type="primary_name_ref" span="124:8:124:13">value</jtok>
<jtok eid="4" type="primary_name_ref" span="124:17:124:24">Special</jtok>
<jtok eid="4" type="qualified_name_ref" span="124:25:124:35">NULL_VALUE</jtok>
<jtok eid="4" type="primary_name_ref" span="125:7:125:12">value</jtok>
<jtok eid="4" type="primary_name_ref" span="125:16:125:23">Special</jtok>
<jtok eid="4" type="qualified_name_ref" span="125:24:125:33">VOID_TYPE</jtok>
<jtok eid="4" type="method_call" span="126:5:126:18">isWrapperType</jtok>
<jtok eid="4" type="primary_name_ref" span="126:20:126:25">value</jtok>
<jtok eid="4" type="method_call" span="126:26:126:34">getClass</jtok>
<jtok eid="4" type="constructor_call" span="128:23:128:39">InterpreterError</jtok>
<jtok eid="4" type="string_literal" span="128:41:128:63">"Not a wrapper type: "</jtok>
<jtok eid="4" type="primary_name_ref" span="128:64:128:69">value</jtok>
<jtok eid="4" type="qualified_name_ref" span="130:14:130:19">value</jtok>
<jtok eid="4" type="primary_name_ref" span="130:22:130:27">value</jtok>
<jtok eid="5" type="method_name" span="133:12:133:21">Primitive</jtok>
<jtok eid="5" type="parameter_name" span="133:30:133:35">value</jtok>
<jtok eid="5" type="constructor_call" span="133:48:133:55">Boolean</jtok>
<jtok eid="5" type="primary_name_ref" span="133:56:133:61">value</jtok>
<jtok eid="6" type="method_name" span="134:12:134:21">Primitive</jtok>
<jtok eid="6" type="parameter_name" span="134:27:134:32">value</jtok>
<jtok eid="6" type="constructor_call" span="134:45:134:49">Byte</jtok>
<jtok eid="6" type="primary_name_ref" span="134:50:134:55">value</jtok>
<jtok eid="7" type="method_name" span="135:12:135:21">Primitive</jtok>
<jtok eid="7" type="parameter_name" span="135:28:135:33">value</jtok>
<jtok eid="7" type="constructor_call" span="135:46:135:51">Short</jtok>
<jtok eid="7" type="primary_name_ref" span="135:52:135:57">value</jtok>
<jtok eid="8" type="method_name" span="136:12:136:21">Primitive</jtok>
<jtok eid="8" type="parameter_name" span="136:27:136:32">value</jtok>
<jtok eid="8" type="constructor_call" span="136:45:136:54">Character</jtok>
<jtok eid="8" type="primary_name_ref" span="136:55:136:60">value</jtok>
<jtok eid="9" type="method_name" span="137:12:137:21">Primitive</jtok>
<jtok eid="9" type="parameter_name" span="137:26:137:31">value</jtok>
<jtok eid="9" type="constructor_call" span="137:44:137:51">Integer</jtok>
<jtok eid="9" type="primary_name_ref" span="137:52:137:57">value</jtok>
<jtok eid="10" type="method_name" span="138:12:138:21">Primitive</jtok>
<jtok eid="10" type="parameter_name" span="138:27:138:32">value</jtok>
<jtok eid="10" type="constructor_call" span="138:45:138:49">Long</jtok>
<jtok eid="10" type="primary_name_ref" span="138:50:138:55">value</jtok>
<jtok eid="11" type="method_name" span="139:12:139:21">Primitive</jtok>
<jtok eid="11" type="parameter_name" span="139:28:139:33">value</jtok>
<jtok eid="11" type="constructor_call" span="139:46:139:51">Float</jtok>
<jtok eid="11" type="primary_name_ref" span="139:52:139:57">value</jtok>
<jtok eid="12" type="method_name" span="140:12:140:21">Primitive</jtok>
<jtok eid="12" type="parameter_name" span="140:29:140:34">value</jtok>
<jtok eid="12" type="constructor_call" span="140:47:140:53">Double</jtok>
<jtok eid="12" type="primary_name_ref" span="140:54:140:59">value</jtok>
<jtok eid="1" type="block_comment" span="142:2:144:4">/**
    	Return the primitive value stored in its java.lang wrapper class
	*/</jtok>
<jtok eid="13" type="class_or_interface_ref" span="145:12:145:18">Object</jtok>
<jtok eid="13" type="method_name" span="145:19:145:27">getValue</jtok>
<jtok eid="13" type="primary_name_ref" span="147:14:147:19">value</jtok>
<jtok eid="13" type="primary_name_ref" span="147:23:147:30">Special</jtok>
<jtok eid="13" type="qualified_name_ref" span="147:31:147:41">NULL_VALUE</jtok>
<jtok eid="13" type="primary_name_ref" span="150:8:150:13">value</jtok>
<jtok eid="13" type="primary_name_ref" span="150:17:150:24">Special</jtok>
<jtok eid="13" type="qualified_name_ref" span="150:25:150:34">VOID_TYPE</jtok>
<jtok eid="13" type="constructor_call" span="151:27:151:43">InterpreterError</jtok>
<jtok eid="13" type="string_literal" span="151:44:151:73">"attempt to unwrap void type"</jtok>
<jtok eid="13" type="primary_name_ref" span="153:20:153:25">value</jtok>
<jtok eid="14" type="class_or_interface_ref" span="156:12:156:18">String</jtok>
<jtok eid="14" type="method_name" span="156:19:156:27">toString</jtok>
<jtok eid="14" type="primary_name_ref" span="158:12:158:17">value</jtok>
<jtok eid="14" type="primary_name_ref" span="158:21:158:28">Special</jtok>
<jtok eid="14" type="qualified_name_ref" span="158:29:158:39">NULL_VALUE</jtok>
<jtok eid="14" type="string_literal" span="159:20:159:26">"null"</jtok>
<jtok eid="14" type="primary_name_ref" span="160:17:160:22">value</jtok>
<jtok eid="14" type="primary_name_ref" span="160:26:160:33">Special</jtok>
<jtok eid="14" type="qualified_name_ref" span="160:34:160:43">VOID_TYPE</jtok>
<jtok eid="14" type="string_literal" span="161:20:161:26">"void"</jtok>
<jtok eid="14" type="primary_name_ref" span="163:20:163:25">value</jtok>
<jtok eid="14" type="method_call" span="163:26:163:34">toString</jtok>
<jtok eid="1" type="block_comment" span="166:2:170:4">/**
		Get the corresponding Java primitive TYPE class for this Primitive.
		@return the primitive TYPE class type of the value or Void.TYPE for
		Primitive.VOID or null value for type of Primitive.NULL
	*/</jtok>
<jtok eid="15" type="class_or_interface_ref" span="171:12:171:17">Class</jtok>
<jtok eid="15" type="method_name" span="171:18:171:25">getType</jtok>
<jtok eid="15" type="primary_name_ref" span="173:16:173:25">Primitive</jtok>
<jtok eid="15" type="qualified_name_ref" span="173:26:173:30">VOID</jtok>
<jtok eid="15" type="primary_name_ref" span="174:11:174:15">Void</jtok>
<jtok eid="15" type="qualified_name_ref" span="174:16:174:20">TYPE</jtok>
<jtok eid="15" type="line_comment" span="176:3:176:72">// NULL return null as type... we currently use null type to indicate</jtok>
<jtok eid="15" type="line_comment" span="177:3:177:34">// loose typing throughout bsh.</jtok>
<jtok eid="15" type="primary_name_ref" span="178:16:178:25">Primitive</jtok>
<jtok eid="15" type="qualified_name_ref" span="178:26:178:30">NULL</jtok>
<jtok eid="15" type="method_call" span="181:10:181:19">unboxType</jtok>
<jtok eid="15" type="primary_name_ref" span="181:21:181:26">value</jtok>
<jtok eid="15" type="method_call" span="181:27:181:35">getClass</jtok>
<jtok eid="1" type="block_comment" span="184:2:190:4">/**
		Perform a binary operation on two Primitives or wrapper types.
		If both original args were Primitives return a Primitive result
		else it was mixed (wrapper/primitive) return the wrapper type.
		The exception is for boolean operations where we will return the 
		primitive type either way.
	*/</jtok>
<jtok eid="16" type="class_or_interface_ref" span="191:19:191:25">Object</jtok>
<jtok eid="16" type="method_name" span="191:26:191:41">binaryOperation</jtok>
<jtok eid="16" type="parameter_type" span="192:3:192:9">Object</jtok>
<jtok eid="16" type="parameter_name" span="192:10:192:14">obj1</jtok>
<jtok eid="16" type="parameter_type" span="192:16:192:22">Object</jtok>
<jtok eid="16" type="parameter_name" span="192:23:192:27">obj2</jtok>
<jtok eid="16" type="parameter_name" span="192:33:192:37">kind</jtok>
<jtok eid="16" type="throws" span="193:16:193:29">UtilEvalError</jtok>
<jtok eid="16" type="line_comment" span="195:3:195:29">// special primitive types</jtok>
<jtok eid="16" type="primary_name_ref" span="196:14:196:18">obj1</jtok>
<jtok eid="16" type="primary_name_ref" span="196:22:196:26">NULL</jtok>
<jtok eid="16" type="primary_name_ref" span="196:30:196:34">obj2</jtok>
<jtok eid="16" type="primary_name_ref" span="196:38:196:42">NULL</jtok>
<jtok eid="16" type="constructor_call" span="197:23:197:36">UtilEvalError</jtok>
<jtok eid="16" type="string_literal" span="198:5:198:55">"Null value or 'null' literal in binary operation"</jtok>
<jtok eid="16" type="primary_name_ref" span="199:14:199:18">obj1</jtok>
<jtok eid="16" type="primary_name_ref" span="199:22:199:26">VOID</jtok>
<jtok eid="16" type="primary_name_ref" span="199:30:199:34">obj2</jtok>
<jtok eid="16" type="primary_name_ref" span="199:38:199:42">VOID</jtok>
<jtok eid="16" type="constructor_call" span="200:23:200:36">UtilEvalError</jtok>
<jtok eid="16" type="string_literal" span="201:4:201:70">"Undefined variable, class, or 'void' literal in binary operation"</jtok>
<jtok eid="16" type="line_comment" span="203:3:203:38">// keep track of the original types</jtok>
<jtok eid="16" type="class_or_interface_ref" span="204:3:204:8">Class</jtok>
<jtok eid="16" type="local_variable_name" span="204:9:204:19">lhsOrgType</jtok>
<jtok eid="16" type="primary_name_ref" span="204:22:204:26">obj1</jtok>
<jtok eid="16" type="method_call" span="204:27:204:35">getClass</jtok>
<jtok eid="16" type="class_or_interface_ref" span="205:3:205:8">Class</jtok>
<jtok eid="16" type="local_variable_name" span="205:9:205:19">rhsOrgType</jtok>
<jtok eid="16" type="primary_name_ref" span="205:22:205:26">obj2</jtok>
<jtok eid="16" type="method_call" span="205:27:205:35">getClass</jtok>
<jtok eid="16" type="line_comment" span="207:3:207:23">// Unwrap primitives</jtok>
<jtok eid="16" type="primary_name_ref" span="208:14:208:18">obj1</jtok>
<jtok eid="16" type="class_or_interface_ref" span="208:30:208:39">Primitive</jtok>
<jtok eid="16" type="primary_name_ref" span="209:13:209:17">obj1</jtok>
<jtok eid="16" type="class_or_interface_ref" span="209:22:209:31">Primitive</jtok>
<jtok eid="16" type="primary_name_ref" span="209:32:209:36">obj1</jtok>
<jtok eid="16" type="method_call" span="209:38:209:46">getValue</jtok>
<jtok eid="16" type="primary_name_ref" span="210:14:210:18">obj2</jtok>
<jtok eid="16" type="class_or_interface_ref" span="210:30:210:39">Primitive</jtok>
<jtok eid="16" type="primary_name_ref" span="211:13:211:17">obj2</jtok>
<jtok eid="16" type="class_or_interface_ref" span="211:22:211:31">Primitive</jtok>
<jtok eid="16" type="primary_name_ref" span="211:32:211:36">obj2</jtok>
<jtok eid="16" type="method_call" span="211:38:211:46">getValue</jtok>
<jtok eid="16" type="class_or_interface_ref" span="213:9:213:15">Object</jtok>
<jtok eid="16" type="local_variable_name" span="213:18:213:26">operands</jtok>
<jtok eid="16" type="method_call" span="213:29:213:46">promotePrimitives</jtok>
<jtok eid="16" type="primary_name_ref" span="213:47:213:51">obj1</jtok>
<jtok eid="16" type="primary_name_ref" span="213:53:213:57">obj2</jtok>
<jtok eid="16" type="class_or_interface_ref" span="214:9:214:15">Object</jtok>
<jtok eid="16" type="local_variable_name" span="214:16:214:19">lhs</jtok>
<jtok eid="16" type="primary_name_ref" span="214:22:214:30">operands</jtok>
<jtok eid="16" type="class_or_interface_ref" span="215:9:215:15">Object</jtok>
<jtok eid="16" type="local_variable_name" span="215:16:215:19">rhs</jtok>
<jtok eid="16" type="primary_name_ref" span="215:22:215:30">operands</jtok>
<jtok eid="16" type="primary_name_ref" span="217:12:217:15">lhs</jtok>
<jtok eid="16" type="method_call" span="217:16:217:24">getClass</jtok>
<jtok eid="16" type="primary_name_ref" span="217:30:217:33">rhs</jtok>
<jtok eid="16" type="method_call" span="217:34:217:42">getClass</jtok>
<jtok eid="16" type="constructor_call" span="218:23:218:36">UtilEvalError</jtok>
<jtok eid="16" type="string_literal" span="218:37:218:67">"Type mismatch in operator.  "</jtok>
<jtok eid="16" type="primary_name_ref" span="219:6:219:9">lhs</jtok>
<jtok eid="16" type="method_call" span="219:10:219:18">getClass</jtok>
<jtok eid="16" type="string_literal" span="219:23:219:46">" cannot be used with "</jtok>
<jtok eid="16" type="primary_name_ref" span="219:49:219:52">rhs</jtok>
<jtok eid="16" type="method_call" span="219:53:219:61">getClass</jtok>
<jtok eid="16" type="class_or_interface_ref" span="221:3:221:9">Object</jtok>
<jtok eid="16" type="local_variable_name" span="221:10:221:16">result</jtok>
<jtok eid="16" type="primary_name_ref" span="223:4:223:10">result</jtok>
<jtok eid="16" type="method_call" span="223:13:223:32">binaryOperationImpl</jtok>
<jtok eid="16" type="primary_name_ref" span="223:34:223:37">lhs</jtok>
<jtok eid="16" type="primary_name_ref" span="223:39:223:42">rhs</jtok>
<jtok eid="16" type="primary_name_ref" span="223:44:223:48">kind</jtok>
<jtok eid="16" type="class_or_interface_ref" span="224:13:224:32">ArithmeticException</jtok>
<jtok eid="16" type="local_variable_name" span="224:33:224:34">e</jtok>
<jtok eid="16" type="constructor_call" span="225:14:225:29">UtilTargetError</jtok>
<jtok eid="16" type="string_literal" span="225:31:225:67">"Arithemetic Exception in binary op"</jtok>
<jtok eid="16" type="primary_name_ref" span="225:69:225:70">e</jtok>
<jtok eid="16" type="line_comment" span="228:3:228:69">// If both original args were Primitives return a Primitive result</jtok>
<jtok eid="16" type="line_comment" span="229:3:229:67">// else it was mixed (wrapper/primitive) return the wrapper type</jtok>
<jtok eid="16" type="line_comment" span="230:3:230:59">// Exception is for boolean result, return the primitive</jtok>
<jtok eid="16" type="primary_name_ref" span="231:9:231:19">lhsOrgType</jtok>
<jtok eid="16" type="primary_name_ref" span="231:23:231:32">Primitive</jtok>
<jtok eid="16" type="primary_name_ref" span="231:42:231:52">rhsOrgType</jtok>
<jtok eid="16" type="primary_name_ref" span="231:56:231:65">Primitive</jtok>
<jtok eid="16" type="primary_name_ref" span="232:7:232:13">result</jtok>
<jtok eid="16" type="class_or_interface_ref" span="232:25:232:32">Boolean</jtok>
<jtok eid="16" type="constructor_call" span="234:15:234:24">Primitive</jtok>
<jtok eid="16" type="primary_name_ref" span="234:26:234:32">result</jtok>
<jtok eid="16" type="primary_name_ref" span="236:11:236:17">result</jtok>
<jtok eid="17" type="class_or_interface_ref" span="239:12:239:18">Object</jtok>
<jtok eid="17" type="method_name" span="239:19:239:38">binaryOperationImpl</jtok>
<jtok eid="17" type="parameter_type" span="239:40:239:46">Object</jtok>
<jtok eid="17" type="parameter_name" span="239:47:239:50">lhs</jtok>
<jtok eid="17" type="parameter_type" span="239:52:239:58">Object</jtok>
<jtok eid="17" type="parameter_name" span="239:59:239:62">rhs</jtok>
<jtok eid="17" type="parameter_name" span="239:68:239:72">kind</jtok>
<jtok eid="17" type="throws" span="240:16:240:29">UtilEvalError</jtok>
<jtok eid="17" type="primary_name_ref" span="242:12:242:15">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="242:27:242:34">Boolean</jtok>
<jtok eid="17" type="method_call" span="243:20:243:42">booleanBinaryOperation</jtok>
<jtok eid="17" type="class_or_interface_ref" span="243:44:243:51">Boolean</jtok>
<jtok eid="17" type="primary_name_ref" span="243:52:243:55">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="243:58:243:65">Boolean</jtok>
<jtok eid="17" type="primary_name_ref" span="243:66:243:69">rhs</jtok>
<jtok eid="17" type="primary_name_ref" span="243:71:243:75">kind</jtok>
<jtok eid="17" type="primary_name_ref" span="244:17:244:20">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="244:32:244:39">Integer</jtok>
<jtok eid="17" type="method_call" span="245:20:245:38">intBinaryOperation</jtok>
<jtok eid="17" type="class_or_interface_ref" span="245:41:245:48">Integer</jtok>
<jtok eid="17" type="primary_name_ref" span="245:49:245:52">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="245:55:245:62">Integer</jtok>
<jtok eid="17" type="primary_name_ref" span="245:63:245:66">rhs</jtok>
<jtok eid="17" type="primary_name_ref" span="245:68:245:72">kind</jtok>
<jtok eid="17" type="primary_name_ref" span="246:17:246:20">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="246:32:246:36">Long</jtok>
<jtok eid="17" type="method_call" span="247:20:247:39">longBinaryOperation</jtok>
<jtok eid="17" type="class_or_interface_ref" span="247:41:247:45">Long</jtok>
<jtok eid="17" type="primary_name_ref" span="247:46:247:49">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="247:52:247:56">Long</jtok>
<jtok eid="17" type="primary_name_ref" span="247:57:247:60">rhs</jtok>
<jtok eid="17" type="primary_name_ref" span="247:62:247:66">kind</jtok>
<jtok eid="17" type="primary_name_ref" span="248:17:248:20">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="248:32:248:37">Float</jtok>
<jtok eid="17" type="method_call" span="249:20:249:40">floatBinaryOperation</jtok>
<jtok eid="17" type="class_or_interface_ref" span="249:42:249:47">Float</jtok>
<jtok eid="17" type="primary_name_ref" span="249:48:249:51">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="249:54:249:59">Float</jtok>
<jtok eid="17" type="primary_name_ref" span="249:60:249:63">rhs</jtok>
<jtok eid="17" type="primary_name_ref" span="249:65:249:69">kind</jtok>
<jtok eid="17" type="primary_name_ref" span="250:17:250:20">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="250:32:250:38">Double</jtok>
<jtok eid="17" type="method_call" span="251:20:251:41">doubleBinaryOperation</jtok>
<jtok eid="17" type="class_or_interface_ref" span="251:44:251:50">Double</jtok>
<jtok eid="17" type="primary_name_ref" span="251:51:251:54">lhs</jtok>
<jtok eid="17" type="class_or_interface_ref" span="251:57:251:63">Double</jtok>
<jtok eid="17" type="primary_name_ref" span="251:64:251:67">rhs</jtok>
<jtok eid="17" type="primary_name_ref" span="251:69:251:73">kind</jtok>
<jtok eid="17" type="constructor_call" span="253:23:253:36">UtilEvalError</jtok>
<jtok eid="17" type="string_literal" span="253:37:253:71">"Invalid types in binary operator"</jtok>
<jtok eid="18" type="class_or_interface_ref" span="256:12:256:19">Boolean</jtok>
<jtok eid="18" type="method_name" span="256:20:256:42">booleanBinaryOperation</jtok>
<jtok eid="18" type="parameter_type" span="256:43:256:50">Boolean</jtok>
<jtok eid="18" type="parameter_name" span="256:51:256:53">B1</jtok>
<jtok eid="18" type="parameter_type" span="256:55:256:62">Boolean</jtok>
<jtok eid="18" type="parameter_name" span="256:63:256:65">B2</jtok>
<jtok eid="18" type="parameter_name" span="256:71:256:75">kind</jtok>
<jtok eid="18" type="local_variable_name" span="258:17:258:20">lhs</jtok>
<jtok eid="18" type="primary_name_ref" span="258:23:258:25">B1</jtok>
<jtok eid="18" type="method_call" span="258:26:258:38">booleanValue</jtok>
<jtok eid="18" type="local_variable_name" span="259:17:259:20">rhs</jtok>
<jtok eid="18" type="primary_name_ref" span="259:23:259:25">B2</jtok>
<jtok eid="18" type="method_call" span="259:26:259:38">booleanValue</jtok>
<jtok eid="18" type="primary_name_ref" span="261:16:261:20">kind</jtok>
<jtok eid="18" type="primary_name_ref" span="263:18:263:20">EQ</jtok>
<jtok eid="18" type="constructor_call" span="264:28:264:35">Boolean</jtok>
<jtok eid="18" type="primary_name_ref" span="264:36:264:39">lhs</jtok>
<jtok eid="18" type="primary_name_ref" span="264:43:264:46">rhs</jtok>
<jtok eid="18" type="primary_name_ref" span="266:18:266:20">NE</jtok>
<jtok eid="18" type="constructor_call" span="267:28:267:35">Boolean</jtok>
<jtok eid="18" type="primary_name_ref" span="267:36:267:39">lhs</jtok>
<jtok eid="18" type="primary_name_ref" span="267:43:267:46">rhs</jtok>
<jtok eid="18" type="primary_name_ref" span="269:18:269:25">BOOL_OR</jtok>
<jtok eid="18" type="primary_name_ref" span="270:18:270:26">BOOL_ORX</jtok>
<jtok eid="18" type="constructor_call" span="271:28:271:35">Boolean</jtok>
<jtok eid="18" type="primary_name_ref" span="271:37:271:40">lhs</jtok>
<jtok eid="18" type="primary_name_ref" span="271:44:271:47">rhs</jtok>
<jtok eid="18" type="primary_name_ref" span="273:18:273:26">BOOL_AND</jtok>
<jtok eid="18" type="primary_name_ref" span="274:18:274:27">BOOL_ANDX</jtok>
<jtok eid="18" type="constructor_call" span="275:28:275:35">Boolean</jtok>
<jtok eid="18" type="primary_name_ref" span="275:37:275:40">lhs</jtok>
<jtok eid="18" type="primary_name_ref" span="275:44:275:47">rhs</jtok>
<jtok eid="18" type="constructor_call" span="278:27:278:43">InterpreterError</jtok>
<jtok eid="18" type="string_literal" span="278:44:278:75">"unimplemented binary operator"</jtok>
<jtok eid="1" type="line_comment" span="282:5:282:66">// returns Object covering both Long and Boolean return types</jtok>
<jtok eid="19" type="class_or_interface_ref" span="283:12:283:18">Object</jtok>
<jtok eid="19" type="method_name" span="283:19:283:38">longBinaryOperation</jtok>
<jtok eid="19" type="parameter_type" span="283:39:283:43">Long</jtok>
<jtok eid="19" type="parameter_name" span="283:44:283:46">L1</jtok>
<jtok eid="19" type="parameter_type" span="283:48:283:52">Long</jtok>
<jtok eid="19" type="parameter_name" span="283:53:283:55">L2</jtok>
<jtok eid="19" type="parameter_name" span="283:61:283:65">kind</jtok>
<jtok eid="19" type="local_variable_name" span="285:14:285:17">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="285:20:285:22">L1</jtok>
<jtok eid="19" type="method_call" span="285:23:285:32">longValue</jtok>
<jtok eid="19" type="local_variable_name" span="286:14:286:17">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="286:20:286:22">L2</jtok>
<jtok eid="19" type="method_call" span="286:23:286:32">longValue</jtok>
<jtok eid="19" type="primary_name_ref" span="288:16:288:20">kind</jtok>
<jtok eid="19" type="line_comment" span="290:13:290:23">// boolean</jtok>
<jtok eid="19" type="primary_name_ref" span="291:18:291:20">LT</jtok>
<jtok eid="19" type="primary_name_ref" span="292:18:292:21">LTX</jtok>
<jtok eid="19" type="constructor_call" span="293:28:293:35">Boolean</jtok>
<jtok eid="19" type="primary_name_ref" span="293:36:293:39">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="293:42:293:45">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="295:18:295:20">GT</jtok>
<jtok eid="19" type="primary_name_ref" span="296:18:296:21">GTX</jtok>
<jtok eid="19" type="constructor_call" span="297:28:297:35">Boolean</jtok>
<jtok eid="19" type="primary_name_ref" span="297:36:297:39">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="297:42:297:45">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="299:18:299:20">EQ</jtok>
<jtok eid="19" type="constructor_call" span="300:28:300:35">Boolean</jtok>
<jtok eid="19" type="primary_name_ref" span="300:36:300:39">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="300:43:300:46">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="302:18:302:20">LE</jtok>
<jtok eid="19" type="primary_name_ref" span="303:18:303:21">LEX</jtok>
<jtok eid="19" type="constructor_call" span="304:28:304:35">Boolean</jtok>
<jtok eid="19" type="primary_name_ref" span="304:36:304:39">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="304:43:304:46">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="306:18:306:20">GE</jtok>
<jtok eid="19" type="primary_name_ref" span="307:18:307:21">GEX</jtok>
<jtok eid="19" type="constructor_call" span="308:28:308:35">Boolean</jtok>
<jtok eid="19" type="primary_name_ref" span="308:36:308:39">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="308:43:308:46">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="310:18:310:20">NE</jtok>
<jtok eid="19" type="constructor_call" span="311:28:311:35">Boolean</jtok>
<jtok eid="19" type="primary_name_ref" span="311:36:311:39">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="311:43:311:46">rhs</jtok>
<jtok eid="19" type="line_comment" span="313:13:313:26">// arithmetic</jtok>
<jtok eid="19" type="primary_name_ref" span="314:18:314:22">PLUS</jtok>
<jtok eid="19" type="constructor_call" span="315:28:315:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="315:33:315:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="315:39:315:42">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="317:18:317:23">MINUS</jtok>
<jtok eid="19" type="constructor_call" span="318:28:318:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="318:33:318:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="318:39:318:42">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="320:18:320:22">STAR</jtok>
<jtok eid="19" type="constructor_call" span="321:28:321:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="321:33:321:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="321:39:321:42">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="323:18:323:23">SLASH</jtok>
<jtok eid="19" type="constructor_call" span="324:28:324:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="324:33:324:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="324:39:324:42">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="326:18:326:21">MOD</jtok>
<jtok eid="19" type="constructor_call" span="327:28:327:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="327:33:327:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="327:39:327:42">rhs</jtok>
<jtok eid="19" type="line_comment" span="329:13:329:23">// bitwise</jtok>
<jtok eid="19" type="primary_name_ref" span="330:18:330:24">LSHIFT</jtok>
<jtok eid="19" type="primary_name_ref" span="331:18:331:25">LSHIFTX</jtok>
<jtok eid="19" type="constructor_call" span="332:28:332:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="332:33:332:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="332:40:332:43">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="334:18:334:30">RSIGNEDSHIFT</jtok>
<jtok eid="19" type="primary_name_ref" span="335:18:335:31">RSIGNEDSHIFTX</jtok>
<jtok eid="19" type="constructor_call" span="336:28:336:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="336:33:336:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="336:40:336:43">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="338:18:338:32">RUNSIGNEDSHIFT</jtok>
<jtok eid="19" type="primary_name_ref" span="339:18:339:33">RUNSIGNEDSHIFTX</jtok>
<jtok eid="19" type="constructor_call" span="340:28:340:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="340:33:340:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="340:41:340:44">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="342:18:342:25">BIT_AND</jtok>
<jtok eid="19" type="primary_name_ref" span="343:18:343:26">BIT_ANDX</jtok>
<jtok eid="19" type="constructor_call" span="344:28:344:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="344:33:344:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="344:39:344:42">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="346:18:346:24">BIT_OR</jtok>
<jtok eid="19" type="primary_name_ref" span="347:18:347:25">BIT_ORX</jtok>
<jtok eid="19" type="constructor_call" span="348:28:348:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="348:33:348:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="348:39:348:42">rhs</jtok>
<jtok eid="19" type="primary_name_ref" span="350:18:350:21">XOR</jtok>
<jtok eid="19" type="constructor_call" span="351:28:351:32">Long</jtok>
<jtok eid="19" type="primary_name_ref" span="351:33:351:36">lhs</jtok>
<jtok eid="19" type="primary_name_ref" span="351:39:351:42">rhs</jtok>
<jtok eid="19" type="constructor_call" span="354:27:354:43">InterpreterError</jtok>
<jtok eid="19" type="string_literal" span="355:6:355:42">"Unimplemented binary long operator"</jtok>
<jtok eid="1" type="line_comment" span="359:5:359:69">// returns Object covering both Integer and Boolean return types</jtok>
<jtok eid="20" type="class_or_interface_ref" span="360:12:360:18">Object</jtok>
<jtok eid="20" type="method_name" span="360:19:360:37">intBinaryOperation</jtok>
<jtok eid="20" type="parameter_type" span="360:38:360:45">Integer</jtok>
<jtok eid="20" type="parameter_name" span="360:46:360:48">I1</jtok>
<jtok eid="20" type="parameter_type" span="360:50:360:57">Integer</jtok>
<jtok eid="20" type="parameter_name" span="360:58:360:60">I2</jtok>
<jtok eid="20" type="parameter_name" span="360:66:360:70">kind</jtok>
<jtok eid="20" type="local_variable_name" span="362:13:362:16">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="362:19:362:21">I1</jtok>
<jtok eid="20" type="method_call" span="362:22:362:30">intValue</jtok>
<jtok eid="20" type="local_variable_name" span="363:13:363:16">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="363:19:363:21">I2</jtok>
<jtok eid="20" type="method_call" span="363:22:363:30">intValue</jtok>
<jtok eid="20" type="primary_name_ref" span="365:16:365:20">kind</jtok>
<jtok eid="20" type="line_comment" span="367:13:367:23">// boolean</jtok>
<jtok eid="20" type="primary_name_ref" span="368:18:368:20">LT</jtok>
<jtok eid="20" type="primary_name_ref" span="369:18:369:21">LTX</jtok>
<jtok eid="20" type="constructor_call" span="370:28:370:35">Boolean</jtok>
<jtok eid="20" type="primary_name_ref" span="370:36:370:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="370:42:370:45">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="372:18:372:20">GT</jtok>
<jtok eid="20" type="primary_name_ref" span="373:18:373:21">GTX</jtok>
<jtok eid="20" type="constructor_call" span="374:28:374:35">Boolean</jtok>
<jtok eid="20" type="primary_name_ref" span="374:36:374:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="374:42:374:45">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="376:18:376:20">EQ</jtok>
<jtok eid="20" type="constructor_call" span="377:28:377:35">Boolean</jtok>
<jtok eid="20" type="primary_name_ref" span="377:36:377:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="377:43:377:46">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="379:18:379:20">LE</jtok>
<jtok eid="20" type="primary_name_ref" span="380:18:380:21">LEX</jtok>
<jtok eid="20" type="constructor_call" span="381:28:381:35">Boolean</jtok>
<jtok eid="20" type="primary_name_ref" span="381:36:381:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="381:43:381:46">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="383:18:383:20">GE</jtok>
<jtok eid="20" type="primary_name_ref" span="384:18:384:21">GEX</jtok>
<jtok eid="20" type="constructor_call" span="385:28:385:35">Boolean</jtok>
<jtok eid="20" type="primary_name_ref" span="385:36:385:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="385:43:385:46">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="387:18:387:20">NE</jtok>
<jtok eid="20" type="constructor_call" span="388:28:388:35">Boolean</jtok>
<jtok eid="20" type="primary_name_ref" span="388:36:388:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="388:43:388:46">rhs</jtok>
<jtok eid="20" type="line_comment" span="390:13:390:26">// arithmetic</jtok>
<jtok eid="20" type="primary_name_ref" span="391:18:391:22">PLUS</jtok>
<jtok eid="20" type="constructor_call" span="392:28:392:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="392:36:392:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="392:42:392:45">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="394:18:394:23">MINUS</jtok>
<jtok eid="20" type="constructor_call" span="395:28:395:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="395:36:395:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="395:42:395:45">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="397:18:397:22">STAR</jtok>
<jtok eid="20" type="constructor_call" span="398:28:398:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="398:36:398:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="398:42:398:45">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="400:18:400:23">SLASH</jtok>
<jtok eid="20" type="constructor_call" span="401:28:401:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="401:36:401:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="401:42:401:45">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="403:18:403:21">MOD</jtok>
<jtok eid="20" type="constructor_call" span="404:28:404:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="404:36:404:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="404:42:404:45">rhs</jtok>
<jtok eid="20" type="line_comment" span="406:13:406:23">// bitwise</jtok>
<jtok eid="20" type="primary_name_ref" span="407:18:407:24">LSHIFT</jtok>
<jtok eid="20" type="primary_name_ref" span="408:18:408:25">LSHIFTX</jtok>
<jtok eid="20" type="constructor_call" span="409:28:409:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="409:36:409:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="409:43:409:46">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="411:18:411:30">RSIGNEDSHIFT</jtok>
<jtok eid="20" type="primary_name_ref" span="412:18:412:31">RSIGNEDSHIFTX</jtok>
<jtok eid="20" type="constructor_call" span="413:28:413:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="413:36:413:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="413:43:413:46">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="415:18:415:32">RUNSIGNEDSHIFT</jtok>
<jtok eid="20" type="primary_name_ref" span="416:18:416:33">RUNSIGNEDSHIFTX</jtok>
<jtok eid="20" type="constructor_call" span="417:28:417:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="417:36:417:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="417:44:417:47">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="419:18:419:25">BIT_AND</jtok>
<jtok eid="20" type="primary_name_ref" span="420:18:420:26">BIT_ANDX</jtok>
<jtok eid="20" type="constructor_call" span="421:28:421:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="421:36:421:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="421:42:421:45">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="423:18:423:24">BIT_OR</jtok>
<jtok eid="20" type="primary_name_ref" span="424:18:424:25">BIT_ORX</jtok>
<jtok eid="20" type="constructor_call" span="425:28:425:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="425:36:425:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="425:42:425:45">rhs</jtok>
<jtok eid="20" type="primary_name_ref" span="427:18:427:21">XOR</jtok>
<jtok eid="20" type="constructor_call" span="428:28:428:35">Integer</jtok>
<jtok eid="20" type="primary_name_ref" span="428:36:428:39">lhs</jtok>
<jtok eid="20" type="primary_name_ref" span="428:42:428:45">rhs</jtok>
<jtok eid="20" type="constructor_call" span="431:27:431:43">InterpreterError</jtok>
<jtok eid="20" type="string_literal" span="432:6:432:45">"Unimplemented binary integer operator"</jtok>
<jtok eid="1" type="line_comment" span="436:5:436:68">// returns Object covering both Double and Boolean return types</jtok>
<jtok eid="21" type="class_or_interface_ref" span="437:12:437:18">Object</jtok>
<jtok eid="21" type="method_name" span="437:19:437:40">doubleBinaryOperation</jtok>
<jtok eid="21" type="parameter_type" span="437:41:437:47">Double</jtok>
<jtok eid="21" type="parameter_name" span="437:48:437:50">D1</jtok>
<jtok eid="21" type="parameter_type" span="437:52:437:58">Double</jtok>
<jtok eid="21" type="parameter_name" span="437:59:437:61">D2</jtok>
<jtok eid="21" type="parameter_name" span="437:67:437:71">kind</jtok>
<jtok eid="21" type="throws" span="438:16:438:29">UtilEvalError</jtok>
<jtok eid="21" type="local_variable_name" span="440:16:440:19">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="440:22:440:24">D1</jtok>
<jtok eid="21" type="method_call" span="440:25:440:36">doubleValue</jtok>
<jtok eid="21" type="local_variable_name" span="441:16:441:19">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="441:22:441:24">D2</jtok>
<jtok eid="21" type="method_call" span="441:25:441:36">doubleValue</jtok>
<jtok eid="21" type="primary_name_ref" span="443:16:443:20">kind</jtok>
<jtok eid="21" type="line_comment" span="445:13:445:23">// boolean</jtok>
<jtok eid="21" type="primary_name_ref" span="446:18:446:20">LT</jtok>
<jtok eid="21" type="primary_name_ref" span="447:18:447:21">LTX</jtok>
<jtok eid="21" type="constructor_call" span="448:28:448:35">Boolean</jtok>
<jtok eid="21" type="primary_name_ref" span="448:36:448:39">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="448:42:448:45">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="450:18:450:20">GT</jtok>
<jtok eid="21" type="primary_name_ref" span="451:18:451:21">GTX</jtok>
<jtok eid="21" type="constructor_call" span="452:28:452:35">Boolean</jtok>
<jtok eid="21" type="primary_name_ref" span="452:36:452:39">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="452:42:452:45">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="454:18:454:20">EQ</jtok>
<jtok eid="21" type="constructor_call" span="455:28:455:35">Boolean</jtok>
<jtok eid="21" type="primary_name_ref" span="455:36:455:39">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="455:43:455:46">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="457:18:457:20">LE</jtok>
<jtok eid="21" type="primary_name_ref" span="458:18:458:21">LEX</jtok>
<jtok eid="21" type="constructor_call" span="459:28:459:35">Boolean</jtok>
<jtok eid="21" type="primary_name_ref" span="459:36:459:39">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="459:43:459:46">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="461:18:461:20">GE</jtok>
<jtok eid="21" type="primary_name_ref" span="462:18:462:21">GEX</jtok>
<jtok eid="21" type="constructor_call" span="463:28:463:35">Boolean</jtok>
<jtok eid="21" type="primary_name_ref" span="463:36:463:39">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="463:43:463:46">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="465:18:465:20">NE</jtok>
<jtok eid="21" type="constructor_call" span="466:28:466:35">Boolean</jtok>
<jtok eid="21" type="primary_name_ref" span="466:36:466:39">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="466:43:466:46">rhs</jtok>
<jtok eid="21" type="line_comment" span="468:13:468:26">// arithmetic</jtok>
<jtok eid="21" type="primary_name_ref" span="469:18:469:22">PLUS</jtok>
<jtok eid="21" type="constructor_call" span="470:28:470:34">Double</jtok>
<jtok eid="21" type="primary_name_ref" span="470:35:470:38">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="470:41:470:44">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="472:18:472:23">MINUS</jtok>
<jtok eid="21" type="constructor_call" span="473:28:473:34">Double</jtok>
<jtok eid="21" type="primary_name_ref" span="473:35:473:38">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="473:41:473:44">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="475:18:475:22">STAR</jtok>
<jtok eid="21" type="constructor_call" span="476:28:476:34">Double</jtok>
<jtok eid="21" type="primary_name_ref" span="476:35:476:38">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="476:41:476:44">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="478:18:478:23">SLASH</jtok>
<jtok eid="21" type="constructor_call" span="479:28:479:34">Double</jtok>
<jtok eid="21" type="primary_name_ref" span="479:35:479:38">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="479:41:479:44">rhs</jtok>
<jtok eid="21" type="primary_name_ref" span="481:18:481:21">MOD</jtok>
<jtok eid="21" type="constructor_call" span="482:28:482:34">Double</jtok>
<jtok eid="21" type="primary_name_ref" span="482:35:482:38">lhs</jtok>
<jtok eid="21" type="primary_name_ref" span="482:41:482:44">rhs</jtok>
<jtok eid="21" type="line_comment" span="484:13:484:49">// can't shift floating-point values</jtok>
<jtok eid="21" type="primary_name_ref" span="485:18:485:24">LSHIFT</jtok>
<jtok eid="21" type="primary_name_ref" span="486:18:486:25">LSHIFTX</jtok>
<jtok eid="21" type="primary_name_ref" span="487:18:487:30">RSIGNEDSHIFT</jtok>
<jtok eid="21" type="primary_name_ref" span="488:18:488:31">RSIGNEDSHIFTX</jtok>
<jtok eid="21" type="primary_name_ref" span="489:18:489:32">RUNSIGNEDSHIFT</jtok>
<jtok eid="21" type="primary_name_ref" span="490:18:490:33">RUNSIGNEDSHIFTX</jtok>
<jtok eid="21" type="constructor_call" span="491:27:491:40">UtilEvalError</jtok>
<jtok eid="21" type="string_literal" span="491:41:491:62">"Can't shift doubles"</jtok>
<jtok eid="21" type="constructor_call" span="494:27:494:43">InterpreterError</jtok>
<jtok eid="21" type="string_literal" span="495:6:495:44">"Unimplemented binary double operator"</jtok>
<jtok eid="1" type="line_comment" span="498:5:498:66">// returns Object covering both Long and Boolean return types</jtok>
<jtok eid="22" type="class_or_interface_ref" span="499:12:499:18">Object</jtok>
<jtok eid="22" type="method_name" span="499:19:499:39">floatBinaryOperation</jtok>
<jtok eid="22" type="parameter_type" span="499:40:499:45">Float</jtok>
<jtok eid="22" type="parameter_name" span="499:46:499:48">F1</jtok>
<jtok eid="22" type="parameter_type" span="499:50:499:55">Float</jtok>
<jtok eid="22" type="parameter_name" span="499:56:499:58">F2</jtok>
<jtok eid="22" type="parameter_name" span="499:64:499:68">kind</jtok>
<jtok eid="22" type="throws" span="500:16:500:29">UtilEvalError</jtok>
<jtok eid="22" type="local_variable_name" span="502:15:502:18">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="502:21:502:23">F1</jtok>
<jtok eid="22" type="method_call" span="502:24:502:34">floatValue</jtok>
<jtok eid="22" type="local_variable_name" span="503:15:503:18">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="503:21:503:23">F2</jtok>
<jtok eid="22" type="method_call" span="503:24:503:34">floatValue</jtok>
<jtok eid="22" type="primary_name_ref" span="505:16:505:20">kind</jtok>
<jtok eid="22" type="line_comment" span="507:13:507:23">// boolean</jtok>
<jtok eid="22" type="primary_name_ref" span="508:18:508:20">LT</jtok>
<jtok eid="22" type="primary_name_ref" span="509:18:509:21">LTX</jtok>
<jtok eid="22" type="constructor_call" span="510:28:510:35">Boolean</jtok>
<jtok eid="22" type="primary_name_ref" span="510:36:510:39">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="510:42:510:45">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="512:18:512:20">GT</jtok>
<jtok eid="22" type="primary_name_ref" span="513:18:513:21">GTX</jtok>
<jtok eid="22" type="constructor_call" span="514:28:514:35">Boolean</jtok>
<jtok eid="22" type="primary_name_ref" span="514:36:514:39">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="514:42:514:45">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="516:18:516:20">EQ</jtok>
<jtok eid="22" type="constructor_call" span="517:28:517:35">Boolean</jtok>
<jtok eid="22" type="primary_name_ref" span="517:36:517:39">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="517:43:517:46">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="519:18:519:20">LE</jtok>
<jtok eid="22" type="primary_name_ref" span="520:18:520:21">LEX</jtok>
<jtok eid="22" type="constructor_call" span="521:28:521:35">Boolean</jtok>
<jtok eid="22" type="primary_name_ref" span="521:36:521:39">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="521:43:521:46">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="523:18:523:20">GE</jtok>
<jtok eid="22" type="primary_name_ref" span="524:18:524:21">GEX</jtok>
<jtok eid="22" type="constructor_call" span="525:28:525:35">Boolean</jtok>
<jtok eid="22" type="primary_name_ref" span="525:36:525:39">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="525:43:525:46">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="527:18:527:20">NE</jtok>
<jtok eid="22" type="constructor_call" span="528:28:528:35">Boolean</jtok>
<jtok eid="22" type="primary_name_ref" span="528:36:528:39">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="528:43:528:46">rhs</jtok>
<jtok eid="22" type="line_comment" span="530:13:530:26">// arithmetic</jtok>
<jtok eid="22" type="primary_name_ref" span="531:18:531:22">PLUS</jtok>
<jtok eid="22" type="constructor_call" span="532:28:532:33">Float</jtok>
<jtok eid="22" type="primary_name_ref" span="532:34:532:37">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="532:40:532:43">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="534:18:534:23">MINUS</jtok>
<jtok eid="22" type="constructor_call" span="535:28:535:33">Float</jtok>
<jtok eid="22" type="primary_name_ref" span="535:34:535:37">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="535:40:535:43">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="537:18:537:22">STAR</jtok>
<jtok eid="22" type="constructor_call" span="538:28:538:33">Float</jtok>
<jtok eid="22" type="primary_name_ref" span="538:34:538:37">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="538:40:538:43">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="540:18:540:23">SLASH</jtok>
<jtok eid="22" type="constructor_call" span="541:28:541:33">Float</jtok>
<jtok eid="22" type="primary_name_ref" span="541:34:541:37">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="541:40:541:43">rhs</jtok>
<jtok eid="22" type="primary_name_ref" span="543:18:543:21">MOD</jtok>
<jtok eid="22" type="constructor_call" span="544:28:544:33">Float</jtok>
<jtok eid="22" type="primary_name_ref" span="544:34:544:37">lhs</jtok>
<jtok eid="22" type="primary_name_ref" span="544:40:544:43">rhs</jtok>
<jtok eid="22" type="line_comment" span="546:13:546:34">// can't shift floats</jtok>
<jtok eid="22" type="primary_name_ref" span="547:18:547:24">LSHIFT</jtok>
<jtok eid="22" type="primary_name_ref" span="548:18:548:25">LSHIFTX</jtok>
<jtok eid="22" type="primary_name_ref" span="549:18:549:30">RSIGNEDSHIFT</jtok>
<jtok eid="22" type="primary_name_ref" span="550:18:550:31">RSIGNEDSHIFTX</jtok>
<jtok eid="22" type="primary_name_ref" span="551:18:551:32">RUNSIGNEDSHIFT</jtok>
<jtok eid="22" type="primary_name_ref" span="552:18:552:33">RUNSIGNEDSHIFTX</jtok>
<jtok eid="22" type="constructor_call" span="553:27:553:40">UtilEvalError</jtok>
<jtok eid="22" type="string_literal" span="553:41:553:62">"Can't shift floats "</jtok>
<jtok eid="22" type="constructor_call" span="556:27:556:43">InterpreterError</jtok>
<jtok eid="22" type="string_literal" span="557:6:557:43">"Unimplemented binary float operator"</jtok>
<jtok eid="1" type="block_comment" span="561:2:563:4">/**
		Promote primitive wrapper type to to Integer wrapper type
	*/</jtok>
<jtok eid="23" type="class_or_interface_ref" span="564:12:564:18">Object</jtok>
<jtok eid="23" type="method_name" span="564:19:564:35">promoteToInteger</jtok>
<jtok eid="23" type="parameter_type" span="564:36:564:42">Object</jtok>
<jtok eid="23" type="parameter_name" span="564:43:564:50">wrapper</jtok>
<jtok eid="23" type="primary_name_ref" span="566:12:566:19">wrapper</jtok>
<jtok eid="23" type="class_or_interface_ref" span="566:31:566:40">Character</jtok>
<jtok eid="23" type="constructor_call" span="567:24:567:31">Integer</jtok>
<jtok eid="23" type="class_or_interface_ref" span="567:34:567:43">Character</jtok>
<jtok eid="23" type="primary_name_ref" span="567:44:567:51">wrapper</jtok>
<jtok eid="23" type="method_call" span="567:53:567:62">charValue</jtok>
<jtok eid="23" type="primary_name_ref" span="568:18:568:25">wrapper</jtok>
<jtok eid="23" type="class_or_interface_ref" span="568:37:568:41">Byte</jtok>
<jtok eid="23" type="primary_name_ref" span="568:47:568:54">wrapper</jtok>
<jtok eid="23" type="class_or_interface_ref" span="568:66:568:71">Short</jtok>
<jtok eid="23" type="constructor_call" span="569:24:569:31">Integer</jtok>
<jtok eid="23" type="class_or_interface_ref" span="569:34:569:40">Number</jtok>
<jtok eid="23" type="primary_name_ref" span="569:41:569:48">wrapper</jtok>
<jtok eid="23" type="method_call" span="569:50:569:58">intValue</jtok>
<jtok eid="23" type="primary_name_ref" span="571:16:571:23">wrapper</jtok>
<jtok eid="1" type="block_comment" span="574:2:577:4">/**
		Promote the pair of primitives to the maximum type of the two.
		e.g. [int,long]-&gt;[long,long]
	*/</jtok>
<jtok eid="24" type="class_or_interface_ref" span="578:12:578:18">Object</jtok>
<jtok eid="24" type="method_name" span="578:21:578:38">promotePrimitives</jtok>
<jtok eid="24" type="parameter_type" span="578:39:578:45">Object</jtok>
<jtok eid="24" type="parameter_name" span="578:46:578:49">lhs</jtok>
<jtok eid="24" type="parameter_type" span="578:51:578:57">Object</jtok>
<jtok eid="24" type="parameter_name" span="578:58:578:61">rhs</jtok>
<jtok eid="24" type="primary_name_ref" span="580:9:580:12">lhs</jtok>
<jtok eid="24" type="method_call" span="580:15:580:31">promoteToInteger</jtok>
<jtok eid="24" type="primary_name_ref" span="580:32:580:35">lhs</jtok>
<jtok eid="24" type="primary_name_ref" span="581:9:581:12">rhs</jtok>
<jtok eid="24" type="method_call" span="581:15:581:31">promoteToInteger</jtok>
<jtok eid="24" type="primary_name_ref" span="581:32:581:35">rhs</jtok>
<jtok eid="24" type="primary_name_ref" span="583:13:583:16">lhs</jtok>
<jtok eid="24" type="class_or_interface_ref" span="583:28:583:34">Number</jtok>
<jtok eid="24" type="primary_name_ref" span="583:40:583:43">rhs</jtok>
<jtok eid="24" type="class_or_interface_ref" span="583:55:583:61">Number</jtok>
<jtok eid="24" type="class_or_interface_ref" span="585:13:585:19">Number</jtok>
<jtok eid="24" type="local_variable_name" span="585:20:585:24">lnum</jtok>
<jtok eid="24" type="class_or_interface_ref" span="585:28:585:34">Number</jtok>
<jtok eid="24" type="primary_name_ref" span="585:35:585:38">lhs</jtok>
<jtok eid="24" type="class_or_interface_ref" span="586:13:586:19">Number</jtok>
<jtok eid="24" type="local_variable_name" span="586:20:586:24">rnum</jtok>
<jtok eid="24" type="class_or_interface_ref" span="586:28:586:34">Number</jtok>
<jtok eid="24" type="primary_name_ref" span="586:35:586:38">rhs</jtok>
<jtok eid="24" type="local_variable_name" span="588:21:588:22">b</jtok>
<jtok eid="24" type="primary_name_ref" span="590:17:590:18">b</jtok>
<jtok eid="24" type="primary_name_ref" span="590:22:590:26">lnum</jtok>
<jtok eid="24" type="class_or_interface_ref" span="590:38:590:44">Double</jtok>
<jtok eid="24" type="primary_name_ref" span="590:51:590:55">rnum</jtok>
<jtok eid="24" type="class_or_interface_ref" span="590:67:590:73">Double</jtok>
<jtok eid="24" type="primary_name_ref" span="592:20:592:21">b</jtok>
<jtok eid="24" type="primary_name_ref" span="593:21:593:24">rhs</jtok>
<jtok eid="24" type="constructor_call" span="593:31:593:37">Double</jtok>
<jtok eid="24" type="primary_name_ref" span="593:38:593:42">rnum</jtok>
<jtok eid="24" type="method_call" span="593:43:593:54">doubleValue</jtok>
<jtok eid="24" type="primary_name_ref" span="595:21:595:24">lhs</jtok>
<jtok eid="24" type="constructor_call" span="595:31:595:37">Double</jtok>
<jtok eid="24" type="primary_name_ref" span="595:38:595:42">lnum</jtok>
<jtok eid="24" type="method_call" span="595:43:595:54">doubleValue</jtok>
<jtok eid="24" type="primary_name_ref" span="597:22:597:23">b</jtok>
<jtok eid="24" type="primary_name_ref" span="597:27:597:31">lnum</jtok>
<jtok eid="24" type="class_or_interface_ref" span="597:43:597:48">Float</jtok>
<jtok eid="24" type="primary_name_ref" span="597:55:597:59">rnum</jtok>
<jtok eid="24" type="class_or_interface_ref" span="597:71:597:76">Float</jtok>
<jtok eid="24" type="primary_name_ref" span="599:20:599:21">b</jtok>
<jtok eid="24" type="primary_name_ref" span="600:21:600:24">rhs</jtok>
<jtok eid="24" type="constructor_call" span="600:31:600:36">Float</jtok>
<jtok eid="24" type="primary_name_ref" span="600:37:600:41">rnum</jtok>
<jtok eid="24" type="method_call" span="600:42:600:52">floatValue</jtok>
<jtok eid="24" type="primary_name_ref" span="602:21:602:24">lhs</jtok>
<jtok eid="24" type="constructor_call" span="602:31:602:36">Float</jtok>
<jtok eid="24" type="primary_name_ref" span="602:37:602:41">lnum</jtok>
<jtok eid="24" type="method_call" span="602:42:602:52">floatValue</jtok>
<jtok eid="24" type="primary_name_ref" span="604:22:604:23">b</jtok>
<jtok eid="24" type="primary_name_ref" span="604:27:604:31">lnum</jtok>
<jtok eid="24" type="class_or_interface_ref" span="604:43:604:47">Long</jtok>
<jtok eid="24" type="primary_name_ref" span="604:54:604:58">rnum</jtok>
<jtok eid="24" type="class_or_interface_ref" span="604:70:604:74">Long</jtok>
<jtok eid="24" type="primary_name_ref" span="606:20:606:21">b</jtok>
<jtok eid="24" type="primary_name_ref" span="607:21:607:24">rhs</jtok>
<jtok eid="24" type="constructor_call" span="607:31:607:35">Long</jtok>
<jtok eid="24" type="primary_name_ref" span="607:36:607:40">rnum</jtok>
<jtok eid="24" type="method_call" span="607:41:607:50">longValue</jtok>
<jtok eid="24" type="primary_name_ref" span="609:21:609:24">lhs</jtok>
<jtok eid="24" type="constructor_call" span="609:31:609:35">Long</jtok>
<jtok eid="24" type="primary_name_ref" span="609:36:609:40">lnum</jtok>
<jtok eid="24" type="method_call" span="609:41:609:50">longValue</jtok>
<jtok eid="24" type="constructor_call" span="613:20:613:26">Object</jtok>
<jtok eid="24" type="primary_name_ref" span="613:31:613:34">lhs</jtok>
<jtok eid="24" type="primary_name_ref" span="613:36:613:39">rhs</jtok>
<jtok eid="25" type="class_or_interface_ref" span="616:19:616:28">Primitive</jtok>
<jtok eid="25" type="method_name" span="616:29:616:43">unaryOperation</jtok>
<jtok eid="25" type="parameter_type" span="616:44:616:53">Primitive</jtok>
<jtok eid="25" type="parameter_name" span="616:54:616:57">val</jtok>
<jtok eid="25" type="parameter_name" span="616:63:616:67">kind</jtok>
<jtok eid="25" type="throws" span="617:16:617:29">UtilEvalError</jtok>
<jtok eid="25" type="primary_name_ref" span="619:13:619:16">val</jtok>
<jtok eid="25" type="primary_name_ref" span="619:20:619:24">NULL</jtok>
<jtok eid="25" type="constructor_call" span="620:23:620:36">UtilEvalError</jtok>
<jtok eid="25" type="string_literal" span="621:5:621:51">"illegal use of null object or 'null' literal"</jtok>
<jtok eid="25" type="primary_name_ref" span="622:13:622:16">val</jtok>
<jtok eid="25" type="primary_name_ref" span="622:20:622:24">VOID</jtok>
<jtok eid="25" type="constructor_call" span="623:23:623:36">UtilEvalError</jtok>
<jtok eid="25" type="string_literal" span="624:5:624:56">"illegal use of undefined object or 'void' literal"</jtok>
<jtok eid="25" type="class_or_interface_ref" span="626:9:626:14">Class</jtok>
<jtok eid="25" type="local_variable_name" span="626:15:626:26">operandType</jtok>
<jtok eid="25" type="primary_name_ref" span="626:29:626:32">val</jtok>
<jtok eid="25" type="method_call" span="626:33:626:40">getType</jtok>
<jtok eid="25" type="class_or_interface_ref" span="627:9:627:15">Object</jtok>
<jtok eid="25" type="local_variable_name" span="627:16:627:23">operand</jtok>
<jtok eid="25" type="method_call" span="627:26:627:42">promoteToInteger</jtok>
<jtok eid="25" type="primary_name_ref" span="627:43:627:46">val</jtok>
<jtok eid="25" type="method_call" span="627:47:627:55">getValue</jtok>
<jtok eid="25" type="primary_name_ref" span="629:14:629:21">operand</jtok>
<jtok eid="25" type="class_or_interface_ref" span="629:33:629:40">Boolean</jtok>
<jtok eid="25" type="constructor_call" span="630:24:630:33">Primitive</jtok>
<jtok eid="25" type="method_call" span="630:34:630:55">booleanUnaryOperation</jtok>
<jtok eid="25" type="class_or_interface_ref" span="630:57:630:64">Boolean</jtok>
<jtok eid="25" type="primary_name_ref" span="630:65:630:72">operand</jtok>
<jtok eid="25" type="primary_name_ref" span="630:74:630:78">kind</jtok>
<jtok eid="25" type="primary_name_ref" span="631:17:631:24">operand</jtok>
<jtok eid="25" type="class_or_interface_ref" span="631:36:631:43">Integer</jtok>
<jtok eid="25" type="local_variable_name" span="633:17:633:23">result</jtok>
<jtok eid="25" type="method_call" span="633:26:633:43">intUnaryOperation</jtok>
<jtok eid="25" type="class_or_interface_ref" span="633:45:633:52">Integer</jtok>
<jtok eid="25" type="primary_name_ref" span="633:53:633:60">operand</jtok>
<jtok eid="25" type="primary_name_ref" span="633:62:633:66">kind</jtok>
<jtok eid="25" type="line_comment" span="635:13:635:61">// ++ and -- must be cast back the original type</jtok>
<jtok eid="25" type="primary_name_ref" span="636:16:636:20">kind</jtok>
<jtok eid="25" type="primary_name_ref" span="636:24:636:28">INCR</jtok>
<jtok eid="25" type="primary_name_ref" span="636:32:636:36">kind</jtok>
<jtok eid="25" type="primary_name_ref" span="636:40:636:44">DECR</jtok>
<jtok eid="25" type="primary_name_ref" span="638:20:638:31">operandType</jtok>
<jtok eid="25" type="primary_name_ref" span="638:35:638:39">Byte</jtok>
<jtok eid="25" type="qualified_name_ref" span="638:40:638:44">TYPE</jtok>
<jtok eid="25" type="constructor_call" span="639:32:639:41">Primitive</jtok>
<jtok eid="25" type="primary_name_ref" span="639:48:639:54">result</jtok>
<jtok eid="25" type="primary_name_ref" span="640:20:640:31">operandType</jtok>
<jtok eid="25" type="primary_name_ref" span="640:35:640:40">Short</jtok>
<jtok eid="25" type="qualified_name_ref" span="640:41:640:45">TYPE</jtok>
<jtok eid="25" type="constructor_call" span="641:32:641:41">Primitive</jtok>
<jtok eid="25" type="primary_name_ref" span="641:49:641:55">result</jtok>
<jtok eid="25" type="primary_name_ref" span="642:20:642:31">operandType</jtok>
<jtok eid="25" type="primary_name_ref" span="642:35:642:44">Character</jtok>
<jtok eid="25" type="qualified_name_ref" span="642:45:642:49">TYPE</jtok>
<jtok eid="25" type="constructor_call" span="643:32:643:41">Primitive</jtok>
<jtok eid="25" type="primary_name_ref" span="643:48:643:54">result</jtok>
<jtok eid="25" type="constructor_call" span="646:24:646:33">Primitive</jtok>
<jtok eid="25" type="primary_name_ref" span="646:34:646:40">result</jtok>
<jtok eid="25" type="primary_name_ref" span="648:17:648:24">operand</jtok>
<jtok eid="25" type="class_or_interface_ref" span="648:36:648:40">Long</jtok>
<jtok eid="25" type="constructor_call" span="649:24:649:33">Primitive</jtok>
<jtok eid="25" type="method_call" span="649:34:649:52">longUnaryOperation</jtok>
<jtok eid="25" type="class_or_interface_ref" span="649:54:649:58">Long</jtok>
<jtok eid="25" type="primary_name_ref" span="649:59:649:66">operand</jtok>
<jtok eid="25" type="primary_name_ref" span="649:68:649:72">kind</jtok>
<jtok eid="25" type="primary_name_ref" span="650:17:650:24">operand</jtok>
<jtok eid="25" type="class_or_interface_ref" span="650:36:650:41">Float</jtok>
<jtok eid="25" type="constructor_call" span="651:24:651:33">Primitive</jtok>
<jtok eid="25" type="method_call" span="651:34:651:53">floatUnaryOperation</jtok>
<jtok eid="25" type="class_or_interface_ref" span="651:55:651:60">Float</jtok>
<jtok eid="25" type="primary_name_ref" span="651:61:651:68">operand</jtok>
<jtok eid="25" type="primary_name_ref" span="651:70:651:74">kind</jtok>
<jtok eid="25" type="primary_name_ref" span="652:17:652:24">operand</jtok>
<jtok eid="25" type="class_or_interface_ref" span="652:36:652:42">Double</jtok>
<jtok eid="25" type="constructor_call" span="653:24:653:33">Primitive</jtok>
<jtok eid="25" type="method_call" span="653:34:653:54">doubleUnaryOperation</jtok>
<jtok eid="25" type="class_or_interface_ref" span="653:56:653:62">Double</jtok>
<jtok eid="25" type="primary_name_ref" span="653:63:653:70">operand</jtok>
<jtok eid="25" type="primary_name_ref" span="653:72:653:76">kind</jtok>
<jtok eid="25" type="constructor_call" span="655:23:655:39">InterpreterError</jtok>
<jtok eid="25" type="string_literal" span="656:5:656:57">"An error occurred.  Please call technical support."</jtok>
<jtok eid="26" type="method_name" span="659:20:659:41">booleanUnaryOperation</jtok>
<jtok eid="26" type="parameter_type" span="659:42:659:49">Boolean</jtok>
<jtok eid="26" type="parameter_name" span="659:50:659:51">B</jtok>
<jtok eid="26" type="parameter_name" span="659:57:659:61">kind</jtok>
<jtok eid="26" type="throws" span="660:10:660:23">UtilEvalError</jtok>
<jtok eid="26" type="local_variable_name" span="662:17:662:24">operand</jtok>
<jtok eid="26" type="primary_name_ref" span="662:27:662:28">B</jtok>
<jtok eid="26" type="method_call" span="662:29:662:41">booleanValue</jtok>
<jtok eid="26" type="primary_name_ref" span="663:16:663:20">kind</jtok>
<jtok eid="26" type="primary_name_ref" span="665:18:665:22">BANG</jtok>
<jtok eid="26" type="primary_name_ref" span="666:25:666:32">operand</jtok>
<jtok eid="26" type="constructor_call" span="668:27:668:40">UtilEvalError</jtok>
<jtok eid="26" type="string_literal" span="668:41:668:77">"Operator inappropriate for boolean"</jtok>
<jtok eid="27" type="method_name" span="672:16:672:33">intUnaryOperation</jtok>
<jtok eid="27" type="parameter_type" span="672:34:672:41">Integer</jtok>
<jtok eid="27" type="parameter_name" span="672:42:672:43">I</jtok>
<jtok eid="27" type="parameter_name" span="672:49:672:53">kind</jtok>
<jtok eid="27" type="local_variable_name" span="674:13:674:20">operand</jtok>
<jtok eid="27" type="primary_name_ref" span="674:23:674:24">I</jtok>
<jtok eid="27" type="method_call" span="674:25:674:33">intValue</jtok>
<jtok eid="27" type="primary_name_ref" span="676:16:676:20">kind</jtok>
<jtok eid="27" type="primary_name_ref" span="678:18:678:22">PLUS</jtok>
<jtok eid="27" type="primary_name_ref" span="679:24:679:31">operand</jtok>
<jtok eid="27" type="primary_name_ref" span="680:18:680:23">MINUS</jtok>
<jtok eid="27" type="primary_name_ref" span="681:25:681:32">operand</jtok>
<jtok eid="27" type="primary_name_ref" span="682:18:682:23">TILDE</jtok>
<jtok eid="27" type="primary_name_ref" span="683:25:683:32">operand</jtok>
<jtok eid="27" type="primary_name_ref" span="684:18:684:22">INCR</jtok>
<jtok eid="27" type="primary_name_ref" span="685:24:685:31">operand</jtok>
<jtok eid="27" type="primary_name_ref" span="686:18:686:22">DECR</jtok>
<jtok eid="27" type="primary_name_ref" span="687:24:687:31">operand</jtok>
<jtok eid="27" type="constructor_call" span="689:27:689:43">InterpreterError</jtok>
<jtok eid="27" type="string_literal" span="689:44:689:72">"bad integer unaryOperation"</jtok>
<jtok eid="28" type="method_name" span="693:17:693:35">longUnaryOperation</jtok>
<jtok eid="28" type="parameter_type" span="693:36:693:40">Long</jtok>
<jtok eid="28" type="parameter_name" span="693:41:693:42">L</jtok>
<jtok eid="28" type="parameter_name" span="693:48:693:52">kind</jtok>
<jtok eid="28" type="local_variable_name" span="695:14:695:21">operand</jtok>
<jtok eid="28" type="primary_name_ref" span="695:24:695:25">L</jtok>
<jtok eid="28" type="method_call" span="695:26:695:35">longValue</jtok>
<jtok eid="28" type="primary_name_ref" span="697:16:697:20">kind</jtok>
<jtok eid="28" type="primary_name_ref" span="699:18:699:22">PLUS</jtok>
<jtok eid="28" type="primary_name_ref" span="700:24:700:31">operand</jtok>
<jtok eid="28" type="primary_name_ref" span="701:18:701:23">MINUS</jtok>
<jtok eid="28" type="primary_name_ref" span="702:25:702:32">operand</jtok>
<jtok eid="28" type="primary_name_ref" span="703:18:703:23">TILDE</jtok>
<jtok eid="28" type="primary_name_ref" span="704:25:704:32">operand</jtok>
<jtok eid="28" type="primary_name_ref" span="705:18:705:22">INCR</jtok>
<jtok eid="28" type="primary_name_ref" span="706:24:706:31">operand</jtok>
<jtok eid="28" type="primary_name_ref" span="707:18:707:22">DECR</jtok>
<jtok eid="28" type="primary_name_ref" span="708:24:708:31">operand</jtok>
<jtok eid="28" type="constructor_call" span="710:27:710:43">InterpreterError</jtok>
<jtok eid="28" type="string_literal" span="710:44:710:69">"bad long unaryOperation"</jtok>
<jtok eid="29" type="method_name" span="714:18:714:37">floatUnaryOperation</jtok>
<jtok eid="29" type="parameter_type" span="714:38:714:43">Float</jtok>
<jtok eid="29" type="parameter_name" span="714:44:714:45">F</jtok>
<jtok eid="29" type="parameter_name" span="714:51:714:55">kind</jtok>
<jtok eid="29" type="local_variable_name" span="716:15:716:22">operand</jtok>
<jtok eid="29" type="primary_name_ref" span="716:25:716:26">F</jtok>
<jtok eid="29" type="method_call" span="716:27:716:37">floatValue</jtok>
<jtok eid="29" type="primary_name_ref" span="718:16:718:20">kind</jtok>
<jtok eid="29" type="primary_name_ref" span="720:18:720:22">PLUS</jtok>
<jtok eid="29" type="primary_name_ref" span="721:24:721:31">operand</jtok>
<jtok eid="29" type="primary_name_ref" span="722:18:722:23">MINUS</jtok>
<jtok eid="29" type="primary_name_ref" span="723:25:723:32">operand</jtok>
<jtok eid="29" type="constructor_call" span="725:27:725:43">InterpreterError</jtok>
<jtok eid="29" type="string_literal" span="725:44:725:70">"bad float unaryOperation"</jtok>
<jtok eid="30" type="method_name" span="729:19:729:39">doubleUnaryOperation</jtok>
<jtok eid="30" type="parameter_type" span="729:40:729:46">Double</jtok>
<jtok eid="30" type="parameter_name" span="729:47:729:48">D</jtok>
<jtok eid="30" type="parameter_name" span="729:54:729:58">kind</jtok>
<jtok eid="30" type="local_variable_name" span="731:16:731:23">operand</jtok>
<jtok eid="30" type="primary_name_ref" span="731:26:731:27">D</jtok>
<jtok eid="30" type="method_call" span="731:28:731:39">doubleValue</jtok>
<jtok eid="30" type="primary_name_ref" span="733:16:733:20">kind</jtok>
<jtok eid="30" type="primary_name_ref" span="735:18:735:22">PLUS</jtok>
<jtok eid="30" type="primary_name_ref" span="736:24:736:31">operand</jtok>
<jtok eid="30" type="primary_name_ref" span="737:18:737:23">MINUS</jtok>
<jtok eid="30" type="primary_name_ref" span="738:25:738:32">operand</jtok>
<jtok eid="30" type="constructor_call" span="740:27:740:43">InterpreterError</jtok>
<jtok eid="30" type="string_literal" span="740:44:740:71">"bad double unaryOperation"</jtok>
<jtok eid="31" type="method_name" span="744:16:744:24">intValue</jtok>
<jtok eid="31" type="throws" span="744:34:744:47">UtilEvalError</jtok>
<jtok eid="31" type="primary_name_ref" span="746:12:746:17">value</jtok>
<jtok eid="31" type="class_or_interface_ref" span="746:29:746:35">Number</jtok>
<jtok eid="31" type="class_or_interface_ref" span="747:21:747:27">Number</jtok>
<jtok eid="31" type="primary_name_ref" span="747:28:747:33">value</jtok>
<jtok eid="31" type="method_call" span="747:35:747:43">intValue</jtok>
<jtok eid="31" type="constructor_call" span="749:23:749:36">UtilEvalError</jtok>
<jtok eid="31" type="string_literal" span="749:37:749:61">"Primitive not a number"</jtok>
<jtok eid="32" type="method_name" span="752:20:752:32">booleanValue</jtok>
<jtok eid="32" type="throws" span="752:42:752:55">UtilEvalError</jtok>
<jtok eid="32" type="primary_name_ref" span="754:12:754:17">value</jtok>
<jtok eid="32" type="class_or_interface_ref" span="754:29:754:36">Boolean</jtok>
<jtok eid="32" type="class_or_interface_ref" span="755:21:755:28">Boolean</jtok>
<jtok eid="32" type="primary_name_ref" span="755:29:755:34">value</jtok>
<jtok eid="32" type="method_call" span="755:36:755:48">booleanValue</jtok>
<jtok eid="32" type="constructor_call" span="757:23:757:36">UtilEvalError</jtok>
<jtok eid="32" type="string_literal" span="757:37:757:62">"Primitive not a boolean"</jtok>
<jtok eid="1" type="block_comment" span="760:2:763:4">/**
		Determine if this primitive is a numeric type.
		i.e. not boolean, null, or void (but including char)
	*/</jtok>
<jtok eid="33" type="method_name" span="764:17:764:25">isNumber</jtok>
<jtok eid="33" type="primary_name_ref" span="765:14:765:19">value</jtok>
<jtok eid="33" type="class_or_interface_ref" span="765:31:765:38">Boolean</jtok>
<jtok eid="33" type="primary_name_ref" span="766:17:766:21">NULL</jtok>
<jtok eid="33" type="primary_name_ref" span="766:36:766:40">VOID</jtok>
<jtok eid="34" type="class_or_interface_ref" span="769:12:769:18">Number</jtok>
<jtok eid="34" type="method_name" span="769:19:769:30">numberValue</jtok>
<jtok eid="34" type="throws" span="769:40:769:53">UtilEvalError</jtok>
<jtok eid="34" type="class_or_interface_ref" span="771:3:771:9">Object</jtok>
<jtok eid="34" type="local_variable_name" span="771:10:771:15">value</jtok>
<jtok eid="34" type="qualified_name_ref" span="771:23:771:28">value</jtok>
<jtok eid="34" type="line_comment" span="773:3:773:57">// Promote character to Number type for these purposes</jtok>
<jtok eid="34" type="primary_name_ref" span="774:7:774:12">value</jtok>
<jtok eid="34" type="class_or_interface_ref" span="774:24:774:33">Character</jtok>
<jtok eid="34" type="primary_name_ref" span="775:4:775:9">value</jtok>
<jtok eid="34" type="constructor_call" span="775:16:775:23">Integer</jtok>
<jtok eid="34" type="class_or_interface_ref" span="775:26:775:35">Character</jtok>
<jtok eid="34" type="primary_name_ref" span="775:36:775:41">value</jtok>
<jtok eid="34" type="method_call" span="775:43:775:52">charValue</jtok>
<jtok eid="34" type="primary_name_ref" span="777:13:777:18">value</jtok>
<jtok eid="34" type="class_or_interface_ref" span="777:30:777:36">Number</jtok>
<jtok eid="34" type="class_or_interface_ref" span="778:21:778:27">Number</jtok>
<jtok eid="34" type="primary_name_ref" span="778:28:778:33">value</jtok>
<jtok eid="34" type="constructor_call" span="780:23:780:36">UtilEvalError</jtok>
<jtok eid="34" type="string_literal" span="780:37:780:61">"Primitive not a number"</jtok>
<jtok eid="1" type="block_comment" span="783:2:786:4">/**
		Primitives compare equal with other Primitives containing an equal
		wrapped value.
	*/</jtok>
<jtok eid="35" type="method_name" span="787:17:787:23">equals</jtok>
<jtok eid="35" type="parameter_type" span="787:25:787:31">Object</jtok>
<jtok eid="35" type="parameter_name" span="787:32:787:35">obj</jtok>
<jtok eid="35" type="primary_name_ref" span="789:8:789:11">obj</jtok>
<jtok eid="35" type="class_or_interface_ref" span="789:23:789:32">Primitive</jtok>
<jtok eid="35" type="class_or_interface_ref" span="790:13:790:22">Primitive</jtok>
<jtok eid="35" type="primary_name_ref" span="790:23:790:26">obj</jtok>
<jtok eid="35" type="qualified_name_ref" span="790:28:790:33">value</jtok>
<jtok eid="35" type="method_call" span="790:34:790:40">equals</jtok>
<jtok eid="35" type="qualified_name_ref" span="790:47:790:52">value</jtok>
<jtok eid="1" type="block_comment" span="795:2:798:4">/**
		The hash of the Primitive is tied to the hash of the wrapped value but
		shifted so that they are not the same.
	*/</jtok>
<jtok eid="36" type="method_name" span="799:13:799:21">hashCode</jtok>
<jtok eid="36" type="qualified_name_ref" span="801:15:801:20">value</jtok>
<jtok eid="36" type="method_call" span="801:21:801:29">hashCode</jtok>
<jtok eid="36" type="line_comment" span="801:38:801:50">// arbitrary</jtok>
<jtok eid="1" type="block_comment" span="804:2:811:4">/**
		Unwrap primitive values and map voids to nulls.
		Non Primitive types remain unchanged.

		@param obj object type which may be bsh.Primitive
		@return corresponding "normal" Java type, "unwrapping" 
			any bsh.Primitive types to their wrapper types.
	*/</jtok>
<jtok eid="37" type="class_or_interface_ref" span="812:16:812:22">Object</jtok>
<jtok eid="37" type="method_name" span="812:23:812:29">unwrap</jtok>
<jtok eid="37" type="parameter_type" span="812:31:812:37">Object</jtok>
<jtok eid="37" type="parameter_name" span="812:38:812:41">obj</jtok>
<jtok eid="37" type="line_comment" span="814:9:814:52">// map voids to nulls for the outside world</jtok>
<jtok eid="37" type="primary_name_ref" span="815:13:815:16">obj</jtok>
<jtok eid="37" type="primary_name_ref" span="815:20:815:29">Primitive</jtok>
<jtok eid="37" type="qualified_name_ref" span="815:30:815:34">VOID</jtok>
<jtok eid="37" type="line_comment" span="818:9:818:29">// unwrap primitives</jtok>
<jtok eid="37" type="primary_name_ref" span="819:13:819:16">obj</jtok>
<jtok eid="37" type="class_or_interface_ref" span="819:28:819:37">Primitive</jtok>
<jtok eid="37" type="class_or_interface_ref" span="820:21:820:30">Primitive</jtok>
<jtok eid="37" type="primary_name_ref" span="820:31:820:34">obj</jtok>
<jtok eid="37" type="method_call" span="820:36:820:44">getValue</jtok>
<jtok eid="37" type="primary_name_ref" span="822:20:822:23">obj</jtok>
<jtok eid="1" type="block_comment" span="825:5:829:7">/*
        Unwrap Primitive wrappers to their java.lang wrapper values.
		e.g. Primitive(42) becomes Integer(42)
		@see #unwrap( Object )
    */</jtok>
<jtok eid="38" type="class_or_interface_ref" span="830:19:830:25">Object</jtok>
<jtok eid="38" type="method_name" span="830:29:830:35">unwrap</jtok>
<jtok eid="38" type="parameter_type" span="830:37:830:43">Object</jtok>
<jtok eid="38" type="parameter_name" span="830:46:830:50">args</jtok>
<jtok eid="38" type="class_or_interface_ref" span="832:3:832:9">Object</jtok>
<jtok eid="38" type="local_variable_name" span="832:13:832:15">oa</jtok>
<jtok eid="38" type="constructor_call" span="832:22:832:28">Object</jtok>
<jtok eid="38" type="primary_name_ref" span="832:30:832:34">args</jtok>
<jtok eid="38" type="qualified_name_ref" span="832:35:832:41">length</jtok>
<jtok eid="38" type="local_variable_name" span="833:17:833:18">i</jtok>
<jtok eid="38" type="primary_name_ref" span="833:22:833:23">i</jtok>
<jtok eid="38" type="primary_name_ref" span="833:24:833:28">args</jtok>
<jtok eid="38" type="qualified_name_ref" span="833:29:833:35">length</jtok>
<jtok eid="38" type="primary_name_ref" span="833:37:833:38">i</jtok>
<jtok eid="38" type="primary_name_ref" span="834:13:834:15">oa</jtok>
<jtok eid="38" type="primary_name_ref" span="834:16:834:17">i</jtok>
<jtok eid="38" type="method_call" span="834:21:834:27">unwrap</jtok>
<jtok eid="38" type="primary_name_ref" span="834:29:834:33">args</jtok>
<jtok eid="38" type="primary_name_ref" span="834:34:834:35">i</jtok>
<jtok eid="38" type="primary_name_ref" span="835:10:835:12">oa</jtok>
<jtok eid="1" type="block_comment" span="838:5:839:7">/*
    */</jtok>
<jtok eid="39" type="class_or_interface_ref" span="840:19:840:25">Object</jtok>
<jtok eid="39" type="method_name" span="840:29:840:33">wrap</jtok>
<jtok eid="39" type="parameter_type" span="840:35:840:41">Object</jtok>
<jtok eid="39" type="parameter_name" span="840:44:840:48">args</jtok>
<jtok eid="39" type="parameter_type" span="840:50:840:55">Class</jtok>
<jtok eid="39" type="parameter_name" span="840:59:840:69">paramTypes</jtok>
<jtok eid="39" type="primary_name_ref" span="842:8:842:12">args</jtok>
<jtok eid="39" type="class_or_interface_ref" span="845:3:845:9">Object</jtok>
<jtok eid="39" type="local_variable_name" span="845:13:845:15">oa</jtok>
<jtok eid="39" type="constructor_call" span="845:22:845:28">Object</jtok>
<jtok eid="39" type="primary_name_ref" span="845:30:845:34">args</jtok>
<jtok eid="39" type="qualified_name_ref" span="845:35:845:41">length</jtok>
<jtok eid="39" type="local_variable_name" span="846:17:846:18">i</jtok>
<jtok eid="39" type="primary_name_ref" span="846:22:846:23">i</jtok>
<jtok eid="39" type="primary_name_ref" span="846:24:846:28">args</jtok>
<jtok eid="39" type="qualified_name_ref" span="846:29:846:35">length</jtok>
<jtok eid="39" type="primary_name_ref" span="846:37:846:38">i</jtok>
<jtok eid="39" type="primary_name_ref" span="847:13:847:15">oa</jtok>
<jtok eid="39" type="primary_name_ref" span="847:16:847:17">i</jtok>
<jtok eid="39" type="method_call" span="847:21:847:25">wrap</jtok>
<jtok eid="39" type="primary_name_ref" span="847:27:847:31">args</jtok>
<jtok eid="39" type="primary_name_ref" span="847:32:847:33">i</jtok>
<jtok eid="39" type="primary_name_ref" span="847:36:847:46">paramTypes</jtok>
<jtok eid="39" type="primary_name_ref" span="847:47:847:48">i</jtok>
<jtok eid="39" type="primary_name_ref" span="848:10:848:12">oa</jtok>
<jtok eid="1" type="block_comment" span="851:2:858:4">/**
		Wrap primitive values (as indicated by type param) and nulls in the 
		Primitive class.  Values not primitive or null are left unchanged.
		Primitive values are represented by their wrapped values in param value.
		&lt;p/&gt;
		The value null is mapped to Primitive.NULL.
		Any value specified with type Void.TYPE is mapped to Primitive.VOID.
	*/</jtok>
<jtok eid="40" type="class_or_interface_ref" span="859:19:859:25">Object</jtok>
<jtok eid="40" type="method_name" span="859:26:859:30">wrap</jtok>
<jtok eid="40" type="parameter_type" span="860:3:860:9">Object</jtok>
<jtok eid="40" type="parameter_name" span="860:10:860:15">value</jtok>
<jtok eid="40" type="parameter_type" span="860:17:860:22">Class</jtok>
<jtok eid="40" type="parameter_name" span="860:23:860:27">type</jtok>
<jtok eid="40" type="primary_name_ref" span="862:14:862:18">type</jtok>
<jtok eid="40" type="primary_name_ref" span="862:22:862:26">Void</jtok>
<jtok eid="40" type="qualified_name_ref" span="862:27:862:31">TYPE</jtok>
<jtok eid="40" type="primary_name_ref" span="863:20:863:29">Primitive</jtok>
<jtok eid="40" type="qualified_name_ref" span="863:30:863:34">VOID</jtok>
<jtok eid="40" type="primary_name_ref" span="865:14:865:19">value</jtok>
<jtok eid="40" type="primary_name_ref" span="866:20:866:29">Primitive</jtok>
<jtok eid="40" type="qualified_name_ref" span="866:30:866:34">NULL</jtok>
<jtok eid="40" type="primary_name_ref" span="868:8:868:12">type</jtok>
<jtok eid="40" type="method_call" span="868:13:868:24">isPrimitive</jtok>
<jtok eid="40" type="constructor_call" span="869:15:869:24">Primitive</jtok>
<jtok eid="40" type="primary_name_ref" span="869:26:869:31">value</jtok>
<jtok eid="40" type="primary_name_ref" span="871:10:871:15">value</jtok>
<jtok eid="1" type="block_comment" span="875:2:877:4">/**
		Get the appropriate default value per JLS 4.5.4
	*/</jtok>
<jtok eid="41" type="class_or_interface_ref" span="878:16:878:25">Primitive</jtok>
<jtok eid="41" type="method_name" span="878:26:878:41">getDefaultValue</jtok>
<jtok eid="41" type="parameter_type" span="878:43:878:48">Class</jtok>
<jtok eid="41" type="parameter_name" span="878:49:878:53">type</jtok>
<jtok eid="41" type="primary_name_ref" span="880:8:880:12">type</jtok>
<jtok eid="41" type="primary_name_ref" span="880:25:880:29">type</jtok>
<jtok eid="41" type="method_call" span="880:30:880:41">isPrimitive</jtok>
<jtok eid="41" type="primary_name_ref" span="881:11:881:20">Primitive</jtok>
<jtok eid="41" type="qualified_name_ref" span="881:21:881:25">NULL</jtok>
<jtok eid="41" type="primary_name_ref" span="882:8:882:12">type</jtok>
<jtok eid="41" type="primary_name_ref" span="882:16:882:23">Boolean</jtok>
<jtok eid="41" type="qualified_name_ref" span="882:24:882:28">TYPE</jtok>
<jtok eid="41" type="constructor_call" span="883:15:883:24">Primitive</jtok>
<jtok eid="41" type="line_comment" span="885:3:885:59">// non boolean primitive, get appropriate flavor of zero</jtok>
<jtok eid="41" type="constructor_call" span="887:15:887:24">Primitive</jtok>
<jtok eid="41" type="method_call" span="887:33:887:43">castToType</jtok>
<jtok eid="41" type="primary_name_ref" span="887:45:887:49">type</jtok>
<jtok eid="41" type="primary_name_ref" span="887:51:887:56">Types</jtok>
<jtok eid="41" type="qualified_name_ref" span="887:57:887:61">CAST</jtok>
<jtok eid="41" type="class_or_interface_ref" span="888:13:888:26">UtilEvalError</jtok>
<jtok eid="41" type="local_variable_name" span="888:27:888:28">e</jtok>
<jtok eid="41" type="constructor_call" span="889:14:889:30">InterpreterError</jtok>
<jtok eid="41" type="string_literal" span="889:32:889:42">"bad cast"</jtok>
<jtok eid="1" type="block_comment" span="893:2:897:4">/**
		Get the corresponding java.lang wrapper class for the primitive TYPE
		class.
		e.g.  Integer.TYPE -&gt; Integer.class
	*/</jtok>
<jtok eid="42" type="class_or_interface_ref" span="898:16:898:21">Class</jtok>
<jtok eid="42" type="method_name" span="898:22:898:29">boxType</jtok>
<jtok eid="42" type="parameter_type" span="898:31:898:36">Class</jtok>
<jtok eid="42" type="parameter_name" span="898:37:898:50">primitiveType</jtok>
<jtok eid="42" type="class_or_interface_ref" span="900:3:900:8">Class</jtok>
<jtok eid="42" type="local_variable_name" span="900:9:900:10">c</jtok>
<jtok eid="42" type="class_or_interface_ref" span="900:14:900:19">Class</jtok>
<jtok eid="42" type="primary_name_ref" span="900:20:900:30">wrapperMap</jtok>
<jtok eid="42" type="method_call" span="900:31:900:34">get</jtok>
<jtok eid="42" type="primary_name_ref" span="900:36:900:49">primitiveType</jtok>
<jtok eid="42" type="primary_name_ref" span="901:8:901:9">c</jtok>
<jtok eid="42" type="primary_name_ref" span="902:11:902:12">c</jtok>
<jtok eid="42" type="constructor_call" span="903:13:903:29">InterpreterError</jtok>
<jtok eid="42" type="string_literal" span="904:4:904:28">"Not a primitive type: "</jtok>
<jtok eid="42" type="primary_name_ref" span="904:30:904:43">primitiveType</jtok>
<jtok eid="1" type="block_comment" span="907:2:911:4">/**
		Get the corresponding primitive TYPE class for the java.lang wrapper
		class type.
		e.g.  Integer.class -&gt; Integer.TYPE
	*/</jtok>
<jtok eid="43" type="class_or_interface_ref" span="912:16:912:21">Class</jtok>
<jtok eid="43" type="method_name" span="912:22:912:31">unboxType</jtok>
<jtok eid="43" type="parameter_type" span="912:33:912:38">Class</jtok>
<jtok eid="43" type="parameter_name" span="912:39:912:50">wrapperType</jtok>
<jtok eid="43" type="class_or_interface_ref" span="914:3:914:8">Class</jtok>
<jtok eid="43" type="local_variable_name" span="914:9:914:10">c</jtok>
<jtok eid="43" type="class_or_interface_ref" span="914:14:914:19">Class</jtok>
<jtok eid="43" type="primary_name_ref" span="914:20:914:30">wrapperMap</jtok>
<jtok eid="43" type="method_call" span="914:31:914:34">get</jtok>
<jtok eid="43" type="primary_name_ref" span="914:36:914:47">wrapperType</jtok>
<jtok eid="43" type="primary_name_ref" span="915:8:915:9">c</jtok>
<jtok eid="43" type="primary_name_ref" span="916:11:916:12">c</jtok>
<jtok eid="43" type="constructor_call" span="917:13:917:29">InterpreterError</jtok>
<jtok eid="43" type="string_literal" span="918:4:918:36">"Not a primitive wrapper type: "</jtok>
<jtok eid="43" type="primary_name_ref" span="918:37:918:48">wrapperType</jtok>
<jtok eid="1" type="block_comment" span="921:2:928:4">/**
		Cast this bsh.Primitive value to a new bsh.Primitive value
		This is usually a numeric type cast.  Other cases include:
			A boolean can be cast to boolen
			null can be cast to any object type and remains null
			Attempting to cast a void causes an exception
		@param toType is the java object or primitive TYPE class
	*/</jtok>
<jtok eid="44" type="class_or_interface_ref" span="929:9:929:18">Primitive</jtok>
<jtok eid="44" type="method_name" span="929:19:929:29">castToType</jtok>
<jtok eid="44" type="parameter_type" span="929:31:929:36">Class</jtok>
<jtok eid="44" type="parameter_name" span="929:37:929:43">toType</jtok>
<jtok eid="44" type="parameter_name" span="929:49:929:58">operation</jtok>
<jtok eid="44" type="throws" span="930:10:930:23">UtilEvalError</jtok>
<jtok eid="44" type="method_call" span="932:10:932:23">castPrimitive</jtok>
<jtok eid="44" type="primary_name_ref" span="933:4:933:10">toType</jtok>
<jtok eid="44" type="method_call" span="933:12:933:19">getType</jtok>
<jtok eid="44" type="block_comment" span="933:21:933:33">/*fromType*/</jtok>
<jtok eid="44" type="block_comment" span="933:39:933:52">/*fromValue*/</jtok>
<jtok eid="44" type="block_comment" span="934:9:934:22">/*checkOnly*/</jtok>
<jtok eid="44" type="primary_name_ref" span="934:24:934:33">operation</jtok>
<jtok eid="1" type="block_comment" span="937:2:953:4">/*
		Cast or check a cast of a primitive type to another type.
		Normally both types are primitive (e.g. numeric), but a null value
		(no type) may be cast to any type.
		&lt;p/&gt;

		@param toType is the target type of the cast.  It is normally a
		java primitive TYPE, but in the case of a null cast can be any object
		type.

		@param fromType is the java primitive TYPE type of the primitive to be
		cast or null, to indicate that the fromValue was null or void.

		@param fromValue is, optionally, the value to be converted.  If
		checkOnly is true fromValue must be null.  If checkOnly is false,
		fromValue must be non-null (Primitive.NULL is of course valid).
	*/</jtok>
<jtok eid="45" type="class_or_interface_ref" span="954:9:954:18">Primitive</jtok>
<jtok eid="45" type="method_name" span="954:19:954:32">castPrimitive</jtok>
<jtok eid="45" type="parameter_type" span="955:3:955:8">Class</jtok>
<jtok eid="45" type="parameter_name" span="955:9:955:15">toType</jtok>
<jtok eid="45" type="parameter_type" span="955:17:955:22">Class</jtok>
<jtok eid="45" type="parameter_name" span="955:23:955:31">fromType</jtok>
<jtok eid="45" type="parameter_type" span="955:33:955:42">Primitive</jtok>
<jtok eid="45" type="parameter_name" span="955:43:955:52">fromValue</jtok>
<jtok eid="45" type="parameter_name" span="956:11:956:20">checkOnly</jtok>
<jtok eid="45" type="parameter_name" span="956:26:956:35">operation</jtok>
<jtok eid="45" type="throws" span="957:10:957:23">UtilEvalError</jtok>
<jtok eid="45" type="block_comment" span="959:3:963:5">/*
			Lots of preconditions checked here...
			Once things are running smoothly we might comment these out
			(That's what assertions are for).
		*/</jtok>
<jtok eid="45" type="primary_name_ref" span="964:8:964:17">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="964:21:964:30">fromValue</jtok>
<jtok eid="45" type="constructor_call" span="965:14:965:30">InterpreterError</jtok>
<jtok eid="45" type="string_literal" span="965:31:965:49">"bad cast param 1"</jtok>
<jtok eid="45" type="primary_name_ref" span="966:9:966:18">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="966:22:966:31">fromValue</jtok>
<jtok eid="45" type="constructor_call" span="967:14:967:30">InterpreterError</jtok>
<jtok eid="45" type="string_literal" span="967:31:967:49">"bad cast param 2"</jtok>
<jtok eid="45" type="primary_name_ref" span="968:8:968:16">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="968:29:968:37">fromType</jtok>
<jtok eid="45" type="method_call" span="968:38:968:49">isPrimitive</jtok>
<jtok eid="45" type="constructor_call" span="969:14:969:30">InterpreterError</jtok>
<jtok eid="45" type="string_literal" span="969:31:969:46">"bad fromType:"</jtok>
<jtok eid="45" type="primary_name_ref" span="969:48:969:56">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="970:8:970:17">fromValue</jtok>
<jtok eid="45" type="primary_name_ref" span="970:21:970:30">Primitive</jtok>
<jtok eid="45" type="qualified_name_ref" span="970:31:970:35">NULL</jtok>
<jtok eid="45" type="primary_name_ref" span="970:39:970:47">fromType</jtok>
<jtok eid="45" type="constructor_call" span="971:14:971:30">InterpreterError</jtok>
<jtok eid="45" type="string_literal" span="971:31:971:52">"inconsistent args 1"</jtok>
<jtok eid="45" type="primary_name_ref" span="972:8:972:17">fromValue</jtok>
<jtok eid="45" type="primary_name_ref" span="972:21:972:30">Primitive</jtok>
<jtok eid="45" type="qualified_name_ref" span="972:31:972:35">VOID</jtok>
<jtok eid="45" type="primary_name_ref" span="972:39:972:47">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="972:51:972:55">Void</jtok>
<jtok eid="45" type="qualified_name_ref" span="972:56:972:60">TYPE</jtok>
<jtok eid="45" type="constructor_call" span="973:14:973:30">InterpreterError</jtok>
<jtok eid="45" type="string_literal" span="973:31:973:52">"inconsistent args 2"</jtok>
<jtok eid="45" type="line_comment" span="975:3:975:33">// can't cast void to anything</jtok>
<jtok eid="45" type="primary_name_ref" span="976:8:976:16">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="976:20:976:24">Void</jtok>
<jtok eid="45" type="qualified_name_ref" span="976:25:976:29">TYPE</jtok>
<jtok eid="45" type="primary_name_ref" span="977:9:977:18">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="978:12:978:17">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="978:18:978:30">INVALID_CAST</jtok>
<jtok eid="45" type="primary_name_ref" span="980:11:980:16">Types</jtok>
<jtok eid="45" type="method_call" span="980:17:980:26">castError</jtok>
<jtok eid="45" type="primary_name_ref" span="980:28:980:35">Reflect</jtok>
<jtok eid="45" type="method_call" span="980:36:980:54">normalizeClassName</jtok>
<jtok eid="45" type="primary_name_ref" span="980:55:980:61">toType</jtok>
<jtok eid="45" type="string_literal" span="981:6:981:18">"void value"</jtok>
<jtok eid="45" type="primary_name_ref" span="981:20:981:29">operation</jtok>
<jtok eid="45" type="line_comment" span="983:3:983:59">// unwrap Primitive fromValue to its wrapper value, etc.</jtok>
<jtok eid="45" type="class_or_interface_ref" span="984:3:984:9">Object</jtok>
<jtok eid="45" type="local_variable_name" span="984:10:984:15">value</jtok>
<jtok eid="45" type="primary_name_ref" span="985:8:985:17">fromValue</jtok>
<jtok eid="45" type="primary_name_ref" span="986:4:986:9">value</jtok>
<jtok eid="45" type="primary_name_ref" span="986:12:986:21">fromValue</jtok>
<jtok eid="45" type="method_call" span="986:22:986:30">getValue</jtok>
<jtok eid="45" type="primary_name_ref" span="988:8:988:14">toType</jtok>
<jtok eid="45" type="method_call" span="988:15:988:26">isPrimitive</jtok>
<jtok eid="45" type="line_comment" span="990:4:990:45">// Trying to cast null to primitive type?</jtok>
<jtok eid="45" type="primary_name_ref" span="991:9:991:17">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="992:10:992:19">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="993:13:993:18">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="993:19:993:31">INVALID_CAST</jtok>
<jtok eid="45" type="primary_name_ref" span="995:12:995:17">Types</jtok>
<jtok eid="45" type="method_call" span="995:18:995:27">castError</jtok>
<jtok eid="45" type="string_literal" span="996:7:996:24">"primitive type:"</jtok>
<jtok eid="45" type="primary_name_ref" span="996:27:996:33">toType</jtok>
<jtok eid="45" type="string_literal" span="996:35:996:47">"Null value"</jtok>
<jtok eid="45" type="primary_name_ref" span="996:49:996:58">operation</jtok>
<jtok eid="45" type="line_comment" span="998:4:998:19">// fall through</jtok>
<jtok eid="45" type="line_comment" span="1001:4:1001:49">// Trying to cast primitive to an object type</jtok>
<jtok eid="45" type="line_comment" span="1002:4:1002:52">// Primitive.NULL can be cast to any object type</jtok>
<jtok eid="45" type="primary_name_ref" span="1003:9:1003:17">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="1004:12:1004:21">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="1004:24:1004:29">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="1004:30:1004:40">VALID_CAST</jtok>
<jtok eid="45" type="primary_name_ref" span="1005:6:1005:15">Primitive</jtok>
<jtok eid="45" type="qualified_name_ref" span="1005:16:1005:20">NULL</jtok>
<jtok eid="45" type="primary_name_ref" span="1007:9:1007:18">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="1008:12:1008:17">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="1008:18:1008:30">INVALID_CAST</jtok>
<jtok eid="45" type="primary_name_ref" span="1010:11:1010:16">Types</jtok>
<jtok eid="45" type="method_call" span="1010:17:1010:26">castError</jtok>
<jtok eid="45" type="string_literal" span="1011:7:1011:21">"object type:"</jtok>
<jtok eid="45" type="primary_name_ref" span="1011:24:1011:30">toType</jtok>
<jtok eid="45" type="string_literal" span="1011:32:1011:49">"primitive value"</jtok>
<jtok eid="45" type="primary_name_ref" span="1011:51:1011:60">operation</jtok>
<jtok eid="45" type="line_comment" span="1014:3:1014:38">// can only cast boolean to boolean</jtok>
<jtok eid="45" type="primary_name_ref" span="1015:8:1015:16">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="1015:20:1015:27">Boolean</jtok>
<jtok eid="45" type="qualified_name_ref" span="1015:28:1015:32">TYPE</jtok>
<jtok eid="45" type="primary_name_ref" span="1017:9:1017:15">toType</jtok>
<jtok eid="45" type="primary_name_ref" span="1017:19:1017:26">Boolean</jtok>
<jtok eid="45" type="qualified_name_ref" span="1017:27:1017:31">TYPE</jtok>
<jtok eid="45" type="primary_name_ref" span="1018:10:1018:19">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="1019:13:1019:18">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="1019:19:1019:31">INVALID_CAST</jtok>
<jtok eid="45" type="primary_name_ref" span="1021:12:1021:17">Types</jtok>
<jtok eid="45" type="method_call" span="1021:18:1021:27">castError</jtok>
<jtok eid="45" type="primary_name_ref" span="1021:29:1021:35">toType</jtok>
<jtok eid="45" type="primary_name_ref" span="1021:37:1021:45">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="1021:47:1021:56">operation</jtok>
<jtok eid="45" type="primary_name_ref" span="1023:11:1023:20">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="1023:23:1023:28">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="1023:29:1023:39">VALID_CAST</jtok>
<jtok eid="45" type="primary_name_ref" span="1024:5:1024:14">fromValue</jtok>
<jtok eid="45" type="line_comment" span="1027:3:1027:21">// Do numeric cast</jtok>
<jtok eid="45" type="line_comment" span="1029:3:1029:68">// Only allow legal Java assignment unless we're a CAST operation</jtok>
<jtok eid="45" type="primary_name_ref" span="1030:8:1030:17">operation</jtok>
<jtok eid="45" type="primary_name_ref" span="1030:21:1030:26">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="1030:27:1030:37">ASSIGNMENT</jtok>
<jtok eid="45" type="primary_name_ref" span="1031:8:1031:13">Types</jtok>
<jtok eid="45" type="method_call" span="1031:14:1031:30">isJavaAssignable</jtok>
<jtok eid="45" type="primary_name_ref" span="1031:32:1031:38">toType</jtok>
<jtok eid="45" type="primary_name_ref" span="1031:40:1031:48">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="1033:9:1033:18">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="1034:12:1034:17">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="1034:18:1034:30">INVALID_CAST</jtok>
<jtok eid="45" type="primary_name_ref" span="1036:11:1036:16">Types</jtok>
<jtok eid="45" type="method_call" span="1036:17:1036:26">castError</jtok>
<jtok eid="45" type="primary_name_ref" span="1036:28:1036:34">toType</jtok>
<jtok eid="45" type="primary_name_ref" span="1036:36:1036:44">fromType</jtok>
<jtok eid="45" type="primary_name_ref" span="1036:46:1036:55">operation</jtok>
<jtok eid="45" type="primary_name_ref" span="1039:10:1039:19">checkOnly</jtok>
<jtok eid="45" type="primary_name_ref" span="1039:22:1039:27">Types</jtok>
<jtok eid="45" type="qualified_name_ref" span="1039:28:1039:38">VALID_CAST</jtok>
<jtok eid="45" type="constructor_call" span="1040:8:1040:17">Primitive</jtok>
<jtok eid="45" type="method_call" span="1040:19:1040:30">castWrapper</jtok>
<jtok eid="45" type="primary_name_ref" span="1040:31:1040:37">toType</jtok>
<jtok eid="45" type="primary_name_ref" span="1040:39:1040:44">value</jtok>
<jtok eid="46" type="method_name" span="1043:24:1043:37">isWrapperType</jtok>
<jtok eid="46" type="parameter_type" span="1043:39:1043:44">Class</jtok>
<jtok eid="46" type="parameter_name" span="1043:45:1043:49">type</jtok>
<jtok eid="46" type="primary_name_ref" span="1045:10:1045:20">wrapperMap</jtok>
<jtok eid="46" type="method_call" span="1045:21:1045:24">get</jtok>
<jtok eid="46" type="primary_name_ref" span="1045:26:1045:30">type</jtok>
<jtok eid="46" type="primary_name_ref" span="1045:45:1045:49">type</jtok>
<jtok eid="46" type="method_call" span="1045:50:1045:61">isPrimitive</jtok>
<jtok eid="1" type="block_comment" span="1048:2:1055:4">/**
		Cast a primitive value represented by its java.lang wrapper type to the
		specified java.lang wrapper type.  e.g.  Byte(5) to Integer(5) or
		Integer(5) to Byte(5) 
		@param toType is the java TYPE type
		@param value is the value in java.lang wrapper.
		value may not be null.
	*/</jtok>
<jtok eid="47" type="class_or_interface_ref" span="1056:9:1056:15">Object</jtok>
<jtok eid="47" type="method_name" span="1056:16:1056:27">castWrapper</jtok>
<jtok eid="47" type="parameter_type" span="1057:3:1057:8">Class</jtok>
<jtok eid="47" type="parameter_name" span="1057:9:1057:15">toType</jtok>
<jtok eid="47" type="parameter_type" span="1057:17:1057:23">Object</jtok>
<jtok eid="47" type="parameter_name" span="1057:24:1057:29">value</jtok>
<jtok eid="47" type="primary_name_ref" span="1059:9:1059:15">toType</jtok>
<jtok eid="47" type="method_call" span="1059:16:1059:27">isPrimitive</jtok>
<jtok eid="47" type="constructor_call" span="1060:14:1060:30">InterpreterError</jtok>
<jtok eid="47" type="string_literal" span="1060:31:1060:62">"invalid type in castWrapper: "</jtok>
<jtok eid="47" type="primary_name_ref" span="1060:63:1060:69">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1061:8:1061:13">value</jtok>
<jtok eid="47" type="constructor_call" span="1062:14:1062:30">InterpreterError</jtok>
<jtok eid="47" type="string_literal" span="1062:31:1062:65">"null value in castWrapper, guard"</jtok>
<jtok eid="47" type="primary_name_ref" span="1063:8:1063:13">value</jtok>
<jtok eid="47" type="class_or_interface_ref" span="1063:25:1063:32">Boolean</jtok>
<jtok eid="47" type="primary_name_ref" span="1065:9:1065:15">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1065:19:1065:26">Boolean</jtok>
<jtok eid="47" type="qualified_name_ref" span="1065:27:1065:31">TYPE</jtok>
<jtok eid="47" type="constructor_call" span="1066:15:1066:31">InterpreterError</jtok>
<jtok eid="47" type="string_literal" span="1066:32:1066:61">"bad wrapper cast of boolean"</jtok>
<jtok eid="47" type="primary_name_ref" span="1068:12:1068:17">value</jtok>
<jtok eid="47" type="line_comment" span="1071:3:1071:65">// first promote char to Number type to avoid duplicating code</jtok>
<jtok eid="47" type="primary_name_ref" span="1072:8:1072:13">value</jtok>
<jtok eid="47" type="class_or_interface_ref" span="1072:25:1072:34">Character</jtok>
<jtok eid="47" type="primary_name_ref" span="1073:4:1073:9">value</jtok>
<jtok eid="47" type="constructor_call" span="1073:16:1073:23">Integer</jtok>
<jtok eid="47" type="class_or_interface_ref" span="1073:26:1073:35">Character</jtok>
<jtok eid="47" type="primary_name_ref" span="1073:36:1073:41">value</jtok>
<jtok eid="47" type="method_call" span="1073:43:1073:52">charValue</jtok>
<jtok eid="47" type="primary_name_ref" span="1075:10:1075:15">value</jtok>
<jtok eid="47" type="class_or_interface_ref" span="1075:27:1075:33">Number</jtok>
<jtok eid="47" type="constructor_call" span="1076:14:1076:30">InterpreterError</jtok>
<jtok eid="47" type="string_literal" span="1076:31:1076:49">"bad type in cast"</jtok>
<jtok eid="47" type="class_or_interface_ref" span="1078:3:1078:9">Number</jtok>
<jtok eid="47" type="local_variable_name" span="1078:10:1078:16">number</jtok>
<jtok eid="47" type="class_or_interface_ref" span="1078:20:1078:26">Number</jtok>
<jtok eid="47" type="primary_name_ref" span="1078:27:1078:32">value</jtok>
<jtok eid="47" type="primary_name_ref" span="1080:7:1080:13">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1080:17:1080:21">Byte</jtok>
<jtok eid="47" type="qualified_name_ref" span="1080:22:1080:26">TYPE</jtok>
<jtok eid="47" type="constructor_call" span="1081:15:1081:19">Byte</jtok>
<jtok eid="47" type="primary_name_ref" span="1081:20:1081:26">number</jtok>
<jtok eid="47" type="method_call" span="1081:27:1081:36">byteValue</jtok>
<jtok eid="47" type="primary_name_ref" span="1082:7:1082:13">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1082:17:1082:22">Short</jtok>
<jtok eid="47" type="qualified_name_ref" span="1082:23:1082:27">TYPE</jtok>
<jtok eid="47" type="constructor_call" span="1083:15:1083:20">Short</jtok>
<jtok eid="47" type="primary_name_ref" span="1083:21:1083:27">number</jtok>
<jtok eid="47" type="method_call" span="1083:28:1083:38">shortValue</jtok>
<jtok eid="47" type="primary_name_ref" span="1084:7:1084:13">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1084:17:1084:26">Character</jtok>
<jtok eid="47" type="qualified_name_ref" span="1084:27:1084:31">TYPE</jtok>
<jtok eid="47" type="constructor_call" span="1085:15:1085:24">Character</jtok>
<jtok eid="47" type="primary_name_ref" span="1085:31:1085:37">number</jtok>
<jtok eid="47" type="method_call" span="1085:38:1085:46">intValue</jtok>
<jtok eid="47" type="primary_name_ref" span="1086:7:1086:13">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1086:17:1086:24">Integer</jtok>
<jtok eid="47" type="qualified_name_ref" span="1086:25:1086:29">TYPE</jtok>
<jtok eid="47" type="constructor_call" span="1087:15:1087:22">Integer</jtok>
<jtok eid="47" type="primary_name_ref" span="1087:23:1087:29">number</jtok>
<jtok eid="47" type="method_call" span="1087:30:1087:38">intValue</jtok>
<jtok eid="47" type="primary_name_ref" span="1088:7:1088:13">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1088:17:1088:21">Long</jtok>
<jtok eid="47" type="qualified_name_ref" span="1088:22:1088:26">TYPE</jtok>
<jtok eid="47" type="constructor_call" span="1089:15:1089:19">Long</jtok>
<jtok eid="47" type="primary_name_ref" span="1089:20:1089:26">number</jtok>
<jtok eid="47" type="method_call" span="1089:27:1089:36">longValue</jtok>
<jtok eid="47" type="primary_name_ref" span="1090:7:1090:13">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1090:17:1090:22">Float</jtok>
<jtok eid="47" type="qualified_name_ref" span="1090:23:1090:27">TYPE</jtok>
<jtok eid="47" type="constructor_call" span="1091:15:1091:20">Float</jtok>
<jtok eid="47" type="primary_name_ref" span="1091:21:1091:27">number</jtok>
<jtok eid="47" type="method_call" span="1091:28:1091:38">floatValue</jtok>
<jtok eid="47" type="primary_name_ref" span="1092:7:1092:13">toType</jtok>
<jtok eid="47" type="primary_name_ref" span="1092:17:1092:23">Double</jtok>
<jtok eid="47" type="qualified_name_ref" span="1092:24:1092:28">TYPE</jtok>
<jtok eid="47" type="constructor_call" span="1093:15:1093:21">Double</jtok>
<jtok eid="47" type="primary_name_ref" span="1093:22:1093:28">number</jtok>
<jtok eid="47" type="method_call" span="1093:29:1093:40">doubleValue</jtok>
<jtok eid="47" type="constructor_call" span="1095:13:1095:29">InterpreterError</jtok>
<jtok eid="47" type="string_literal" span="1095:30:1095:53">"error in wrapper cast"</jtok>
</jdoc>