<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.ReflectManager" jls="java5">
<jent id="0" type="file" span="0:0:88:1">Source/jEdit/org/gjt/sp/jedit/bsh/ReflectManager.java</jent>
<jent id="1" pid="0" type="class" span="45:1:87:1">org.gjt.sp.jedit.bsh.ReflectManager</jent>
<jent id="2" pid="1" type="method" span="53:2:68:2">org.gjt.sp.jedit.bsh.ReflectManager.getReflectManager()</jent>
<jent id="3" pid="1" type="method" span="75:2:79:2">org.gjt.sp.jedit.bsh.ReflectManager.RMSetAccessible(Object)</jent>
<jent id="4" pid="1" type="method" span="86:2:86:51">org.gjt.sp.jedit.bsh.ReflectManager.setAccessible(Object)</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    * 
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="38:1:44:3">/**
	ReflectManager is a dynamically loaded extension that supports extended
	reflection features supported by JDK1.2 and greater.

	In particular it currently supports accessible method and field access 
	supported by JDK1.2 and greater.
*/</jtok>
<jtok eid="1" type="class_name" span="45:23:45:37">ReflectManager</jtok>
<jtok eid="1" type="class_or_interface_ref" span="47:17:47:31">ReflectManager</jtok>
<jtok eid="1" type="field_name" span="47:32:47:35">rfm</jtok>
<jtok eid="1" type="block_comment" span="49:2:52:4">/**
		Return the singleton bsh ReflectManager.
		@throws Unavailable
	*/</jtok>
<jtok eid="2" type="class_or_interface_ref" span="53:16:53:30">ReflectManager</jtok>
<jtok eid="2" type="method_name" span="53:31:53:48">getReflectManager</jtok>
<jtok eid="2" type="throws" span="54:10:54:21">Unavailable</jtok>
<jtok eid="2" type="primary_name_ref" span="56:8:56:11">rfm</jtok>
<jtok eid="2" type="class_or_interface_ref" span="58:4:58:9">Class</jtok>
<jtok eid="2" type="local_variable_name" span="58:10:58:14">clas</jtok>
<jtok eid="2" type="primary_name_ref" span="60:5:60:9">clas</jtok>
<jtok eid="2" type="primary_name_ref" span="60:12:60:17">Class</jtok>
<jtok eid="2" type="method_call" span="60:18:60:25">forName</jtok>
<jtok eid="2" type="string_literal" span="60:27:60:76">"org.gjt.sp.jedit.bsh.reflect.ReflectManagerImpl"</jtok>
<jtok eid="2" type="primary_name_ref" span="61:5:61:8">rfm</jtok>
<jtok eid="2" type="class_or_interface_ref" span="61:12:61:26">ReflectManager</jtok>
<jtok eid="2" type="primary_name_ref" span="61:27:61:31">clas</jtok>
<jtok eid="2" type="method_call" span="61:32:61:43">newInstance</jtok>
<jtok eid="2" type="class_or_interface_ref" span="62:14:62:23">Exception</jtok>
<jtok eid="2" type="local_variable_name" span="62:24:62:25">e</jtok>
<jtok eid="2" type="constructor_call" span="63:15:63:26">Unavailable</jtok>
<jtok eid="2" type="string_literal" span="63:27:63:58">"Reflect Manager unavailable: "</jtok>
<jtok eid="2" type="primary_name_ref" span="63:59:63:60">e</jtok>
<jtok eid="2" type="primary_name_ref" span="67:10:67:13">rfm</jtok>
<jtok eid="1" type="block_comment" span="70:2:74:4">/**
		Reflect Manager Set Accessible.
		Convenience method to invoke the reflect manager.
		@throws Unavailable
	*/</jtok>
<jtok eid="3" type="method_name" span="75:24:75:39">RMSetAccessible</jtok>
<jtok eid="3" type="parameter_type" span="75:41:75:47">Object</jtok>
<jtok eid="3" type="parameter_name" span="75:48:75:51">obj</jtok>
<jtok eid="3" type="throws" span="76:10:76:21">Unavailable</jtok>
<jtok eid="3" type="method_call" span="78:10:78:27">getReflectManager</jtok>
<jtok eid="3" type="method_call" span="78:30:78:43">setAccessible</jtok>
<jtok eid="3" type="primary_name_ref" span="78:45:78:48">obj</jtok>
<jtok eid="1" type="block_comment" span="81:2:85:4">/**
		Set a java.lang.reflect Field, Method, Constructor, or Array of
		accessible objects to accessible mode.
		@return true if the object was accessible or false if it was not.
	*/</jtok>
<jtok eid="4" type="method_name" span="86:26:86:39">setAccessible</jtok>
<jtok eid="4" type="parameter_type" span="86:41:86:47">Object</jtok>
<jtok eid="4" type="parameter_name" span="86:48:86:49">o</jtok>
</jdoc>