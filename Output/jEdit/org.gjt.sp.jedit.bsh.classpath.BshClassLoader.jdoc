<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.classpath.BshClassLoader" jls="java5">
<jent id="0" type="file" span="0:0:196:2">Source/jEdit/org/gjt/sp/jedit/bsh/classpath/BshClassLoader.java</jent>
<jent id="1" pid="0" type="class" span="45:1:196:1">org.gjt.sp.jedit.bsh.classpath.BshClassLoader</jent>
<jent id="2" pid="1" type="method" span="52:5:55:5">org.gjt.sp.jedit.bsh.classpath.BshClassLoader.BshClassLoader(BshClassManager,URL[])</jent>
<jent id="3" pid="1" type="method" span="60:5:62:5">org.gjt.sp.jedit.bsh.classpath.BshClassLoader.BshClassLoader(BshClassManager,BshClassPath)</jent>
<jent id="4" pid="1" type="method" span="68:5:70:5">org.gjt.sp.jedit.bsh.classpath.BshClassLoader.BshClassLoader(BshClassManager)</jent>
<jent id="5" pid="1" type="method" span="73:5:75:5">org.gjt.sp.jedit.bsh.classpath.BshClassLoader.addURL(URL)</jent>
<jent id="6" pid="1" type="method" span="85:5:120:5">org.gjt.sp.jedit.bsh.classpath.BshClassLoader.loadClass(String,boolean)</jent>
<jent id="7" pid="1" type="method" span="131:5:178:5">org.gjt.sp.jedit.bsh.classpath.BshClassLoader.findClass(String)</jent>
<jent id="8" pid="1" type="method" span="194:5:194:62">org.gjt.sp.jedit.bsh.classpath.BshClassLoader.getClassManager()</jent>
<jtok eid="0" type="block_comment" span="1:1:32:80">/*****************************************************************************
 *                                                                           *
 *  This file is part of the BeanShell Java Scripting distribution.          *
 *  Documentation and updates may be found at http://www.beanshell.org/      *
 *                                                                           *
 *  Sun Public License Notice:                                               *
 *                                                                           *
 *  The contents of this file are subject to the Sun Public License Version  *
 *  1.0 (the "License"); you may not use this file except in compliance with *
 *  the License. A copy of the License is available at http://www.sun.com    *
 *                                                                           *
 *  The Original Code is BeanShell. The Initial Developer of the Original    *
 *  Code is Pat Niemeyer. Portions created by Pat Niemeyer are Copyright     *
 *  (C) 2000.  All Rights Reserved.                                          *
 *                                                                           *
 *  GNU Public License Notice:                                               *
 *                                                                           *
 *  Alternatively, the contents of this file may be used under the terms of  *
 *  the GNU Lesser General Public License (the "LGPL"), in which case the    *
 *  provisions of LGPL are applicable instead of those above. If you wish to *
 *  allow use of your version of this file only under the  terms of the LGPL *
 *  and not to allow others to use your version of this file under the SPL,  *
 *  indicate your decision by deleting the provisions above and replace      *
 *  them with the notice and other provisions required by the LGPL.  If you  *
 *  do not delete the provisions above, a recipient may use your version of  *
 *  this file under either the SPL or the LGPL.                              *
 *                                                                           *
 *  Patrick Niemeyer (pat@pat.net)                                           *
 *  Author of Learning Java, O'Reilly &amp; Associates                           *
 *  http://www.pat.net/~pat/                                                 *
 *                                                                           *
 *****************************************************************************/</jtok>
<jtok eid="0" type="block_comment" span="40:1:44:3">/**
    One of the things BshClassLoader does is to address a deficiency in
    URLClassLoader that prevents us from specifying individual classes
    via URLs.
*/</jtok>
<jtok eid="1" type="class_name" span="45:14:45:28">BshClassLoader</jtok>
<jtok eid="1" type="class_or_interface_ref" span="45:37:45:51">URLClassLoader</jtok>
<jtok eid="1" type="class_or_interface_ref" span="47:5:47:20">BshClassManager</jtok>
<jtok eid="1" type="field_name" span="47:21:47:33">classManager</jtok>
<jtok eid="1" type="block_comment" span="49:5:51:7">/**
        @param bases URLs JARClassLoader seems to require absolute paths
    */</jtok>
<jtok eid="2" type="method_name" span="52:12:52:26">BshClassLoader</jtok>
<jtok eid="2" type="parameter_type" span="52:28:52:43">BshClassManager</jtok>
<jtok eid="2" type="parameter_name" span="52:44:52:56">classManager</jtok>
<jtok eid="2" type="parameter_type" span="52:58:52:61">URL</jtok>
<jtok eid="2" type="parameter_name" span="52:65:52:70">bases</jtok>
<jtok eid="2" type="primary_name_ref" span="53:16:53:21">bases</jtok>
<jtok eid="2" type="qualified_name_ref" span="54:14:54:26">classManager</jtok>
<jtok eid="2" type="primary_name_ref" span="54:29:54:41">classManager</jtok>
<jtok eid="1" type="block_comment" span="57:5:59:7">/**
        @param bcp URLs JARClassLoader seems to require absolute paths
    */</jtok>
<jtok eid="3" type="method_name" span="60:12:60:26">BshClassLoader</jtok>
<jtok eid="3" type="parameter_type" span="60:28:60:43">BshClassManager</jtok>
<jtok eid="3" type="parameter_name" span="60:44:60:56">classManager</jtok>
<jtok eid="3" type="parameter_type" span="60:58:60:70">BshClassPath</jtok>
<jtok eid="3" type="parameter_name" span="60:71:60:74">bcp</jtok>
<jtok eid="3" type="primary_name_ref" span="61:15:61:27">classManager</jtok>
<jtok eid="3" type="primary_name_ref" span="61:29:61:32">bcp</jtok>
<jtok eid="3" type="method_call" span="61:33:61:50">getPathComponents</jtok>
<jtok eid="1" type="block_comment" span="64:5:67:7">/**
        For use by children
        @param classManager URLs JARClassLoader seems to require absolute paths
    */</jtok>
<jtok eid="4" type="method_name" span="68:15:68:29">BshClassLoader</jtok>
<jtok eid="4" type="parameter_type" span="68:31:68:46">BshClassManager</jtok>
<jtok eid="4" type="parameter_name" span="68:47:68:59">classManager</jtok>
<jtok eid="4" type="primary_name_ref" span="69:15:69:27">classManager</jtok>
<jtok eid="4" type="constructor_call" span="69:33:69:36">URL</jtok>
<jtok eid="1" type="line_comment" span="72:5:72:32">// public version of addURL</jtok>
<jtok eid="5" type="method_name" span="73:17:73:23">addURL</jtok>
<jtok eid="5" type="parameter_type" span="73:25:73:28">URL</jtok>
<jtok eid="5" type="parameter_name" span="73:29:73:32">url</jtok>
<jtok eid="5" type="method_call" span="74:15:74:21">addURL</jtok>
<jtok eid="5" type="primary_name_ref" span="74:23:74:26">url</jtok>
<jtok eid="1" type="block_comment" span="77:5:84:7">/**
        This modification allows us to reload classes which are in the
        Java VM user classpath.  We search first rather than delegate to
        the parent classloader (or bootstrap path) first.

        An exception is for BeanShell core classes which are always loaded from
        the same classloader as the interpreter.
    */</jtok>
<jtok eid="6" type="class_or_interface_ref" span="85:12:85:17">Class</jtok>
<jtok eid="6" type="method_name" span="85:18:85:27">loadClass</jtok>
<jtok eid="6" type="parameter_type" span="85:28:85:34">String</jtok>
<jtok eid="6" type="parameter_name" span="85:35:85:39">name</jtok>
<jtok eid="6" type="parameter_name" span="85:49:85:56">resolve</jtok>
<jtok eid="6" type="throws" span="86:16:86:38">ClassNotFoundException</jtok>
<jtok eid="6" type="class_or_interface_ref" span="88:9:88:14">Class</jtok>
<jtok eid="6" type="local_variable_name" span="88:15:88:16">c</jtok>
<jtok eid="6" type="block_comment" span="90:9:93:11">/*
            Check first for classes loaded through this loader.
            The VM will not allow a class to be loaded twice.
        */</jtok>
<jtok eid="6" type="primary_name_ref" span="94:9:94:10">c</jtok>
<jtok eid="6" type="method_call" span="94:13:94:28">findLoadedClass</jtok>
<jtok eid="6" type="primary_name_ref" span="94:29:94:33">name</jtok>
<jtok eid="6" type="primary_name_ref" span="95:14:95:15">c</jtok>
<jtok eid="6" type="primary_name_ref" span="96:20:96:21">c</jtok>
<jtok eid="6" type="line_comment" span="98:1:98:40">// This is copied from ClassManagerImpl</jtok>
<jtok eid="6" type="line_comment" span="99:1:99:55">// We should refactor this somehow if it sticks around</jtok>
<jtok eid="6" type="primary_name_ref" span="100:14:100:18">name</jtok>
<jtok eid="6" type="method_call" span="100:19:100:29">startsWith</jtok>
<jtok eid="6" type="primary_name_ref" span="100:31:100:47">ClassManagerImpl</jtok>
<jtok eid="6" type="qualified_name_ref" span="100:48:100:59">BSH_PACKAGE</jtok>
<jtok eid="6" type="primary_name_ref" span="102:24:102:27">org</jtok>
<jtok eid="6" type="qualified_name_ref" span="102:28:102:31">gjt</jtok>
<jtok eid="6" type="qualified_name_ref" span="102:32:102:34">sp</jtok>
<jtok eid="6" type="qualified_name_ref" span="102:35:102:40">jedit</jtok>
<jtok eid="6" type="qualified_name_ref" span="102:41:102:44">bsh</jtok>
<jtok eid="6" type="qualified_name_ref" span="102:45:102:56">Interpreter</jtok>
<jtok eid="6" type="method_call" span="102:63:102:77">getClassLoader</jtok>
<jtok eid="6" type="method_call" span="102:80:102:89">loadClass</jtok>
<jtok eid="6" type="primary_name_ref" span="102:91:102:95">name</jtok>
<jtok eid="6" type="class_or_interface_ref" span="103:23:103:45">ClassNotFoundException</jtok>
<jtok eid="6" type="local_variable_name" span="103:46:103:47">e</jtok>
<jtok eid="6" type="block_comment" span="105:9:108:11">/*
            Try to find the class using our classloading mechanism.
            Note: I wish we didn't have to catch the exception here... slow
        */</jtok>
<jtok eid="6" type="primary_name_ref" span="110:13:110:14">c</jtok>
<jtok eid="6" type="method_call" span="110:17:110:26">findClass</jtok>
<jtok eid="6" type="primary_name_ref" span="110:28:110:32">name</jtok>
<jtok eid="6" type="class_or_interface_ref" span="111:19:111:41">ClassNotFoundException</jtok>
<jtok eid="6" type="local_variable_name" span="111:42:111:43">e</jtok>
<jtok eid="6" type="primary_name_ref" span="113:14:113:15">c</jtok>
<jtok eid="6" type="constructor_call" span="114:23:114:45">ClassNotFoundException</jtok>
<jtok eid="6" type="string_literal" span="114:46:114:64">"here in loaClass"</jtok>
<jtok eid="6" type="primary_name_ref" span="116:14:116:21">resolve</jtok>
<jtok eid="6" type="method_call" span="117:13:117:25">resolveClass</jtok>
<jtok eid="6" type="primary_name_ref" span="117:27:117:28">c</jtok>
<jtok eid="6" type="primary_name_ref" span="119:16:119:17">c</jtok>
<jtok eid="1" type="block_comment" span="122:5:129:7">/**
        Find the correct source for the class...

        Try designated loader if any
        Try our URLClassLoader paths if any
        Try base loader if any
        Try system ???
    */</jtok>
<jtok eid="1" type="line_comment" span="130:5:130:47">// add some caching for not found classes?</jtok>
<jtok eid="7" type="class_or_interface_ref" span="131:15:131:20">Class</jtok>
<jtok eid="7" type="method_name" span="131:21:131:30">findClass</jtok>
<jtok eid="7" type="parameter_type" span="131:32:131:38">String</jtok>
<jtok eid="7" type="parameter_name" span="131:39:131:43">name</jtok>
<jtok eid="7" type="throws" span="132:16:132:38">ClassNotFoundException</jtok>
<jtok eid="7" type="line_comment" span="134:9:134:68">// Deal with this cast somehow... maybe have this class use</jtok>
<jtok eid="7" type="line_comment" span="135:9:135:43">// ClassManagerImpl type directly.</jtok>
<jtok eid="7" type="line_comment" span="136:9:136:80">// Don't add the method to BshClassManager... it's really an impl thing</jtok>
<jtok eid="7" type="class_or_interface_ref" span="137:9:137:25">ClassManagerImpl</jtok>
<jtok eid="7" type="local_variable_name" span="137:26:137:29">bcm</jtok>
<jtok eid="7" type="class_or_interface_ref" span="137:33:137:49">ClassManagerImpl</jtok>
<jtok eid="7" type="method_call" span="137:50:137:65">getClassManager</jtok>
<jtok eid="7" type="line_comment" span="139:9:139:66">// Should we try to load the class ourselves or delegate?</jtok>
<jtok eid="7" type="line_comment" span="140:9:140:35">// look for overlay loader</jtok>
<jtok eid="7" type="line_comment" span="142:9:142:68">// Deal with this cast somehow... maybe have this class use</jtok>
<jtok eid="7" type="line_comment" span="143:9:143:43">// ClassManagerImpl type directly.</jtok>
<jtok eid="7" type="line_comment" span="144:9:144:80">// Don't add the method to BshClassManager... it's really an impl thing</jtok>
<jtok eid="7" type="class_or_interface_ref" span="145:9:145:20">ClassLoader</jtok>
<jtok eid="7" type="local_variable_name" span="145:21:145:23">cl</jtok>
<jtok eid="7" type="primary_name_ref" span="145:26:145:29">bcm</jtok>
<jtok eid="7" type="method_call" span="145:30:145:47">getLoaderForClass</jtok>
<jtok eid="7" type="primary_name_ref" span="145:49:145:53">name</jtok>
<jtok eid="7" type="class_or_interface_ref" span="147:9:147:14">Class</jtok>
<jtok eid="7" type="local_variable_name" span="147:15:147:16">c</jtok>
<jtok eid="7" type="line_comment" span="149:9:149:74">// If there is a designated loader and it's not us delegate to it</jtok>
<jtok eid="7" type="primary_name_ref" span="150:14:150:16">cl</jtok>
<jtok eid="7" type="primary_name_ref" span="150:28:150:30">cl</jtok>
<jtok eid="7" type="primary_name_ref" span="152:24:152:26">cl</jtok>
<jtok eid="7" type="method_call" span="152:27:152:36">loadClass</jtok>
<jtok eid="7" type="primary_name_ref" span="152:38:152:42">name</jtok>
<jtok eid="7" type="class_or_interface_ref" span="153:23:153:45">ClassNotFoundException</jtok>
<jtok eid="7" type="local_variable_name" span="153:46:153:47">e</jtok>
<jtok eid="7" type="constructor_call" span="154:27:154:49">ClassNotFoundException</jtok>
<jtok eid="7" type="string_literal" span="155:21:155:63">"Designated loader could not find class: "</jtok>
<jtok eid="7" type="primary_name_ref" span="155:64:155:65">e</jtok>
<jtok eid="7" type="line_comment" span="158:9:158:56">// Let URLClassLoader try any paths it may have</jtok>
<jtok eid="7" type="method_call" span="159:14:159:21">getURLs</jtok>
<jtok eid="7" type="qualified_name_ref" span="159:24:159:30">length</jtok>
<jtok eid="7" type="method_call" span="161:30:161:39">findClass</jtok>
<jtok eid="7" type="primary_name_ref" span="161:40:161:44">name</jtok>
<jtok eid="7" type="class_or_interface_ref" span="162:23:162:45">ClassNotFoundException</jtok>
<jtok eid="7" type="local_variable_name" span="162:46:162:47">e</jtok>
<jtok eid="7" type="line_comment" span="163:17:163:38">//System.out.println(</jtok>
<jtok eid="7" type="line_comment" span="164:17:164:71">//	"base loader here caught class not found: "+name );</jtok>
<jtok eid="7" type="line_comment" span="168:9:168:67">// If there is a baseLoader and it's not us delegate to it</jtok>
<jtok eid="7" type="primary_name_ref" span="169:9:169:11">cl</jtok>
<jtok eid="7" type="primary_name_ref" span="169:14:169:17">bcm</jtok>
<jtok eid="7" type="method_call" span="169:18:169:31">getBaseLoader</jtok>
<jtok eid="7" type="primary_name_ref" span="171:14:171:16">cl</jtok>
<jtok eid="7" type="primary_name_ref" span="171:28:171:30">cl</jtok>
<jtok eid="7" type="primary_name_ref" span="173:24:173:26">cl</jtok>
<jtok eid="7" type="method_call" span="173:27:173:36">loadClass</jtok>
<jtok eid="7" type="primary_name_ref" span="173:38:173:42">name</jtok>
<jtok eid="7" type="class_or_interface_ref" span="174:23:174:45">ClassNotFoundException</jtok>
<jtok eid="7" type="local_variable_name" span="174:46:174:47">e</jtok>
<jtok eid="7" type="line_comment" span="176:9:176:29">// Try system loader</jtok>
<jtok eid="7" type="primary_name_ref" span="177:16:177:19">bcm</jtok>
<jtok eid="7" type="method_call" span="177:20:177:37">plainClassForName</jtok>
<jtok eid="7" type="primary_name_ref" span="177:39:177:43">name</jtok>
<jtok eid="1" type="block_comment" span="180:5:192:7">/*
        The superclass does something like this

        c = findLoadedClass(name);
        if null
            try
                if parent not null
                    c = parent.loadClass(name, false);
                else
                    c = findBootstrapClass(name);
            catch ClassNotFoundException
                c = findClass(name);
    */</jtok>
<jtok eid="8" type="class_or_interface_ref" span="194:5:194:20">BshClassManager</jtok>
<jtok eid="8" type="method_name" span="194:21:194:36">getClassManager</jtok>
<jtok eid="8" type="primary_name_ref" span="194:48:194:60">classManager</jtok>
</jdoc>