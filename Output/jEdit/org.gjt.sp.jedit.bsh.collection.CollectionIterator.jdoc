<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.collection.CollectionIterator" jls="java5">
<jent id="0" type="file" span="0:0:86:2">Source/jEdit/org/gjt/sp/jedit/bsh/collection/CollectionIterator.java</jent>
<jent id="1" pid="0" type="class" span="15:1:86:1">org.gjt.sp.jedit.bsh.collection.CollectionIterator</jent>
<jent id="2" pid="1" type="method" span="29:5:31:5">org.gjt.sp.jedit.bsh.collection.CollectionIterator.CollectionIterator(Object)</jent>
<jent id="3" pid="1" type="method" span="46:5:66:5">org.gjt.sp.jedit.bsh.collection.CollectionIterator.createIterator(Object)</jent>
<jent id="4" pid="1" type="method" span="73:5:75:5">org.gjt.sp.jedit.bsh.collection.CollectionIterator.next()</jent>
<jent id="5" pid="1" type="method" span="83:5:85:5">org.gjt.sp.jedit.bsh.collection.CollectionIterator.hasNext()</jent>
<jtok eid="0" type="line_comment" span="5:1:5:24">//import java.util.Map;</jtok>
<jtok eid="0" type="block_comment" span="7:1:14:4">/**
 *	This is the implementation of:
 *	BshIterator - a dynamically loaded extension that supports the collections
 *	API supported by JDK1.2 and greater.
 *
 *	@author Daniel Leuck
 *	@author Pat Niemeyer
 */</jtok>
<jtok eid="1" type="class_name" span="15:14:15:32">CollectionIterator</jtok>
<jtok eid="1" type="class_or_interface_ref" span="15:44:15:47">org</jtok>
<jtok eid="1" type="class_or_interface_ref" span="15:48:15:51">gjt</jtok>
<jtok eid="1" type="class_or_interface_ref" span="15:52:15:54">sp</jtok>
<jtok eid="1" type="class_or_interface_ref" span="15:55:15:60">jedit</jtok>
<jtok eid="1" type="class_or_interface_ref" span="15:61:15:64">bsh</jtok>
<jtok eid="1" type="class_or_interface_ref" span="15:65:15:76">BshIterator</jtok>
<jtok eid="1" type="class_or_interface_ref" span="17:13:17:21">Iterator</jtok>
<jtok eid="1" type="field_name" span="17:22:17:30">iterator</jtok>
<jtok eid="1" type="block_comment" span="19:5:28:8">/**
     * Construct a basic CollectionIterator
     *
     * @param iterateOverMe The object over which we are iterating
     *
     * @throws java.lang.IllegalArgumentException If the argument is not a
     * supported (i.e. iterable) type.
     *
     * @throws java.lang.NullPointerException If the argument is null
     */</jtok>
<jtok eid="2" type="method_name" span="29:12:29:30">CollectionIterator</jtok>
<jtok eid="2" type="parameter_type" span="29:31:29:37">Object</jtok>
<jtok eid="2" type="parameter_name" span="29:38:29:51">iterateOverMe</jtok>
<jtok eid="2" type="primary_name_ref" span="30:9:30:17">iterator</jtok>
<jtok eid="2" type="method_call" span="30:20:30:34">createIterator</jtok>
<jtok eid="2" type="primary_name_ref" span="30:35:30:48">iterateOverMe</jtok>
<jtok eid="1" type="block_comment" span="33:5:45:8">/**
     * Create an iterator over the given object
     *
     * @param iterateOverMe Object of type Iterator, Collection, or types
     * supported by CollectionManager.BasicBshIterator
     *
     * @return an Iterator
     *
     * @throws java.lang.IllegalArgumentException If the argument is not a
     * supported (i.e. iterable) type.
     *
     * @throws java.lang.NullPointerException If the argument is null
     */</jtok>
<jtok eid="3" type="class_or_interface_ref" span="46:15:46:23">Iterator</jtok>
<jtok eid="3" type="method_name" span="46:24:46:38">createIterator</jtok>
<jtok eid="3" type="parameter_type" span="46:39:46:45">Object</jtok>
<jtok eid="3" type="parameter_name" span="46:46:46:59">iterateOverMe</jtok>
<jtok eid="3" type="primary_name_ref" span="48:13:48:26">iterateOverMe</jtok>
<jtok eid="3" type="constructor_call" span="49:23:49:43">NullPointerException</jtok>
<jtok eid="3" type="string_literal" span="49:44:49:73">"Object arguments passed to "</jtok>
<jtok eid="3" type="string_literal" span="50:17:50:69">"the CollectionIterator constructor cannot be null."</jtok>
<jtok eid="3" type="primary_name_ref" span="52:13:52:26">iterateOverMe</jtok>
<jtok eid="3" type="class_or_interface_ref" span="52:38:52:46">Iterator</jtok>
<jtok eid="3" type="class_or_interface_ref" span="53:21:53:29">Iterator</jtok>
<jtok eid="3" type="primary_name_ref" span="53:30:53:43">iterateOverMe</jtok>
<jtok eid="3" type="primary_name_ref" span="55:13:55:26">iterateOverMe</jtok>
<jtok eid="3" type="class_or_interface_ref" span="55:38:55:48">Collection</jtok>
<jtok eid="3" type="class_or_interface_ref" span="56:22:56:32">Collection</jtok>
<jtok eid="3" type="primary_name_ref" span="56:33:56:46">iterateOverMe</jtok>
<jtok eid="3" type="method_call" span="56:48:56:56">iterator</jtok>
<jtok eid="3" type="block_comment" span="58:9:62:11">/*
        Should we be able to iterate over maps?
        if (iterateOverMe instanceof Map)
            return ((Map)iterateOverMe).entrySet().iterator();
        */</jtok>
<jtok eid="3" type="constructor_call" span="64:19:64:43">IllegalArgumentException</jtok>
<jtok eid="3" type="string_literal" span="65:13:65:47">"Cannot enumerate object of type "</jtok>
<jtok eid="3" type="primary_name_ref" span="65:48:65:61">iterateOverMe</jtok>
<jtok eid="3" type="method_call" span="65:62:65:70">getClass</jtok>
<jtok eid="1" type="block_comment" span="68:5:72:8">/**
     * Fetch the next object in the iteration
     *
     * @return The next object
     */</jtok>
<jtok eid="4" type="class_or_interface_ref" span="73:12:73:18">Object</jtok>
<jtok eid="4" type="method_name" span="73:19:73:23">next</jtok>
<jtok eid="4" type="primary_name_ref" span="74:16:74:24">iterator</jtok>
<jtok eid="4" type="method_call" span="74:25:74:29">next</jtok>
<jtok eid="1" type="block_comment" span="77:5:82:8">/**
     * Returns true if and only if there are more objects available
     * via the &lt;code&gt;next()&lt;/code&gt; method
     *
     * @return The next object
     */</jtok>
<jtok eid="5" type="method_name" span="83:20:83:27">hasNext</jtok>
<jtok eid="5" type="primary_name_ref" span="84:16:84:24">iterator</jtok>
<jtok eid="5" type="method_call" span="84:25:84:32">hasNext</jtok>
</jdoc>