<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.bsh.org.objectweb.asm.Label" jls="java5">
<jent id="0" type="file" span="0:0:279:2">Source/jEdit/org/gjt/sp/jedit/bsh/org/objectweb/asm/Label.java</jent>
<jent id="1" pid="0" type="class" span="32:1:279:1">org.gjt.sp.jedit.bsh.org.objectweb.asm.Label</jent>
<jent id="2" pid="1" type="method" span="127:3:128:3">org.gjt.sp.jedit.bsh.org.objectweb.asm.Label.Label()</jent>
<jent id="3" pid="1" type="method" span="150:3:178:3">org.gjt.sp.jedit.bsh.org.objectweb.asm.Label.put(CodeWriter,ByteVector,int,boolean)</jent>
<jent id="4" pid="1" type="method" span="192:3:206:3">org.gjt.sp.jedit.bsh.org.objectweb.asm.Label.addReference(int,int)</jent>
<jent id="5" pid="1" type="method" span="227:3:278:3">org.gjt.sp.jedit.bsh.org.objectweb.asm.Label.resolve(CodeWriter,int,byte[])</jent>
<jtok eid="0" type="block_comment" span="1:1:23:4">/***
 * ASM: a very small and fast Java bytecode manipulation framework
 * Copyright (C) 2000 INRIA, France Telecom
 * Copyright (C) 2002 France Telecom
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Contact: Eric.Bruneton@rd.francetelecom.com
 *
 * Author: Eric Bruneton
 */</jtok>
<jtok eid="0" type="block_comment" span="27:1:30:4">/**
 * A label represents a position in the bytecode of a method. Labels are used
 * for jump, goto, and switch instructions, and for try catch blocks.
 */</jtok>
<jtok eid="1" type="class_name" span="32:14:32:19">Label</jtok>
<jtok eid="1" type="block_comment" span="34:3:36:6">/**
   * The code writer to which this label belongs, or &lt;tt&gt;null&lt;/tt&gt; if unknown.
   */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="38:3:38:13">CodeWriter</jtok>
<jtok eid="1" type="field_name" span="38:14:38:19">owner</jtok>
<jtok eid="1" type="block_comment" span="40:3:42:6">/**
   * Indicates if the position of this label is known.
   */</jtok>
<jtok eid="1" type="field_name" span="44:11:44:19">resolved</jtok>
<jtok eid="1" type="block_comment" span="46:3:48:6">/**
   * The position of this label in the code, if known.
   */</jtok>
<jtok eid="1" type="field_name" span="50:7:50:15">position</jtok>
<jtok eid="1" type="block_comment" span="52:3:54:6">/**
   * Number of forward references to this label, times two.
   */</jtok>
<jtok eid="1" type="field_name" span="56:15:56:29">referenceCount</jtok>
<jtok eid="1" type="block_comment" span="58:3:66:6">/**
   * Informations about forward references. Each forward reference is described
   * by two consecutive integers in this array: the first one is the position
   * of the first byte of the bytecode instruction that contains the forward
   * reference, while the second is the position of the first byte of the
   * forward reference itself. In fact the sign of the first integer indicates
   * if this reference uses 2 or 4 bytes, and its absolute value gives the
   * position of the bytecode instruction.
   */</jtok>
<jtok eid="1" type="field_name" span="68:17:68:35">srcAndRefPositions</jtok>
<jtok eid="1" type="line_comment" span="70:3:70:80">// --------------------------------------------------------------------------</jtok>
<jtok eid="1" type="line_comment" span="71:3:71:79">// Fields for the control flow graph analysis algorithm (used to compute the</jtok>
<jtok eid="1" type="line_comment" span="72:3:72:76">// maximum stack size). A control flow graph contains one node per "basic</jtok>
<jtok eid="1" type="line_comment" span="73:3:73:80">// block", and one edge per "jump" from one basic block to another. Each node</jtok>
<jtok eid="1" type="line_comment" span="74:3:74:70">// (i.e., each basic block) is represented by the Label object that</jtok>
<jtok eid="1" type="line_comment" span="75:3:75:78">// corresponds to the first instruction of this basic block. Each node also</jtok>
<jtok eid="1" type="line_comment" span="76:3:76:77">// stores the list of it successors in the graph, as a linked list of Edge</jtok>
<jtok eid="1" type="line_comment" span="77:3:77:14">// objects.</jtok>
<jtok eid="1" type="line_comment" span="78:3:78:80">// --------------------------------------------------------------------------</jtok>
<jtok eid="1" type="block_comment" span="80:3:84:6">/**
   * The stack size at the beginning of this basic block.
   * This size is initially unknown. It is computed by the control flow
   * analysis algorithm (see {@link CodeWriter#visitMaxs visitMaxs}).
   */</jtok>
<jtok eid="1" type="field_name" span="86:7:86:21">beginStackSize</jtok>
<jtok eid="1" type="block_comment" span="88:3:93:6">/**
   * The (relative) maximum stack size corresponding to this basic block. This
   * size is relative to the stack size at the beginning of the basic block,
   * i.e., the true maximum stack size is equal to {@link #beginStackSize
   * beginStackSize} + {@link #maxStackSize maxStackSize}.
   */</jtok>
<jtok eid="1" type="field_name" span="95:7:95:19">maxStackSize</jtok>
<jtok eid="1" type="block_comment" span="97:3:101:6">/**
   * The successors of this node in the control flow graph. These successors
   * are stored in a linked list of {@link Edge Edge} objects, linked to each
   * other by their {@link Edge#next} field.
   */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="103:3:103:7">Edge</jtok>
<jtok eid="1" type="field_name" span="103:8:103:18">successors</jtok>
<jtok eid="1" type="block_comment" span="105:3:108:6">/**
   * The next basic block in the basic block stack.
   * See {@link CodeWriter#visitMaxs visitMaxs}.
   */</jtok>
<jtok eid="1" type="class_or_interface_ref" span="110:3:110:8">Label</jtok>
<jtok eid="1" type="field_name" span="110:9:110:13">next</jtok>
<jtok eid="1" type="block_comment" span="112:3:115:6">/**
   * &lt;tt&gt;true&lt;/tt&gt; if this basic block has been pushed in the basic block stack.
   * See {@link CodeWriter#visitMaxs visitMaxs}.
   */</jtok>
<jtok eid="1" type="field_name" span="117:11:117:17">pushed</jtok>
<jtok eid="1" type="line_comment" span="119:3:119:80">// --------------------------------------------------------------------------</jtok>
<jtok eid="1" type="line_comment" span="120:3:120:17">// Constructor</jtok>
<jtok eid="1" type="line_comment" span="121:3:121:80">// --------------------------------------------------------------------------</jtok>
<jtok eid="1" type="block_comment" span="123:3:125:6">/**
   * Constructs a new label.
   */</jtok>
<jtok eid="2" type="method_name" span="127:10:127:15">Label</jtok>
<jtok eid="1" type="line_comment" span="130:3:130:80">// --------------------------------------------------------------------------</jtok>
<jtok eid="1" type="line_comment" span="131:3:131:65">// Methods to compute offsets and to manage forward references</jtok>
<jtok eid="1" type="line_comment" span="132:3:132:80">// --------------------------------------------------------------------------</jtok>
<jtok eid="1" type="block_comment" span="134:3:148:6">/**
   * Puts a reference to this label in the bytecode of a method. If the position
   * of the label is known, the offset is computed and written directly.
   * Otherwise, a null offset is written and a new forward reference is declared
   * for this label.
   *
   * @param owner the code writer that calls this method.
   * @param out the bytecode of the method.
   * @param source the position of first byte of the bytecode instruction that
   *      contains this label.
   * @param wideOffset &lt;tt&gt;true&lt;/tt&gt; if the reference must be stored in 4 bytes,
   *      or &lt;tt&gt;false&lt;/tt&gt; if it must be stored with 2 bytes.
   * @throws IllegalArgumentException if this label has not been created by the
   *      given code writer.
   */</jtok>
<jtok eid="3" type="method_name" span="150:8:150:11">put</jtok>
<jtok eid="3" type="parameter_type" span="151:11:151:21">CodeWriter</jtok>
<jtok eid="3" type="parameter_name" span="151:22:151:27">owner</jtok>
<jtok eid="3" type="parameter_type" span="152:11:152:21">ByteVector</jtok>
<jtok eid="3" type="parameter_name" span="152:22:152:25">out</jtok>
<jtok eid="3" type="parameter_name" span="153:15:153:21">source</jtok>
<jtok eid="3" type="parameter_name" span="154:19:154:29">wideOffset</jtok>
<jtok eid="3" type="primary_name_ref" span="156:9:156:19">CodeWriter</jtok>
<jtok eid="3" type="qualified_name_ref" span="156:20:156:25">CHECK</jtok>
<jtok eid="3" type="qualified_name_ref" span="157:16:157:21">owner</jtok>
<jtok eid="3" type="qualified_name_ref" span="158:14:158:19">owner</jtok>
<jtok eid="3" type="primary_name_ref" span="158:22:158:27">owner</jtok>
<jtok eid="3" type="qualified_name_ref" span="159:23:159:28">owner</jtok>
<jtok eid="3" type="primary_name_ref" span="159:32:159:37">owner</jtok>
<jtok eid="3" type="constructor_call" span="160:19:160:43">IllegalArgumentException</jtok>
<jtok eid="3" type="primary_name_ref" span="163:9:163:17">resolved</jtok>
<jtok eid="3" type="primary_name_ref" span="164:11:164:21">wideOffset</jtok>
<jtok eid="3" type="primary_name_ref" span="165:9:165:12">out</jtok>
<jtok eid="3" type="method_call" span="165:13:165:17">put4</jtok>
<jtok eid="3" type="primary_name_ref" span="165:18:165:26">position</jtok>
<jtok eid="3" type="primary_name_ref" span="165:29:165:35">source</jtok>
<jtok eid="3" type="primary_name_ref" span="167:9:167:12">out</jtok>
<jtok eid="3" type="method_call" span="167:13:167:17">put2</jtok>
<jtok eid="3" type="primary_name_ref" span="167:18:167:26">position</jtok>
<jtok eid="3" type="primary_name_ref" span="167:29:167:35">source</jtok>
<jtok eid="3" type="primary_name_ref" span="170:11:170:21">wideOffset</jtok>
<jtok eid="3" type="method_call" span="171:9:171:21">addReference</jtok>
<jtok eid="3" type="primary_name_ref" span="171:27:171:33">source</jtok>
<jtok eid="3" type="primary_name_ref" span="171:35:171:38">out</jtok>
<jtok eid="3" type="qualified_name_ref" span="171:39:171:45">length</jtok>
<jtok eid="3" type="primary_name_ref" span="172:9:172:12">out</jtok>
<jtok eid="3" type="method_call" span="172:13:172:17">put4</jtok>
<jtok eid="3" type="method_call" span="174:9:174:21">addReference</jtok>
<jtok eid="3" type="primary_name_ref" span="174:22:174:28">source</jtok>
<jtok eid="3" type="primary_name_ref" span="174:30:174:33">out</jtok>
<jtok eid="3" type="qualified_name_ref" span="174:34:174:40">length</jtok>
<jtok eid="3" type="primary_name_ref" span="175:9:175:12">out</jtok>
<jtok eid="3" type="method_call" span="175:13:175:17">put2</jtok>
<jtok eid="1" type="block_comment" span="180:3:190:6">/**
   * Adds a forward reference to this label. This method must be called only for
   * a true forward reference, i.e. only if this label is not resolved yet. For
   * backward references, the offset of the reference can be, and must be,
   * computed and stored directly.
   *
   * @param sourcePosition the position of the referencing instruction. This
   *      position will be used to compute the offset of this forward reference.
   * @param referencePosition the position where the offset for this forward
   *      reference must be stored.
   */</jtok>
<jtok eid="4" type="method_name" span="192:16:192:28">addReference</jtok>
<jtok eid="4" type="parameter_name" span="193:15:193:29">sourcePosition</jtok>
<jtok eid="4" type="parameter_name" span="194:15:194:32">referencePosition</jtok>
<jtok eid="4" type="primary_name_ref" span="196:9:196:27">srcAndRefPositions</jtok>
<jtok eid="4" type="primary_name_ref" span="197:7:197:25">srcAndRefPositions</jtok>
<jtok eid="4" type="primary_name_ref" span="199:9:199:23">referenceCount</jtok>
<jtok eid="4" type="primary_name_ref" span="199:27:199:45">srcAndRefPositions</jtok>
<jtok eid="4" type="qualified_name_ref" span="199:46:199:52">length</jtok>
<jtok eid="4" type="local_variable_name" span="200:13:200:14">a</jtok>
<jtok eid="4" type="primary_name_ref" span="200:25:200:43">srcAndRefPositions</jtok>
<jtok eid="4" type="qualified_name_ref" span="200:44:200:50">length</jtok>
<jtok eid="4" type="primary_name_ref" span="201:7:201:13">System</jtok>
<jtok eid="4" type="method_call" span="201:14:201:23">arraycopy</jtok>
<jtok eid="4" type="primary_name_ref" span="201:24:201:42">srcAndRefPositions</jtok>
<jtok eid="4" type="primary_name_ref" span="201:47:201:48">a</jtok>
<jtok eid="4" type="primary_name_ref" span="201:53:201:71">srcAndRefPositions</jtok>
<jtok eid="4" type="qualified_name_ref" span="201:72:201:78">length</jtok>
<jtok eid="4" type="primary_name_ref" span="202:7:202:25">srcAndRefPositions</jtok>
<jtok eid="4" type="primary_name_ref" span="202:28:202:29">a</jtok>
<jtok eid="4" type="primary_name_ref" span="204:5:204:23">srcAndRefPositions</jtok>
<jtok eid="4" type="primary_name_ref" span="204:24:204:38">referenceCount</jtok>
<jtok eid="4" type="primary_name_ref" span="204:44:204:58">sourcePosition</jtok>
<jtok eid="4" type="primary_name_ref" span="205:5:205:23">srcAndRefPositions</jtok>
<jtok eid="4" type="primary_name_ref" span="205:24:205:38">referenceCount</jtok>
<jtok eid="4" type="primary_name_ref" span="205:44:205:61">referencePosition</jtok>
<jtok eid="1" type="block_comment" span="208:3:225:6">/**
   * Resolves all forward references to this label. This method must be called
   * when this label is added to the bytecode of the method, i.e. when its
   * position becomes known. This method fills in the blanks that where left in
   * the bytecode by each forward reference previously added to this label.
   *
   * @param owner the code writer that calls this method.
   * @param position the position of this label in the bytecode.
   * @param data the bytecode of the method.
   * @return &lt;tt&gt;true&lt;/tt&gt; if a blank that was left for this label was to small
   *      to store the offset. In such a case the corresponding jump instruction
   *      is replaced with a pseudo instruction (using unused opcodes) using an
   *      unsigned two bytes offset. These pseudo instructions will need to be
   *      replaced with true instructions with wider offsets (4 bytes instead of
   *      2). This is done in {@link CodeWriter#resizeInstructions}.
   * @throws IllegalArgumentException if this label has already been resolved,
   *      or if it has not been created by the given code writer.
   */</jtok>
<jtok eid="5" type="method_name" span="227:11:227:18">resolve</jtok>
<jtok eid="5" type="parameter_type" span="228:11:228:21">CodeWriter</jtok>
<jtok eid="5" type="parameter_name" span="228:22:228:27">owner</jtok>
<jtok eid="5" type="parameter_name" span="229:15:229:23">position</jtok>
<jtok eid="5" type="parameter_name" span="230:18:230:22">data</jtok>
<jtok eid="5" type="primary_name_ref" span="232:9:232:19">CodeWriter</jtok>
<jtok eid="5" type="qualified_name_ref" span="232:20:232:25">CHECK</jtok>
<jtok eid="5" type="qualified_name_ref" span="233:16:233:21">owner</jtok>
<jtok eid="5" type="qualified_name_ref" span="234:14:234:19">owner</jtok>
<jtok eid="5" type="primary_name_ref" span="234:22:234:27">owner</jtok>
<jtok eid="5" type="primary_name_ref" span="236:11:236:19">resolved</jtok>
<jtok eid="5" type="qualified_name_ref" span="236:28:236:33">owner</jtok>
<jtok eid="5" type="primary_name_ref" span="236:37:236:42">owner</jtok>
<jtok eid="5" type="constructor_call" span="237:19:237:43">IllegalArgumentException</jtok>
<jtok eid="5" type="local_variable_name" span="240:13:240:23">needUpdate</jtok>
<jtok eid="5" type="qualified_name_ref" span="241:10:241:18">resolved</jtok>
<jtok eid="5" type="qualified_name_ref" span="242:10:242:18">position</jtok>
<jtok eid="5" type="primary_name_ref" span="242:21:242:29">position</jtok>
<jtok eid="5" type="local_variable_name" span="243:9:243:10">i</jtok>
<jtok eid="5" type="primary_name_ref" span="244:12:244:13">i</jtok>
<jtok eid="5" type="primary_name_ref" span="244:16:244:30">referenceCount</jtok>
<jtok eid="5" type="local_variable_name" span="245:11:245:17">source</jtok>
<jtok eid="5" type="primary_name_ref" span="245:20:245:38">srcAndRefPositions</jtok>
<jtok eid="5" type="primary_name_ref" span="245:39:245:40">i</jtok>
<jtok eid="5" type="local_variable_name" span="246:11:246:20">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="246:23:246:41">srcAndRefPositions</jtok>
<jtok eid="5" type="primary_name_ref" span="246:42:246:43">i</jtok>
<jtok eid="5" type="local_variable_name" span="247:11:247:17">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="248:11:248:17">source</jtok>
<jtok eid="5" type="primary_name_ref" span="249:9:249:15">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="249:18:249:26">position</jtok>
<jtok eid="5" type="primary_name_ref" span="249:29:249:35">source</jtok>
<jtok eid="5" type="primary_name_ref" span="250:13:250:19">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="250:22:250:27">Short</jtok>
<jtok eid="5" type="qualified_name_ref" span="250:28:250:37">MIN_VALUE</jtok>
<jtok eid="5" type="primary_name_ref" span="250:41:250:47">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="250:50:250:55">Short</jtok>
<jtok eid="5" type="qualified_name_ref" span="250:56:250:65">MAX_VALUE</jtok>
<jtok eid="5" type="line_comment" span="251:11:251:80">// changes the opcode of the jump instruction, in order to be able to</jtok>
<jtok eid="5" type="line_comment" span="252:11:252:73">// find it later (see resizeInstructions in CodeWriter). These</jtok>
<jtok eid="5" type="line_comment" span="253:11:253:79">// temporary opcodes are similar to jump instruction opcodes, except</jtok>
<jtok eid="5" type="line_comment" span="254:11:254:78">// that the 2 bytes offset is unsigned (and can therefore represent</jtok>
<jtok eid="5" type="line_comment" span="255:11:255:77">// values from 0 to 65535, which is sufficient since the size of a</jtok>
<jtok eid="5" type="line_comment" span="256:11:256:48">// method is limited to 65535 bytes).</jtok>
<jtok eid="5" type="local_variable_name" span="257:15:257:21">opcode</jtok>
<jtok eid="5" type="primary_name_ref" span="257:24:257:28">data</jtok>
<jtok eid="5" type="primary_name_ref" span="257:29:257:38">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="258:15:258:21">opcode</jtok>
<jtok eid="5" type="primary_name_ref" span="258:25:258:34">Constants</jtok>
<jtok eid="5" type="qualified_name_ref" span="258:35:258:38">JSR</jtok>
<jtok eid="5" type="line_comment" span="259:13:259:70">// changes IFEQ ... JSR to opcodes 202 to 217 (inclusive)</jtok>
<jtok eid="5" type="primary_name_ref" span="260:13:260:17">data</jtok>
<jtok eid="5" type="primary_name_ref" span="260:18:260:27">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="260:42:260:48">opcode</jtok>
<jtok eid="5" type="line_comment" span="262:13:262:79">// changes IFNULL and IFNONNULL to opcodes 218 and 219 (inclusive)</jtok>
<jtok eid="5" type="primary_name_ref" span="263:13:263:17">data</jtok>
<jtok eid="5" type="primary_name_ref" span="263:18:263:27">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="263:42:263:48">opcode</jtok>
<jtok eid="5" type="primary_name_ref" span="265:11:265:21">needUpdate</jtok>
<jtok eid="5" type="primary_name_ref" span="267:9:267:13">data</jtok>
<jtok eid="5" type="primary_name_ref" span="267:14:267:23">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="267:36:267:42">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="268:9:268:13">data</jtok>
<jtok eid="5" type="primary_name_ref" span="268:14:268:23">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="268:33:268:39">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="270:9:270:15">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="270:18:270:26">position</jtok>
<jtok eid="5" type="primary_name_ref" span="270:29:270:35">source</jtok>
<jtok eid="5" type="primary_name_ref" span="271:9:271:13">data</jtok>
<jtok eid="5" type="primary_name_ref" span="271:14:271:23">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="271:36:271:42">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="272:9:272:13">data</jtok>
<jtok eid="5" type="primary_name_ref" span="272:14:272:23">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="272:36:272:42">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="273:9:273:13">data</jtok>
<jtok eid="5" type="primary_name_ref" span="273:14:273:23">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="273:36:273:42">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="274:9:274:13">data</jtok>
<jtok eid="5" type="primary_name_ref" span="274:14:274:23">reference</jtok>
<jtok eid="5" type="primary_name_ref" span="274:33:274:39">offset</jtok>
<jtok eid="5" type="primary_name_ref" span="277:12:277:22">needUpdate</jtok>
</jdoc>