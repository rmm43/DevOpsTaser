<?xml version="1.0" encoding="utf-8"?>
<jdoc cUnit="org.gjt.sp.jedit.io.CharsetEncoding" jls="java5">
<jent id="0" type="file" span="0:0:81:2">Source/jEdit/org/gjt/sp/jedit/io/CharsetEncoding.java</jent>
<jent id="1" pid="0" type="class" span="42:1:81:1">org.gjt.sp.jedit.io.CharsetEncoding</jent>
<jent id="2" pid="1" type="method" span="45:2:48:2">org.gjt.sp.jedit.io.CharsetEncoding.CharsetEncoding(String)</jent>
<jent id="3" pid="1" type="method" span="51:2:58:2">org.gjt.sp.jedit.io.CharsetEncoding.getTextReader(InputStream)</jent>
<jent id="4" pid="1" type="method" span="60:2:65:2">org.gjt.sp.jedit.io.CharsetEncoding.getTextWriter(OutputStream)</jent>
<jent id="5" pid="1" type="method" span="67:2:75:2">org.gjt.sp.jedit.io.CharsetEncoding.getPermissiveTextReader(InputStream)</jent>
<jtok eid="0" type="block_comment" span="1:1:19:4">/*
 * :tabSize=8:indentSize=8:noTabs=false:
 * :folding=explicit:collapseFolds=1:
 *
 * Copyright (C) 2007 Kazutoshi Satoda
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */</jtok>
<jtok eid="0" type="line_comment" span="23:1:23:14">//{{{ Imports</jtok>
<jtok eid="0" type="line_comment" span="34:1:34:6">//}}}</jtok>
<jtok eid="0" type="block_comment" span="36:1:41:4">/**
 * Encodings which are provided by java.nio.charset.Charset.
 *
 * @since 4.3pre10
 * @author Kazutoshi Satoda
 */</jtok>
<jtok eid="1" type="class_name" span="42:14:42:29">CharsetEncoding</jtok>
<jtok eid="1" type="class_or_interface_ref" span="42:41:42:49">Encoding</jtok>
<jtok eid="1" type="line_comment" span="44:2:44:19">//{{{ Constructor</jtok>
<jtok eid="2" type="method_name" span="45:9:45:24">CharsetEncoding</jtok>
<jtok eid="2" type="parameter_type" span="45:25:45:31">String</jtok>
<jtok eid="2" type="parameter_name" span="45:32:45:36">name</jtok>
<jtok eid="2" type="primary_name_ref" span="47:3:47:7">body</jtok>
<jtok eid="2" type="primary_name_ref" span="47:10:47:17">Charset</jtok>
<jtok eid="2" type="method_call" span="47:18:47:25">forName</jtok>
<jtok eid="2" type="primary_name_ref" span="47:26:47:30">name</jtok>
<jtok eid="1" type="line_comment" span="48:4:48:9">//}}}</jtok>
<jtok eid="1" type="line_comment" span="50:2:50:27">//{{{ implements Encoding</jtok>
<jtok eid="3" type="class_or_interface_ref" span="51:9:51:15">Reader</jtok>
<jtok eid="3" type="method_name" span="51:16:51:29">getTextReader</jtok>
<jtok eid="3" type="parameter_type" span="51:30:51:41">InputStream</jtok>
<jtok eid="3" type="parameter_name" span="51:42:51:44">in</jtok>
<jtok eid="3" type="throws" span="51:53:51:64">IOException</jtok>
<jtok eid="3" type="line_comment" span="53:3:53:58">// Pass the decoder explicitly to report a decode error</jtok>
<jtok eid="3" type="line_comment" span="54:3:54:57">// as an exception instead of replacing with "\uFFFD".</jtok>
<jtok eid="3" type="line_comment" span="55:3:55:62">// The form "InputStreamReader(in, encoding)" seemed to use</jtok>
<jtok eid="3" type="line_comment" span="56:3:56:43">// CodingErrorAction.REPLACE internally.</jtok>
<jtok eid="3" type="constructor_call" span="57:14:57:31">InputStreamReader</jtok>
<jtok eid="3" type="primary_name_ref" span="57:32:57:34">in</jtok>
<jtok eid="3" type="primary_name_ref" span="57:36:57:40">body</jtok>
<jtok eid="3" type="method_call" span="57:41:57:51">newDecoder</jtok>
<jtok eid="4" type="class_or_interface_ref" span="60:9:60:15">Writer</jtok>
<jtok eid="4" type="method_name" span="60:16:60:29">getTextWriter</jtok>
<jtok eid="4" type="parameter_type" span="60:30:60:42">OutputStream</jtok>
<jtok eid="4" type="parameter_name" span="60:43:60:46">out</jtok>
<jtok eid="4" type="throws" span="60:55:60:66">IOException</jtok>
<jtok eid="4" type="line_comment" span="62:3:62:56">// Pass the encoder explicitly because of same reason</jtok>
<jtok eid="4" type="line_comment" span="63:3:63:25">// in getTextReader();</jtok>
<jtok eid="4" type="constructor_call" span="64:14:64:32">OutputStreamWriter</jtok>
<jtok eid="4" type="primary_name_ref" span="64:33:64:36">out</jtok>
<jtok eid="4" type="primary_name_ref" span="64:38:64:42">body</jtok>
<jtok eid="4" type="method_call" span="64:43:64:53">newEncoder</jtok>
<jtok eid="5" type="class_or_interface_ref" span="67:9:67:15">Reader</jtok>
<jtok eid="5" type="method_name" span="67:16:67:39">getPermissiveTextReader</jtok>
<jtok eid="5" type="parameter_type" span="67:40:67:51">InputStream</jtok>
<jtok eid="5" type="parameter_name" span="67:52:67:54">in</jtok>
<jtok eid="5" type="throws" span="67:63:67:74">IOException</jtok>
<jtok eid="5" type="line_comment" span="69:3:69:59">// Use REPLACE action to indicate where the coding error</jtok>
<jtok eid="5" type="line_comment" span="70:3:70:53">// happened by the replacement character "\uFFFD".</jtok>
<jtok eid="5" type="class_or_interface_ref" span="71:3:71:17">CharsetDecoder</jtok>
<jtok eid="5" type="local_variable_name" span="71:18:71:28">permissive</jtok>
<jtok eid="5" type="primary_name_ref" span="71:31:71:35">body</jtok>
<jtok eid="5" type="method_call" span="71:36:71:46">newDecoder</jtok>
<jtok eid="5" type="primary_name_ref" span="72:3:72:13">permissive</jtok>
<jtok eid="5" type="method_call" span="72:14:72:30">onMalformedInput</jtok>
<jtok eid="5" type="primary_name_ref" span="72:31:72:48">CodingErrorAction</jtok>
<jtok eid="5" type="qualified_name_ref" span="72:49:72:56">REPLACE</jtok>
<jtok eid="5" type="primary_name_ref" span="73:3:73:13">permissive</jtok>
<jtok eid="5" type="method_call" span="73:14:73:35">onUnmappableCharacter</jtok>
<jtok eid="5" type="primary_name_ref" span="73:36:73:53">CodingErrorAction</jtok>
<jtok eid="5" type="qualified_name_ref" span="73:54:73:61">REPLACE</jtok>
<jtok eid="5" type="constructor_call" span="74:14:74:31">InputStreamReader</jtok>
<jtok eid="5" type="primary_name_ref" span="74:32:74:34">in</jtok>
<jtok eid="5" type="primary_name_ref" span="74:36:74:46">permissive</jtok>
<jtok eid="1" type="line_comment" span="76:2:76:7">//}}}</jtok>
<jtok eid="1" type="line_comment" span="78:2:78:23">//{{{ Private members</jtok>
<jtok eid="1" type="class_or_interface_ref" span="79:16:79:23">Charset</jtok>
<jtok eid="1" type="field_name" span="79:24:79:28">body</jtok>
<jtok eid="1" type="line_comment" span="80:2:80:7">//}}}</jtok>
</jdoc>