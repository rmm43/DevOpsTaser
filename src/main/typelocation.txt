./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusWriter.java:                w.writeAttribute("type", syndoc.getType().toString());
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusWriter.java:        w.writeAttribute("type", t.getType().toString());
./java/edu/ua/cs/taser/syntext/preprocess/WeightTokens.java:            final TokenType ttype = token.getType();
./java/edu/ua/cs/taser/syntext/preprocess/WeightTokens.java:            if(this.key_weights.containsKey(ttype.toString()))
./java/edu/ua/cs/taser/syntext/preprocess/WeightTokens.java:				value = this.key_weights.get(ttype.toString());
./java/edu/ua/cs/taser/syntext/preprocess/WeightTokens.java:            if (ttype.isA(TokenType.METHOD_NAME)) {
./java/edu/ua/cs/taser/syntext/preprocess/WeightTokens.java:            } else if (ttype.isA(TokenType.PARAMETER_NAME)) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedDocument.java:    private final EntityType type;
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedDocument.java:    public SyntaxAnnotatedDocument(final EntityType type, final String name) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedDocument.java:        this(type, name, new LinkedList<SyntaxAnnotatedToken>());
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedDocument.java:    public SyntaxAnnotatedDocument(final EntityType type, final String name, final List<SyntaxAnnotatedToken> tokens) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedDocument.java:        this.type = type;
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedDocument.java:        return type;
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:    // private final Map<EntityType, List<Integer>> typeIndex;
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:        // this.typeIndex = new HashMap<EntityType, List<Integer>>();
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:    //     return typeIndex.keySet();
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:    // public List<SyntaxAnnotatedDocument> getDocumentsOfType(final EntityType type) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:    //     if (typeIndex.containsKey(type)) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:    //         for (Integer index : typeIndex.get(type)) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:    //         final EntityType type = syndoc.getType();
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:    //         List<Integer> indices = typeIndex.get(type);
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpus.java:    //             typeIndex.put(type, indices);
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:                int etype = e.getEventType();
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:                switch (etype) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:                        String type = se.getAttributeByName(new QName("type")).getValue();
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:                        rawTokenData = new String[] {type, weight, null};
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:                        String type = se.getAttributeByName(new QName("type")).getValue();
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:                        rawDocumentData = new String[] {type, name};
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:    private static SyntaxAnnotatedDocument makeSyntaxAnnotatedDocument(String type, String name, final List<SyntaxAnnotatedToken> tokens) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:        return new SyntaxAnnotatedDocument(EntityType.valueOf(type.toUpperCase(Locale.US)), name, tokens);
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:    private static SyntaxAnnotatedToken makeSyntaxAnnotatedToken(String type, String weight, String text) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedCorpusReader.java:        final SyntaxAnnotatedToken t = new SyntaxAnnotatedToken(TokenType.valueOf(type.toUpperCase(Locale.US)), text);
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedToken.java:    private TokenType type;
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedToken.java:    public SyntaxAnnotatedToken(final TokenType type, final String text) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedToken.java:        this.type = type;
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedToken.java:        return type;
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedToken.java:    public void setType(TokenType type) {
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedToken.java:        this.type = type;
./java/edu/ua/cs/taser/syntext/SyntaxAnnotatedToken.java:        return String.format("%-24s %-16s", type.toString(), text);
./java/edu/ua/cs/taser/document/Entity.java:    public void setType(EntityType type);
./java/edu/ua/cs/taser/document/Entities.java:    public static Entity newEntity(String name, EntityType type) {
./java/edu/ua/cs/taser/document/Entities.java:        return new BasicEntity(name, type);
./java/edu/ua/cs/taser/document/Entities.java:    public static JavaEntity newJavaEntity(EntityType type) {
./java/edu/ua/cs/taser/document/Entities.java:        return newJavaEntity(type, null);
./java/edu/ua/cs/taser/document/Entities.java:    public static JavaEntity newJavaEntity(EntityType type, JavaEntity parent) {
./java/edu/ua/cs/taser/document/Entities.java:        return newJavaEntity(type, parent, "(" + type.toString() + ")");
./java/edu/ua/cs/taser/document/Entities.java:    public static JavaEntity newJavaEntity(EntityType type, JavaEntity parent, String name) {
./java/edu/ua/cs/taser/document/Entities.java:        return newJavaEntity(type, parent, name, Positions.tailPosition());
./java/edu/ua/cs/taser/document/Entities.java:    public static JavaEntity newJavaEntity(EntityType type, JavaEntity parent, String name, Position pos) {
./java/edu/ua/cs/taser/document/Entities.java:        return new BasicJavaEntity(new BasicEntity(name, type), pos, parent);
./java/edu/ua/cs/taser/document/Entities.java:        private EntityType type;
./java/edu/ua/cs/taser/document/Entities.java:        BasicEntity(String name, EntityType type) {
./java/edu/ua/cs/taser/document/Entities.java:            this.type = type;
./java/edu/ua/cs/taser/document/Entities.java:        @Override public EntityType getType() { return type; }
./java/edu/ua/cs/taser/document/Entities.java:        @Override public void setType(EntityType type) { this.type = type; }
./java/edu/ua/cs/taser/document/Entities.java:            return String.format("%-12s %-64s", type.toString(), name);
./java/edu/ua/cs/taser/document/Entities.java:        @Override public void setType(EntityType type) { entity.setType(type); }
./java/edu/ua/cs/taser/document/Entities.java:        @Override public void setType(EntityType type) { throw new UnsupportedOperationException(message("setType")); }
./java/edu/ua/cs/taser/util/function/Functors.java:	//the generic type T is the input type, while the generic type R is the Output type
./java/edu/ua/cs/taser/util/HierarchicalTypes.java:            boolean isChildOf(T type, T candidate) {
./java/edu/ua/cs/taser/util/HierarchicalTypes.java:        if (type == null || candidate == null) {
./java/edu/ua/cs/taser/util/HierarchicalTypes.java:        for (T t = type; t != null; t = t.getParent()) {
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:    protected List<String> typeArguments = new ArrayList<String>();
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:    protected List<String> typeParameters = new ArrayList<String>();
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:    protected List<JavaToken> typeParts = new ArrayList<JavaToken>();
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:            Lists.insort(typeParts, token, cmp);
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:    protected static String createGenericsString(List<String> types) {
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:        String g = "<" + Strings.join(types, ',') + ">";
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:        types.clear();
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:        return createGenericsString(typeArguments);
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:        return createGenericsString(typeParameters);
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:    protected static JavaToken makeComment(org.antlr.runtime.Token antlrToken, TokenType type) {
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:        return Tokens.newJavaToken(text, type, Positions.rangePosition(sp, calculateEndPos(sp, text)));
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:    protected static JavaToken makeToken(org.antlr.runtime.Token antlrToken, TokenType type, JavaEntity entity) {
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:        return makeToken(antlrToken, type, entity, antlrToken.getText());
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:    protected static JavaToken makeToken(org.antlr.runtime.Token antlrToken, TokenType type, JavaEntity entity, String text) {
./java/edu/ua/cs/taser/javatext/BaseJavaParser.java:        return Tokens.newJavaToken(text, type, Positions.rangePosition(line, col, line, col + text.length()), entity);
./java/edu/ua/cs/taser/javatext/JavaLexerFactory.java:    public static JavaLexer createJavaLexer(final JavaLexerType type) {
./java/edu/ua/cs/taser/javatext/JavaLexerFactory.java:        switch(type) {
./java/edu/ua/cs/taser/javatext/rewrite/SplitNonidentifiers.java:            final TokenType type = token.getType();
./java/edu/ua/cs/taser/javatext/rewrite/SplitNonidentifiers.java:            if (!type.isIdentifier()) {
./java/edu/ua/cs/taser/javatext/rewrite/SplitNonidentifiers.java:                        parts.add(Tokens.newJavaToken(part, type, token.getPosition(), token.getEntity()));
./java/edu/ua/cs/taser/javatext/rewrite/MarkLeadingComments.java:                final EntityType e2type = e2.getType();
./java/edu/ua/cs/taser/javatext/rewrite/MarkLeadingComments.java:                if (e2type.isClassType()) {
./java/edu/ua/cs/taser/javatext/rewrite/MarkLeadingComments.java:                } else if (e2type.isMethod()) {
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:                int etype = e.getEventType();
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:                switch (etype) {
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:                        String type = se.getAttributeByName(new QName("type")).getValue();
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:                        rawData = new String[] {entity, null, type, span};
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:                        String type = se.getAttributeByName(new QName("type")).getValue();
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:                            rawData = new String[] {parent.getValue(), null, type, span};
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:                            rawData = new String[] {null, null, type, span};
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:    private static JavaEntity makeJavaEntity(String type, JavaEntity parent, String name, String span) {
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:        return Entities.newJavaEntity(EntityType.valueOf(type.toUpperCase(Locale.US)), parent, name, rangePosition(span.split(":")));
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:    private static JavaToken makeJavaToken(String type, String text, JavaEntity entity, String span) {
./java/edu/ua/cs/taser/javatext/JavaDocumentReader.java:        return Tokens.newJavaToken(text, TokenType.valueOf(type.toUpperCase(Locale.US)), rangePosition(span.split(":")), entity);
./java/edu/ua/cs/taser/javatext/JavaDocumentWriter.java:        w.writeAttribute("type", e.getType().toString());
./java/edu/ua/cs/taser/javatext/JavaDocumentWriter.java:        w.writeAttribute("type", t.getType().toString());
./java/edu/ua/cs/taser/token/Tokens.java:    public static JavaToken newJavaToken(String text, TokenType type, Position pos) {
./java/edu/ua/cs/taser/token/Tokens.java:        return newJavaToken(text, type, pos, Entities.noJavaEntity());
./java/edu/ua/cs/taser/token/Tokens.java:    public static JavaToken newJavaToken(String text, TokenType type, Position pos, JavaEntity entity) {
./java/edu/ua/cs/taser/token/Tokens.java:        return new BasicJavaToken(new BasicToken(text, type), pos, entity);
./java/edu/ua/cs/taser/token/Tokens.java:        private TokenType type;
./java/edu/ua/cs/taser/token/Tokens.java:        BasicToken(String text, TokenType type) {
./java/edu/ua/cs/taser/token/Tokens.java:            this(text, type, 1);
./java/edu/ua/cs/taser/token/Tokens.java:        BasicToken(String text, TokenType type, Number weight) {
./java/edu/ua/cs/taser/token/Tokens.java:            this.type = type;
./java/edu/ua/cs/taser/token/Tokens.java:        @Override public TokenType getType() { return type; }
./java/edu/ua/cs/taser/token/Tokens.java:        @Override public void setType(TokenType type) { this.type = type; }
./java/edu/ua/cs/taser/token/Tokens.java:            return String.format("[%4s] %-24s %-16s", weight.toString(), type.toString(), text);
./java/edu/ua/cs/taser/token/Tokens.java:        @Override public void setType(TokenType type) { token.setType(type); }
./java/edu/ua/cs/taser/token/Token.java:    public void setType(TokenType type);
./java/edu/ua/cs/taser/common/AntlrParser.java:    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) throws RecognitionException {
./java/edu/ua/cs/taser/common/AntlrParser.java:        throw new MismatchedTokenException(ttype, input);
./java/edu/ua/cs/taser/cli/args/RawArgs.java:    @Parameter(names = {"-t", "--corpus-type"}, description = "Corpus type")
./java/edu/ua/cs/taser/App.java:    private static Func1<JavaDocument, List<SyntaxAnnotatedDocument>> realizeCorpusType(final String type) throws ParameterException {
./java/edu/ua/cs/taser/App.java:        switch (type) {
./java/edu/ua/cs/taser/App.java:            case "classtype":
./antlr3/edu/ua/cs/taser/extract/java/JavaLexer.g:ASSERT : 'assert' { if (!assertIsKeyword()) $type = Identifier; } ;
./antlr3/edu/ua/cs/taser/extract/java/JavaLexer.g:ENUM : 'enum' { if (!enumIsKeyword()) $type = Identifier; } ;
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:compilationUnit[final String filename, final EntityType type] returns [List<JavaToken> lstok]
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    JavaEntity cue = Entities.newJavaEntity(type, null, filename, Positions.position(0, 0));
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        (   packageDeclaration importDeclaration* typeDeclaration*
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        |   classOrInterfaceDeclaration typeDeclaration*
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    |   packageDeclaration? importDeclaration* typeDeclaration*
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:typeDeclaration
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            // Not nested in a reference type body
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            // Nested in a reference type body
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        (typeParameters
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        )?  (EXTENDS type)?  (IMPLEMENTS typeList)?  classBody
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:typeParameters
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   o=LT typeParameter (COMMA typeParameter)* GT
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:typeParameter
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            typeParameters.add(text);
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        (EXTENDS typeBound)?
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:typeBound
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   type (BITAND type)*
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        (IMPLEMENTS typeList)? enumBody
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        (typeParameters
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        )? (EXTENDS typeList)? interfaceBody
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:typeList
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   type (COMMA type)*
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        type methodDeclaration
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    |   type fieldDeclaration
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        typeParameters genericMethodOrConstructorRest
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   (type | v=VOID
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   type i=Identifier
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        type i=Identifier
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        typeParameters (type | VOID) i=Identifier
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            TokenType type = (entity.getType().isClassType()) ? TokenType.FIELD_NAME : TokenType.LOCAL_VARIABLE_NAME;
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            lastVariableDeclaratorId = makeToken($i, type, entity);
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            // Not nested in a reference type body
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            // Nested in a reference type body
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:type returns [String name]
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:                    // Nested in a reference type body
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        (typeArguments
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        (typeArguments
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        Position typePos = positionOf($t);
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        if (typePos.precedes($RefTypeBody::start)) {
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            $RefTypeBody::start = typePos;
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:typeArguments
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   LT typeArgument (COMMA typeArgument)* GT
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:typeArgument
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   t=type
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            typeArguments.add($t.name);
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    |   QUESTIONMARK ((EXTENDS | SUPER) type)?
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:        t=type
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            for (JavaToken token : typeParts) {
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:            typeParts.clear();
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   type annotationMethodOrConstantRest SEMICOLON
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   variableModifiers type variableDeclarators
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   variableModifiers type variableDeclaratorId
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   variableModifiers type i=Identifier
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   relationalExpression (INSTANCEOF type)?
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    |   o=LPAREN (type | expression) c=RPAREN unaryExpressionNotPlusMinus
./antlr3/edu/ua/cs/taser/extract/java/JavaParser.g:    :   LT typeList GT
